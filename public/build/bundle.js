
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    // Polyfills

    if ( Number.EPSILON === undefined ) {

    	Number.EPSILON = Math.pow( 2, - 52 );

    }

    if ( Number.isInteger === undefined ) {

    	// Missing in IE
    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

    	Number.isInteger = function ( value ) {

    		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

    	};

    }

    //

    if ( Math.sign === undefined ) {

    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

    	Math.sign = function ( x ) {

    		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

    	};

    }

    if ( 'name' in Function.prototype === false ) {

    	// Missing in IE
    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

    	Object.defineProperty( Function.prototype, 'name', {

    		get: function () {

    			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

    		}

    	} );

    }

    if ( Object.assign === undefined ) {

    	// Missing in IE
    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

    	Object.assign = function ( target ) {

    		if ( target === undefined || target === null ) {

    			throw new TypeError( 'Cannot convert undefined or null to object' );

    		}

    		const output = Object( target );

    		for ( let index = 1; index < arguments.length; index ++ ) {

    			const source = arguments[ index ];

    			if ( source !== undefined && source !== null ) {

    				for ( const nextKey in source ) {

    					if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

    						output[ nextKey ] = source[ nextKey ];

    					}

    				}

    			}

    		}

    		return output;

    	};

    }

    const REVISION = '119';
    const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
    const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
    const CullFaceNone = 0;
    const CullFaceBack = 1;
    const CullFaceFront = 2;
    const PCFShadowMap = 1;
    const PCFSoftShadowMap = 2;
    const VSMShadowMap = 3;
    const FrontSide = 0;
    const BackSide = 1;
    const DoubleSide = 2;
    const FlatShading = 1;
    const NoBlending = 0;
    const NormalBlending = 1;
    const AdditiveBlending = 2;
    const SubtractiveBlending = 3;
    const MultiplyBlending = 4;
    const CustomBlending = 5;
    const AddEquation = 100;
    const SubtractEquation = 101;
    const ReverseSubtractEquation = 102;
    const MinEquation = 103;
    const MaxEquation = 104;
    const ZeroFactor = 200;
    const OneFactor = 201;
    const SrcColorFactor = 202;
    const OneMinusSrcColorFactor = 203;
    const SrcAlphaFactor = 204;
    const OneMinusSrcAlphaFactor = 205;
    const DstAlphaFactor = 206;
    const OneMinusDstAlphaFactor = 207;
    const DstColorFactor = 208;
    const OneMinusDstColorFactor = 209;
    const SrcAlphaSaturateFactor = 210;
    const NeverDepth = 0;
    const AlwaysDepth = 1;
    const LessDepth = 2;
    const LessEqualDepth = 3;
    const EqualDepth = 4;
    const GreaterEqualDepth = 5;
    const GreaterDepth = 6;
    const NotEqualDepth = 7;
    const MultiplyOperation = 0;
    const MixOperation = 1;
    const AddOperation = 2;
    const NoToneMapping = 0;
    const LinearToneMapping = 1;
    const ReinhardToneMapping = 2;
    const CineonToneMapping = 3;
    const ACESFilmicToneMapping = 4;
    const CustomToneMapping = 5;

    const UVMapping = 300;
    const CubeReflectionMapping = 301;
    const CubeRefractionMapping = 302;
    const EquirectangularReflectionMapping = 303;
    const EquirectangularRefractionMapping = 304;
    const CubeUVReflectionMapping = 306;
    const CubeUVRefractionMapping = 307;
    const RepeatWrapping = 1000;
    const ClampToEdgeWrapping = 1001;
    const MirroredRepeatWrapping = 1002;
    const NearestFilter = 1003;
    const NearestMipmapNearestFilter = 1004;
    const NearestMipmapLinearFilter = 1005;
    const LinearFilter = 1006;
    const LinearMipmapNearestFilter = 1007;
    const LinearMipmapLinearFilter = 1008;
    const UnsignedByteType = 1009;
    const ByteType = 1010;
    const ShortType = 1011;
    const UnsignedShortType = 1012;
    const IntType = 1013;
    const UnsignedIntType = 1014;
    const FloatType = 1015;
    const HalfFloatType = 1016;
    const UnsignedShort4444Type = 1017;
    const UnsignedShort5551Type = 1018;
    const UnsignedShort565Type = 1019;
    const UnsignedInt248Type = 1020;
    const AlphaFormat = 1021;
    const RGBFormat = 1022;
    const RGBAFormat = 1023;
    const LuminanceFormat = 1024;
    const LuminanceAlphaFormat = 1025;
    const DepthFormat = 1026;
    const DepthStencilFormat = 1027;
    const RedFormat = 1028;
    const RedIntegerFormat = 1029;
    const RGFormat = 1030;
    const RGIntegerFormat = 1031;
    const RGBIntegerFormat = 1032;
    const RGBAIntegerFormat = 1033;

    const RGB_S3TC_DXT1_Format = 33776;
    const RGBA_S3TC_DXT1_Format = 33777;
    const RGBA_S3TC_DXT3_Format = 33778;
    const RGBA_S3TC_DXT5_Format = 33779;
    const RGB_PVRTC_4BPPV1_Format = 35840;
    const RGB_PVRTC_2BPPV1_Format = 35841;
    const RGBA_PVRTC_4BPPV1_Format = 35842;
    const RGBA_PVRTC_2BPPV1_Format = 35843;
    const RGB_ETC1_Format = 36196;
    const RGB_ETC2_Format = 37492;
    const RGBA_ETC2_EAC_Format = 37496;
    const RGBA_ASTC_4x4_Format = 37808;
    const RGBA_ASTC_5x4_Format = 37809;
    const RGBA_ASTC_5x5_Format = 37810;
    const RGBA_ASTC_6x5_Format = 37811;
    const RGBA_ASTC_6x6_Format = 37812;
    const RGBA_ASTC_8x5_Format = 37813;
    const RGBA_ASTC_8x6_Format = 37814;
    const RGBA_ASTC_8x8_Format = 37815;
    const RGBA_ASTC_10x5_Format = 37816;
    const RGBA_ASTC_10x6_Format = 37817;
    const RGBA_ASTC_10x8_Format = 37818;
    const RGBA_ASTC_10x10_Format = 37819;
    const RGBA_ASTC_12x10_Format = 37820;
    const RGBA_ASTC_12x12_Format = 37821;
    const RGBA_BPTC_Format = 36492;
    const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
    const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
    const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
    const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
    const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
    const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
    const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
    const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
    const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
    const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
    const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
    const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
    const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
    const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
    const LoopOnce = 2200;
    const LoopRepeat = 2201;
    const LoopPingPong = 2202;
    const InterpolateDiscrete = 2300;
    const InterpolateLinear = 2301;
    const InterpolateSmooth = 2302;
    const ZeroCurvatureEnding = 2400;
    const ZeroSlopeEnding = 2401;
    const WrapAroundEnding = 2402;
    const NormalAnimationBlendMode = 2500;
    const AdditiveAnimationBlendMode = 2501;
    const TrianglesDrawMode = 0;
    const TriangleStripDrawMode = 1;
    const TriangleFanDrawMode = 2;
    const LinearEncoding = 3000;
    const sRGBEncoding = 3001;
    const GammaEncoding = 3007;
    const RGBEEncoding = 3002;
    const LogLuvEncoding = 3003;
    const RGBM7Encoding = 3004;
    const RGBM16Encoding = 3005;
    const RGBDEncoding = 3006;
    const BasicDepthPacking = 3200;
    const RGBADepthPacking = 3201;
    const TangentSpaceNormalMap = 0;
    const ObjectSpaceNormalMap = 1;
    const KeepStencilOp = 7680;
    const AlwaysStencilFunc = 519;

    const StaticDrawUsage = 35044;
    const DynamicDrawUsage = 35048;

    /**
     * https://github.com/mrdoob/eventdispatcher.js/
     */

    function EventDispatcher() {}

    Object.assign( EventDispatcher.prototype, {

    	addEventListener: function ( type, listener ) {

    		if ( this._listeners === undefined ) this._listeners = {};

    		const listeners = this._listeners;

    		if ( listeners[ type ] === undefined ) {

    			listeners[ type ] = [];

    		}

    		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

    			listeners[ type ].push( listener );

    		}

    	},

    	hasEventListener: function ( type, listener ) {

    		if ( this._listeners === undefined ) return false;

    		const listeners = this._listeners;

    		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

    	},

    	removeEventListener: function ( type, listener ) {

    		if ( this._listeners === undefined ) return;

    		const listeners = this._listeners;
    		const listenerArray = listeners[ type ];

    		if ( listenerArray !== undefined ) {

    			const index = listenerArray.indexOf( listener );

    			if ( index !== - 1 ) {

    				listenerArray.splice( index, 1 );

    			}

    		}

    	},

    	dispatchEvent: function ( event ) {

    		if ( this._listeners === undefined ) return;

    		const listeners = this._listeners;
    		const listenerArray = listeners[ event.type ];

    		if ( listenerArray !== undefined ) {

    			event.target = this;

    			// Make a copy, in case listeners are removed while iterating.
    			const array = listenerArray.slice( 0 );

    			for ( let i = 0, l = array.length; i < l; i ++ ) {

    				array[ i ].call( this, event );

    			}

    		}

    	}

    } );

    const _lut = [];

    for ( let i = 0; i < 256; i ++ ) {

    	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

    }

    let _seed = 1234567;

    const MathUtils = {

    	DEG2RAD: Math.PI / 180,
    	RAD2DEG: 180 / Math.PI,

    	generateUUID: function () {

    		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

    		const d0 = Math.random() * 0xffffffff | 0;
    		const d1 = Math.random() * 0xffffffff | 0;
    		const d2 = Math.random() * 0xffffffff | 0;
    		const d3 = Math.random() * 0xffffffff | 0;
    		const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
    			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
    			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
    			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

    		// .toUpperCase() here flattens concatenated strings to save heap memory space.
    		return uuid.toUpperCase();

    	},

    	clamp: function ( value, min, max ) {

    		return Math.max( min, Math.min( max, value ) );

    	},

    	// compute euclidian modulo of m % n
    	// https://en.wikipedia.org/wiki/Modulo_operation

    	euclideanModulo: function ( n, m ) {

    		return ( ( n % m ) + m ) % m;

    	},

    	// Linear mapping from range <a1, a2> to range <b1, b2>

    	mapLinear: function ( x, a1, a2, b1, b2 ) {

    		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

    	},

    	// https://en.wikipedia.org/wiki/Linear_interpolation

    	lerp: function ( x, y, t ) {

    		return ( 1 - t ) * x + t * y;

    	},

    	// http://en.wikipedia.org/wiki/Smoothstep

    	smoothstep: function ( x, min, max ) {

    		if ( x <= min ) return 0;
    		if ( x >= max ) return 1;

    		x = ( x - min ) / ( max - min );

    		return x * x * ( 3 - 2 * x );

    	},

    	smootherstep: function ( x, min, max ) {

    		if ( x <= min ) return 0;
    		if ( x >= max ) return 1;

    		x = ( x - min ) / ( max - min );

    		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

    	},

    	// Random integer from <low, high> interval

    	randInt: function ( low, high ) {

    		return low + Math.floor( Math.random() * ( high - low + 1 ) );

    	},

    	// Random float from <low, high> interval

    	randFloat: function ( low, high ) {

    		return low + Math.random() * ( high - low );

    	},

    	// Random float from <-range/2, range/2> interval

    	randFloatSpread: function ( range ) {

    		return range * ( 0.5 - Math.random() );

    	},

    	// Deterministic pseudo-random float in the interval [ 0, 1 ]

    	seededRandom: function ( s ) {

    		if ( s !== undefined ) _seed = s % 2147483647;

    		// Park-Miller algorithm

    		_seed = _seed * 16807 % 2147483647;

    		return ( _seed - 1 ) / 2147483646;

    	},

    	degToRad: function ( degrees ) {

    		return degrees * MathUtils.DEG2RAD;

    	},

    	radToDeg: function ( radians ) {

    		return radians * MathUtils.RAD2DEG;

    	},

    	isPowerOfTwo: function ( value ) {

    		return ( value & ( value - 1 ) ) === 0 && value !== 0;

    	},

    	ceilPowerOfTwo: function ( value ) {

    		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

    	},

    	floorPowerOfTwo: function ( value ) {

    		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

    	},

    	setQuaternionFromProperEuler: function ( q, a, b, c, order ) {

    		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

    		// rotations are applied to the axes in the order specified by 'order'
    		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    		// angles are in radians

    		const cos = Math.cos;
    		const sin = Math.sin;

    		const c2 = cos( b / 2 );
    		const s2 = sin( b / 2 );

    		const c13 = cos( ( a + c ) / 2 );
    		const s13 = sin( ( a + c ) / 2 );

    		const c1_3 = cos( ( a - c ) / 2 );
    		const s1_3 = sin( ( a - c ) / 2 );

    		const c3_1 = cos( ( c - a ) / 2 );
    		const s3_1 = sin( ( c - a ) / 2 );

    		switch ( order ) {

    			case 'XYX':
    				q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
    				break;

    			case 'YZY':
    				q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
    				break;

    			case 'ZXZ':
    				q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
    				break;

    			case 'XZX':
    				q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
    				break;

    			case 'YXY':
    				q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
    				break;

    			case 'ZYZ':
    				q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
    				break;

    			default:
    				console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

    		}

    	}

    };

    function Vector2( x = 0, y = 0 ) {

    	this.x = x;
    	this.y = y;

    }

    Object.defineProperties( Vector2.prototype, {

    	"width": {

    		get: function () {

    			return this.x;

    		},

    		set: function ( value ) {

    			this.x = value;

    		}

    	},

    	"height": {

    		get: function () {

    			return this.y;

    		},

    		set: function ( value ) {

    			this.y = value;

    		}

    	}

    } );

    Object.assign( Vector2.prototype, {

    	isVector2: true,

    	set: function ( x, y ) {

    		this.x = x;
    		this.y = y;

    		return this;

    	},

    	setScalar: function ( scalar ) {

    		this.x = scalar;
    		this.y = scalar;

    		return this;

    	},

    	setX: function ( x ) {

    		this.x = x;

    		return this;

    	},

    	setY: function ( y ) {

    		this.y = y;

    		return this;

    	},

    	setComponent: function ( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	},

    	getComponent: function ( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	},

    	clone: function () {

    		return new this.constructor( this.x, this.y );

    	},

    	copy: function ( v ) {

    		this.x = v.x;
    		this.y = v.y;

    		return this;

    	},

    	add: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;

    		return this;

    	},

    	addScalar: function ( s ) {

    		this.x += s;
    		this.y += s;

    		return this;

    	},

    	addVectors: function ( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;

    		return this;

    	},

    	addScaledVector: function ( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;

    		return this;

    	},

    	sub: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;

    		return this;

    	},

    	subScalar: function ( s ) {

    		this.x -= s;
    		this.y -= s;

    		return this;

    	},

    	subVectors: function ( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;

    		return this;

    	},

    	multiply: function ( v ) {

    		this.x *= v.x;
    		this.y *= v.y;

    		return this;

    	},

    	multiplyScalar: function ( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;

    		return this;

    	},

    	divide: function ( v ) {

    		this.x /= v.x;
    		this.y /= v.y;

    		return this;

    	},

    	divideScalar: function ( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	},

    	applyMatrix3: function ( m ) {

    		const x = this.x, y = this.y;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

    		return this;

    	},

    	min: function ( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );

    		return this;

    	},

    	max: function ( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );

    		return this;

    	},

    	clamp: function ( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

    		return this;

    	},

    	clampScalar: function ( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

    		return this;

    	},

    	clampLength: function ( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	},

    	floor: function () {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );

    		return this;

    	},

    	ceil: function () {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );

    		return this;

    	},

    	round: function () {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );

    		return this;

    	},

    	roundToZero: function () {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

    		return this;

    	},

    	negate: function () {

    		this.x = - this.x;
    		this.y = - this.y;

    		return this;

    	},

    	dot: function ( v ) {

    		return this.x * v.x + this.y * v.y;

    	},

    	cross: function ( v ) {

    		return this.x * v.y - this.y * v.x;

    	},

    	lengthSq: function () {

    		return this.x * this.x + this.y * this.y;

    	},

    	length: function () {

    		return Math.sqrt( this.x * this.x + this.y * this.y );

    	},

    	manhattanLength: function () {

    		return Math.abs( this.x ) + Math.abs( this.y );

    	},

    	normalize: function () {

    		return this.divideScalar( this.length() || 1 );

    	},

    	angle: function () {

    		// computes the angle in radians with respect to the positive x-axis

    		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

    		return angle;

    	},

    	distanceTo: function ( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	},

    	distanceToSquared: function ( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y;
    		return dx * dx + dy * dy;

    	},

    	manhattanDistanceTo: function ( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

    	},

    	setLength: function ( length ) {

    		return this.normalize().multiplyScalar( length );

    	},

    	lerp: function ( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;

    		return this;

    	},

    	lerpVectors: function ( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;

    		return this;

    	},

    	equals: function ( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;

    		return array;

    	},

    	fromBufferAttribute: function ( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );

    		return this;

    	},

    	rotateAround: function ( center, angle ) {

    		const c = Math.cos( angle ), s = Math.sin( angle );

    		const x = this.x - center.x;
    		const y = this.y - center.y;

    		this.x = x * c - y * s + center.x;
    		this.y = x * s + y * c + center.y;

    		return this;

    	},

    	random: function () {

    		this.x = Math.random();
    		this.y = Math.random();

    		return this;

    	}

    } );

    function Matrix3() {

    	this.elements = [

    		1, 0, 0,
    		0, 1, 0,
    		0, 0, 1

    	];

    	if ( arguments.length > 0 ) {

    		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

    	}

    }

    Object.assign( Matrix3.prototype, {

    	isMatrix3: true,

    	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
    		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
    		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

    		return this;

    	},

    	identity: function () {

    		this.set(

    			1, 0, 0,
    			0, 1, 0,
    			0, 0, 1

    		);

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().fromArray( this.elements );

    	},

    	copy: function ( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
    		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
    		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

    		return this;

    	},

    	extractBasis: function ( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrix3Column( this, 0 );
    		yAxis.setFromMatrix3Column( this, 1 );
    		zAxis.setFromMatrix3Column( this, 2 );

    		return this;

    	},

    	setFromMatrix4: function ( m ) {

    		const me = m.elements;

    		this.set(

    			me[ 0 ], me[ 4 ], me[ 8 ],
    			me[ 1 ], me[ 5 ], me[ 9 ],
    			me[ 2 ], me[ 6 ], me[ 10 ]

    		);

    		return this;

    	},

    	multiply: function ( m ) {

    		return this.multiplyMatrices( this, m );

    	},

    	premultiply: function ( m ) {

    		return this.multiplyMatrices( m, this );

    	},

    	multiplyMatrices: function ( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
    		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
    		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

    		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
    		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
    		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
    		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
    		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
    		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
    		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
    		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
    		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

    		return this;

    	},

    	multiplyScalar: function ( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
    		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
    		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

    		return this;

    	},

    	determinant: function () {

    		const te = this.elements;

    		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
    			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
    			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

    		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

    	},

    	getInverse: function ( matrix, throwOnDegenerate ) {

    		if ( throwOnDegenerate !== undefined ) {

    			console.warn( "THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate." );

    		}

    		const me = matrix.elements,
    			te = this.elements,

    			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
    			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
    			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

    			t11 = n33 * n22 - n32 * n23,
    			t12 = n32 * n13 - n33 * n12,
    			t13 = n23 * n12 - n22 * n13,

    			det = n11 * t11 + n21 * t12 + n31 * t13;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
    		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

    		te[ 3 ] = t12 * detInv;
    		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
    		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

    		te[ 6 ] = t13 * detInv;
    		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
    		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

    		return this;

    	},

    	transpose: function () {

    		let tmp;
    		const m = this.elements;

    		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
    		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
    		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

    		return this;

    	},

    	getNormalMatrix: function ( matrix4 ) {

    		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

    	},

    	transposeIntoArray: function ( r ) {

    		const m = this.elements;

    		r[ 0 ] = m[ 0 ];
    		r[ 1 ] = m[ 3 ];
    		r[ 2 ] = m[ 6 ];
    		r[ 3 ] = m[ 1 ];
    		r[ 4 ] = m[ 4 ];
    		r[ 5 ] = m[ 7 ];
    		r[ 6 ] = m[ 2 ];
    		r[ 7 ] = m[ 5 ];
    		r[ 8 ] = m[ 8 ];

    		return this;

    	},

    	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

    		const c = Math.cos( rotation );
    		const s = Math.sin( rotation );

    		this.set(
    			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
    			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
    			0, 0, 1
    		);

    	},

    	scale: function ( sx, sy ) {

    		const te = this.elements;

    		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
    		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

    		return this;

    	},

    	rotate: function ( theta ) {

    		const c = Math.cos( theta );
    		const s = Math.sin( theta );

    		const te = this.elements;

    		const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
    		const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

    		te[ 0 ] = c * a11 + s * a21;
    		te[ 3 ] = c * a12 + s * a22;
    		te[ 6 ] = c * a13 + s * a23;

    		te[ 1 ] = - s * a11 + c * a21;
    		te[ 4 ] = - s * a12 + c * a22;
    		te[ 7 ] = - s * a13 + c * a23;

    		return this;

    	},

    	translate: function ( tx, ty ) {

    		const te = this.elements;

    		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
    		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

    		return this;

    	},

    	equals: function ( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 9; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		for ( let i = 0; i < 9; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];

    		array[ offset + 3 ] = te[ 3 ];
    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];

    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];
    		array[ offset + 8 ] = te[ 8 ];

    		return array;

    	}

    } );

    let _canvas;

    const ImageUtils = {

    	getDataURL: function ( image ) {

    		if ( /^data:/i.test( image.src ) ) {

    			return image.src;

    		}

    		if ( typeof HTMLCanvasElement == 'undefined' ) {

    			return image.src;

    		}

    		let canvas;

    		if ( image instanceof HTMLCanvasElement ) {

    			canvas = image;

    		} else {

    			if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

    			_canvas.width = image.width;
    			_canvas.height = image.height;

    			const context = _canvas.getContext( '2d' );

    			if ( image instanceof ImageData ) {

    				context.putImageData( image, 0, 0 );

    			} else {

    				context.drawImage( image, 0, 0, image.width, image.height );

    			}

    			canvas = _canvas;

    		}

    		if ( canvas.width > 2048 || canvas.height > 2048 ) {

    			return canvas.toDataURL( 'image/jpeg', 0.6 );

    		} else {

    			return canvas.toDataURL( 'image/png' );

    		}

    	}

    };

    let textureId = 0;

    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

    	Object.defineProperty( this, 'id', { value: textureId ++ } );

    	this.uuid = MathUtils.generateUUID();

    	this.name = '';

    	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
    	this.mipmaps = [];

    	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

    	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
    	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

    	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
    	this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;

    	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

    	this.format = format !== undefined ? format : RGBAFormat;
    	this.internalFormat = null;
    	this.type = type !== undefined ? type : UnsignedByteType;

    	this.offset = new Vector2( 0, 0 );
    	this.repeat = new Vector2( 1, 1 );
    	this.center = new Vector2( 0, 0 );
    	this.rotation = 0;

    	this.matrixAutoUpdate = true;
    	this.matrix = new Matrix3();

    	this.generateMipmaps = true;
    	this.premultiplyAlpha = false;
    	this.flipY = true;
    	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

    	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
    	//
    	// Also changing the encoding after already used by a Material will not automatically make the Material
    	// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
    	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

    	this.version = 0;
    	this.onUpdate = null;

    }

    Texture.DEFAULT_IMAGE = undefined;
    Texture.DEFAULT_MAPPING = UVMapping;

    Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: Texture,

    	isTexture: true,

    	updateMatrix: function () {

    		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( source ) {

    		this.name = source.name;

    		this.image = source.image;
    		this.mipmaps = source.mipmaps.slice( 0 );

    		this.mapping = source.mapping;

    		this.wrapS = source.wrapS;
    		this.wrapT = source.wrapT;

    		this.magFilter = source.magFilter;
    		this.minFilter = source.minFilter;

    		this.anisotropy = source.anisotropy;

    		this.format = source.format;
    		this.internalFormat = source.internalFormat;
    		this.type = source.type;

    		this.offset.copy( source.offset );
    		this.repeat.copy( source.repeat );
    		this.center.copy( source.center );
    		this.rotation = source.rotation;

    		this.matrixAutoUpdate = source.matrixAutoUpdate;
    		this.matrix.copy( source.matrix );

    		this.generateMipmaps = source.generateMipmaps;
    		this.premultiplyAlpha = source.premultiplyAlpha;
    		this.flipY = source.flipY;
    		this.unpackAlignment = source.unpackAlignment;
    		this.encoding = source.encoding;

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

    			return meta.textures[ this.uuid ];

    		}

    		const output = {

    			metadata: {
    				version: 4.5,
    				type: 'Texture',
    				generator: 'Texture.toJSON'
    			},

    			uuid: this.uuid,
    			name: this.name,

    			mapping: this.mapping,

    			repeat: [ this.repeat.x, this.repeat.y ],
    			offset: [ this.offset.x, this.offset.y ],
    			center: [ this.center.x, this.center.y ],
    			rotation: this.rotation,

    			wrap: [ this.wrapS, this.wrapT ],

    			format: this.format,
    			type: this.type,
    			encoding: this.encoding,

    			minFilter: this.minFilter,
    			magFilter: this.magFilter,
    			anisotropy: this.anisotropy,

    			flipY: this.flipY,

    			premultiplyAlpha: this.premultiplyAlpha,
    			unpackAlignment: this.unpackAlignment

    		};

    		if ( this.image !== undefined ) {

    			// TODO: Move to THREE.Image

    			const image = this.image;

    			if ( image.uuid === undefined ) {

    				image.uuid = MathUtils.generateUUID(); // UGH

    			}

    			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

    				let url;

    				if ( Array.isArray( image ) ) {

    					// process array of images e.g. CubeTexture

    					url = [];

    					for ( let i = 0, l = image.length; i < l; i ++ ) {

    						url.push( ImageUtils.getDataURL( image[ i ] ) );

    					}

    				} else {

    					// process single image

    					url = ImageUtils.getDataURL( image );

    				}

    				meta.images[ image.uuid ] = {
    					uuid: image.uuid,
    					url: url
    				};

    			}

    			output.image = image.uuid;

    		}

    		if ( ! isRootObject ) {

    			meta.textures[ this.uuid ] = output;

    		}

    		return output;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	},

    	transformUv: function ( uv ) {

    		if ( this.mapping !== UVMapping ) return uv;

    		uv.applyMatrix3( this.matrix );

    		if ( uv.x < 0 || uv.x > 1 ) {

    			switch ( this.wrapS ) {

    				case RepeatWrapping:

    					uv.x = uv.x - Math.floor( uv.x );
    					break;

    				case ClampToEdgeWrapping:

    					uv.x = uv.x < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

    						uv.x = Math.ceil( uv.x ) - uv.x;

    					} else {

    						uv.x = uv.x - Math.floor( uv.x );

    					}

    					break;

    			}

    		}

    		if ( uv.y < 0 || uv.y > 1 ) {

    			switch ( this.wrapT ) {

    				case RepeatWrapping:

    					uv.y = uv.y - Math.floor( uv.y );
    					break;

    				case ClampToEdgeWrapping:

    					uv.y = uv.y < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

    						uv.y = Math.ceil( uv.y ) - uv.y;

    					} else {

    						uv.y = uv.y - Math.floor( uv.y );

    					}

    					break;

    			}

    		}

    		if ( this.flipY ) {

    			uv.y = 1 - uv.y;

    		}

    		return uv;

    	}

    } );

    Object.defineProperty( Texture.prototype, "needsUpdate", {

    	set: function ( value ) {

    		if ( value === true ) this.version ++;

    	}

    } );

    function Vector4( x = 0, y = 0, z = 0, w = 1 ) {

    	this.x = x;
    	this.y = y;
    	this.z = z;
    	this.w = w;

    }

    Object.defineProperties( Vector4.prototype, {

    	"width": {

    		get: function () {

    			return this.z;

    		},

    		set: function ( value ) {

    			this.z = value;

    		}

    	},

    	"height": {

    		get: function () {

    			return this.w;

    		},

    		set: function ( value ) {

    			this.w = value;

    		}

    	}

    } );

    Object.assign( Vector4.prototype, {

    	isVector4: true,

    	set: function ( x, y, z, w ) {

    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.w = w;

    		return this;

    	},

    	setScalar: function ( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;
    		this.w = scalar;

    		return this;

    	},

    	setX: function ( x ) {

    		this.x = x;

    		return this;

    	},

    	setY: function ( y ) {

    		this.y = y;

    		return this;

    	},

    	setZ: function ( z ) {

    		this.z = z;

    		return this;

    	},

    	setW: function ( w ) {

    		this.w = w;

    		return this;

    	},

    	setComponent: function ( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			case 3: this.w = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	},

    	getComponent: function ( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			case 3: return this.w;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	},

    	clone: function () {

    		return new this.constructor( this.x, this.y, this.z, this.w );

    	},

    	copy: function ( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;
    		this.w = ( v.w !== undefined ) ? v.w : 1;

    		return this;

    	},

    	add: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;
    		this.w += v.w;

    		return this;

    	},

    	addScalar: function ( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;
    		this.w += s;

    		return this;

    	},

    	addVectors: function ( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;
    		this.w = a.w + b.w;

    		return this;

    	},

    	addScaledVector: function ( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;
    		this.w += v.w * s;

    		return this;

    	},

    	sub: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;
    		this.w -= v.w;

    		return this;

    	},

    	subScalar: function ( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;
    		this.w -= s;

    		return this;

    	},

    	subVectors: function ( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;
    		this.w = a.w - b.w;

    		return this;

    	},

    	multiplyScalar: function ( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;
    		this.w *= scalar;

    		return this;

    	},

    	applyMatrix4: function ( m ) {

    		const x = this.x, y = this.y, z = this.z, w = this.w;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
    		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

    		return this;

    	},

    	divideScalar: function ( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	},

    	setAxisAngleFromQuaternion: function ( q ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

    		// q is assumed to be normalized

    		this.w = 2 * Math.acos( q.w );

    		const s = Math.sqrt( 1 - q.w * q.w );

    		if ( s < 0.0001 ) {

    			this.x = 1;
    			this.y = 0;
    			this.z = 0;

    		} else {

    			this.x = q.x / s;
    			this.y = q.y / s;
    			this.z = q.z / s;

    		}

    		return this;

    	},

    	setAxisAngleFromRotationMatrix: function ( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		let angle, x, y, z; // variables for result
    		const epsilon = 0.01,		// margin to allow for rounding errors
    			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

    			te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
    		     ( Math.abs( m13 - m31 ) < epsilon ) &&
    		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

    			// singularity found
    			// first check for identity matrix which must have +1 for all terms
    			// in leading diagonal and zero in other terms

    			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
    			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
    			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
    			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

    				// this singularity is identity matrix so angle = 0

    				this.set( 1, 0, 0, 0 );

    				return this; // zero angle, arbitrary axis

    			}

    			// otherwise this singularity is angle = 180

    			angle = Math.PI;

    			const xx = ( m11 + 1 ) / 2;
    			const yy = ( m22 + 1 ) / 2;
    			const zz = ( m33 + 1 ) / 2;
    			const xy = ( m12 + m21 ) / 4;
    			const xz = ( m13 + m31 ) / 4;
    			const yz = ( m23 + m32 ) / 4;

    			if ( ( xx > yy ) && ( xx > zz ) ) {

    				// m11 is the largest diagonal term

    				if ( xx < epsilon ) {

    					x = 0;
    					y = 0.707106781;
    					z = 0.707106781;

    				} else {

    					x = Math.sqrt( xx );
    					y = xy / x;
    					z = xz / x;

    				}

    			} else if ( yy > zz ) {

    				// m22 is the largest diagonal term

    				if ( yy < epsilon ) {

    					x = 0.707106781;
    					y = 0;
    					z = 0.707106781;

    				} else {

    					y = Math.sqrt( yy );
    					x = xy / y;
    					z = yz / y;

    				}

    			} else {

    				// m33 is the largest diagonal term so base result on this

    				if ( zz < epsilon ) {

    					x = 0.707106781;
    					y = 0.707106781;
    					z = 0;

    				} else {

    					z = Math.sqrt( zz );
    					x = xz / z;
    					y = yz / z;

    				}

    			}

    			this.set( x, y, z, angle );

    			return this; // return 180 deg rotation

    		}

    		// as we have reached here there are no singularities so we can handle normally

    		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
    			( m13 - m31 ) * ( m13 - m31 ) +
    			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

    		if ( Math.abs( s ) < 0.001 ) s = 1;

    		// prevent divide by zero, should not happen if matrix is orthogonal and should be
    		// caught by singularity test above, but I've left it in just in case

    		this.x = ( m32 - m23 ) / s;
    		this.y = ( m13 - m31 ) / s;
    		this.z = ( m21 - m12 ) / s;
    		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

    		return this;

    	},

    	min: function ( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );
    		this.w = Math.min( this.w, v.w );

    		return this;

    	},

    	max: function ( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );
    		this.w = Math.max( this.w, v.w );

    		return this;

    	},

    	clamp: function ( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
    		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

    		return this;

    	},

    	clampScalar: function ( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
    		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
    		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

    		return this;

    	},

    	clampLength: function ( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	},

    	floor: function () {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );
    		this.w = Math.floor( this.w );

    		return this;

    	},

    	ceil: function () {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );
    		this.w = Math.ceil( this.w );

    		return this;

    	},

    	round: function () {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );
    		this.w = Math.round( this.w );

    		return this;

    	},

    	roundToZero: function () {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
    		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

    		return this;

    	},

    	negate: function () {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;
    		this.w = - this.w;

    		return this;

    	},

    	dot: function ( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

    	},

    	lengthSq: function () {

    		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

    	},

    	length: function () {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

    	},

    	manhattanLength: function () {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

    	},

    	normalize: function () {

    		return this.divideScalar( this.length() || 1 );

    	},

    	setLength: function ( length ) {

    		return this.normalize().multiplyScalar( length );

    	},

    	lerp: function ( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;
    		this.w += ( v.w - this.w ) * alpha;

    		return this;

    	},

    	lerpVectors: function ( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;
    		this.w = v1.w + ( v2.w - v1.w ) * alpha;

    		return this;

    	},

    	equals: function ( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];
    		this.w = array[ offset + 3 ];

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;
    		array[ offset + 3 ] = this.w;

    		return array;

    	},

    	fromBufferAttribute: function ( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );
    		this.w = attribute.getW( index );

    		return this;

    	},

    	random: function () {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();
    		this.w = Math.random();

    		return this;

    	}

    } );

    /*
     In options, we can specify:
     * Texture parameters for an auto-generated target texture
     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
    */
    function WebGLRenderTarget( width, height, options ) {

    	this.width = width;
    	this.height = height;

    	this.scissor = new Vector4( 0, 0, width, height );
    	this.scissorTest = false;

    	this.viewport = new Vector4( 0, 0, width, height );

    	options = options || {};

    	this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

    	this.texture.image = {};
    	this.texture.image.width = width;
    	this.texture.image.height = height;

    	this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
    	this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

    	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
    	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
    	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

    }

    WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: WebGLRenderTarget,

    	isWebGLRenderTarget: true,

    	setSize: function ( width, height ) {

    		if ( this.width !== width || this.height !== height ) {

    			this.width = width;
    			this.height = height;

    			this.texture.image.width = width;
    			this.texture.image.height = height;

    			this.dispose();

    		}

    		this.viewport.set( 0, 0, width, height );
    		this.scissor.set( 0, 0, width, height );

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( source ) {

    		this.width = source.width;
    		this.height = source.height;

    		this.viewport.copy( source.viewport );

    		this.texture = source.texture.clone();

    		this.depthBuffer = source.depthBuffer;
    		this.stencilBuffer = source.stencilBuffer;
    		this.depthTexture = source.depthTexture;

    		return this;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    } );

    function WebGLMultisampleRenderTarget( width, height, options ) {

    	WebGLRenderTarget.call( this, width, height, options );

    	this.samples = 4;

    }

    WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

    	constructor: WebGLMultisampleRenderTarget,

    	isWebGLMultisampleRenderTarget: true,

    	copy: function ( source ) {

    		WebGLRenderTarget.prototype.copy.call( this, source );

    		this.samples = source.samples;

    		return this;

    	}

    } );

    function Quaternion( x = 0, y = 0, z = 0, w = 1 ) {

    	this._x = x;
    	this._y = y;
    	this._z = z;
    	this._w = w;

    }

    Object.assign( Quaternion, {

    	slerp: function ( qa, qb, qm, t ) {

    		return qm.copy( qa ).slerp( qb, t );

    	},

    	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

    		// fuzz-free, array-based Quaternion SLERP operation

    		let x0 = src0[ srcOffset0 + 0 ],
    			y0 = src0[ srcOffset0 + 1 ],
    			z0 = src0[ srcOffset0 + 2 ],
    			w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 + 0 ],
    			y1 = src1[ srcOffset1 + 1 ],
    			z1 = src1[ srcOffset1 + 2 ],
    			w1 = src1[ srcOffset1 + 3 ];

    		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

    			let s = 1 - t,

    				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

    				dir = ( cos >= 0 ? 1 : - 1 ),
    				sqrSin = 1 - cos * cos;

    			// Skip the Slerp for tiny steps to avoid numeric problems:
    			if ( sqrSin > Number.EPSILON ) {

    				const sin = Math.sqrt( sqrSin ),
    					len = Math.atan2( sin, cos * dir );

    				s = Math.sin( s * len ) / sin;
    				t = Math.sin( t * len ) / sin;

    			}

    			const tDir = t * dir;

    			x0 = x0 * s + x1 * tDir;
    			y0 = y0 * s + y1 * tDir;
    			z0 = z0 * s + z1 * tDir;
    			w0 = w0 * s + w1 * tDir;

    			// Normalize in case we just did a lerp:
    			if ( s === 1 - t ) {

    				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

    				x0 *= f;
    				y0 *= f;
    				z0 *= f;
    				w0 *= f;

    			}

    		}

    		dst[ dstOffset ] = x0;
    		dst[ dstOffset + 1 ] = y0;
    		dst[ dstOffset + 2 ] = z0;
    		dst[ dstOffset + 3 ] = w0;

    	},

    	multiplyQuaternionsFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

    		const x0 = src0[ srcOffset0 ];
    		const y0 = src0[ srcOffset0 + 1 ];
    		const z0 = src0[ srcOffset0 + 2 ];
    		const w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 ];
    		const y1 = src1[ srcOffset1 + 1 ];
    		const z1 = src1[ srcOffset1 + 2 ];
    		const w1 = src1[ srcOffset1 + 3 ];

    		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

    		return dst;

    	}

    } );

    Object.defineProperties( Quaternion.prototype, {

    	x: {

    		get: function () {

    			return this._x;

    		},

    		set: function ( value ) {

    			this._x = value;
    			this._onChangeCallback();

    		}

    	},

    	y: {

    		get: function () {

    			return this._y;

    		},

    		set: function ( value ) {

    			this._y = value;
    			this._onChangeCallback();

    		}

    	},

    	z: {

    		get: function () {

    			return this._z;

    		},

    		set: function ( value ) {

    			this._z = value;
    			this._onChangeCallback();

    		}

    	},

    	w: {

    		get: function () {

    			return this._w;

    		},

    		set: function ( value ) {

    			this._w = value;
    			this._onChangeCallback();

    		}

    	}

    } );

    Object.assign( Quaternion.prototype, {

    	isQuaternion: true,

    	set: function ( x, y, z, w ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._w = w;

    		this._onChangeCallback();

    		return this;

    	},

    	clone: function () {

    		return new this.constructor( this._x, this._y, this._z, this._w );

    	},

    	copy: function ( quaternion ) {

    		this._x = quaternion.x;
    		this._y = quaternion.y;
    		this._z = quaternion.z;
    		this._w = quaternion.w;

    		this._onChangeCallback();

    		return this;

    	},

    	setFromEuler: function ( euler, update ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

    		}

    		const x = euler._x, y = euler._y, z = euler._z, order = euler.order;

    		// http://www.mathworks.com/matlabcentral/fileexchange/
    		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    		//	content/SpinCalc.m

    		const cos = Math.cos;
    		const sin = Math.sin;

    		const c1 = cos( x / 2 );
    		const c2 = cos( y / 2 );
    		const c3 = cos( z / 2 );

    		const s1 = sin( x / 2 );
    		const s2 = sin( y / 2 );
    		const s3 = sin( z / 2 );

    		switch ( order ) {

    			case 'XYZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'YXZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'ZXY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'ZYX':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'YZX':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'XZY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			default:
    				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

    		}

    		if ( update !== false ) this._onChangeCallback();

    		return this;

    	},

    	setFromAxisAngle: function ( axis, angle ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

    		// assumes axis is normalized

    		const halfAngle = angle / 2, s = Math.sin( halfAngle );

    		this._x = axis.x * s;
    		this._y = axis.y * s;
    		this._z = axis.z * s;
    		this._w = Math.cos( halfAngle );

    		this._onChangeCallback();

    		return this;

    	},

    	setFromRotationMatrix: function ( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		const te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

    			trace = m11 + m22 + m33;

    		if ( trace > 0 ) {

    			const s = 0.5 / Math.sqrt( trace + 1.0 );

    			this._w = 0.25 / s;
    			this._x = ( m32 - m23 ) * s;
    			this._y = ( m13 - m31 ) * s;
    			this._z = ( m21 - m12 ) * s;

    		} else if ( m11 > m22 && m11 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

    			this._w = ( m32 - m23 ) / s;
    			this._x = 0.25 * s;
    			this._y = ( m12 + m21 ) / s;
    			this._z = ( m13 + m31 ) / s;

    		} else if ( m22 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

    			this._w = ( m13 - m31 ) / s;
    			this._x = ( m12 + m21 ) / s;
    			this._y = 0.25 * s;
    			this._z = ( m23 + m32 ) / s;

    		} else {

    			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

    			this._w = ( m21 - m12 ) / s;
    			this._x = ( m13 + m31 ) / s;
    			this._y = ( m23 + m32 ) / s;
    			this._z = 0.25 * s;

    		}

    		this._onChangeCallback();

    		return this;

    	},

    	setFromUnitVectors: function ( vFrom, vTo ) {

    		// assumes direction vectors vFrom and vTo are normalized

    		const EPS = 0.000001;

    		let r = vFrom.dot( vTo ) + 1;

    		if ( r < EPS ) {

    			r = 0;

    			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

    				this._x = - vFrom.y;
    				this._y = vFrom.x;
    				this._z = 0;
    				this._w = r;

    			} else {

    				this._x = 0;
    				this._y = - vFrom.z;
    				this._z = vFrom.y;
    				this._w = r;

    			}

    		} else {

    			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

    			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
    			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
    			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
    			this._w = r;

    		}

    		return this.normalize();

    	},

    	angleTo: function ( q ) {

    		return 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );

    	},

    	rotateTowards: function ( q, step ) {

    		const angle = this.angleTo( q );

    		if ( angle === 0 ) return this;

    		const t = Math.min( 1, step / angle );

    		this.slerp( q, t );

    		return this;

    	},

    	identity: function () {

    		return this.set( 0, 0, 0, 1 );

    	},

    	inverse: function () {

    		// quaternion is assumed to have unit length

    		return this.conjugate();

    	},

    	conjugate: function () {

    		this._x *= - 1;
    		this._y *= - 1;
    		this._z *= - 1;

    		this._onChangeCallback();

    		return this;

    	},

    	dot: function ( v ) {

    		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

    	},

    	lengthSq: function () {

    		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

    	},

    	length: function () {

    		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

    	},

    	normalize: function () {

    		let l = this.length();

    		if ( l === 0 ) {

    			this._x = 0;
    			this._y = 0;
    			this._z = 0;
    			this._w = 1;

    		} else {

    			l = 1 / l;

    			this._x = this._x * l;
    			this._y = this._y * l;
    			this._z = this._z * l;
    			this._w = this._w * l;

    		}

    		this._onChangeCallback();

    		return this;

    	},

    	multiply: function ( q, p ) {

    		if ( p !== undefined ) {

    			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
    			return this.multiplyQuaternions( q, p );

    		}

    		return this.multiplyQuaternions( this, q );

    	},

    	premultiply: function ( q ) {

    		return this.multiplyQuaternions( q, this );

    	},

    	multiplyQuaternions: function ( a, b ) {

    		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

    		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    		this._onChangeCallback();

    		return this;

    	},

    	slerp: function ( qb, t ) {

    		if ( t === 0 ) return this;
    		if ( t === 1 ) return this.copy( qb );

    		const x = this._x, y = this._y, z = this._z, w = this._w;

    		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

    		if ( cosHalfTheta < 0 ) {

    			this._w = - qb._w;
    			this._x = - qb._x;
    			this._y = - qb._y;
    			this._z = - qb._z;

    			cosHalfTheta = - cosHalfTheta;

    		} else {

    			this.copy( qb );

    		}

    		if ( cosHalfTheta >= 1.0 ) {

    			this._w = w;
    			this._x = x;
    			this._y = y;
    			this._z = z;

    			return this;

    		}

    		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

    		if ( sqrSinHalfTheta <= Number.EPSILON ) {

    			const s = 1 - t;
    			this._w = s * w + t * this._w;
    			this._x = s * x + t * this._x;
    			this._y = s * y + t * this._y;
    			this._z = s * z + t * this._z;

    			this.normalize();
    			this._onChangeCallback();

    			return this;

    		}

    		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
    		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
    		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    		this._w = ( w * ratioA + this._w * ratioB );
    		this._x = ( x * ratioA + this._x * ratioB );
    		this._y = ( y * ratioA + this._y * ratioB );
    		this._z = ( z * ratioA + this._z * ratioB );

    		this._onChangeCallback();

    		return this;

    	},

    	equals: function ( quaternion ) {

    		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this._x = array[ offset ];
    		this._y = array[ offset + 1 ];
    		this._z = array[ offset + 2 ];
    		this._w = array[ offset + 3 ];

    		this._onChangeCallback();

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._w;

    		return array;

    	},

    	fromBufferAttribute: function ( attribute, index ) {

    		this._x = attribute.getX( index );
    		this._y = attribute.getY( index );
    		this._z = attribute.getZ( index );
    		this._w = attribute.getW( index );

    		return this;

    	},

    	_onChange: function ( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	},

    	_onChangeCallback: function () {}

    } );

    const _vector$b = new Vector3();
    const _quaternion$4 = new Quaternion();

    function Vector3( x = 0, y = 0, z = 0 ) {

    	this.x = x;
    	this.y = y;
    	this.z = z;

    }

    Object.assign( Vector3.prototype, {

    	isVector3: true,

    	set: function ( x, y, z ) {

    		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

    		this.x = x;
    		this.y = y;
    		this.z = z;

    		return this;

    	},

    	setScalar: function ( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;

    		return this;

    	},

    	setX: function ( x ) {

    		this.x = x;

    		return this;

    	},

    	setY: function ( y ) {

    		this.y = y;

    		return this;

    	},

    	setZ: function ( z ) {

    		this.z = z;

    		return this;

    	},

    	setComponent: function ( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	},

    	getComponent: function ( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	},

    	clone: function () {

    		return new this.constructor( this.x, this.y, this.z );

    	},

    	copy: function ( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;

    		return this;

    	},

    	add: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;

    		return this;

    	},

    	addScalar: function ( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;

    		return this;

    	},

    	addVectors: function ( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;

    		return this;

    	},

    	addScaledVector: function ( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;

    		return this;

    	},

    	sub: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;

    		return this;

    	},

    	subScalar: function ( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;

    		return this;

    	},

    	subVectors: function ( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;

    		return this;

    	},

    	multiply: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
    			return this.multiplyVectors( v, w );

    		}

    		this.x *= v.x;
    		this.y *= v.y;
    		this.z *= v.z;

    		return this;

    	},

    	multiplyScalar: function ( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;

    		return this;

    	},

    	multiplyVectors: function ( a, b ) {

    		this.x = a.x * b.x;
    		this.y = a.y * b.y;
    		this.z = a.z * b.z;

    		return this;

    	},

    	applyEuler: function ( euler ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

    		}

    		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

    	},

    	applyAxisAngle: function ( axis, angle ) {

    		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

    	},

    	applyMatrix3: function ( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
    		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

    		return this;

    	},

    	applyNormalMatrix: function ( m ) {

    		return this.applyMatrix3( m ).normalize();

    	},

    	applyMatrix4: function ( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

    		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
    		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
    		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

    		return this;

    	},

    	applyQuaternion: function ( q ) {

    		const x = this.x, y = this.y, z = this.z;
    		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

    		// calculate quat * vector

    		const ix = qw * x + qy * z - qz * y;
    		const iy = qw * y + qz * x - qx * z;
    		const iz = qw * z + qx * y - qy * x;
    		const iw = - qx * x - qy * y - qz * z;

    		// calculate result * inverse quat

    		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
    		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
    		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

    		return this;

    	},

    	project: function ( camera ) {

    		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

    	},

    	unproject: function ( camera ) {

    		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

    	},

    	transformDirection: function ( m ) {

    		// input: THREE.Matrix4 affine matrix
    		// vector interpreted as a direction

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

    		return this.normalize();

    	},

    	divide: function ( v ) {

    		this.x /= v.x;
    		this.y /= v.y;
    		this.z /= v.z;

    		return this;

    	},

    	divideScalar: function ( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	},

    	min: function ( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );

    		return this;

    	},

    	max: function ( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );

    		return this;

    	},

    	clamp: function ( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

    		return this;

    	},

    	clampScalar: function ( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
    		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

    		return this;

    	},

    	clampLength: function ( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	},

    	floor: function () {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );

    		return this;

    	},

    	ceil: function () {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );

    		return this;

    	},

    	round: function () {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );

    		return this;

    	},

    	roundToZero: function () {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

    		return this;

    	},

    	negate: function () {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;

    		return this;

    	},

    	dot: function ( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z;

    	},

    	// TODO lengthSquared?

    	lengthSq: function () {

    		return this.x * this.x + this.y * this.y + this.z * this.z;

    	},

    	length: function () {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

    	},

    	manhattanLength: function () {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

    	},

    	normalize: function () {

    		return this.divideScalar( this.length() || 1 );

    	},

    	setLength: function ( length ) {

    		return this.normalize().multiplyScalar( length );

    	},

    	lerp: function ( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;

    		return this;

    	},

    	lerpVectors: function ( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;

    		return this;

    	},

    	cross: function ( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
    			return this.crossVectors( v, w );

    		}

    		return this.crossVectors( this, v );

    	},

    	crossVectors: function ( a, b ) {

    		const ax = a.x, ay = a.y, az = a.z;
    		const bx = b.x, by = b.y, bz = b.z;

    		this.x = ay * bz - az * by;
    		this.y = az * bx - ax * bz;
    		this.z = ax * by - ay * bx;

    		return this;

    	},

    	projectOnVector: function ( v ) {

    		const denominator = v.lengthSq();

    		if ( denominator === 0 ) return this.set( 0, 0, 0 );

    		const scalar = v.dot( this ) / denominator;

    		return this.copy( v ).multiplyScalar( scalar );

    	},

    	projectOnPlane: function ( planeNormal ) {

    		_vector$b.copy( this ).projectOnVector( planeNormal );

    		return this.sub( _vector$b );

    	},

    	reflect: function ( normal ) {

    		// reflect incident vector off plane orthogonal to normal
    		// normal is assumed to have unit length

    		return this.sub( _vector$b.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

    	},

    	angleTo: function ( v ) {

    		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

    		if ( denominator === 0 ) return Math.PI / 2;

    		const theta = this.dot( v ) / denominator;

    		// clamp, to handle numerical problems

    		return Math.acos( MathUtils.clamp( theta, - 1, 1 ) );

    	},

    	distanceTo: function ( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	},

    	distanceToSquared: function ( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

    		return dx * dx + dy * dy + dz * dz;

    	},

    	manhattanDistanceTo: function ( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

    	},

    	setFromSpherical: function ( s ) {

    		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

    	},

    	setFromSphericalCoords: function ( radius, phi, theta ) {

    		const sinPhiRadius = Math.sin( phi ) * radius;

    		this.x = sinPhiRadius * Math.sin( theta );
    		this.y = Math.cos( phi ) * radius;
    		this.z = sinPhiRadius * Math.cos( theta );

    		return this;

    	},

    	setFromCylindrical: function ( c ) {

    		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

    	},

    	setFromCylindricalCoords: function ( radius, theta, y ) {

    		this.x = radius * Math.sin( theta );
    		this.y = y;
    		this.z = radius * Math.cos( theta );

    		return this;

    	},

    	setFromMatrixPosition: function ( m ) {

    		const e = m.elements;

    		this.x = e[ 12 ];
    		this.y = e[ 13 ];
    		this.z = e[ 14 ];

    		return this;

    	},

    	setFromMatrixScale: function ( m ) {

    		const sx = this.setFromMatrixColumn( m, 0 ).length();
    		const sy = this.setFromMatrixColumn( m, 1 ).length();
    		const sz = this.setFromMatrixColumn( m, 2 ).length();

    		this.x = sx;
    		this.y = sy;
    		this.z = sz;

    		return this;

    	},

    	setFromMatrixColumn: function ( m, index ) {

    		return this.fromArray( m.elements, index * 4 );

    	},

    	setFromMatrix3Column: function ( m, index ) {

    		return this.fromArray( m.elements, index * 3 );

    	},

    	equals: function ( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;

    		return array;

    	},

    	fromBufferAttribute: function ( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );

    		return this;

    	},

    	random: function () {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();

    		return this;

    	}

    } );

    const _v1$5 = new Vector3();
    const _m1$3 = new Matrix4();
    const _zero = new Vector3( 0, 0, 0 );
    const _one = new Vector3( 1, 1, 1 );
    const _x = new Vector3();
    const _y = new Vector3();
    const _z = new Vector3();

    function Matrix4() {

    	this.elements = [

    		1, 0, 0, 0,
    		0, 1, 0, 0,
    		0, 0, 1, 0,
    		0, 0, 0, 1

    	];

    	if ( arguments.length > 0 ) {

    		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

    	}

    }

    Object.assign( Matrix4.prototype, {

    	isMatrix4: true,

    	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
    		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
    		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
    		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

    		return this;

    	},

    	identity: function () {

    		this.set(

    			1, 0, 0, 0,
    			0, 1, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	clone: function () {

    		return new Matrix4().fromArray( this.elements );

    	},

    	copy: function ( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
    		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
    		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
    		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

    		return this;

    	},

    	copyPosition: function ( m ) {

    		const te = this.elements, me = m.elements;

    		te[ 12 ] = me[ 12 ];
    		te[ 13 ] = me[ 13 ];
    		te[ 14 ] = me[ 14 ];

    		return this;

    	},

    	extractBasis: function ( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrixColumn( this, 0 );
    		yAxis.setFromMatrixColumn( this, 1 );
    		zAxis.setFromMatrixColumn( this, 2 );

    		return this;

    	},

    	makeBasis: function ( xAxis, yAxis, zAxis ) {

    		this.set(
    			xAxis.x, yAxis.x, zAxis.x, 0,
    			xAxis.y, yAxis.y, zAxis.y, 0,
    			xAxis.z, yAxis.z, zAxis.z, 0,
    			0, 0, 0, 1
    		);

    		return this;

    	},

    	extractRotation: function ( m ) {

    		// this method does not support reflection matrices

    		const te = this.elements;
    		const me = m.elements;

    		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
    		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
    		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

    		te[ 0 ] = me[ 0 ] * scaleX;
    		te[ 1 ] = me[ 1 ] * scaleX;
    		te[ 2 ] = me[ 2 ] * scaleX;
    		te[ 3 ] = 0;

    		te[ 4 ] = me[ 4 ] * scaleY;
    		te[ 5 ] = me[ 5 ] * scaleY;
    		te[ 6 ] = me[ 6 ] * scaleY;
    		te[ 7 ] = 0;

    		te[ 8 ] = me[ 8 ] * scaleZ;
    		te[ 9 ] = me[ 9 ] * scaleZ;
    		te[ 10 ] = me[ 10 ] * scaleZ;
    		te[ 11 ] = 0;

    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	},

    	makeRotationFromEuler: function ( euler ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

    		}

    		const te = this.elements;

    		const x = euler.x, y = euler.y, z = euler.z;
    		const a = Math.cos( x ), b = Math.sin( x );
    		const c = Math.cos( y ), d = Math.sin( y );
    		const e = Math.cos( z ), f = Math.sin( z );

    		if ( euler.order === 'XYZ' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - c * f;
    			te[ 8 ] = d;

    			te[ 1 ] = af + be * d;
    			te[ 5 ] = ae - bf * d;
    			te[ 9 ] = - b * c;

    			te[ 2 ] = bf - ae * d;
    			te[ 6 ] = be + af * d;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YXZ' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce + df * b;
    			te[ 4 ] = de * b - cf;
    			te[ 8 ] = a * d;

    			te[ 1 ] = a * f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b;

    			te[ 2 ] = cf * b - de;
    			te[ 6 ] = df + ce * b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZXY' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce - df * b;
    			te[ 4 ] = - a * f;
    			te[ 8 ] = de + cf * b;

    			te[ 1 ] = cf + de * b;
    			te[ 5 ] = a * e;
    			te[ 9 ] = df - ce * b;

    			te[ 2 ] = - a * d;
    			te[ 6 ] = b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZYX' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = be * d - af;
    			te[ 8 ] = ae * d + bf;

    			te[ 1 ] = c * f;
    			te[ 5 ] = bf * d + ae;
    			te[ 9 ] = af * d - be;

    			te[ 2 ] = - d;
    			te[ 6 ] = b * c;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YZX' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = bd - ac * f;
    			te[ 8 ] = bc * f + ad;

    			te[ 1 ] = f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b * e;

    			te[ 2 ] = - d * e;
    			te[ 6 ] = ad * f + bc;
    			te[ 10 ] = ac - bd * f;

    		} else if ( euler.order === 'XZY' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - f;
    			te[ 8 ] = d * e;

    			te[ 1 ] = ac * f + bd;
    			te[ 5 ] = a * e;
    			te[ 9 ] = ad * f - bc;

    			te[ 2 ] = bc * f - ad;
    			te[ 6 ] = b * e;
    			te[ 10 ] = bd * f + ac;

    		}

    		// bottom row
    		te[ 3 ] = 0;
    		te[ 7 ] = 0;
    		te[ 11 ] = 0;

    		// last column
    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	},

    	makeRotationFromQuaternion: function ( q ) {

    		return this.compose( _zero, q, _one );

    	},

    	lookAt: function ( eye, target, up ) {

    		const te = this.elements;

    		_z.subVectors( eye, target );

    		if ( _z.lengthSq() === 0 ) {

    			// eye and target are in the same position

    			_z.z = 1;

    		}

    		_z.normalize();
    		_x.crossVectors( up, _z );

    		if ( _x.lengthSq() === 0 ) {

    			// up and z are parallel

    			if ( Math.abs( up.z ) === 1 ) {

    				_z.x += 0.0001;

    			} else {

    				_z.z += 0.0001;

    			}

    			_z.normalize();
    			_x.crossVectors( up, _z );

    		}

    		_x.normalize();
    		_y.crossVectors( _z, _x );

    		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
    		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
    		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

    		return this;

    	},

    	multiply: function ( m, n ) {

    		if ( n !== undefined ) {

    			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
    			return this.multiplyMatrices( m, n );

    		}

    		return this.multiplyMatrices( this, m );

    	},

    	premultiply: function ( m ) {

    		return this.multiplyMatrices( m, this );

    	},

    	multiplyMatrices: function ( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
    		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
    		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
    		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

    		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
    		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
    		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
    		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    		return this;

    	},

    	multiplyScalar: function ( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
    		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
    		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
    		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

    		return this;

    	},

    	determinant: function () {

    		const te = this.elements;

    		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
    		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
    		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
    		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

    		//TODO: make this more efficient
    		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

    		return (
    			n41 * (
    				+ n14 * n23 * n32
    				 - n13 * n24 * n32
    				 - n14 * n22 * n33
    				 + n12 * n24 * n33
    				 + n13 * n22 * n34
    				 - n12 * n23 * n34
    			) +
    			n42 * (
    				+ n11 * n23 * n34
    				 - n11 * n24 * n33
    				 + n14 * n21 * n33
    				 - n13 * n21 * n34
    				 + n13 * n24 * n31
    				 - n14 * n23 * n31
    			) +
    			n43 * (
    				+ n11 * n24 * n32
    				 - n11 * n22 * n34
    				 - n14 * n21 * n32
    				 + n12 * n21 * n34
    				 + n14 * n22 * n31
    				 - n12 * n24 * n31
    			) +
    			n44 * (
    				- n13 * n22 * n31
    				 - n11 * n23 * n32
    				 + n11 * n22 * n33
    				 + n13 * n21 * n32
    				 - n12 * n21 * n33
    				 + n12 * n23 * n31
    			)

    		);

    	},

    	transpose: function () {

    		const te = this.elements;
    		let tmp;

    		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
    		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
    		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

    		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
    		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
    		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

    		return this;

    	},

    	setPosition: function ( x, y, z ) {

    		const te = this.elements;

    		if ( x.isVector3 ) {

    			te[ 12 ] = x.x;
    			te[ 13 ] = x.y;
    			te[ 14 ] = x.z;

    		} else {

    			te[ 12 ] = x;
    			te[ 13 ] = y;
    			te[ 14 ] = z;

    		}

    		return this;

    	},

    	getInverse: function ( m, throwOnDegenerate ) {

    		if ( throwOnDegenerate !== undefined ) {

    			console.warn( "THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate." );

    		}

    		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
    		const te = this.elements,
    			me = m.elements,

    			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
    			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
    			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
    			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

    			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
    			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
    			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
    			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
    		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
    		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

    		te[ 4 ] = t12 * detInv;
    		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
    		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
    		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

    		te[ 8 ] = t13 * detInv;
    		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
    		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
    		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

    		te[ 12 ] = t14 * detInv;
    		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
    		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
    		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

    		return this;

    	},

    	scale: function ( v ) {

    		const te = this.elements;
    		const x = v.x, y = v.y, z = v.z;

    		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
    		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
    		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
    		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

    		return this;

    	},

    	getMaxScaleOnAxis: function () {

    		const te = this.elements;

    		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
    		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
    		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

    		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

    	},

    	makeTranslation: function ( x, y, z ) {

    		this.set(

    			1, 0, 0, x,
    			0, 1, 0, y,
    			0, 0, 1, z,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	makeRotationX: function ( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			1, 0, 0, 0,
    			0, c, - s, 0,
    			0, s, c, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	makeRotationY: function ( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			 c, 0, s, 0,
    			 0, 1, 0, 0,
    			- s, 0, c, 0,
    			 0, 0, 0, 1

    		);

    		return this;

    	},

    	makeRotationZ: function ( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			c, - s, 0, 0,
    			s, c, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	makeRotationAxis: function ( axis, angle ) {

    		// Based on http://www.gamedev.net/reference/articles/article1199.asp

    		const c = Math.cos( angle );
    		const s = Math.sin( angle );
    		const t = 1 - c;
    		const x = axis.x, y = axis.y, z = axis.z;
    		const tx = t * x, ty = t * y;

    		this.set(

    			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
    			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
    			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
    			0, 0, 0, 1

    		);

    		 return this;

    	},

    	makeScale: function ( x, y, z ) {

    		this.set(

    			x, 0, 0, 0,
    			0, y, 0, 0,
    			0, 0, z, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	makeShear: function ( x, y, z ) {

    		this.set(

    			1, y, z, 0,
    			x, 1, z, 0,
    			x, y, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	},

    	compose: function ( position, quaternion, scale ) {

    		const te = this.elements;

    		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    		const x2 = x + x,	y2 = y + y, z2 = z + z;
    		const xx = x * x2, xy = x * y2, xz = x * z2;
    		const yy = y * y2, yz = y * z2, zz = z * z2;
    		const wx = w * x2, wy = w * y2, wz = w * z2;

    		const sx = scale.x, sy = scale.y, sz = scale.z;

    		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
    		te[ 1 ] = ( xy + wz ) * sx;
    		te[ 2 ] = ( xz - wy ) * sx;
    		te[ 3 ] = 0;

    		te[ 4 ] = ( xy - wz ) * sy;
    		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
    		te[ 6 ] = ( yz + wx ) * sy;
    		te[ 7 ] = 0;

    		te[ 8 ] = ( xz + wy ) * sz;
    		te[ 9 ] = ( yz - wx ) * sz;
    		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
    		te[ 11 ] = 0;

    		te[ 12 ] = position.x;
    		te[ 13 ] = position.y;
    		te[ 14 ] = position.z;
    		te[ 15 ] = 1;

    		return this;

    	},

    	decompose: function ( position, quaternion, scale ) {

    		const te = this.elements;

    		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
    		let sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
    		let sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

    		// if determine is negative, we need to invert one scale
    		const det = this.determinant();
    		if ( det < 0 ) sx = - sx;

    		position.x = te[ 12 ];
    		position.y = te[ 13 ];
    		position.z = te[ 14 ];

    		// scale the rotation part
    		_m1$3.copy( this );

    		const invSX = 1 / sx;
    		const invSY = 1 / sy;
    		const invSZ = 1 / sz;

    		_m1$3.elements[ 0 ] *= invSX;
    		_m1$3.elements[ 1 ] *= invSX;
    		_m1$3.elements[ 2 ] *= invSX;

    		_m1$3.elements[ 4 ] *= invSY;
    		_m1$3.elements[ 5 ] *= invSY;
    		_m1$3.elements[ 6 ] *= invSY;

    		_m1$3.elements[ 8 ] *= invSZ;
    		_m1$3.elements[ 9 ] *= invSZ;
    		_m1$3.elements[ 10 ] *= invSZ;

    		quaternion.setFromRotationMatrix( _m1$3 );

    		scale.x = sx;
    		scale.y = sy;
    		scale.z = sz;

    		return this;

    	},

    	makePerspective: function ( left, right, top, bottom, near, far ) {

    		if ( far === undefined ) {

    			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

    		}

    		const te = this.elements;
    		const x = 2 * near / ( right - left );
    		const y = 2 * near / ( top - bottom );

    		const a = ( right + left ) / ( right - left );
    		const b = ( top + bottom ) / ( top - bottom );
    		const c = - ( far + near ) / ( far - near );
    		const d = - 2 * far * near / ( far - near );

    		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
    		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

    		return this;

    	},

    	makeOrthographic: function ( left, right, top, bottom, near, far ) {

    		const te = this.elements;
    		const w = 1.0 / ( right - left );
    		const h = 1.0 / ( top - bottom );
    		const p = 1.0 / ( far - near );

    		const x = ( right + left ) * w;
    		const y = ( top + bottom ) * h;
    		const z = ( far + near ) * p;

    		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
    		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

    		return this;

    	},

    	equals: function ( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 16; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		for ( let i = 0; i < 16; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];
    		array[ offset + 3 ] = te[ 3 ];

    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];
    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];

    		array[ offset + 8 ] = te[ 8 ];
    		array[ offset + 9 ] = te[ 9 ];
    		array[ offset + 10 ] = te[ 10 ];
    		array[ offset + 11 ] = te[ 11 ];

    		array[ offset + 12 ] = te[ 12 ];
    		array[ offset + 13 ] = te[ 13 ];
    		array[ offset + 14 ] = te[ 14 ];
    		array[ offset + 15 ] = te[ 15 ];

    		return array;

    	}

    } );

    const _matrix = new Matrix4();
    const _quaternion$3 = new Quaternion();

    function Euler( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {

    	this._x = x;
    	this._y = y;
    	this._z = z;
    	this._order = order;

    }

    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

    Euler.DefaultOrder = 'XYZ';

    Object.defineProperties( Euler.prototype, {

    	x: {

    		get: function () {

    			return this._x;

    		},

    		set: function ( value ) {

    			this._x = value;
    			this._onChangeCallback();

    		}

    	},

    	y: {

    		get: function () {

    			return this._y;

    		},

    		set: function ( value ) {

    			this._y = value;
    			this._onChangeCallback();

    		}

    	},

    	z: {

    		get: function () {

    			return this._z;

    		},

    		set: function ( value ) {

    			this._z = value;
    			this._onChangeCallback();

    		}

    	},

    	order: {

    		get: function () {

    			return this._order;

    		},

    		set: function ( value ) {

    			this._order = value;
    			this._onChangeCallback();

    		}

    	}

    } );

    Object.assign( Euler.prototype, {

    	isEuler: true,

    	set: function ( x, y, z, order ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._order = order || this._order;

    		this._onChangeCallback();

    		return this;

    	},

    	clone: function () {

    		return new this.constructor( this._x, this._y, this._z, this._order );

    	},

    	copy: function ( euler ) {

    		this._x = euler._x;
    		this._y = euler._y;
    		this._z = euler._z;
    		this._order = euler._order;

    		this._onChangeCallback();

    		return this;

    	},

    	setFromRotationMatrix: function ( m, order, update ) {

    		const clamp = MathUtils.clamp;

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		const te = m.elements;
    		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
    		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
    		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		order = order || this._order;

    		switch ( order ) {

    			case 'XYZ':

    				this._y = Math.asin( clamp( m13, - 1, 1 ) );

    				if ( Math.abs( m13 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m33 );
    					this._z = Math.atan2( - m12, m11 );

    				} else {

    					this._x = Math.atan2( m32, m22 );
    					this._z = 0;

    				}

    				break;

    			case 'YXZ':

    				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

    				if ( Math.abs( m23 ) < 0.9999999 ) {

    					this._y = Math.atan2( m13, m33 );
    					this._z = Math.atan2( m21, m22 );

    				} else {

    					this._y = Math.atan2( - m31, m11 );
    					this._z = 0;

    				}

    				break;

    			case 'ZXY':

    				this._x = Math.asin( clamp( m32, - 1, 1 ) );

    				if ( Math.abs( m32 ) < 0.9999999 ) {

    					this._y = Math.atan2( - m31, m33 );
    					this._z = Math.atan2( - m12, m22 );

    				} else {

    					this._y = 0;
    					this._z = Math.atan2( m21, m11 );

    				}

    				break;

    			case 'ZYX':

    				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

    				if ( Math.abs( m31 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m33 );
    					this._z = Math.atan2( m21, m11 );

    				} else {

    					this._x = 0;
    					this._z = Math.atan2( - m12, m22 );

    				}

    				break;

    			case 'YZX':

    				this._z = Math.asin( clamp( m21, - 1, 1 ) );

    				if ( Math.abs( m21 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m22 );
    					this._y = Math.atan2( - m31, m11 );

    				} else {

    					this._x = 0;
    					this._y = Math.atan2( m13, m33 );

    				}

    				break;

    			case 'XZY':

    				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

    				if ( Math.abs( m12 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m22 );
    					this._y = Math.atan2( m13, m11 );

    				} else {

    					this._x = Math.atan2( - m23, m33 );
    					this._y = 0;

    				}

    				break;

    			default:

    				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

    		}

    		this._order = order;

    		if ( update !== false ) this._onChangeCallback();

    		return this;

    	},

    	setFromQuaternion: function ( q, order, update ) {

    		_matrix.makeRotationFromQuaternion( q );

    		return this.setFromRotationMatrix( _matrix, order, update );

    	},

    	setFromVector3: function ( v, order ) {

    		return this.set( v.x, v.y, v.z, order || this._order );

    	},

    	reorder: function ( newOrder ) {

    		// WARNING: this discards revolution information -bhouston

    		_quaternion$3.setFromEuler( this );

    		return this.setFromQuaternion( _quaternion$3, newOrder );

    	},

    	equals: function ( euler ) {

    		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

    	},

    	fromArray: function ( array ) {

    		this._x = array[ 0 ];
    		this._y = array[ 1 ];
    		this._z = array[ 2 ];
    		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

    		this._onChangeCallback();

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._order;

    		return array;

    	},

    	toVector3: function ( optionalResult ) {

    		if ( optionalResult ) {

    			return optionalResult.set( this._x, this._y, this._z );

    		} else {

    			return new Vector3( this._x, this._y, this._z );

    		}

    	},

    	_onChange: function ( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	},

    	_onChangeCallback: function () {}

    } );

    function Layers() {

    	this.mask = 1 | 0;

    }

    Object.assign( Layers.prototype, {

    	set: function ( channel ) {

    		this.mask = 1 << channel | 0;

    	},

    	enable: function ( channel ) {

    		this.mask |= 1 << channel | 0;

    	},

    	enableAll: function () {

    		this.mask = 0xffffffff | 0;

    	},

    	toggle: function ( channel ) {

    		this.mask ^= 1 << channel | 0;

    	},

    	disable: function ( channel ) {

    		this.mask &= ~ ( 1 << channel | 0 );

    	},

    	disableAll: function () {

    		this.mask = 0;

    	},

    	test: function ( layers ) {

    		return ( this.mask & layers.mask ) !== 0;

    	}

    } );

    let _object3DId = 0;

    const _v1$4 = new Vector3();
    const _q1 = new Quaternion();
    const _m1$2 = new Matrix4();
    const _target = new Vector3();

    const _position$3 = new Vector3();
    const _scale$2 = new Vector3();
    const _quaternion$2 = new Quaternion();

    const _xAxis = new Vector3( 1, 0, 0 );
    const _yAxis = new Vector3( 0, 1, 0 );
    const _zAxis = new Vector3( 0, 0, 1 );

    const _addedEvent = { type: 'added' };
    const _removedEvent = { type: 'removed' };

    function Object3D() {

    	Object.defineProperty( this, 'id', { value: _object3DId ++ } );

    	this.uuid = MathUtils.generateUUID();

    	this.name = '';
    	this.type = 'Object3D';

    	this.parent = null;
    	this.children = [];

    	this.up = Object3D.DefaultUp.clone();

    	const position = new Vector3();
    	const rotation = new Euler();
    	const quaternion = new Quaternion();
    	const scale = new Vector3( 1, 1, 1 );

    	function onRotationChange() {

    		quaternion.setFromEuler( rotation, false );

    	}

    	function onQuaternionChange() {

    		rotation.setFromQuaternion( quaternion, undefined, false );

    	}

    	rotation._onChange( onRotationChange );
    	quaternion._onChange( onQuaternionChange );

    	Object.defineProperties( this, {
    		position: {
    			configurable: true,
    			enumerable: true,
    			value: position
    		},
    		rotation: {
    			configurable: true,
    			enumerable: true,
    			value: rotation
    		},
    		quaternion: {
    			configurable: true,
    			enumerable: true,
    			value: quaternion
    		},
    		scale: {
    			configurable: true,
    			enumerable: true,
    			value: scale
    		},
    		modelViewMatrix: {
    			value: new Matrix4()
    		},
    		normalMatrix: {
    			value: new Matrix3()
    		}
    	} );

    	this.matrix = new Matrix4();
    	this.matrixWorld = new Matrix4();

    	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
    	this.matrixWorldNeedsUpdate = false;

    	this.layers = new Layers();
    	this.visible = true;

    	this.castShadow = false;
    	this.receiveShadow = false;

    	this.frustumCulled = true;
    	this.renderOrder = 0;

    	this.userData = {};

    }

    Object3D.DefaultUp = new Vector3( 0, 1, 0 );
    Object3D.DefaultMatrixAutoUpdate = true;

    Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: Object3D,

    	isObject3D: true,

    	onBeforeRender: function () {},
    	onAfterRender: function () {},

    	applyMatrix4: function ( matrix ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		this.matrix.premultiply( matrix );

    		this.matrix.decompose( this.position, this.quaternion, this.scale );

    	},

    	applyQuaternion: function ( q ) {

    		this.quaternion.premultiply( q );

    		return this;

    	},

    	setRotationFromAxisAngle: function ( axis, angle ) {

    		// assumes axis is normalized

    		this.quaternion.setFromAxisAngle( axis, angle );

    	},

    	setRotationFromEuler: function ( euler ) {

    		this.quaternion.setFromEuler( euler, true );

    	},

    	setRotationFromMatrix: function ( m ) {

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		this.quaternion.setFromRotationMatrix( m );

    	},

    	setRotationFromQuaternion: function ( q ) {

    		// assumes q is normalized

    		this.quaternion.copy( q );

    	},

    	rotateOnAxis: function ( axis, angle ) {

    		// rotate object on axis in object space
    		// axis is assumed to be normalized

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.multiply( _q1 );

    		return this;

    	},

    	rotateOnWorldAxis: function ( axis, angle ) {

    		// rotate object on axis in world space
    		// axis is assumed to be normalized
    		// method assumes no rotated parent

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.premultiply( _q1 );

    		return this;

    	},

    	rotateX: function ( angle ) {

    		return this.rotateOnAxis( _xAxis, angle );

    	},

    	rotateY: function ( angle ) {

    		return this.rotateOnAxis( _yAxis, angle );

    	},

    	rotateZ: function ( angle ) {

    		return this.rotateOnAxis( _zAxis, angle );

    	},

    	translateOnAxis: function ( axis, distance ) {

    		// translate object by distance along axis in object space
    		// axis is assumed to be normalized

    		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

    		this.position.add( _v1$4.multiplyScalar( distance ) );

    		return this;

    	},

    	translateX: function ( distance ) {

    		return this.translateOnAxis( _xAxis, distance );

    	},

    	translateY: function ( distance ) {

    		return this.translateOnAxis( _yAxis, distance );

    	},

    	translateZ: function ( distance ) {

    		return this.translateOnAxis( _zAxis, distance );

    	},

    	localToWorld: function ( vector ) {

    		return vector.applyMatrix4( this.matrixWorld );

    	},

    	worldToLocal: function ( vector ) {

    		return vector.applyMatrix4( _m1$2.getInverse( this.matrixWorld ) );

    	},

    	lookAt: function ( x, y, z ) {

    		// This method does not support objects having non-uniformly-scaled parent(s)

    		if ( x.isVector3 ) {

    			_target.copy( x );

    		} else {

    			_target.set( x, y, z );

    		}

    		const parent = this.parent;

    		this.updateWorldMatrix( true, false );

    		_position$3.setFromMatrixPosition( this.matrixWorld );

    		if ( this.isCamera || this.isLight ) {

    			_m1$2.lookAt( _position$3, _target, this.up );

    		} else {

    			_m1$2.lookAt( _target, _position$3, this.up );

    		}

    		this.quaternion.setFromRotationMatrix( _m1$2 );

    		if ( parent ) {

    			_m1$2.extractRotation( parent.matrixWorld );
    			_q1.setFromRotationMatrix( _m1$2 );
    			this.quaternion.premultiply( _q1.inverse() );

    		}

    	},

    	add: function ( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.add( arguments[ i ] );

    			}

    			return this;

    		}

    		if ( object === this ) {

    			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
    			return this;

    		}

    		if ( ( object && object.isObject3D ) ) {

    			if ( object.parent !== null ) {

    				object.parent.remove( object );

    			}

    			object.parent = this;
    			this.children.push( object );

    			object.dispatchEvent( _addedEvent );

    		} else {

    			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

    		}

    		return this;

    	},

    	remove: function ( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.remove( arguments[ i ] );

    			}

    			return this;

    		}

    		const index = this.children.indexOf( object );

    		if ( index !== - 1 ) {

    			object.parent = null;
    			this.children.splice( index, 1 );

    			object.dispatchEvent( _removedEvent );

    		}

    		return this;

    	},

    	attach: function ( object ) {

    		// adds object as a child of this, while maintaining the object's world transform

    		this.updateWorldMatrix( true, false );

    		_m1$2.getInverse( this.matrixWorld );

    		if ( object.parent !== null ) {

    			object.parent.updateWorldMatrix( true, false );

    			_m1$2.multiply( object.parent.matrixWorld );

    		}

    		object.applyMatrix4( _m1$2 );

    		object.updateWorldMatrix( false, false );

    		this.add( object );

    		return this;

    	},

    	getObjectById: function ( id ) {

    		return this.getObjectByProperty( 'id', id );

    	},

    	getObjectByName: function ( name ) {

    		return this.getObjectByProperty( 'name', name );

    	},

    	getObjectByProperty: function ( name, value ) {

    		if ( this[ name ] === value ) return this;

    		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

    			const child = this.children[ i ];
    			const object = child.getObjectByProperty( name, value );

    			if ( object !== undefined ) {

    				return object;

    			}

    		}

    		return undefined;

    	},

    	getWorldPosition: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
    			target = new Vector3();

    		}

    		this.updateMatrixWorld( true );

    		return target.setFromMatrixPosition( this.matrixWorld );

    	},

    	getWorldQuaternion: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
    			target = new Quaternion();

    		}

    		this.updateMatrixWorld( true );

    		this.matrixWorld.decompose( _position$3, target, _scale$2 );

    		return target;

    	},

    	getWorldScale: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
    			target = new Vector3();

    		}

    		this.updateMatrixWorld( true );

    		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

    		return target;

    	},

    	getWorldDirection: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
    			target = new Vector3();

    		}

    		this.updateMatrixWorld( true );

    		const e = this.matrixWorld.elements;

    		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

    	},

    	raycast: function () {},

    	traverse: function ( callback ) {

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverse( callback );

    		}

    	},

    	traverseVisible: function ( callback ) {

    		if ( this.visible === false ) return;

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverseVisible( callback );

    		}

    	},

    	traverseAncestors: function ( callback ) {

    		const parent = this.parent;

    		if ( parent !== null ) {

    			callback( parent );

    			parent.traverseAncestors( callback );

    		}

    	},

    	updateMatrix: function () {

    		this.matrix.compose( this.position, this.quaternion, this.scale );

    		this.matrixWorldNeedsUpdate = true;

    	},

    	updateMatrixWorld: function ( force ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.matrixWorldNeedsUpdate || force ) {

    			if ( this.parent === null ) {

    				this.matrixWorld.copy( this.matrix );

    			} else {

    				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    			}

    			this.matrixWorldNeedsUpdate = false;

    			force = true;

    		}

    		// update children

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].updateMatrixWorld( force );

    		}

    	},

    	updateWorldMatrix: function ( updateParents, updateChildren ) {

    		const parent = this.parent;

    		if ( updateParents === true && parent !== null ) {

    			parent.updateWorldMatrix( true, false );

    		}

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.parent === null ) {

    			this.matrixWorld.copy( this.matrix );

    		} else {

    			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    		}

    		// update children

    		if ( updateChildren === true ) {

    			const children = this.children;

    			for ( let i = 0, l = children.length; i < l; i ++ ) {

    				children[ i ].updateWorldMatrix( false, true );

    			}

    		}

    	},

    	toJSON: function ( meta ) {

    		// meta is a string when called from JSON.stringify
    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		const output = {};

    		// meta is a hash used to collect geometries, materials.
    		// not providing it implies that this is the root object
    		// being serialized.
    		if ( isRootObject ) {

    			// initialize meta obj
    			meta = {
    				geometries: {},
    				materials: {},
    				textures: {},
    				images: {},
    				shapes: {}
    			};

    			output.metadata = {
    				version: 4.5,
    				type: 'Object',
    				generator: 'Object3D.toJSON'
    			};

    		}

    		// standard Object3D serialization

    		const object = {};

    		object.uuid = this.uuid;
    		object.type = this.type;

    		if ( this.name !== '' ) object.name = this.name;
    		if ( this.castShadow === true ) object.castShadow = true;
    		if ( this.receiveShadow === true ) object.receiveShadow = true;
    		if ( this.visible === false ) object.visible = false;
    		if ( this.frustumCulled === false ) object.frustumCulled = false;
    		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
    		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

    		object.layers = this.layers.mask;
    		object.matrix = this.matrix.toArray();

    		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

    		// object specific properties

    		if ( this.isInstancedMesh ) {

    			object.type = 'InstancedMesh';
    			object.count = this.count;
    			object.instanceMatrix = this.instanceMatrix.toJSON();

    		}

    		//

    		function serialize( library, element ) {

    			if ( library[ element.uuid ] === undefined ) {

    				library[ element.uuid ] = element.toJSON( meta );

    			}

    			return element.uuid;

    		}

    		if ( this.isMesh || this.isLine || this.isPoints ) {

    			object.geometry = serialize( meta.geometries, this.geometry );

    			const parameters = this.geometry.parameters;

    			if ( parameters !== undefined && parameters.shapes !== undefined ) {

    				const shapes = parameters.shapes;

    				if ( Array.isArray( shapes ) ) {

    					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    						const shape = shapes[ i ];

    						serialize( meta.shapes, shape );

    					}

    				} else {

    					serialize( meta.shapes, shapes );

    				}

    			}

    		}

    		if ( this.material !== undefined ) {

    			if ( Array.isArray( this.material ) ) {

    				const uuids = [];

    				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

    					uuids.push( serialize( meta.materials, this.material[ i ] ) );

    				}

    				object.material = uuids;

    			} else {

    				object.material = serialize( meta.materials, this.material );

    			}

    		}

    		//

    		if ( this.children.length > 0 ) {

    			object.children = [];

    			for ( let i = 0; i < this.children.length; i ++ ) {

    				object.children.push( this.children[ i ].toJSON( meta ).object );

    			}

    		}

    		if ( isRootObject ) {

    			const geometries = extractFromCache( meta.geometries );
    			const materials = extractFromCache( meta.materials );
    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );
    			const shapes = extractFromCache( meta.shapes );

    			if ( geometries.length > 0 ) output.geometries = geometries;
    			if ( materials.length > 0 ) output.materials = materials;
    			if ( textures.length > 0 ) output.textures = textures;
    			if ( images.length > 0 ) output.images = images;
    			if ( shapes.length > 0 ) output.shapes = shapes;

    		}

    		output.object = object;

    		return output;

    		// extract data from the cache hash
    		// remove metadata on each item
    		// and return as array
    		function extractFromCache( cache ) {

    			const values = [];
    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    	},

    	clone: function ( recursive ) {

    		return new this.constructor().copy( this, recursive );

    	},

    	copy: function ( source, recursive ) {

    		if ( recursive === undefined ) recursive = true;

    		this.name = source.name;

    		this.up.copy( source.up );

    		this.position.copy( source.position );
    		this.rotation.order = source.rotation.order;
    		this.quaternion.copy( source.quaternion );
    		this.scale.copy( source.scale );

    		this.matrix.copy( source.matrix );
    		this.matrixWorld.copy( source.matrixWorld );

    		this.matrixAutoUpdate = source.matrixAutoUpdate;
    		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

    		this.layers.mask = source.layers.mask;
    		this.visible = source.visible;

    		this.castShadow = source.castShadow;
    		this.receiveShadow = source.receiveShadow;

    		this.frustumCulled = source.frustumCulled;
    		this.renderOrder = source.renderOrder;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		if ( recursive === true ) {

    			for ( let i = 0; i < source.children.length; i ++ ) {

    				const child = source.children[ i ];
    				this.add( child.clone() );

    			}

    		}

    		return this;

    	}

    } );

    function Scene() {

    	Object3D.call( this );

    	this.type = 'Scene';

    	this.background = null;
    	this.environment = null;
    	this.fog = null;

    	this.overrideMaterial = null;

    	this.autoUpdate = true; // checked by the renderer

    	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

    	}

    }

    Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Scene,

    	isScene: true,

    	copy: function ( source, recursive ) {

    		Object3D.prototype.copy.call( this, source, recursive );

    		if ( source.background !== null ) this.background = source.background.clone();
    		if ( source.environment !== null ) this.environment = source.environment.clone();
    		if ( source.fog !== null ) this.fog = source.fog.clone();

    		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

    		this.autoUpdate = source.autoUpdate;
    		this.matrixAutoUpdate = source.matrixAutoUpdate;

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = Object3D.prototype.toJSON.call( this, meta );

    		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
    		if ( this.environment !== null ) data.object.environment = this.environment.toJSON( meta );
    		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

    		return data;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    } );

    const _points = [
    	new Vector3(),
    	new Vector3(),
    	new Vector3(),
    	new Vector3(),
    	new Vector3(),
    	new Vector3(),
    	new Vector3(),
    	new Vector3()
    ];

    const _vector$a = new Vector3();

    const _box$3 = new Box3();

    // triangle centered vertices

    const _v0$1 = new Vector3();
    const _v1$3 = new Vector3();
    const _v2$3 = new Vector3();

    // triangle edge vectors

    const _f0 = new Vector3();
    const _f1 = new Vector3();
    const _f2 = new Vector3();

    const _center = new Vector3();
    const _extents = new Vector3();
    const _triangleNormal = new Vector3();
    const _testAxis = new Vector3();

    function Box3( min, max ) {

    	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
    	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

    }


    Object.assign( Box3.prototype, {

    	isBox3: true,

    	set: function ( min, max ) {

    		this.min.copy( min );
    		this.max.copy( max );

    		return this;

    	},

    	setFromArray: function ( array ) {

    		let minX = + Infinity;
    		let minY = + Infinity;
    		let minZ = + Infinity;

    		let maxX = - Infinity;
    		let maxY = - Infinity;
    		let maxZ = - Infinity;

    		for ( let i = 0, l = array.length; i < l; i += 3 ) {

    			const x = array[ i ];
    			const y = array[ i + 1 ];
    			const z = array[ i + 2 ];

    			if ( x < minX ) minX = x;
    			if ( y < minY ) minY = y;
    			if ( z < minZ ) minZ = z;

    			if ( x > maxX ) maxX = x;
    			if ( y > maxY ) maxY = y;
    			if ( z > maxZ ) maxZ = z;

    		}

    		this.min.set( minX, minY, minZ );
    		this.max.set( maxX, maxY, maxZ );

    		return this;

    	},

    	setFromBufferAttribute: function ( attribute ) {

    		let minX = + Infinity;
    		let minY = + Infinity;
    		let minZ = + Infinity;

    		let maxX = - Infinity;
    		let maxY = - Infinity;
    		let maxZ = - Infinity;

    		for ( let i = 0, l = attribute.count; i < l; i ++ ) {

    			const x = attribute.getX( i );
    			const y = attribute.getY( i );
    			const z = attribute.getZ( i );

    			if ( x < minX ) minX = x;
    			if ( y < minY ) minY = y;
    			if ( z < minZ ) minZ = z;

    			if ( x > maxX ) maxX = x;
    			if ( y > maxY ) maxY = y;
    			if ( z > maxZ ) maxZ = z;

    		}

    		this.min.set( minX, minY, minZ );
    		this.max.set( maxX, maxY, maxZ );

    		return this;

    	},

    	setFromPoints: function ( points ) {

    		this.makeEmpty();

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			this.expandByPoint( points[ i ] );

    		}

    		return this;

    	},

    	setFromCenterAndSize: function ( center, size ) {

    		const halfSize = _vector$a.copy( size ).multiplyScalar( 0.5 );

    		this.min.copy( center ).sub( halfSize );
    		this.max.copy( center ).add( halfSize );

    		return this;

    	},

    	setFromObject: function ( object ) {

    		this.makeEmpty();

    		return this.expandByObject( object );

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( box ) {

    		this.min.copy( box.min );
    		this.max.copy( box.max );

    		return this;

    	},

    	makeEmpty: function () {

    		this.min.x = this.min.y = this.min.z = + Infinity;
    		this.max.x = this.max.y = this.max.z = - Infinity;

    		return this;

    	},

    	isEmpty: function () {

    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

    	},

    	getCenter: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box3: .getCenter() target is now required' );
    			target = new Vector3();

    		}

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

    	},

    	getSize: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box3: .getSize() target is now required' );
    			target = new Vector3();

    		}

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

    	},

    	expandByPoint: function ( point ) {

    		this.min.min( point );
    		this.max.max( point );

    		return this;

    	},

    	expandByVector: function ( vector ) {

    		this.min.sub( vector );
    		this.max.add( vector );

    		return this;

    	},

    	expandByScalar: function ( scalar ) {

    		this.min.addScalar( - scalar );
    		this.max.addScalar( scalar );

    		return this;

    	},

    	expandByObject: function ( object ) {

    		// Computes the world-axis-aligned bounding box of an object (including its children),
    		// accounting for both the object's, and children's, world transforms

    		object.updateWorldMatrix( false, false );

    		const geometry = object.geometry;

    		if ( geometry !== undefined ) {

    			if ( geometry.boundingBox === null ) {

    				geometry.computeBoundingBox();

    			}

    			_box$3.copy( geometry.boundingBox );
    			_box$3.applyMatrix4( object.matrixWorld );

    			this.union( _box$3 );

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			this.expandByObject( children[ i ] );

    		}

    		return this;

    	},

    	containsPoint: function ( point ) {

    		return point.x < this.min.x || point.x > this.max.x ||
    			point.y < this.min.y || point.y > this.max.y ||
    			point.z < this.min.z || point.z > this.max.z ? false : true;

    	},

    	containsBox: function ( box ) {

    		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
    			this.min.y <= box.min.y && box.max.y <= this.max.y &&
    			this.min.z <= box.min.z && box.max.z <= this.max.z;

    	},

    	getParameter: function ( point, target ) {

    		// This can potentially have a divide by zero if the box
    		// has a size dimension of 0.

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box3: .getParameter() target is now required' );
    			target = new Vector3();

    		}

    		return target.set(
    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
    			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
    			( point.z - this.min.z ) / ( this.max.z - this.min.z )
    		);

    	},

    	intersectsBox: function ( box ) {

    		// using 6 splitting planes to rule out intersections.
    		return box.max.x < this.min.x || box.min.x > this.max.x ||
    			box.max.y < this.min.y || box.min.y > this.max.y ||
    			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

    	},

    	intersectsSphere: function ( sphere ) {

    		// Find the point on the AABB closest to the sphere center.
    		this.clampPoint( sphere.center, _vector$a );

    		// If that point is inside the sphere, the AABB and sphere intersect.
    		return _vector$a.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

    	},

    	intersectsPlane: function ( plane ) {

    		// We compute the minimum and maximum dot product values. If those values
    		// are on the same side (back or front) of the plane, then there is no intersection.

    		let min, max;

    		if ( plane.normal.x > 0 ) {

    			min = plane.normal.x * this.min.x;
    			max = plane.normal.x * this.max.x;

    		} else {

    			min = plane.normal.x * this.max.x;
    			max = plane.normal.x * this.min.x;

    		}

    		if ( plane.normal.y > 0 ) {

    			min += plane.normal.y * this.min.y;
    			max += plane.normal.y * this.max.y;

    		} else {

    			min += plane.normal.y * this.max.y;
    			max += plane.normal.y * this.min.y;

    		}

    		if ( plane.normal.z > 0 ) {

    			min += plane.normal.z * this.min.z;
    			max += plane.normal.z * this.max.z;

    		} else {

    			min += plane.normal.z * this.max.z;
    			max += plane.normal.z * this.min.z;

    		}

    		return ( min <= - plane.constant && max >= - plane.constant );

    	},

    	intersectsTriangle: function ( triangle ) {

    		if ( this.isEmpty() ) {

    			return false;

    		}

    		// compute box center and extents
    		this.getCenter( _center );
    		_extents.subVectors( this.max, _center );

    		// translate triangle to aabb origin
    		_v0$1.subVectors( triangle.a, _center );
    		_v1$3.subVectors( triangle.b, _center );
    		_v2$3.subVectors( triangle.c, _center );

    		// compute edge vectors for triangle
    		_f0.subVectors( _v1$3, _v0$1 );
    		_f1.subVectors( _v2$3, _v1$3 );
    		_f2.subVectors( _v0$1, _v2$3 );

    		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
    		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
    		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
    		let axes = [
    			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
    			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
    			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
    		];
    		if ( ! satForAxes( axes, _v0$1, _v1$3, _v2$3, _extents ) ) {

    			return false;

    		}

    		// test 3 face normals from the aabb
    		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
    		if ( ! satForAxes( axes, _v0$1, _v1$3, _v2$3, _extents ) ) {

    			return false;

    		}

    		// finally testing the face normal of the triangle
    		// use already existing triangle edge vectors here
    		_triangleNormal.crossVectors( _f0, _f1 );
    		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

    		return satForAxes( axes, _v0$1, _v1$3, _v2$3, _extents );

    	},

    	clampPoint: function ( point, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
    			target = new Vector3();

    		}

    		return target.copy( point ).clamp( this.min, this.max );

    	},

    	distanceToPoint: function ( point ) {

    		const clampedPoint = _vector$a.copy( point ).clamp( this.min, this.max );

    		return clampedPoint.sub( point ).length();

    	},

    	getBoundingSphere: function ( target ) {

    		if ( target === undefined ) {

    			console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
    			//target = new Sphere(); // removed to avoid cyclic dependency

    		}

    		this.getCenter( target.center );

    		target.radius = this.getSize( _vector$a ).length() * 0.5;

    		return target;

    	},

    	intersect: function ( box ) {

    		this.min.max( box.min );
    		this.max.min( box.max );

    		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
    		if ( this.isEmpty() ) this.makeEmpty();

    		return this;

    	},

    	union: function ( box ) {

    		this.min.min( box.min );
    		this.max.max( box.max );

    		return this;

    	},

    	applyMatrix4: function ( matrix ) {

    		// transform of empty box is an empty box.
    		if ( this.isEmpty() ) return this;

    		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
    		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
    		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
    		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
    		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
    		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
    		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
    		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
    		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

    		this.setFromPoints( _points );

    		return this;

    	},

    	translate: function ( offset ) {

    		this.min.add( offset );
    		this.max.add( offset );

    		return this;

    	},

    	equals: function ( box ) {

    		return box.min.equals( this.min ) && box.max.equals( this.max );

    	}

    } );

    function satForAxes( axes, v0, v1, v2, extents ) {

    	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

    		_testAxis.fromArray( axes, i );
    		// project the aabb onto the seperating axis
    		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
    		// project all 3 vertices of the triangle onto the seperating axis
    		const p0 = v0.dot( _testAxis );
    		const p1 = v1.dot( _testAxis );
    		const p2 = v2.dot( _testAxis );
    		// actual test, basically see if either of the most extreme of the triangle points intersects r
    		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

    			// points of the projected triangle are outside the projected half-length of the aabb
    			// the axis is seperating and we can exit
    			return false;

    		}

    	}

    	return true;

    }

    const _box$2 = new Box3();

    function Sphere( center, radius ) {

    	this.center = ( center !== undefined ) ? center : new Vector3();
    	this.radius = ( radius !== undefined ) ? radius : - 1;

    }

    Object.assign( Sphere.prototype, {

    	set: function ( center, radius ) {

    		this.center.copy( center );
    		this.radius = radius;

    		return this;

    	},

    	setFromPoints: function ( points, optionalCenter ) {

    		const center = this.center;

    		if ( optionalCenter !== undefined ) {

    			center.copy( optionalCenter );

    		} else {

    			_box$2.setFromPoints( points ).getCenter( center );

    		}

    		let maxRadiusSq = 0;

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

    		}

    		this.radius = Math.sqrt( maxRadiusSq );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( sphere ) {

    		this.center.copy( sphere.center );
    		this.radius = sphere.radius;

    		return this;

    	},

    	isEmpty: function () {

    		return ( this.radius < 0 );

    	},

    	makeEmpty: function () {

    		this.center.set( 0, 0, 0 );
    		this.radius = - 1;

    		return this;

    	},

    	containsPoint: function ( point ) {

    		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

    	},

    	distanceToPoint: function ( point ) {

    		return ( point.distanceTo( this.center ) - this.radius );

    	},

    	intersectsSphere: function ( sphere ) {

    		const radiusSum = this.radius + sphere.radius;

    		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

    	},

    	intersectsBox: function ( box ) {

    		return box.intersectsSphere( this );

    	},

    	intersectsPlane: function ( plane ) {

    		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

    	},

    	clampPoint: function ( point, target ) {

    		const deltaLengthSq = this.center.distanceToSquared( point );

    		if ( target === undefined ) {

    			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
    			target = new Vector3();

    		}

    		target.copy( point );

    		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

    			target.sub( this.center ).normalize();
    			target.multiplyScalar( this.radius ).add( this.center );

    		}

    		return target;

    	},

    	getBoundingBox: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
    			target = new Box3();

    		}

    		if ( this.isEmpty() ) {

    			// Empty sphere produces empty bounding box
    			target.makeEmpty();
    			return target;

    		}

    		target.set( this.center, this.center );
    		target.expandByScalar( this.radius );

    		return target;

    	},

    	applyMatrix4: function ( matrix ) {

    		this.center.applyMatrix4( matrix );
    		this.radius = this.radius * matrix.getMaxScaleOnAxis();

    		return this;

    	},

    	translate: function ( offset ) {

    		this.center.add( offset );

    		return this;

    	},

    	equals: function ( sphere ) {

    		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

    	}

    } );

    const _vector$9 = new Vector3();
    const _segCenter = new Vector3();
    const _segDir = new Vector3();
    const _diff = new Vector3();

    const _edge1 = new Vector3();
    const _edge2 = new Vector3();
    const _normal = new Vector3();

    function Ray( origin, direction ) {

    	this.origin = ( origin !== undefined ) ? origin : new Vector3();
    	this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );

    }

    Object.assign( Ray.prototype, {

    	set: function ( origin, direction ) {

    		this.origin.copy( origin );
    		this.direction.copy( direction );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( ray ) {

    		this.origin.copy( ray.origin );
    		this.direction.copy( ray.direction );

    		return this;

    	},

    	at: function ( t, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Ray: .at() target is now required' );
    			target = new Vector3();

    		}

    		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

    	},

    	lookAt: function ( v ) {

    		this.direction.copy( v ).sub( this.origin ).normalize();

    		return this;

    	},

    	recast: function ( t ) {

    		this.origin.copy( this.at( t, _vector$9 ) );

    		return this;

    	},

    	closestPointToPoint: function ( point, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
    			target = new Vector3();

    		}

    		target.subVectors( point, this.origin );

    		const directionDistance = target.dot( this.direction );

    		if ( directionDistance < 0 ) {

    			return target.copy( this.origin );

    		}

    		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

    	},

    	distanceToPoint: function ( point ) {

    		return Math.sqrt( this.distanceSqToPoint( point ) );

    	},

    	distanceSqToPoint: function ( point ) {

    		const directionDistance = _vector$9.subVectors( point, this.origin ).dot( this.direction );

    		// point behind the ray

    		if ( directionDistance < 0 ) {

    			return this.origin.distanceToSquared( point );

    		}

    		_vector$9.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

    		return _vector$9.distanceToSquared( point );

    	},

    	distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

    		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
    		// It returns the min distance between the ray and the segment
    		// defined by v0 and v1
    		// It can also set two optional targets :
    		// - The closest point on the ray
    		// - The closest point on the segment

    		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
    		_segDir.copy( v1 ).sub( v0 ).normalize();
    		_diff.copy( this.origin ).sub( _segCenter );

    		const segExtent = v0.distanceTo( v1 ) * 0.5;
    		const a01 = - this.direction.dot( _segDir );
    		const b0 = _diff.dot( this.direction );
    		const b1 = - _diff.dot( _segDir );
    		const c = _diff.lengthSq();
    		const det = Math.abs( 1 - a01 * a01 );
    		let s0, s1, sqrDist, extDet;

    		if ( det > 0 ) {

    			// The ray and segment are not parallel.

    			s0 = a01 * b1 - b0;
    			s1 = a01 * b0 - b1;
    			extDet = segExtent * det;

    			if ( s0 >= 0 ) {

    				if ( s1 >= - extDet ) {

    					if ( s1 <= extDet ) {

    						// region 0
    						// Minimum at interior points of ray and segment.

    						const invDet = 1 / det;
    						s0 *= invDet;
    						s1 *= invDet;
    						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

    					} else {

    						// region 1

    						s1 = segExtent;
    						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    					}

    				} else {

    					// region 5

    					s1 = - segExtent;
    					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			} else {

    				if ( s1 <= - extDet ) {

    					// region 4

    					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				} else if ( s1 <= extDet ) {

    					// region 3

    					s0 = 0;
    					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

    				} else {

    					// region 2

    					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			}

    		} else {

    			// Ray and segment are parallel.

    			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
    			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    		}

    		if ( optionalPointOnRay ) {

    			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

    		}

    		if ( optionalPointOnSegment ) {

    			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

    		}

    		return sqrDist;

    	},

    	intersectSphere: function ( sphere, target ) {

    		_vector$9.subVectors( sphere.center, this.origin );
    		const tca = _vector$9.dot( this.direction );
    		const d2 = _vector$9.dot( _vector$9 ) - tca * tca;
    		const radius2 = sphere.radius * sphere.radius;

    		if ( d2 > radius2 ) return null;

    		const thc = Math.sqrt( radius2 - d2 );

    		// t0 = first intersect point - entrance on front of sphere
    		const t0 = tca - thc;

    		// t1 = second intersect point - exit point on back of sphere
    		const t1 = tca + thc;

    		// test to see if both t0 and t1 are behind the ray - if so, return null
    		if ( t0 < 0 && t1 < 0 ) return null;

    		// test to see if t0 is behind the ray:
    		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
    		// in order to always return an intersect point that is in front of the ray.
    		if ( t0 < 0 ) return this.at( t1, target );

    		// else t0 is in front of the ray, so return the first collision point scaled by t0
    		return this.at( t0, target );

    	},

    	intersectsSphere: function ( sphere ) {

    		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

    	},

    	distanceToPlane: function ( plane ) {

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( plane.distanceToPoint( this.origin ) === 0 ) {

    				return 0;

    			}

    			// Null is preferable to undefined since undefined means.... it is undefined

    			return null;

    		}

    		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

    		// Return if the ray never intersects the plane

    		return t >= 0 ? t : null;

    	},

    	intersectPlane: function ( plane, target ) {

    		const t = this.distanceToPlane( plane );

    		if ( t === null ) {

    			return null;

    		}

    		return this.at( t, target );

    	},

    	intersectsPlane: function ( plane ) {

    		// check if the ray lies on the plane first

    		const distToPoint = plane.distanceToPoint( this.origin );

    		if ( distToPoint === 0 ) {

    			return true;

    		}

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator * distToPoint < 0 ) {

    			return true;

    		}

    		// ray origin is behind the plane (and is pointing behind it)

    		return false;

    	},

    	intersectBox: function ( box, target ) {

    		let tmin, tmax, tymin, tymax, tzmin, tzmax;

    		const invdirx = 1 / this.direction.x,
    			invdiry = 1 / this.direction.y,
    			invdirz = 1 / this.direction.z;

    		const origin = this.origin;

    		if ( invdirx >= 0 ) {

    			tmin = ( box.min.x - origin.x ) * invdirx;
    			tmax = ( box.max.x - origin.x ) * invdirx;

    		} else {

    			tmin = ( box.max.x - origin.x ) * invdirx;
    			tmax = ( box.min.x - origin.x ) * invdirx;

    		}

    		if ( invdiry >= 0 ) {

    			tymin = ( box.min.y - origin.y ) * invdiry;
    			tymax = ( box.max.y - origin.y ) * invdiry;

    		} else {

    			tymin = ( box.max.y - origin.y ) * invdiry;
    			tymax = ( box.min.y - origin.y ) * invdiry;

    		}

    		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

    		// These lines also handle the case where tmin or tmax is NaN
    		// (result of 0 * Infinity). x !== x returns true if x is NaN

    		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

    		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

    		if ( invdirz >= 0 ) {

    			tzmin = ( box.min.z - origin.z ) * invdirz;
    			tzmax = ( box.max.z - origin.z ) * invdirz;

    		} else {

    			tzmin = ( box.max.z - origin.z ) * invdirz;
    			tzmax = ( box.min.z - origin.z ) * invdirz;

    		}

    		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

    		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

    		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

    		//return point closest to the ray (positive side)

    		if ( tmax < 0 ) return null;

    		return this.at( tmin >= 0 ? tmin : tmax, target );

    	},

    	intersectsBox: function ( box ) {

    		return this.intersectBox( box, _vector$9 ) !== null;

    	},

    	intersectTriangle: function ( a, b, c, backfaceCulling, target ) {

    		// Compute the offset origin, edges, and normal.

    		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

    		_edge1.subVectors( b, a );
    		_edge2.subVectors( c, a );
    		_normal.crossVectors( _edge1, _edge2 );

    		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
    		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
    		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
    		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
    		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
    		let DdN = this.direction.dot( _normal );
    		let sign;

    		if ( DdN > 0 ) {

    			if ( backfaceCulling ) return null;
    			sign = 1;

    		} else if ( DdN < 0 ) {

    			sign = - 1;
    			DdN = - DdN;

    		} else {

    			return null;

    		}

    		_diff.subVectors( this.origin, a );
    		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

    		// b1 < 0, no intersection
    		if ( DdQxE2 < 0 ) {

    			return null;

    		}

    		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

    		// b2 < 0, no intersection
    		if ( DdE1xQ < 0 ) {

    			return null;

    		}

    		// b1+b2 > 1, no intersection
    		if ( DdQxE2 + DdE1xQ > DdN ) {

    			return null;

    		}

    		// Line intersects triangle, check if ray does.
    		const QdN = - sign * _diff.dot( _normal );

    		// t < 0, no intersection
    		if ( QdN < 0 ) {

    			return null;

    		}

    		// Ray intersects triangle.
    		return this.at( QdN / DdN, target );

    	},

    	applyMatrix4: function ( matrix4 ) {

    		this.origin.applyMatrix4( matrix4 );
    		this.direction.transformDirection( matrix4 );

    		return this;

    	},

    	equals: function ( ray ) {

    		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

    	}

    } );

    const _vector1 = new Vector3();
    const _vector2$1 = new Vector3();
    const _normalMatrix = new Matrix3();

    function Plane( normal, constant ) {

    	// normal is assumed to be normalized

    	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
    	this.constant = ( constant !== undefined ) ? constant : 0;

    }

    Object.assign( Plane.prototype, {

    	isPlane: true,

    	set: function ( normal, constant ) {

    		this.normal.copy( normal );
    		this.constant = constant;

    		return this;

    	},

    	setComponents: function ( x, y, z, w ) {

    		this.normal.set( x, y, z );
    		this.constant = w;

    		return this;

    	},

    	setFromNormalAndCoplanarPoint: function ( normal, point ) {

    		this.normal.copy( normal );
    		this.constant = - point.dot( this.normal );

    		return this;

    	},

    	setFromCoplanarPoints: function ( a, b, c ) {

    		const normal = _vector1.subVectors( c, b ).cross( _vector2$1.subVectors( a, b ) ).normalize();

    		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

    		this.setFromNormalAndCoplanarPoint( normal, a );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( plane ) {

    		this.normal.copy( plane.normal );
    		this.constant = plane.constant;

    		return this;

    	},

    	normalize: function () {

    		// Note: will lead to a divide by zero if the plane is invalid.

    		const inverseNormalLength = 1.0 / this.normal.length();
    		this.normal.multiplyScalar( inverseNormalLength );
    		this.constant *= inverseNormalLength;

    		return this;

    	},

    	negate: function () {

    		this.constant *= - 1;
    		this.normal.negate();

    		return this;

    	},

    	distanceToPoint: function ( point ) {

    		return this.normal.dot( point ) + this.constant;

    	},

    	distanceToSphere: function ( sphere ) {

    		return this.distanceToPoint( sphere.center ) - sphere.radius;

    	},

    	projectPoint: function ( point, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Plane: .projectPoint() target is now required' );
    			target = new Vector3();

    		}

    		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

    	},

    	intersectLine: function ( line, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Plane: .intersectLine() target is now required' );
    			target = new Vector3();

    		}

    		const direction = line.delta( _vector1 );

    		const denominator = this.normal.dot( direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( this.distanceToPoint( line.start ) === 0 ) {

    				return target.copy( line.start );

    			}

    			// Unsure if this is the correct method to handle this case.
    			return undefined;

    		}

    		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

    		if ( t < 0 || t > 1 ) {

    			return undefined;

    		}

    		return target.copy( direction ).multiplyScalar( t ).add( line.start );

    	},

    	intersectsLine: function ( line ) {

    		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

    		const startSign = this.distanceToPoint( line.start );
    		const endSign = this.distanceToPoint( line.end );

    		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

    	},

    	intersectsBox: function ( box ) {

    		return box.intersectsPlane( this );

    	},

    	intersectsSphere: function ( sphere ) {

    		return sphere.intersectsPlane( this );

    	},

    	coplanarPoint: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
    			target = new Vector3();

    		}

    		return target.copy( this.normal ).multiplyScalar( - this.constant );

    	},

    	applyMatrix4: function ( matrix, optionalNormalMatrix ) {

    		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

    		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

    		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

    		this.constant = - referencePoint.dot( normal );

    		return this;

    	},

    	translate: function ( offset ) {

    		this.constant -= offset.dot( this.normal );

    		return this;

    	},

    	equals: function ( plane ) {

    		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

    	}

    } );

    const _v0 = new Vector3();
    const _v1$2 = new Vector3();
    const _v2$2 = new Vector3();
    const _v3$1 = new Vector3();

    const _vab = new Vector3();
    const _vac = new Vector3();
    const _vbc = new Vector3();
    const _vap = new Vector3();
    const _vbp = new Vector3();
    const _vcp = new Vector3();

    function Triangle( a, b, c ) {

    	this.a = ( a !== undefined ) ? a : new Vector3();
    	this.b = ( b !== undefined ) ? b : new Vector3();
    	this.c = ( c !== undefined ) ? c : new Vector3();

    }

    Object.assign( Triangle, {

    	getNormal: function ( a, b, c, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Triangle: .getNormal() target is now required' );
    			target = new Vector3();

    		}

    		target.subVectors( c, b );
    		_v0.subVectors( a, b );
    		target.cross( _v0 );

    		const targetLengthSq = target.lengthSq();
    		if ( targetLengthSq > 0 ) {

    			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

    		}

    		return target.set( 0, 0, 0 );

    	},

    	// static/instance method to calculate barycentric coordinates
    	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    	getBarycoord: function ( point, a, b, c, target ) {

    		_v0.subVectors( c, a );
    		_v1$2.subVectors( b, a );
    		_v2$2.subVectors( point, a );

    		const dot00 = _v0.dot( _v0 );
    		const dot01 = _v0.dot( _v1$2 );
    		const dot02 = _v0.dot( _v2$2 );
    		const dot11 = _v1$2.dot( _v1$2 );
    		const dot12 = _v1$2.dot( _v2$2 );

    		const denom = ( dot00 * dot11 - dot01 * dot01 );

    		if ( target === undefined ) {

    			console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
    			target = new Vector3();

    		}

    		// collinear or singular triangle
    		if ( denom === 0 ) {

    			// arbitrary location outside of triangle?
    			// not sure if this is the best idea, maybe should be returning undefined
    			return target.set( - 2, - 1, - 1 );

    		}

    		const invDenom = 1 / denom;
    		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
    		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

    		// barycentric coordinates must always sum to 1
    		return target.set( 1 - u - v, v, u );

    	},

    	containsPoint: function ( point, a, b, c ) {

    		Triangle.getBarycoord( point, a, b, c, _v3$1 );

    		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );

    	},

    	getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {

    		this.getBarycoord( point, p1, p2, p3, _v3$1 );

    		target.set( 0, 0 );
    		target.addScaledVector( uv1, _v3$1.x );
    		target.addScaledVector( uv2, _v3$1.y );
    		target.addScaledVector( uv3, _v3$1.z );

    		return target;

    	},

    	isFrontFacing: function ( a, b, c, direction ) {

    		_v0.subVectors( c, b );
    		_v1$2.subVectors( a, b );

    		// strictly front facing
    		return ( _v0.cross( _v1$2 ).dot( direction ) < 0 ) ? true : false;

    	}

    } );

    Object.assign( Triangle.prototype, {

    	set: function ( a, b, c ) {

    		this.a.copy( a );
    		this.b.copy( b );
    		this.c.copy( c );

    		return this;

    	},

    	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

    		this.a.copy( points[ i0 ] );
    		this.b.copy( points[ i1 ] );
    		this.c.copy( points[ i2 ] );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( triangle ) {

    		this.a.copy( triangle.a );
    		this.b.copy( triangle.b );
    		this.c.copy( triangle.c );

    		return this;

    	},

    	getArea: function () {

    		_v0.subVectors( this.c, this.b );
    		_v1$2.subVectors( this.a, this.b );

    		return _v0.cross( _v1$2 ).length() * 0.5;

    	},

    	getMidpoint: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
    			target = new Vector3();

    		}

    		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

    	},

    	getNormal: function ( target ) {

    		return Triangle.getNormal( this.a, this.b, this.c, target );

    	},

    	getPlane: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
    			target = new Plane();

    		}

    		return target.setFromCoplanarPoints( this.a, this.b, this.c );

    	},

    	getBarycoord: function ( point, target ) {

    		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

    	},

    	getUV: function ( point, uv1, uv2, uv3, target ) {

    		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

    	},

    	containsPoint: function ( point ) {

    		return Triangle.containsPoint( point, this.a, this.b, this.c );

    	},

    	isFrontFacing: function ( direction ) {

    		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

    	},

    	intersectsBox: function ( box ) {

    		return box.intersectsTriangle( this );

    	},

    	closestPointToPoint: function ( p, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
    			target = new Vector3();

    		}

    		const a = this.a, b = this.b, c = this.c;
    		let v, w;

    		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
    		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
    		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
    		// basically, we're distinguishing which of the voronoi regions of the triangle
    		// the point lies in with the minimum amount of redundant computation.

    		_vab.subVectors( b, a );
    		_vac.subVectors( c, a );
    		_vap.subVectors( p, a );
    		const d1 = _vab.dot( _vap );
    		const d2 = _vac.dot( _vap );
    		if ( d1 <= 0 && d2 <= 0 ) {

    			// vertex region of A; barycentric coords (1, 0, 0)
    			return target.copy( a );

    		}

    		_vbp.subVectors( p, b );
    		const d3 = _vab.dot( _vbp );
    		const d4 = _vac.dot( _vbp );
    		if ( d3 >= 0 && d4 <= d3 ) {

    			// vertex region of B; barycentric coords (0, 1, 0)
    			return target.copy( b );

    		}

    		const vc = d1 * d4 - d3 * d2;
    		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

    			v = d1 / ( d1 - d3 );
    			// edge region of AB; barycentric coords (1-v, v, 0)
    			return target.copy( a ).addScaledVector( _vab, v );

    		}

    		_vcp.subVectors( p, c );
    		const d5 = _vab.dot( _vcp );
    		const d6 = _vac.dot( _vcp );
    		if ( d6 >= 0 && d5 <= d6 ) {

    			// vertex region of C; barycentric coords (0, 0, 1)
    			return target.copy( c );

    		}

    		const vb = d5 * d2 - d1 * d6;
    		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

    			w = d2 / ( d2 - d6 );
    			// edge region of AC; barycentric coords (1-w, 0, w)
    			return target.copy( a ).addScaledVector( _vac, w );

    		}

    		const va = d3 * d6 - d5 * d4;
    		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

    			_vbc.subVectors( c, b );
    			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
    			// edge region of BC; barycentric coords (0, 1-w, w)
    			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

    		}

    		// face region
    		const denom = 1 / ( va + vb + vc );
    		// u = va * denom
    		v = vb * denom;
    		w = vc * denom;

    		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

    	},

    	equals: function ( triangle ) {

    		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

    	}

    } );

    const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
    	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
    	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
    	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
    	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
    	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
    	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
    	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
    	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
    	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
    	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
    	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
    	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
    	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
    	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
    	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
    	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
    	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
    	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
    	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
    	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
    	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
    	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
    	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

    const _hslA = { h: 0, s: 0, l: 0 };
    const _hslB = { h: 0, s: 0, l: 0 };

    function Color( r, g, b ) {

    	if ( g === undefined && b === undefined ) {

    		// r is THREE.Color, hex or string
    		return this.set( r );

    	}

    	return this.setRGB( r, g, b );

    }

    function hue2rgb( p, q, t ) {

    	if ( t < 0 ) t += 1;
    	if ( t > 1 ) t -= 1;
    	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
    	if ( t < 1 / 2 ) return q;
    	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
    	return p;

    }

    function SRGBToLinear( c ) {

    	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

    }

    function LinearToSRGB( c ) {

    	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

    }

    Object.assign( Color.prototype, {

    	isColor: true,

    	r: 1, g: 1, b: 1,

    	set: function ( value ) {

    		if ( value && value.isColor ) {

    			this.copy( value );

    		} else if ( typeof value === 'number' ) {

    			this.setHex( value );

    		} else if ( typeof value === 'string' ) {

    			this.setStyle( value );

    		}

    		return this;

    	},

    	setScalar: function ( scalar ) {

    		this.r = scalar;
    		this.g = scalar;
    		this.b = scalar;

    		return this;

    	},

    	setHex: function ( hex ) {

    		hex = Math.floor( hex );

    		this.r = ( hex >> 16 & 255 ) / 255;
    		this.g = ( hex >> 8 & 255 ) / 255;
    		this.b = ( hex & 255 ) / 255;

    		return this;

    	},

    	setRGB: function ( r, g, b ) {

    		this.r = r;
    		this.g = g;
    		this.b = b;

    		return this;

    	},

    	setHSL: function ( h, s, l ) {

    		// h,s,l ranges are in 0.0 - 1.0
    		h = MathUtils.euclideanModulo( h, 1 );
    		s = MathUtils.clamp( s, 0, 1 );
    		l = MathUtils.clamp( l, 0, 1 );

    		if ( s === 0 ) {

    			this.r = this.g = this.b = l;

    		} else {

    			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
    			const q = ( 2 * l ) - p;

    			this.r = hue2rgb( q, p, h + 1 / 3 );
    			this.g = hue2rgb( q, p, h );
    			this.b = hue2rgb( q, p, h - 1 / 3 );

    		}

    		return this;

    	},

    	setStyle: function ( style ) {

    		function handleAlpha( string ) {

    			if ( string === undefined ) return;

    			if ( parseFloat( string ) < 1 ) {

    				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

    			}

    		}


    		let m;

    		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

    			// rgb / hsl

    			let color;
    			const name = m[ 1 ];
    			const components = m[ 2 ];

    			switch ( name ) {

    				case 'rgb':
    				case 'rgba':

    					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

    						// rgb(255,0,0) rgba(255,0,0,0.5)
    						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
    						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
    						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

    						handleAlpha( color[ 5 ] );

    						return this;

    					}

    					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

    						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
    						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
    						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
    						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

    						handleAlpha( color[ 5 ] );

    						return this;

    					}

    					break;

    				case 'hsl':
    				case 'hsla':

    					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

    						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
    						const h = parseFloat( color[ 1 ] ) / 360;
    						const s = parseInt( color[ 2 ], 10 ) / 100;
    						const l = parseInt( color[ 3 ], 10 ) / 100;

    						handleAlpha( color[ 5 ] );

    						return this.setHSL( h, s, l );

    					}

    					break;

    			}

    		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

    			// hex color

    			const hex = m[ 1 ];
    			const size = hex.length;

    			if ( size === 3 ) {

    				// #ff0
    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
    				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
    				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

    				return this;

    			} else if ( size === 6 ) {

    				// #ff0000
    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
    				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
    				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

    				return this;

    			}

    		}

    		if ( style && style.length > 0 ) {

    			return this.setColorName( style );

    		}

    		return this;

    	},

    	setColorName: function ( style ) {

    		// color keywords
    		const hex = _colorKeywords[ style ];

    		if ( hex !== undefined ) {

    			// red
    			this.setHex( hex );

    		} else {

    			// unknown color
    			console.warn( 'THREE.Color: Unknown color ' + style );

    		}

    		return this;

    	},

    	clone: function () {

    		return new this.constructor( this.r, this.g, this.b );

    	},

    	copy: function ( color ) {

    		this.r = color.r;
    		this.g = color.g;
    		this.b = color.b;

    		return this;

    	},

    	copyGammaToLinear: function ( color, gammaFactor ) {

    		if ( gammaFactor === undefined ) gammaFactor = 2.0;

    		this.r = Math.pow( color.r, gammaFactor );
    		this.g = Math.pow( color.g, gammaFactor );
    		this.b = Math.pow( color.b, gammaFactor );

    		return this;

    	},

    	copyLinearToGamma: function ( color, gammaFactor ) {

    		if ( gammaFactor === undefined ) gammaFactor = 2.0;

    		const safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

    		this.r = Math.pow( color.r, safeInverse );
    		this.g = Math.pow( color.g, safeInverse );
    		this.b = Math.pow( color.b, safeInverse );

    		return this;

    	},

    	convertGammaToLinear: function ( gammaFactor ) {

    		this.copyGammaToLinear( this, gammaFactor );

    		return this;

    	},

    	convertLinearToGamma: function ( gammaFactor ) {

    		this.copyLinearToGamma( this, gammaFactor );

    		return this;

    	},

    	copySRGBToLinear: function ( color ) {

    		this.r = SRGBToLinear( color.r );
    		this.g = SRGBToLinear( color.g );
    		this.b = SRGBToLinear( color.b );

    		return this;

    	},

    	copyLinearToSRGB: function ( color ) {

    		this.r = LinearToSRGB( color.r );
    		this.g = LinearToSRGB( color.g );
    		this.b = LinearToSRGB( color.b );

    		return this;

    	},

    	convertSRGBToLinear: function () {

    		this.copySRGBToLinear( this );

    		return this;

    	},

    	convertLinearToSRGB: function () {

    		this.copyLinearToSRGB( this );

    		return this;

    	},

    	getHex: function () {

    		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

    	},

    	getHexString: function () {

    		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

    	},

    	getHSL: function ( target ) {

    		// h,s,l ranges are in 0.0 - 1.0

    		if ( target === undefined ) {

    			console.warn( 'THREE.Color: .getHSL() target is now required' );
    			target = { h: 0, s: 0, l: 0 };

    		}

    		const r = this.r, g = this.g, b = this.b;

    		const max = Math.max( r, g, b );
    		const min = Math.min( r, g, b );

    		let hue, saturation;
    		const lightness = ( min + max ) / 2.0;

    		if ( min === max ) {

    			hue = 0;
    			saturation = 0;

    		} else {

    			const delta = max - min;

    			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

    			switch ( max ) {

    				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
    				case g: hue = ( b - r ) / delta + 2; break;
    				case b: hue = ( r - g ) / delta + 4; break;

    			}

    			hue /= 6;

    		}

    		target.h = hue;
    		target.s = saturation;
    		target.l = lightness;

    		return target;

    	},

    	getStyle: function () {

    		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

    	},

    	offsetHSL: function ( h, s, l ) {

    		this.getHSL( _hslA );

    		_hslA.h += h; _hslA.s += s; _hslA.l += l;

    		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

    		return this;

    	},

    	add: function ( color ) {

    		this.r += color.r;
    		this.g += color.g;
    		this.b += color.b;

    		return this;

    	},

    	addColors: function ( color1, color2 ) {

    		this.r = color1.r + color2.r;
    		this.g = color1.g + color2.g;
    		this.b = color1.b + color2.b;

    		return this;

    	},

    	addScalar: function ( s ) {

    		this.r += s;
    		this.g += s;
    		this.b += s;

    		return this;

    	},

    	sub: function ( color ) {

    		this.r = Math.max( 0, this.r - color.r );
    		this.g = Math.max( 0, this.g - color.g );
    		this.b = Math.max( 0, this.b - color.b );

    		return this;

    	},

    	multiply: function ( color ) {

    		this.r *= color.r;
    		this.g *= color.g;
    		this.b *= color.b;

    		return this;

    	},

    	multiplyScalar: function ( s ) {

    		this.r *= s;
    		this.g *= s;
    		this.b *= s;

    		return this;

    	},

    	lerp: function ( color, alpha ) {

    		this.r += ( color.r - this.r ) * alpha;
    		this.g += ( color.g - this.g ) * alpha;
    		this.b += ( color.b - this.b ) * alpha;

    		return this;

    	},

    	lerpHSL: function ( color, alpha ) {

    		this.getHSL( _hslA );
    		color.getHSL( _hslB );

    		const h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );
    		const s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );
    		const l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );

    		this.setHSL( h, s, l );

    		return this;

    	},

    	equals: function ( c ) {

    		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.r = array[ offset ];
    		this.g = array[ offset + 1 ];
    		this.b = array[ offset + 2 ];

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		array[ offset ] = this.r;
    		array[ offset + 1 ] = this.g;
    		array[ offset + 2 ] = this.b;

    		return array;

    	},

    	fromBufferAttribute: function ( attribute, index ) {

    		this.r = attribute.getX( index );
    		this.g = attribute.getY( index );
    		this.b = attribute.getZ( index );

    		if ( attribute.normalized === true ) {

    			// assuming Uint8Array

    			this.r /= 255;
    			this.g /= 255;
    			this.b /= 255;

    		}

    		return this;

    	},

    	toJSON: function () {

    		return this.getHex();

    	}

    } );

    Color.NAMES = _colorKeywords;

    function Face3( a, b, c, normal, color, materialIndex ) {

    	this.a = a;
    	this.b = b;
    	this.c = c;

    	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
    	this.vertexNormals = Array.isArray( normal ) ? normal : [];

    	this.color = ( color && color.isColor ) ? color : new Color();
    	this.vertexColors = Array.isArray( color ) ? color : [];

    	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

    }

    Object.assign( Face3.prototype, {

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( source ) {

    		this.a = source.a;
    		this.b = source.b;
    		this.c = source.c;

    		this.normal.copy( source.normal );
    		this.color.copy( source.color );

    		this.materialIndex = source.materialIndex;

    		for ( let i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

    			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

    		}

    		for ( let i = 0, il = source.vertexColors.length; i < il; i ++ ) {

    			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

    		}

    		return this;

    	}

    } );

    let materialId = 0;

    function Material() {

    	Object.defineProperty( this, 'id', { value: materialId ++ } );

    	this.uuid = MathUtils.generateUUID();

    	this.name = '';
    	this.type = 'Material';

    	this.fog = true;

    	this.blending = NormalBlending;
    	this.side = FrontSide;
    	this.flatShading = false;
    	this.vertexColors = false;

    	this.opacity = 1;
    	this.transparent = false;

    	this.blendSrc = SrcAlphaFactor;
    	this.blendDst = OneMinusSrcAlphaFactor;
    	this.blendEquation = AddEquation;
    	this.blendSrcAlpha = null;
    	this.blendDstAlpha = null;
    	this.blendEquationAlpha = null;

    	this.depthFunc = LessEqualDepth;
    	this.depthTest = true;
    	this.depthWrite = true;

    	this.stencilWriteMask = 0xff;
    	this.stencilFunc = AlwaysStencilFunc;
    	this.stencilRef = 0;
    	this.stencilFuncMask = 0xff;
    	this.stencilFail = KeepStencilOp;
    	this.stencilZFail = KeepStencilOp;
    	this.stencilZPass = KeepStencilOp;
    	this.stencilWrite = false;

    	this.clippingPlanes = null;
    	this.clipIntersection = false;
    	this.clipShadows = false;

    	this.shadowSide = null;

    	this.colorWrite = true;

    	this.precision = null; // override the renderer's default precision for this material

    	this.polygonOffset = false;
    	this.polygonOffsetFactor = 0;
    	this.polygonOffsetUnits = 0;

    	this.dithering = false;

    	this.alphaTest = 0;
    	this.premultipliedAlpha = false;

    	this.visible = true;

    	this.toneMapped = true;

    	this.userData = {};

    	this.version = 0;

    }

    Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: Material,

    	isMaterial: true,

    	onBeforeCompile: function ( /* shaderobject, renderer */ ) {},

    	customProgramCacheKey: function () {

    		return this.onBeforeCompile.toString();

    	},

    	setValues: function ( values ) {

    		if ( values === undefined ) return;

    		for ( const key in values ) {

    			const newValue = values[ key ];

    			if ( newValue === undefined ) {

    				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
    				continue;

    			}

    			// for backward compatability if shading is set in the constructor
    			if ( key === 'shading' ) {

    				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
    				this.flatShading = ( newValue === FlatShading ) ? true : false;
    				continue;

    			}

    			const currentValue = this[ key ];

    			if ( currentValue === undefined ) {

    				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
    				continue;

    			}

    			if ( currentValue && currentValue.isColor ) {

    				currentValue.set( newValue );

    			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

    				currentValue.copy( newValue );

    			} else {

    				this[ key ] = newValue;

    			}

    		}

    	},

    	toJSON: function ( meta ) {

    		const isRoot = ( meta === undefined || typeof meta === 'string' );

    		if ( isRoot ) {

    			meta = {
    				textures: {},
    				images: {}
    			};

    		}

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'Material',
    				generator: 'Material.toJSON'
    			}
    		};

    		// standard Material serialization
    		data.uuid = this.uuid;
    		data.type = this.type;

    		if ( this.name !== '' ) data.name = this.name;

    		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

    		if ( this.roughness !== undefined ) data.roughness = this.roughness;
    		if ( this.metalness !== undefined ) data.metalness = this.metalness;

    		if ( this.sheen && this.sheen.isColor ) data.sheen = this.sheen.getHex();
    		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
    		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

    		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
    		if ( this.shininess !== undefined ) data.shininess = this.shininess;
    		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
    		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

    		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

    			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

    			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

    			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
    			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

    		}

    		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
    		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
    		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
    		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;

    		if ( this.aoMap && this.aoMap.isTexture ) {

    			data.aoMap = this.aoMap.toJSON( meta ).uuid;
    			data.aoMapIntensity = this.aoMapIntensity;

    		}

    		if ( this.bumpMap && this.bumpMap.isTexture ) {

    			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
    			data.bumpScale = this.bumpScale;

    		}

    		if ( this.normalMap && this.normalMap.isTexture ) {

    			data.normalMap = this.normalMap.toJSON( meta ).uuid;
    			data.normalMapType = this.normalMapType;
    			data.normalScale = this.normalScale.toArray();

    		}

    		if ( this.displacementMap && this.displacementMap.isTexture ) {

    			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
    			data.displacementScale = this.displacementScale;
    			data.displacementBias = this.displacementBias;

    		}

    		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
    		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

    		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
    		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

    		if ( this.envMap && this.envMap.isTexture ) {

    			data.envMap = this.envMap.toJSON( meta ).uuid;
    			data.reflectivity = this.reflectivity; // Scale behind envMap
    			data.refractionRatio = this.refractionRatio;

    			if ( this.combine !== undefined ) data.combine = this.combine;
    			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;

    		}

    		if ( this.gradientMap && this.gradientMap.isTexture ) {

    			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

    		}

    		if ( this.size !== undefined ) data.size = this.size;
    		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

    		if ( this.blending !== NormalBlending ) data.blending = this.blending;
    		if ( this.flatShading === true ) data.flatShading = this.flatShading;
    		if ( this.side !== FrontSide ) data.side = this.side;
    		if ( this.vertexColors ) data.vertexColors = true;

    		if ( this.opacity < 1 ) data.opacity = this.opacity;
    		if ( this.transparent === true ) data.transparent = this.transparent;

    		data.depthFunc = this.depthFunc;
    		data.depthTest = this.depthTest;
    		data.depthWrite = this.depthWrite;

    		data.stencilWrite = this.stencilWrite;
    		data.stencilWriteMask = this.stencilWriteMask;
    		data.stencilFunc = this.stencilFunc;
    		data.stencilRef = this.stencilRef;
    		data.stencilFuncMask = this.stencilFuncMask;
    		data.stencilFail = this.stencilFail;
    		data.stencilZFail = this.stencilZFail;
    		data.stencilZPass = this.stencilZPass;

    		// rotation (SpriteMaterial)
    		if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;

    		if ( this.polygonOffset === true ) data.polygonOffset = true;
    		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
    		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

    		if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;
    		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
    		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
    		if ( this.scale !== undefined ) data.scale = this.scale;

    		if ( this.dithering === true ) data.dithering = true;

    		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
    		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

    		if ( this.wireframe === true ) data.wireframe = this.wireframe;
    		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
    		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
    		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

    		if ( this.morphTargets === true ) data.morphTargets = true;
    		if ( this.morphNormals === true ) data.morphNormals = true;
    		if ( this.skinning === true ) data.skinning = true;

    		if ( this.visible === false ) data.visible = false;

    		if ( this.toneMapped === false ) data.toneMapped = false;

    		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

    		// TODO: Copied from Object3D.toJSON

    		function extractFromCache( cache ) {

    			const values = [];

    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    		if ( isRoot ) {

    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );

    			if ( textures.length > 0 ) data.textures = textures;
    			if ( images.length > 0 ) data.images = images;

    		}

    		return data;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( source ) {

    		this.name = source.name;

    		this.fog = source.fog;

    		this.blending = source.blending;
    		this.side = source.side;
    		this.flatShading = source.flatShading;
    		this.vertexColors = source.vertexColors;

    		this.opacity = source.opacity;
    		this.transparent = source.transparent;

    		this.blendSrc = source.blendSrc;
    		this.blendDst = source.blendDst;
    		this.blendEquation = source.blendEquation;
    		this.blendSrcAlpha = source.blendSrcAlpha;
    		this.blendDstAlpha = source.blendDstAlpha;
    		this.blendEquationAlpha = source.blendEquationAlpha;

    		this.depthFunc = source.depthFunc;
    		this.depthTest = source.depthTest;
    		this.depthWrite = source.depthWrite;

    		this.stencilWriteMask = source.stencilWriteMask;
    		this.stencilFunc = source.stencilFunc;
    		this.stencilRef = source.stencilRef;
    		this.stencilFuncMask = source.stencilFuncMask;
    		this.stencilFail = source.stencilFail;
    		this.stencilZFail = source.stencilZFail;
    		this.stencilZPass = source.stencilZPass;
    		this.stencilWrite = source.stencilWrite;

    		const srcPlanes = source.clippingPlanes;
    		let dstPlanes = null;

    		if ( srcPlanes !== null ) {

    			const n = srcPlanes.length;
    			dstPlanes = new Array( n );

    			for ( let i = 0; i !== n; ++ i ) {

    				dstPlanes[ i ] = srcPlanes[ i ].clone();

    			}

    		}

    		this.clippingPlanes = dstPlanes;
    		this.clipIntersection = source.clipIntersection;
    		this.clipShadows = source.clipShadows;

    		this.shadowSide = source.shadowSide;

    		this.colorWrite = source.colorWrite;

    		this.precision = source.precision;

    		this.polygonOffset = source.polygonOffset;
    		this.polygonOffsetFactor = source.polygonOffsetFactor;
    		this.polygonOffsetUnits = source.polygonOffsetUnits;

    		this.dithering = source.dithering;

    		this.alphaTest = source.alphaTest;
    		this.premultipliedAlpha = source.premultipliedAlpha;

    		this.visible = source.visible;

    		this.toneMapped = source.toneMapped;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		return this;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    } );

    Object.defineProperty( Material.prototype, 'needsUpdate', {

    	set: function ( value ) {

    		if ( value === true ) this.version ++;

    	}

    } );

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>
     * }
     */

    function MeshBasicMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshBasicMaterial';

    	this.color = new Color( 0xffffff ); // emissive

    	this.map = null;

    	this.lightMap = null;
    	this.lightMapIntensity = 1.0;

    	this.aoMap = null;
    	this.aoMapIntensity = 1.0;

    	this.specularMap = null;

    	this.alphaMap = null;

    	this.envMap = null;
    	this.combine = MultiplyOperation;
    	this.reflectivity = 1;
    	this.refractionRatio = 0.98;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;
    	this.wireframeLinecap = 'round';
    	this.wireframeLinejoin = 'round';

    	this.skinning = false;
    	this.morphTargets = false;

    	this.setValues( parameters );

    }

    MeshBasicMaterial.prototype = Object.create( Material.prototype );
    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

    MeshBasicMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.map = source.map;

    	this.lightMap = source.lightMap;
    	this.lightMapIntensity = source.lightMapIntensity;

    	this.aoMap = source.aoMap;
    	this.aoMapIntensity = source.aoMapIntensity;

    	this.specularMap = source.specularMap;

    	this.alphaMap = source.alphaMap;

    	this.envMap = source.envMap;
    	this.combine = source.combine;
    	this.reflectivity = source.reflectivity;
    	this.refractionRatio = source.refractionRatio;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;
    	this.wireframeLinecap = source.wireframeLinecap;
    	this.wireframeLinejoin = source.wireframeLinejoin;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;

    	return this;

    };

    const _vector$8 = new Vector3();
    const _vector2 = new Vector2();

    function BufferAttribute( array, itemSize, normalized ) {

    	if ( Array.isArray( array ) ) {

    		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

    	}

    	this.name = '';

    	this.array = array;
    	this.itemSize = itemSize;
    	this.count = array !== undefined ? array.length / itemSize : 0;
    	this.normalized = normalized === true;

    	this.usage = StaticDrawUsage;
    	this.updateRange = { offset: 0, count: - 1 };

    	this.version = 0;

    }

    Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

    	set: function ( value ) {

    		if ( value === true ) this.version ++;

    	}

    } );

    Object.assign( BufferAttribute.prototype, {

    	isBufferAttribute: true,

    	onUploadCallback: function () {},

    	setUsage: function ( value ) {

    		this.usage = value;

    		return this;

    	},

    	copy: function ( source ) {

    		this.name = source.name;
    		this.array = new source.array.constructor( source.array );
    		this.itemSize = source.itemSize;
    		this.count = source.count;
    		this.normalized = source.normalized;

    		this.usage = source.usage;

    		return this;

    	},

    	copyAt: function ( index1, attribute, index2 ) {

    		index1 *= this.itemSize;
    		index2 *= attribute.itemSize;

    		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

    		}

    		return this;

    	},

    	copyArray: function ( array ) {

    		this.array.set( array );

    		return this;

    	},

    	copyColorsArray: function ( colors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = colors.length; i < l; i ++ ) {

    			let color = colors[ i ];

    			if ( color === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
    				color = new Color();

    			}

    			array[ offset ++ ] = color.r;
    			array[ offset ++ ] = color.g;
    			array[ offset ++ ] = color.b;

    		}

    		return this;

    	},

    	copyVector2sArray: function ( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
    				vector = new Vector2();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;

    		}

    		return this;

    	},

    	copyVector3sArray: function ( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
    				vector = new Vector3();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;
    			array[ offset ++ ] = vector.z;

    		}

    		return this;

    	},

    	copyVector4sArray: function ( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
    				vector = new Vector4();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;
    			array[ offset ++ ] = vector.z;
    			array[ offset ++ ] = vector.w;

    		}

    		return this;

    	},

    	applyMatrix3: function ( m ) {

    		if ( this.itemSize === 2 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector2.fromBufferAttribute( this, i );
    				_vector2.applyMatrix3( m );

    				this.setXY( i, _vector2.x, _vector2.y );

    			}

    		} else if ( this.itemSize === 3 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector$8.fromBufferAttribute( this, i );
    				_vector$8.applyMatrix3( m );

    				this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    			}

    		}

    		return this;

    	},

    	applyMatrix4: function ( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$8.x = this.getX( i );
    			_vector$8.y = this.getY( i );
    			_vector$8.z = this.getZ( i );

    			_vector$8.applyMatrix4( m );

    			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    		}

    		return this;

    	},

    	applyNormalMatrix: function ( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$8.x = this.getX( i );
    			_vector$8.y = this.getY( i );
    			_vector$8.z = this.getZ( i );

    			_vector$8.applyNormalMatrix( m );

    			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    		}

    		return this;

    	},

    	transformDirection: function ( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$8.x = this.getX( i );
    			_vector$8.y = this.getY( i );
    			_vector$8.z = this.getZ( i );

    			_vector$8.transformDirection( m );

    			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    		}

    		return this;

    	},

    	set: function ( value, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.array.set( value, offset );

    		return this;

    	},

    	getX: function ( index ) {

    		return this.array[ index * this.itemSize ];

    	},

    	setX: function ( index, x ) {

    		this.array[ index * this.itemSize ] = x;

    		return this;

    	},

    	getY: function ( index ) {

    		return this.array[ index * this.itemSize + 1 ];

    	},

    	setY: function ( index, y ) {

    		this.array[ index * this.itemSize + 1 ] = y;

    		return this;

    	},

    	getZ: function ( index ) {

    		return this.array[ index * this.itemSize + 2 ];

    	},

    	setZ: function ( index, z ) {

    		this.array[ index * this.itemSize + 2 ] = z;

    		return this;

    	},

    	getW: function ( index ) {

    		return this.array[ index * this.itemSize + 3 ];

    	},

    	setW: function ( index, w ) {

    		this.array[ index * this.itemSize + 3 ] = w;

    		return this;

    	},

    	setXY: function ( index, x, y ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;

    		return this;

    	},

    	setXYZ: function ( index, x, y, z ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;

    		return this;

    	},

    	setXYZW: function ( index, x, y, z, w ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;
    		this.array[ index + 3 ] = w;

    		return this;

    	},

    	onUpload: function ( callback ) {

    		this.onUploadCallback = callback;

    		return this;

    	},

    	clone: function () {

    		return new this.constructor( this.array, this.itemSize ).copy( this );

    	},

    	toJSON: function () {

    		return {
    			itemSize: this.itemSize,
    			type: this.array.constructor.name,
    			array: Array.prototype.slice.call( this.array ),
    			normalized: this.normalized
    		};

    	}

    } );

    //

    function Int8BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

    }

    Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


    function Uint8BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

    }

    Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


    function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

    }

    Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


    function Int16BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

    }

    Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


    function Uint16BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

    }

    Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


    function Int32BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

    }

    Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


    function Uint32BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

    }

    Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


    function Float32BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

    }

    Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


    function Float64BufferAttribute( array, itemSize, normalized ) {

    	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

    }

    Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
    Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

    function DirectGeometry() {

    	this.vertices = [];
    	this.normals = [];
    	this.colors = [];
    	this.uvs = [];
    	this.uvs2 = [];

    	this.groups = [];

    	this.morphTargets = {};

    	this.skinWeights = [];
    	this.skinIndices = [];

    	// this.lineDistances = [];

    	this.boundingBox = null;
    	this.boundingSphere = null;

    	// update flags

    	this.verticesNeedUpdate = false;
    	this.normalsNeedUpdate = false;
    	this.colorsNeedUpdate = false;
    	this.uvsNeedUpdate = false;
    	this.groupsNeedUpdate = false;

    }

    Object.assign( DirectGeometry.prototype, {

    	computeGroups: function ( geometry ) {

    		const groups = [];

    		let group, i;
    		let materialIndex = undefined;

    		const faces = geometry.faces;

    		for ( i = 0; i < faces.length; i ++ ) {

    			const face = faces[ i ];

    			// materials

    			if ( face.materialIndex !== materialIndex ) {

    				materialIndex = face.materialIndex;

    				if ( group !== undefined ) {

    					group.count = ( i * 3 ) - group.start;
    					groups.push( group );

    				}

    				group = {
    					start: i * 3,
    					materialIndex: materialIndex
    				};

    			}

    		}

    		if ( group !== undefined ) {

    			group.count = ( i * 3 ) - group.start;
    			groups.push( group );

    		}

    		this.groups = groups;

    	},

    	fromGeometry: function ( geometry ) {

    		const faces = geometry.faces;
    		const vertices = geometry.vertices;
    		const faceVertexUvs = geometry.faceVertexUvs;

    		const hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
    		const hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

    		// morphs

    		const morphTargets = geometry.morphTargets;
    		const morphTargetsLength = morphTargets.length;

    		let morphTargetsPosition;

    		if ( morphTargetsLength > 0 ) {

    			morphTargetsPosition = [];

    			for ( let i = 0; i < morphTargetsLength; i ++ ) {

    				morphTargetsPosition[ i ] = {
    					name: morphTargets[ i ].name,
    				 	data: []
    				};

    			}

    			this.morphTargets.position = morphTargetsPosition;

    		}

    		const morphNormals = geometry.morphNormals;
    		const morphNormalsLength = morphNormals.length;

    		let morphTargetsNormal;

    		if ( morphNormalsLength > 0 ) {

    			morphTargetsNormal = [];

    			for ( let i = 0; i < morphNormalsLength; i ++ ) {

    				morphTargetsNormal[ i ] = {
    					name: morphNormals[ i ].name,
    				 	data: []
    				};

    			}

    			this.morphTargets.normal = morphTargetsNormal;

    		}

    		// skins

    		const skinIndices = geometry.skinIndices;
    		const skinWeights = geometry.skinWeights;

    		const hasSkinIndices = skinIndices.length === vertices.length;
    		const hasSkinWeights = skinWeights.length === vertices.length;

    		//

    		if ( vertices.length > 0 && faces.length === 0 ) {

    			console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

    		}

    		for ( let i = 0; i < faces.length; i ++ ) {

    			const face = faces[ i ];

    			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

    			const vertexNormals = face.vertexNormals;

    			if ( vertexNormals.length === 3 ) {

    				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

    			} else {

    				const normal = face.normal;

    				this.normals.push( normal, normal, normal );

    			}

    			const vertexColors = face.vertexColors;

    			if ( vertexColors.length === 3 ) {

    				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

    			} else {

    				const color = face.color;

    				this.colors.push( color, color, color );

    			}

    			if ( hasFaceVertexUv === true ) {

    				const vertexUvs = faceVertexUvs[ 0 ][ i ];

    				if ( vertexUvs !== undefined ) {

    					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

    				} else {

    					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

    					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

    				}

    			}

    			if ( hasFaceVertexUv2 === true ) {

    				const vertexUvs = faceVertexUvs[ 1 ][ i ];

    				if ( vertexUvs !== undefined ) {

    					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

    				} else {

    					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

    					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

    				}

    			}

    			// morphs

    			for ( let j = 0; j < morphTargetsLength; j ++ ) {

    				const morphTarget = morphTargets[ j ].vertices;

    				morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

    			}

    			for ( let j = 0; j < morphNormalsLength; j ++ ) {

    				const morphNormal = morphNormals[ j ].vertexNormals[ i ];

    				morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

    			}

    			// skins

    			if ( hasSkinIndices ) {

    				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

    			}

    			if ( hasSkinWeights ) {

    				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

    			}

    		}

    		this.computeGroups( geometry );

    		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
    		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
    		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
    		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
    		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

    		if ( geometry.boundingSphere !== null ) {

    			this.boundingSphere = geometry.boundingSphere.clone();

    		}

    		if ( geometry.boundingBox !== null ) {

    			this.boundingBox = geometry.boundingBox.clone();

    		}

    		return this;

    	}

    } );

    function arrayMax( array ) {

    	if ( array.length === 0 ) return - Infinity;

    	let max = array[ 0 ];

    	for ( let i = 1, l = array.length; i < l; ++ i ) {

    		if ( array[ i ] > max ) max = array[ i ];

    	}

    	return max;

    }

    let _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

    const _m1$1 = new Matrix4();
    const _obj$1 = new Object3D();
    const _offset$1 = new Vector3();
    const _box$1 = new Box3();
    const _boxMorphTargets = new Box3();
    const _vector$7 = new Vector3();

    function BufferGeometry() {

    	Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );

    	this.uuid = MathUtils.generateUUID();

    	this.name = '';
    	this.type = 'BufferGeometry';

    	this.index = null;
    	this.attributes = {};

    	this.morphAttributes = {};
    	this.morphTargetsRelative = false;

    	this.groups = [];

    	this.boundingBox = null;
    	this.boundingSphere = null;

    	this.drawRange = { start: 0, count: Infinity };

    	this.userData = {};

    }

    BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: BufferGeometry,

    	isBufferGeometry: true,

    	getIndex: function () {

    		return this.index;

    	},

    	setIndex: function ( index ) {

    		if ( Array.isArray( index ) ) {

    			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

    		} else {

    			this.index = index;

    		}

    	},

    	getAttribute: function ( name ) {

    		return this.attributes[ name ];

    	},

    	setAttribute: function ( name, attribute ) {

    		this.attributes[ name ] = attribute;

    		return this;

    	},

    	deleteAttribute: function ( name ) {

    		delete this.attributes[ name ];

    		return this;

    	},

    	addGroup: function ( start, count, materialIndex ) {

    		this.groups.push( {

    			start: start,
    			count: count,
    			materialIndex: materialIndex !== undefined ? materialIndex : 0

    		} );

    	},

    	clearGroups: function () {

    		this.groups = [];

    	},

    	setDrawRange: function ( start, count ) {

    		this.drawRange.start = start;
    		this.drawRange.count = count;

    	},

    	applyMatrix4: function ( matrix ) {

    		const position = this.attributes.position;

    		if ( position !== undefined ) {

    			position.applyMatrix4( matrix );

    			position.needsUpdate = true;

    		}

    		const normal = this.attributes.normal;

    		if ( normal !== undefined ) {

    			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

    			normal.applyNormalMatrix( normalMatrix );

    			normal.needsUpdate = true;

    		}

    		const tangent = this.attributes.tangent;

    		if ( tangent !== undefined ) {

    			tangent.transformDirection( matrix );

    			tangent.needsUpdate = true;

    		}

    		if ( this.boundingBox !== null ) {

    			this.computeBoundingBox();

    		}

    		if ( this.boundingSphere !== null ) {

    			this.computeBoundingSphere();

    		}

    		return this;

    	},

    	rotateX: function ( angle ) {

    		// rotate geometry around world x-axis

    		_m1$1.makeRotationX( angle );

    		this.applyMatrix4( _m1$1 );

    		return this;

    	},

    	rotateY: function ( angle ) {

    		// rotate geometry around world y-axis

    		_m1$1.makeRotationY( angle );

    		this.applyMatrix4( _m1$1 );

    		return this;

    	},

    	rotateZ: function ( angle ) {

    		// rotate geometry around world z-axis

    		_m1$1.makeRotationZ( angle );

    		this.applyMatrix4( _m1$1 );

    		return this;

    	},

    	translate: function ( x, y, z ) {

    		// translate geometry

    		_m1$1.makeTranslation( x, y, z );

    		this.applyMatrix4( _m1$1 );

    		return this;

    	},

    	scale: function ( x, y, z ) {

    		// scale geometry

    		_m1$1.makeScale( x, y, z );

    		this.applyMatrix4( _m1$1 );

    		return this;

    	},

    	lookAt: function ( vector ) {

    		_obj$1.lookAt( vector );

    		_obj$1.updateMatrix();

    		this.applyMatrix4( _obj$1.matrix );

    		return this;

    	},

    	center: function () {

    		this.computeBoundingBox();

    		this.boundingBox.getCenter( _offset$1 ).negate();

    		this.translate( _offset$1.x, _offset$1.y, _offset$1.z );

    		return this;

    	},

    	setFromObject: function ( object ) {

    		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

    		const geometry = object.geometry;

    		if ( object.isPoints || object.isLine ) {

    			const positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
    			const colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

    			this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
    			this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

    			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

    				const lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

    				this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

    			}

    			if ( geometry.boundingSphere !== null ) {

    				this.boundingSphere = geometry.boundingSphere.clone();

    			}

    			if ( geometry.boundingBox !== null ) {

    				this.boundingBox = geometry.boundingBox.clone();

    			}

    		} else if ( object.isMesh ) {

    			if ( geometry && geometry.isGeometry ) {

    				this.fromGeometry( geometry );

    			}

    		}

    		return this;

    	},

    	setFromPoints: function ( points ) {

    		const position = [];

    		for ( let i = 0, l = points.length; i < l; i ++ ) {

    			const point = points[ i ];
    			position.push( point.x, point.y, point.z || 0 );

    		}

    		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

    		return this;

    	},

    	updateFromObject: function ( object ) {

    		let geometry = object.geometry;

    		if ( object.isMesh ) {

    			let direct = geometry.__directGeometry;

    			if ( geometry.elementsNeedUpdate === true ) {

    				direct = undefined;
    				geometry.elementsNeedUpdate = false;

    			}

    			if ( direct === undefined ) {

    				return this.fromGeometry( geometry );

    			}

    			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
    			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
    			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
    			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
    			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

    			geometry.verticesNeedUpdate = false;
    			geometry.normalsNeedUpdate = false;
    			geometry.colorsNeedUpdate = false;
    			geometry.uvsNeedUpdate = false;
    			geometry.groupsNeedUpdate = false;

    			geometry = direct;

    		}

    		if ( geometry.verticesNeedUpdate === true ) {

    			const attribute = this.attributes.position;

    			if ( attribute !== undefined ) {

    				attribute.copyVector3sArray( geometry.vertices );
    				attribute.needsUpdate = true;

    			}

    			geometry.verticesNeedUpdate = false;

    		}

    		if ( geometry.normalsNeedUpdate === true ) {

    			const attribute = this.attributes.normal;

    			if ( attribute !== undefined ) {

    				attribute.copyVector3sArray( geometry.normals );
    				attribute.needsUpdate = true;

    			}

    			geometry.normalsNeedUpdate = false;

    		}

    		if ( geometry.colorsNeedUpdate === true ) {

    			const attribute = this.attributes.color;

    			if ( attribute !== undefined ) {

    				attribute.copyColorsArray( geometry.colors );
    				attribute.needsUpdate = true;

    			}

    			geometry.colorsNeedUpdate = false;

    		}

    		if ( geometry.uvsNeedUpdate ) {

    			const attribute = this.attributes.uv;

    			if ( attribute !== undefined ) {

    				attribute.copyVector2sArray( geometry.uvs );
    				attribute.needsUpdate = true;

    			}

    			geometry.uvsNeedUpdate = false;

    		}

    		if ( geometry.lineDistancesNeedUpdate ) {

    			const attribute = this.attributes.lineDistance;

    			if ( attribute !== undefined ) {

    				attribute.copyArray( geometry.lineDistances );
    				attribute.needsUpdate = true;

    			}

    			geometry.lineDistancesNeedUpdate = false;

    		}

    		if ( geometry.groupsNeedUpdate ) {

    			geometry.computeGroups( object.geometry );
    			this.groups = geometry.groups;

    			geometry.groupsNeedUpdate = false;

    		}

    		return this;

    	},

    	fromGeometry: function ( geometry ) {

    		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

    		return this.fromDirectGeometry( geometry.__directGeometry );

    	},

    	fromDirectGeometry: function ( geometry ) {

    		const positions = new Float32Array( geometry.vertices.length * 3 );
    		this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

    		if ( geometry.normals.length > 0 ) {

    			const normals = new Float32Array( geometry.normals.length * 3 );
    			this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

    		}

    		if ( geometry.colors.length > 0 ) {

    			const colors = new Float32Array( geometry.colors.length * 3 );
    			this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

    		}

    		if ( geometry.uvs.length > 0 ) {

    			const uvs = new Float32Array( geometry.uvs.length * 2 );
    			this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

    		}

    		if ( geometry.uvs2.length > 0 ) {

    			const uvs2 = new Float32Array( geometry.uvs2.length * 2 );
    			this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

    		}

    		// groups

    		this.groups = geometry.groups;

    		// morphs

    		for ( const name in geometry.morphTargets ) {

    			const array = [];
    			const morphTargets = geometry.morphTargets[ name ];

    			for ( let i = 0, l = morphTargets.length; i < l; i ++ ) {

    				const morphTarget = morphTargets[ i ];

    				const attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
    				attribute.name = morphTarget.name;

    				array.push( attribute.copyVector3sArray( morphTarget.data ) );

    			}

    			this.morphAttributes[ name ] = array;

    		}

    		// skinning

    		if ( geometry.skinIndices.length > 0 ) {

    			const skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
    			this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

    		}

    		if ( geometry.skinWeights.length > 0 ) {

    			const skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
    			this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

    		}

    		//

    		if ( geometry.boundingSphere !== null ) {

    			this.boundingSphere = geometry.boundingSphere.clone();

    		}

    		if ( geometry.boundingBox !== null ) {

    			this.boundingBox = geometry.boundingBox.clone();

    		}

    		return this;

    	},

    	computeBoundingBox: function () {

    		if ( this.boundingBox === null ) {

    			this.boundingBox = new Box3();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position !== undefined ) {

    			this.boundingBox.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_box$1.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$7.addVectors( this.boundingBox.min, _box$1.min );
    						this.boundingBox.expandByPoint( _vector$7 );

    						_vector$7.addVectors( this.boundingBox.max, _box$1.max );
    						this.boundingBox.expandByPoint( _vector$7 );

    					} else {

    						this.boundingBox.expandByPoint( _box$1.min );
    						this.boundingBox.expandByPoint( _box$1.max );

    					}

    				}

    			}

    		} else {

    			this.boundingBox.makeEmpty();

    		}

    		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

    		}

    	},

    	computeBoundingSphere: function () {

    		if ( this.boundingSphere === null ) {

    			this.boundingSphere = new Sphere();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position ) {

    			// first, find the center of the bounding sphere

    			const center = this.boundingSphere.center;

    			_box$1.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$7.addVectors( _box$1.min, _boxMorphTargets.min );
    						_box$1.expandByPoint( _vector$7 );

    						_vector$7.addVectors( _box$1.max, _boxMorphTargets.max );
    						_box$1.expandByPoint( _vector$7 );

    					} else {

    						_box$1.expandByPoint( _boxMorphTargets.min );
    						_box$1.expandByPoint( _boxMorphTargets.max );

    					}

    				}

    			}

    			_box$1.getCenter( center );

    			// second, try to find a boundingSphere with a radius smaller than the
    			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

    			let maxRadiusSq = 0;

    			for ( let i = 0, il = position.count; i < il; i ++ ) {

    				_vector$7.fromBufferAttribute( position, i );

    				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

    			}

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					const morphTargetsRelative = this.morphTargetsRelative;

    					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

    						_vector$7.fromBufferAttribute( morphAttribute, j );

    						if ( morphTargetsRelative ) {

    							_offset$1.fromBufferAttribute( position, j );
    							_vector$7.add( _offset$1 );

    						}

    						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

    					}

    				}

    			}

    			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

    			if ( isNaN( this.boundingSphere.radius ) ) {

    				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

    			}

    		}

    	},

    	computeFaceNormals: function () {

    		// backwards compatibility

    	},

    	computeVertexNormals: function () {

    		const index = this.index;
    		const positionAttribute = this.getAttribute( 'position' );

    		if ( positionAttribute !== undefined ) {

    			let normalAttribute = this.getAttribute( 'normal' );

    			if ( normalAttribute === undefined ) {

    				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
    				this.setAttribute( 'normal', normalAttribute );

    			} else {

    				// reset existing normals to zero

    				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

    					normalAttribute.setXYZ( i, 0, 0, 0 );

    				}

    			}

    			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
    			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
    			const cb = new Vector3(), ab = new Vector3();

    			// indexed elements

    			if ( index ) {

    				for ( let i = 0, il = index.count; i < il; i += 3 ) {

    					const vA = index.getX( i + 0 );
    					const vB = index.getX( i + 1 );
    					const vC = index.getX( i + 2 );

    					pA.fromBufferAttribute( positionAttribute, vA );
    					pB.fromBufferAttribute( positionAttribute, vB );
    					pC.fromBufferAttribute( positionAttribute, vC );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					nA.fromBufferAttribute( normalAttribute, vA );
    					nB.fromBufferAttribute( normalAttribute, vB );
    					nC.fromBufferAttribute( normalAttribute, vC );

    					nA.add( cb );
    					nB.add( cb );
    					nC.add( cb );

    					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
    					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
    					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

    				}

    			} else {

    				// non-indexed elements (unconnected triangle soup)

    				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

    					pA.fromBufferAttribute( positionAttribute, i + 0 );
    					pB.fromBufferAttribute( positionAttribute, i + 1 );
    					pC.fromBufferAttribute( positionAttribute, i + 2 );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

    				}

    			}

    			this.normalizeNormals();

    			normalAttribute.needsUpdate = true;

    		}

    	},

    	merge: function ( geometry, offset ) {

    		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

    			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
    			return;

    		}

    		if ( offset === undefined ) {

    			offset = 0;

    			console.warn(
    				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
    				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
    			);

    		}

    		const attributes = this.attributes;

    		for ( const key in attributes ) {

    			if ( geometry.attributes[ key ] === undefined ) continue;

    			const attribute1 = attributes[ key ];
    			const attributeArray1 = attribute1.array;

    			const attribute2 = geometry.attributes[ key ];
    			const attributeArray2 = attribute2.array;

    			const attributeOffset = attribute2.itemSize * offset;
    			const length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

    			for ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

    				attributeArray1[ j ] = attributeArray2[ i ];

    			}

    		}

    		return this;

    	},

    	normalizeNormals: function () {

    		const normals = this.attributes.normal;

    		for ( let i = 0, il = normals.count; i < il; i ++ ) {

    			_vector$7.fromBufferAttribute( normals, i );

    			_vector$7.normalize();

    			normals.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

    		}

    	},

    	toNonIndexed: function () {

    		function convertBufferAttribute( attribute, indices ) {

    			const array = attribute.array;
    			const itemSize = attribute.itemSize;
    			const normalized = attribute.normalized;

    			const array2 = new array.constructor( indices.length * itemSize );

    			let index = 0, index2 = 0;

    			for ( let i = 0, l = indices.length; i < l; i ++ ) {

    				index = indices[ i ] * itemSize;

    				for ( let j = 0; j < itemSize; j ++ ) {

    					array2[ index2 ++ ] = array[ index ++ ];

    				}

    			}

    			return new BufferAttribute( array2, itemSize, normalized );

    		}

    		//

    		if ( this.index === null ) {

    			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
    			return this;

    		}

    		const geometry2 = new BufferGeometry();

    		const indices = this.index.array;
    		const attributes = this.attributes;

    		// attributes

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];

    			const newAttribute = convertBufferAttribute( attribute, indices );

    			geometry2.setAttribute( name, newAttribute );

    		}

    		// morph attributes

    		const morphAttributes = this.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const morphArray = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

    				const attribute = morphAttribute[ i ];

    				const newAttribute = convertBufferAttribute( attribute, indices );

    				morphArray.push( newAttribute );

    			}

    			geometry2.morphAttributes[ name ] = morphArray;

    		}

    		geometry2.morphTargetsRelative = this.morphTargetsRelative;

    		// groups

    		const groups = this.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			geometry2.addGroup( group.start, group.count, group.materialIndex );

    		}

    		return geometry2;

    	},

    	toJSON: function () {

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'BufferGeometry',
    				generator: 'BufferGeometry.toJSON'
    			}
    		};

    		// standard BufferGeometry serialization

    		data.uuid = this.uuid;
    		data.type = this.type;
    		if ( this.name !== '' ) data.name = this.name;
    		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

    		if ( this.parameters !== undefined ) {

    			const parameters = this.parameters;

    			for ( const key in parameters ) {

    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

    			}

    			return data;

    		}

    		data.data = { attributes: {} };

    		const index = this.index;

    		if ( index !== null ) {

    			data.data.index = {
    				type: index.array.constructor.name,
    				array: Array.prototype.slice.call( index.array )
    			};

    		}

    		const attributes = this.attributes;

    		for ( const key in attributes ) {

    			const attribute = attributes[ key ];

    			const attributeData = attribute.toJSON( data.data );

    			if ( attribute.name !== '' ) attributeData.name = attribute.name;

    			data.data.attributes[ key ] = attributeData;

    		}

    		const morphAttributes = {};
    		let hasMorphAttributes = false;

    		for ( const key in this.morphAttributes ) {

    			const attributeArray = this.morphAttributes[ key ];

    			const array = [];

    			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

    				const attribute = attributeArray[ i ];

    				const attributeData = attribute.toJSON( data.data );

    				if ( attribute.name !== '' ) attributeData.name = attribute.name;

    				array.push( attributeData );

    			}

    			if ( array.length > 0 ) {

    				morphAttributes[ key ] = array;

    				hasMorphAttributes = true;

    			}

    		}

    		if ( hasMorphAttributes ) {

    			data.data.morphAttributes = morphAttributes;
    			data.data.morphTargetsRelative = this.morphTargetsRelative;

    		}

    		const groups = this.groups;

    		if ( groups.length > 0 ) {

    			data.data.groups = JSON.parse( JSON.stringify( groups ) );

    		}

    		const boundingSphere = this.boundingSphere;

    		if ( boundingSphere !== null ) {

    			data.data.boundingSphere = {
    				center: boundingSphere.center.toArray(),
    				radius: boundingSphere.radius
    			};

    		}

    		return data;

    	},

    	clone: function () {

    		/*
    		 // Handle primitives

    		 const parameters = this.parameters;

    		 if ( parameters !== undefined ) {

    		 const values = [];

    		 for ( const key in parameters ) {

    		 values.push( parameters[ key ] );

    		 }

    		 const geometry = Object.create( this.constructor.prototype );
    		 this.constructor.apply( geometry, values );
    		 return geometry;

    		 }

    		 return new this.constructor().copy( this );
    		 */

    		return new BufferGeometry().copy( this );

    	},

    	copy: function ( source ) {

    		// reset

    		this.index = null;
    		this.attributes = {};
    		this.morphAttributes = {};
    		this.groups = [];
    		this.boundingBox = null;
    		this.boundingSphere = null;

    		// used for storing cloned, shared data

    		const data = {};

    		// name

    		this.name = source.name;

    		// index

    		const index = source.index;

    		if ( index !== null ) {

    			this.setIndex( index.clone( data ) );

    		}

    		// attributes

    		const attributes = source.attributes;

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];
    			this.setAttribute( name, attribute.clone( data ) );

    		}

    		// morph attributes

    		const morphAttributes = source.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const array = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

    				array.push( morphAttribute[ i ].clone( data ) );

    			}

    			this.morphAttributes[ name ] = array;

    		}

    		this.morphTargetsRelative = source.morphTargetsRelative;

    		// groups

    		const groups = source.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			this.addGroup( group.start, group.count, group.materialIndex );

    		}

    		// bounding box

    		const boundingBox = source.boundingBox;

    		if ( boundingBox !== null ) {

    			this.boundingBox = boundingBox.clone();

    		}

    		// bounding sphere

    		const boundingSphere = source.boundingSphere;

    		if ( boundingSphere !== null ) {

    			this.boundingSphere = boundingSphere.clone();

    		}

    		// draw range

    		this.drawRange.start = source.drawRange.start;
    		this.drawRange.count = source.drawRange.count;

    		// user data

    		this.userData = source.userData;

    		return this;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    } );

    const _inverseMatrix$2 = new Matrix4();
    const _ray$2 = new Ray();
    const _sphere$3 = new Sphere();

    const _vA$1 = new Vector3();
    const _vB$1 = new Vector3();
    const _vC$1 = new Vector3();

    const _tempA = new Vector3();
    const _tempB = new Vector3();
    const _tempC = new Vector3();

    const _morphA = new Vector3();
    const _morphB = new Vector3();
    const _morphC = new Vector3();

    const _uvA$1 = new Vector2();
    const _uvB$1 = new Vector2();
    const _uvC$1 = new Vector2();

    const _intersectionPoint = new Vector3();
    const _intersectionPointWorld = new Vector3();

    function Mesh( geometry, material ) {

    	Object3D.call( this );

    	this.type = 'Mesh';

    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
    	this.material = material !== undefined ? material : new MeshBasicMaterial();

    	this.updateMorphTargets();

    }

    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Mesh,

    	isMesh: true,

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source );

    		if ( source.morphTargetInfluences !== undefined ) {

    			this.morphTargetInfluences = source.morphTargetInfluences.slice();

    		}

    		if ( source.morphTargetDictionary !== undefined ) {

    			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

    		}

    		this.material = source.material;
    		this.geometry = source.geometry;

    		return this;

    	},

    	updateMorphTargets: function () {

    		const geometry = this.geometry;

    		if ( geometry.isBufferGeometry ) {

    			const morphAttributes = geometry.morphAttributes;
    			const keys = Object.keys( morphAttributes );

    			if ( keys.length > 0 ) {

    				const morphAttribute = morphAttributes[ keys[ 0 ] ];

    				if ( morphAttribute !== undefined ) {

    					this.morphTargetInfluences = [];
    					this.morphTargetDictionary = {};

    					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    						const name = morphAttribute[ m ].name || String( m );

    						this.morphTargetInfluences.push( 0 );
    						this.morphTargetDictionary[ name ] = m;

    					}

    				}

    			}

    		} else {

    			const morphTargets = geometry.morphTargets;

    			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

    				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

    			}

    		}

    	},

    	raycast: function ( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const material = this.material;
    		const matrixWorld = this.matrixWorld;

    		if ( material === undefined ) return;

    		// Checking boundingSphere distance to ray

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$3.copy( geometry.boundingSphere );
    		_sphere$3.applyMatrix4( matrixWorld );

    		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;

    		//

    		_inverseMatrix$2.getInverse( matrixWorld );
    		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

    		// Check boundingBox before continuing

    		if ( geometry.boundingBox !== null ) {

    			if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;

    		}

    		let intersection;

    		if ( geometry.isBufferGeometry ) {

    			const index = geometry.index;
    			const position = geometry.attributes.position;
    			const morphPosition = geometry.morphAttributes.position;
    			const morphTargetsRelative = geometry.morphTargetsRelative;
    			const uv = geometry.attributes.uv;
    			const uv2 = geometry.attributes.uv2;
    			const groups = geometry.groups;
    			const drawRange = geometry.drawRange;

    			if ( index !== null ) {

    				// indexed buffer geometry

    				if ( Array.isArray( material ) ) {

    					for ( let i = 0, il = groups.length; i < il; i ++ ) {

    						const group = groups[ i ];
    						const groupMaterial = material[ group.materialIndex ];

    						const start = Math.max( group.start, drawRange.start );
    						const end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

    						for ( let j = start, jl = end; j < jl; j += 3 ) {

    							const a = index.getX( j );
    							const b = index.getX( j + 1 );
    							const c = index.getX( j + 2 );

    							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    							if ( intersection ) {

    								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
    								intersection.face.materialIndex = group.materialIndex;
    								intersects.push( intersection );

    							}

    						}

    					}

    				} else {

    					const start = Math.max( 0, drawRange.start );
    					const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

    					for ( let i = start, il = end; i < il; i += 3 ) {

    						const a = index.getX( i );
    						const b = index.getX( i + 1 );
    						const c = index.getX( i + 2 );

    						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
    							intersects.push( intersection );

    						}

    					}

    				}

    			} else if ( position !== undefined ) {

    				// non-indexed buffer geometry

    				if ( Array.isArray( material ) ) {

    					for ( let i = 0, il = groups.length; i < il; i ++ ) {

    						const group = groups[ i ];
    						const groupMaterial = material[ group.materialIndex ];

    						const start = Math.max( group.start, drawRange.start );
    						const end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

    						for ( let j = start, jl = end; j < jl; j += 3 ) {

    							const a = j;
    							const b = j + 1;
    							const c = j + 2;

    							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    							if ( intersection ) {

    								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
    								intersection.face.materialIndex = group.materialIndex;
    								intersects.push( intersection );

    							}

    						}

    					}

    				} else {

    					const start = Math.max( 0, drawRange.start );
    					const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

    					for ( let i = start, il = end; i < il; i += 3 ) {

    						const a = i;
    						const b = i + 1;
    						const c = i + 2;

    						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
    							intersects.push( intersection );

    						}

    					}

    				}

    			}

    		} else if ( geometry.isGeometry ) {

    			const isMultiMaterial = Array.isArray( material );

    			const vertices = geometry.vertices;
    			const faces = geometry.faces;
    			let uvs;

    			const faceVertexUvs = geometry.faceVertexUvs[ 0 ];
    			if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

    			for ( let f = 0, fl = faces.length; f < fl; f ++ ) {

    				const face = faces[ f ];
    				const faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

    				if ( faceMaterial === undefined ) continue;

    				const fvA = vertices[ face.a ];
    				const fvB = vertices[ face.b ];
    				const fvC = vertices[ face.c ];

    				intersection = checkIntersection( this, faceMaterial, raycaster, _ray$2, fvA, fvB, fvC, _intersectionPoint );

    				if ( intersection ) {

    					if ( uvs && uvs[ f ] ) {

    						const uvs_f = uvs[ f ];
    						_uvA$1.copy( uvs_f[ 0 ] );
    						_uvB$1.copy( uvs_f[ 1 ] );
    						_uvC$1.copy( uvs_f[ 2 ] );

    						intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

    					}

    					intersection.face = face;
    					intersection.faceIndex = f;
    					intersects.push( intersection );

    				}

    			}

    		}

    	}

    } );

    function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

    	let intersect;

    	if ( material.side === BackSide ) {

    		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

    	} else {

    		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

    	}

    	if ( intersect === null ) return null;

    	_intersectionPointWorld.copy( point );
    	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

    	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

    	if ( distance < raycaster.near || distance > raycaster.far ) return null;

    	return {
    		distance: distance,
    		point: _intersectionPointWorld.clone(),
    		object: object
    	};

    }

    function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

    	_vA$1.fromBufferAttribute( position, a );
    	_vB$1.fromBufferAttribute( position, b );
    	_vC$1.fromBufferAttribute( position, c );

    	const morphInfluences = object.morphTargetInfluences;

    	if ( material.morphTargets && morphPosition && morphInfluences ) {

    		_morphA.set( 0, 0, 0 );
    		_morphB.set( 0, 0, 0 );
    		_morphC.set( 0, 0, 0 );

    		for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

    			const influence = morphInfluences[ i ];
    			const morphAttribute = morphPosition[ i ];

    			if ( influence === 0 ) continue;

    			_tempA.fromBufferAttribute( morphAttribute, a );
    			_tempB.fromBufferAttribute( morphAttribute, b );
    			_tempC.fromBufferAttribute( morphAttribute, c );

    			if ( morphTargetsRelative ) {

    				_morphA.addScaledVector( _tempA, influence );
    				_morphB.addScaledVector( _tempB, influence );
    				_morphC.addScaledVector( _tempC, influence );

    			} else {

    				_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );
    				_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );
    				_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );

    			}

    		}

    		_vA$1.add( _morphA );
    		_vB$1.add( _morphB );
    		_vC$1.add( _morphC );

    	}

    	if ( object.isSkinnedMesh ) {

    		object.boneTransform( a, _vA$1 );
    		object.boneTransform( b, _vB$1 );
    		object.boneTransform( c, _vC$1 );

    	}

    	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

    	if ( intersection ) {

    		if ( uv ) {

    			_uvA$1.fromBufferAttribute( uv, a );
    			_uvB$1.fromBufferAttribute( uv, b );
    			_uvC$1.fromBufferAttribute( uv, c );

    			intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

    		}

    		if ( uv2 ) {

    			_uvA$1.fromBufferAttribute( uv2, a );
    			_uvB$1.fromBufferAttribute( uv2, b );
    			_uvC$1.fromBufferAttribute( uv2, c );

    			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

    		}

    		const face = new Face3( a, b, c );
    		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

    		intersection.face = face;

    	}

    	return intersection;

    }

    let _geometryId = 0; // Geometry uses even numbers as Id
    const _m1 = new Matrix4();
    const _obj = new Object3D();
    const _offset = new Vector3();

    function Geometry() {

    	Object.defineProperty( this, 'id', { value: _geometryId += 2 } );

    	this.uuid = MathUtils.generateUUID();

    	this.name = '';
    	this.type = 'Geometry';

    	this.vertices = [];
    	this.colors = [];
    	this.faces = [];
    	this.faceVertexUvs = [[]];

    	this.morphTargets = [];
    	this.morphNormals = [];

    	this.skinWeights = [];
    	this.skinIndices = [];

    	this.lineDistances = [];

    	this.boundingBox = null;
    	this.boundingSphere = null;

    	// update flags

    	this.elementsNeedUpdate = false;
    	this.verticesNeedUpdate = false;
    	this.uvsNeedUpdate = false;
    	this.normalsNeedUpdate = false;
    	this.colorsNeedUpdate = false;
    	this.lineDistancesNeedUpdate = false;
    	this.groupsNeedUpdate = false;

    }

    Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: Geometry,

    	isGeometry: true,

    	applyMatrix4: function ( matrix ) {

    		const normalMatrix = new Matrix3().getNormalMatrix( matrix );

    		for ( let i = 0, il = this.vertices.length; i < il; i ++ ) {

    			const vertex = this.vertices[ i ];
    			vertex.applyMatrix4( matrix );

    		}

    		for ( let i = 0, il = this.faces.length; i < il; i ++ ) {

    			const face = this.faces[ i ];
    			face.normal.applyMatrix3( normalMatrix ).normalize();

    			for ( let j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

    				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

    			}

    		}

    		if ( this.boundingBox !== null ) {

    			this.computeBoundingBox();

    		}

    		if ( this.boundingSphere !== null ) {

    			this.computeBoundingSphere();

    		}

    		this.verticesNeedUpdate = true;
    		this.normalsNeedUpdate = true;

    		return this;

    	},

    	rotateX: function ( angle ) {

    		// rotate geometry around world x-axis

    		_m1.makeRotationX( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	},

    	rotateY: function ( angle ) {

    		// rotate geometry around world y-axis

    		_m1.makeRotationY( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	},

    	rotateZ: function ( angle ) {

    		// rotate geometry around world z-axis

    		_m1.makeRotationZ( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	},

    	translate: function ( x, y, z ) {

    		// translate geometry

    		_m1.makeTranslation( x, y, z );

    		this.applyMatrix4( _m1 );

    		return this;

    	},

    	scale: function ( x, y, z ) {

    		// scale geometry

    		_m1.makeScale( x, y, z );

    		this.applyMatrix4( _m1 );

    		return this;

    	},

    	lookAt: function ( vector ) {

    		_obj.lookAt( vector );

    		_obj.updateMatrix();

    		this.applyMatrix4( _obj.matrix );

    		return this;

    	},

    	fromBufferGeometry: function ( geometry ) {

    		const scope = this;

    		const index = geometry.index !== null ? geometry.index : undefined;
    		const attributes = geometry.attributes;

    		if ( attributes.position === undefined ) {

    			console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
    			return this;

    		}

    		const position = attributes.position;
    		const normal = attributes.normal;
    		const color = attributes.color;
    		const uv = attributes.uv;
    		const uv2 = attributes.uv2;

    		if ( uv2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

    		for ( let i = 0; i < position.count; i ++ ) {

    			scope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );

    			if ( color !== undefined ) {

    				scope.colors.push( new Color().fromBufferAttribute( color, i ) );

    			}

    		}

    		function addFace( a, b, c, materialIndex ) {

    			const vertexColors = ( color === undefined ) ? [] : [
    				scope.colors[ a ].clone(),
    				scope.colors[ b ].clone(),
    				scope.colors[ c ].clone()
    			];

    			const vertexNormals = ( normal === undefined ) ? [] : [
    				new Vector3().fromBufferAttribute( normal, a ),
    				new Vector3().fromBufferAttribute( normal, b ),
    				new Vector3().fromBufferAttribute( normal, c )
    			];

    			const face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

    			scope.faces.push( face );

    			if ( uv !== undefined ) {

    				scope.faceVertexUvs[ 0 ].push( [
    					new Vector2().fromBufferAttribute( uv, a ),
    					new Vector2().fromBufferAttribute( uv, b ),
    					new Vector2().fromBufferAttribute( uv, c )
    				] );

    			}

    			if ( uv2 !== undefined ) {

    				scope.faceVertexUvs[ 1 ].push( [
    					new Vector2().fromBufferAttribute( uv2, a ),
    					new Vector2().fromBufferAttribute( uv2, b ),
    					new Vector2().fromBufferAttribute( uv2, c )
    				] );

    			}

    		}

    		const groups = geometry.groups;

    		if ( groups.length > 0 ) {

    			for ( let i = 0; i < groups.length; i ++ ) {

    				const group = groups[ i ];

    				const start = group.start;
    				const count = group.count;

    				for ( let j = start, jl = start + count; j < jl; j += 3 ) {

    					if ( index !== undefined ) {

    						addFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );

    					} else {

    						addFace( j, j + 1, j + 2, group.materialIndex );

    					}

    				}

    			}

    		} else {

    			if ( index !== undefined ) {

    				for ( let i = 0; i < index.count; i += 3 ) {

    					addFace( index.getX( i ), index.getX( i + 1 ), index.getX( i + 2 ) );

    				}

    			} else {

    				for ( let i = 0; i < position.count; i += 3 ) {

    					addFace( i, i + 1, i + 2 );

    				}

    			}

    		}

    		this.computeFaceNormals();

    		if ( geometry.boundingBox !== null ) {

    			this.boundingBox = geometry.boundingBox.clone();

    		}

    		if ( geometry.boundingSphere !== null ) {

    			this.boundingSphere = geometry.boundingSphere.clone();

    		}

    		return this;

    	},

    	center: function () {

    		this.computeBoundingBox();

    		this.boundingBox.getCenter( _offset ).negate();

    		this.translate( _offset.x, _offset.y, _offset.z );

    		return this;

    	},

    	normalize: function () {

    		this.computeBoundingSphere();

    		const center = this.boundingSphere.center;
    		const radius = this.boundingSphere.radius;

    		const s = radius === 0 ? 1 : 1.0 / radius;

    		const matrix = new Matrix4();
    		matrix.set(
    			s, 0, 0, - s * center.x,
    			0, s, 0, - s * center.y,
    			0, 0, s, - s * center.z,
    			0, 0, 0, 1
    		);

    		this.applyMatrix4( matrix );

    		return this;

    	},

    	computeFaceNormals: function () {

    		const cb = new Vector3(), ab = new Vector3();

    		for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    			const face = this.faces[ f ];

    			const vA = this.vertices[ face.a ];
    			const vB = this.vertices[ face.b ];
    			const vC = this.vertices[ face.c ];

    			cb.subVectors( vC, vB );
    			ab.subVectors( vA, vB );
    			cb.cross( ab );

    			cb.normalize();

    			face.normal.copy( cb );

    		}

    	},

    	computeVertexNormals: function ( areaWeighted ) {

    		if ( areaWeighted === undefined ) areaWeighted = true;

    		const vertices = new Array( this.vertices.length );

    		for ( let v = 0, vl = this.vertices.length; v < vl; v ++ ) {

    			vertices[ v ] = new Vector3();

    		}

    		if ( areaWeighted ) {

    			// vertex normals weighted by triangle areas
    			// http://www.iquilezles.org/www/articles/normals/normals.htm

    			const cb = new Vector3(), ab = new Vector3();

    			for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    				const face = this.faces[ f ];

    				const vA = this.vertices[ face.a ];
    				const vB = this.vertices[ face.b ];
    				const vC = this.vertices[ face.c ];

    				cb.subVectors( vC, vB );
    				ab.subVectors( vA, vB );
    				cb.cross( ab );

    				vertices[ face.a ].add( cb );
    				vertices[ face.b ].add( cb );
    				vertices[ face.c ].add( cb );

    			}

    		} else {

    			this.computeFaceNormals();

    			for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    				const face = this.faces[ f ];

    				vertices[ face.a ].add( face.normal );
    				vertices[ face.b ].add( face.normal );
    				vertices[ face.c ].add( face.normal );

    			}

    		}

    		for ( let v = 0, vl = this.vertices.length; v < vl; v ++ ) {

    			vertices[ v ].normalize();

    		}

    		for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    			const face = this.faces[ f ];

    			const vertexNormals = face.vertexNormals;

    			if ( vertexNormals.length === 3 ) {

    				vertexNormals[ 0 ].copy( vertices[ face.a ] );
    				vertexNormals[ 1 ].copy( vertices[ face.b ] );
    				vertexNormals[ 2 ].copy( vertices[ face.c ] );

    			} else {

    				vertexNormals[ 0 ] = vertices[ face.a ].clone();
    				vertexNormals[ 1 ] = vertices[ face.b ].clone();
    				vertexNormals[ 2 ] = vertices[ face.c ].clone();

    			}

    		}

    		if ( this.faces.length > 0 ) {

    			this.normalsNeedUpdate = true;

    		}

    	},

    	computeFlatVertexNormals: function () {

    		this.computeFaceNormals();

    		for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    			const face = this.faces[ f ];

    			const vertexNormals = face.vertexNormals;

    			if ( vertexNormals.length === 3 ) {

    				vertexNormals[ 0 ].copy( face.normal );
    				vertexNormals[ 1 ].copy( face.normal );
    				vertexNormals[ 2 ].copy( face.normal );

    			} else {

    				vertexNormals[ 0 ] = face.normal.clone();
    				vertexNormals[ 1 ] = face.normal.clone();
    				vertexNormals[ 2 ] = face.normal.clone();

    			}

    		}

    		if ( this.faces.length > 0 ) {

    			this.normalsNeedUpdate = true;

    		}

    	},

    	computeMorphNormals: function () {

    		// save original normals
    		// - create temp variables on first access
    		//   otherwise just copy (for faster repeated calls)

    		for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    			const face = this.faces[ f ];

    			if ( ! face.__originalFaceNormal ) {

    				face.__originalFaceNormal = face.normal.clone();

    			} else {

    				face.__originalFaceNormal.copy( face.normal );

    			}

    			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

    			for ( let i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

    				if ( ! face.__originalVertexNormals[ i ] ) {

    					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

    				} else {

    					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

    				}

    			}

    		}

    		// use temp geometry to compute face and vertex normals for each morph

    		const tmpGeo = new Geometry();
    		tmpGeo.faces = this.faces;

    		for ( let i = 0, il = this.morphTargets.length; i < il; i ++ ) {

    			// create on first access

    			if ( ! this.morphNormals[ i ] ) {

    				this.morphNormals[ i ] = {};
    				this.morphNormals[ i ].faceNormals = [];
    				this.morphNormals[ i ].vertexNormals = [];

    				const dstNormalsFace = this.morphNormals[ i ].faceNormals;
    				const dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

    				for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    					const faceNormal = new Vector3();
    					const vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

    					dstNormalsFace.push( faceNormal );
    					dstNormalsVertex.push( vertexNormals );

    				}

    			}

    			const morphNormals = this.morphNormals[ i ];

    			// set vertices to morph target

    			tmpGeo.vertices = this.morphTargets[ i ].vertices;

    			// compute morph normals

    			tmpGeo.computeFaceNormals();
    			tmpGeo.computeVertexNormals();

    			// store morph normals

    			for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    				const face = this.faces[ f ];

    				const faceNormal = morphNormals.faceNormals[ f ];
    				const vertexNormals = morphNormals.vertexNormals[ f ];

    				faceNormal.copy( face.normal );

    				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
    				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
    				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

    			}

    		}

    		// restore original normals

    		for ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {

    			const face = this.faces[ f ];

    			face.normal = face.__originalFaceNormal;
    			face.vertexNormals = face.__originalVertexNormals;

    		}

    	},

    	computeBoundingBox: function () {

    		if ( this.boundingBox === null ) {

    			this.boundingBox = new Box3();

    		}

    		this.boundingBox.setFromPoints( this.vertices );

    	},

    	computeBoundingSphere: function () {

    		if ( this.boundingSphere === null ) {

    			this.boundingSphere = new Sphere();

    		}

    		this.boundingSphere.setFromPoints( this.vertices );

    	},

    	merge: function ( geometry, matrix, materialIndexOffset ) {

    		if ( ! ( geometry && geometry.isGeometry ) ) {

    			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
    			return;

    		}

    		let normalMatrix,
    			vertexOffset = this.vertices.length,
    			vertices1 = this.vertices,
    			vertices2 = geometry.vertices,
    			faces1 = this.faces,
    			faces2 = geometry.faces,
    			colors1 = this.colors,
    			colors2 = geometry.colors;

    		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

    		if ( matrix !== undefined ) {

    			normalMatrix = new Matrix3().getNormalMatrix( matrix );

    		}

    		// vertices

    		for ( let i = 0, il = vertices2.length; i < il; i ++ ) {

    			const vertex = vertices2[ i ];

    			const vertexCopy = vertex.clone();

    			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

    			vertices1.push( vertexCopy );

    		}

    		// colors

    		for ( let i = 0, il = colors2.length; i < il; i ++ ) {

    			colors1.push( colors2[ i ].clone() );

    		}

    		// faces

    		for ( let i = 0, il = faces2.length; i < il; i ++ ) {

    			let face = faces2[ i ], faceCopy, normal, color,
    				faceVertexNormals = face.vertexNormals,
    				faceVertexColors = face.vertexColors;

    			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
    			faceCopy.normal.copy( face.normal );

    			if ( normalMatrix !== undefined ) {

    				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

    			}

    			for ( let j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

    				normal = faceVertexNormals[ j ].clone();

    				if ( normalMatrix !== undefined ) {

    					normal.applyMatrix3( normalMatrix ).normalize();

    				}

    				faceCopy.vertexNormals.push( normal );

    			}

    			faceCopy.color.copy( face.color );

    			for ( let j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

    				color = faceVertexColors[ j ];
    				faceCopy.vertexColors.push( color.clone() );

    			}

    			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

    			faces1.push( faceCopy );

    		}

    		// uvs

    		for ( let i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

    			const faceVertexUvs2 = geometry.faceVertexUvs[ i ];

    			if ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];

    			for ( let j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {

    				const uvs2 = faceVertexUvs2[ j ], uvsCopy = [];

    				for ( let k = 0, kl = uvs2.length; k < kl; k ++ ) {

    					uvsCopy.push( uvs2[ k ].clone() );

    				}

    				this.faceVertexUvs[ i ].push( uvsCopy );

    			}

    		}

    	},

    	mergeMesh: function ( mesh ) {

    		if ( ! ( mesh && mesh.isMesh ) ) {

    			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
    			return;

    		}

    		if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();

    		this.merge( mesh.geometry, mesh.matrix );

    	},

    	/*
    	 * Checks for duplicate vertices with hashmap.
    	 * Duplicated vertices are removed
    	 * and faces' vertices are updated.
    	 */

    	mergeVertices: function () {

    		const verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
    		const unique = [], changes = [];

    		const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
    		const precision = Math.pow( 10, precisionPoints );

    		for ( let i = 0, il = this.vertices.length; i < il; i ++ ) {

    			const v = this.vertices[ i ];
    			const key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

    			if ( verticesMap[ key ] === undefined ) {

    				verticesMap[ key ] = i;
    				unique.push( this.vertices[ i ] );
    				changes[ i ] = unique.length - 1;

    			} else {

    				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
    				changes[ i ] = changes[ verticesMap[ key ] ];

    			}

    		}


    		// if faces are completely degenerate after merging vertices, we
    		// have to remove them from the geometry.
    		const faceIndicesToRemove = [];

    		for ( let i = 0, il = this.faces.length; i < il; i ++ ) {

    			const face = this.faces[ i ];

    			face.a = changes[ face.a ];
    			face.b = changes[ face.b ];
    			face.c = changes[ face.c ];

    			const indices = [ face.a, face.b, face.c ];

    			// if any duplicate vertices are found in a Face3
    			// we have to remove the face as nothing can be saved
    			for ( let n = 0; n < 3; n ++ ) {

    				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

    					faceIndicesToRemove.push( i );
    					break;

    				}

    			}

    		}

    		for ( let i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

    			const idx = faceIndicesToRemove[ i ];

    			this.faces.splice( idx, 1 );

    			for ( let j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

    				this.faceVertexUvs[ j ].splice( idx, 1 );

    			}

    		}

    		// Use unique set of vertices

    		const diff = this.vertices.length - unique.length;
    		this.vertices = unique;
    		return diff;

    	},

    	setFromPoints: function ( points ) {

    		this.vertices = [];

    		for ( let i = 0, l = points.length; i < l; i ++ ) {

    			const point = points[ i ];
    			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

    		}

    		return this;

    	},

    	sortFacesByMaterialIndex: function () {

    		const faces = this.faces;
    		const length = faces.length;

    		// tag faces

    		for ( let i = 0; i < length; i ++ ) {

    			faces[ i ]._id = i;

    		}

    		// sort faces

    		function materialIndexSort( a, b ) {

    			return a.materialIndex - b.materialIndex;

    		}

    		faces.sort( materialIndexSort );

    		// sort uvs

    		const uvs1 = this.faceVertexUvs[ 0 ];
    		const uvs2 = this.faceVertexUvs[ 1 ];

    		let newUvs1, newUvs2;

    		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
    		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

    		for ( let i = 0; i < length; i ++ ) {

    			const id = faces[ i ]._id;

    			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
    			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

    		}

    		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
    		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

    	},

    	toJSON: function () {

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'Geometry',
    				generator: 'Geometry.toJSON'
    			}
    		};

    		// standard Geometry serialization

    		data.uuid = this.uuid;
    		data.type = this.type;
    		if ( this.name !== '' ) data.name = this.name;

    		if ( this.parameters !== undefined ) {

    			const parameters = this.parameters;

    			for ( const key in parameters ) {

    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

    			}

    			return data;

    		}

    		const vertices = [];

    		for ( let i = 0; i < this.vertices.length; i ++ ) {

    			const vertex = this.vertices[ i ];
    			vertices.push( vertex.x, vertex.y, vertex.z );

    		}

    		const faces = [];
    		const normals = [];
    		const normalsHash = {};
    		const colors = [];
    		const colorsHash = {};
    		const uvs = [];
    		const uvsHash = {};

    		for ( let i = 0; i < this.faces.length; i ++ ) {

    			const face = this.faces[ i ];

    			const hasMaterial = true;
    			const hasFaceUv = false; // deprecated
    			const hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
    			const hasFaceNormal = face.normal.length() > 0;
    			const hasFaceVertexNormal = face.vertexNormals.length > 0;
    			const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
    			const hasFaceVertexColor = face.vertexColors.length > 0;

    			let faceType = 0;

    			faceType = setBit( faceType, 0, 0 ); // isQuad
    			faceType = setBit( faceType, 1, hasMaterial );
    			faceType = setBit( faceType, 2, hasFaceUv );
    			faceType = setBit( faceType, 3, hasFaceVertexUv );
    			faceType = setBit( faceType, 4, hasFaceNormal );
    			faceType = setBit( faceType, 5, hasFaceVertexNormal );
    			faceType = setBit( faceType, 6, hasFaceColor );
    			faceType = setBit( faceType, 7, hasFaceVertexColor );

    			faces.push( faceType );
    			faces.push( face.a, face.b, face.c );
    			faces.push( face.materialIndex );

    			if ( hasFaceVertexUv ) {

    				const faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

    				faces.push(
    					getUvIndex( faceVertexUvs[ 0 ] ),
    					getUvIndex( faceVertexUvs[ 1 ] ),
    					getUvIndex( faceVertexUvs[ 2 ] )
    				);

    			}

    			if ( hasFaceNormal ) {

    				faces.push( getNormalIndex( face.normal ) );

    			}

    			if ( hasFaceVertexNormal ) {

    				const vertexNormals = face.vertexNormals;

    				faces.push(
    					getNormalIndex( vertexNormals[ 0 ] ),
    					getNormalIndex( vertexNormals[ 1 ] ),
    					getNormalIndex( vertexNormals[ 2 ] )
    				);

    			}

    			if ( hasFaceColor ) {

    				faces.push( getColorIndex( face.color ) );

    			}

    			if ( hasFaceVertexColor ) {

    				const vertexColors = face.vertexColors;

    				faces.push(
    					getColorIndex( vertexColors[ 0 ] ),
    					getColorIndex( vertexColors[ 1 ] ),
    					getColorIndex( vertexColors[ 2 ] )
    				);

    			}

    		}

    		function setBit( value, position, enabled ) {

    			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

    		}

    		function getNormalIndex( normal ) {

    			const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

    			if ( normalsHash[ hash ] !== undefined ) {

    				return normalsHash[ hash ];

    			}

    			normalsHash[ hash ] = normals.length / 3;
    			normals.push( normal.x, normal.y, normal.z );

    			return normalsHash[ hash ];

    		}

    		function getColorIndex( color ) {

    			const hash = color.r.toString() + color.g.toString() + color.b.toString();

    			if ( colorsHash[ hash ] !== undefined ) {

    				return colorsHash[ hash ];

    			}

    			colorsHash[ hash ] = colors.length;
    			colors.push( color.getHex() );

    			return colorsHash[ hash ];

    		}

    		function getUvIndex( uv ) {

    			const hash = uv.x.toString() + uv.y.toString();

    			if ( uvsHash[ hash ] !== undefined ) {

    				return uvsHash[ hash ];

    			}

    			uvsHash[ hash ] = uvs.length / 2;
    			uvs.push( uv.x, uv.y );

    			return uvsHash[ hash ];

    		}

    		data.data = {};

    		data.data.vertices = vertices;
    		data.data.normals = normals;
    		if ( colors.length > 0 ) data.data.colors = colors;
    		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
    		data.data.faces = faces;

    		return data;

    	},

    	clone: function () {

    		/*
    		 // Handle primitives

    		 const parameters = this.parameters;

    		 if ( parameters !== undefined ) {

    		 const values = [];

    		 for ( const key in parameters ) {

    		 values.push( parameters[ key ] );

    		 }

    		 const geometry = Object.create( this.constructor.prototype );
    		 this.constructor.apply( geometry, values );
    		 return geometry;

    		 }

    		 return new this.constructor().copy( this );
    		 */

    		return new Geometry().copy( this );

    	},

    	copy: function ( source ) {

    		// reset

    		this.vertices = [];
    		this.colors = [];
    		this.faces = [];
    		this.faceVertexUvs = [[]];
    		this.morphTargets = [];
    		this.morphNormals = [];
    		this.skinWeights = [];
    		this.skinIndices = [];
    		this.lineDistances = [];
    		this.boundingBox = null;
    		this.boundingSphere = null;

    		// name

    		this.name = source.name;

    		// vertices

    		const vertices = source.vertices;

    		for ( let i = 0, il = vertices.length; i < il; i ++ ) {

    			this.vertices.push( vertices[ i ].clone() );

    		}

    		// colors

    		const colors = source.colors;

    		for ( let i = 0, il = colors.length; i < il; i ++ ) {

    			this.colors.push( colors[ i ].clone() );

    		}

    		// faces

    		const faces = source.faces;

    		for ( let i = 0, il = faces.length; i < il; i ++ ) {

    			this.faces.push( faces[ i ].clone() );

    		}

    		// face vertex uvs

    		for ( let i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

    			const faceVertexUvs = source.faceVertexUvs[ i ];

    			if ( this.faceVertexUvs[ i ] === undefined ) {

    				this.faceVertexUvs[ i ] = [];

    			}

    			for ( let j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

    				const uvs = faceVertexUvs[ j ], uvsCopy = [];

    				for ( let k = 0, kl = uvs.length; k < kl; k ++ ) {

    					const uv = uvs[ k ];

    					uvsCopy.push( uv.clone() );

    				}

    				this.faceVertexUvs[ i ].push( uvsCopy );

    			}

    		}

    		// morph targets

    		const morphTargets = source.morphTargets;

    		for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {

    			const morphTarget = {};
    			morphTarget.name = morphTargets[ i ].name;

    			// vertices

    			if ( morphTargets[ i ].vertices !== undefined ) {

    				morphTarget.vertices = [];

    				for ( let j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

    					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

    				}

    			}

    			// normals

    			if ( morphTargets[ i ].normals !== undefined ) {

    				morphTarget.normals = [];

    				for ( let j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

    					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

    				}

    			}

    			this.morphTargets.push( morphTarget );

    		}

    		// morph normals

    		const morphNormals = source.morphNormals;

    		for ( let i = 0, il = morphNormals.length; i < il; i ++ ) {

    			const morphNormal = {};

    			// vertex normals

    			if ( morphNormals[ i ].vertexNormals !== undefined ) {

    				morphNormal.vertexNormals = [];

    				for ( let j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

    					const srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
    					const destVertexNormal = {};

    					destVertexNormal.a = srcVertexNormal.a.clone();
    					destVertexNormal.b = srcVertexNormal.b.clone();
    					destVertexNormal.c = srcVertexNormal.c.clone();

    					morphNormal.vertexNormals.push( destVertexNormal );

    				}

    			}

    			// face normals

    			if ( morphNormals[ i ].faceNormals !== undefined ) {

    				morphNormal.faceNormals = [];

    				for ( let j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

    					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

    				}

    			}

    			this.morphNormals.push( morphNormal );

    		}

    		// skin weights

    		const skinWeights = source.skinWeights;

    		for ( let i = 0, il = skinWeights.length; i < il; i ++ ) {

    			this.skinWeights.push( skinWeights[ i ].clone() );

    		}

    		// skin indices

    		const skinIndices = source.skinIndices;

    		for ( let i = 0, il = skinIndices.length; i < il; i ++ ) {

    			this.skinIndices.push( skinIndices[ i ].clone() );

    		}

    		// line distances

    		const lineDistances = source.lineDistances;

    		for ( let i = 0, il = lineDistances.length; i < il; i ++ ) {

    			this.lineDistances.push( lineDistances[ i ] );

    		}

    		// bounding box

    		const boundingBox = source.boundingBox;

    		if ( boundingBox !== null ) {

    			this.boundingBox = boundingBox.clone();

    		}

    		// bounding sphere

    		const boundingSphere = source.boundingSphere;

    		if ( boundingSphere !== null ) {

    			this.boundingSphere = boundingSphere.clone();

    		}

    		// update flags

    		this.elementsNeedUpdate = source.elementsNeedUpdate;
    		this.verticesNeedUpdate = source.verticesNeedUpdate;
    		this.uvsNeedUpdate = source.uvsNeedUpdate;
    		this.normalsNeedUpdate = source.normalsNeedUpdate;
    		this.colorsNeedUpdate = source.colorsNeedUpdate;
    		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
    		this.groupsNeedUpdate = source.groupsNeedUpdate;

    		return this;

    	},

    	dispose: function () {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    } );

    // BoxGeometry

    class BoxGeometry extends Geometry {

    	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {

    		super();

    		this.type = 'BoxGeometry';

    		this.parameters = {
    			width: width,
    			height: height,
    			depth: depth,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments,
    			depthSegments: depthSegments
    		};

    		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
    		this.mergeVertices();

    	}

    }

    // BoxBufferGeometry

    class BoxBufferGeometry extends BufferGeometry {

    	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

    		super();

    		this.type = 'BoxBufferGeometry';

    		this.parameters = {
    			width: width,
    			height: height,
    			depth: depth,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments,
    			depthSegments: depthSegments
    		};

    		const scope = this;

    		// segments

    		widthSegments = Math.floor( widthSegments );
    		heightSegments = Math.floor( heightSegments );
    		depthSegments = Math.floor( depthSegments );

    		// buffers

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		// helper variables

    		let numberOfVertices = 0;
    		let groupStart = 0;

    		// build each side of the box geometry

    		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
    		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
    		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
    		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
    		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
    		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

    		// build geometry

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

    			const segmentWidth = width / gridX;
    			const segmentHeight = height / gridY;

    			const widthHalf = width / 2;
    			const heightHalf = height / 2;
    			const depthHalf = depth / 2;

    			const gridX1 = gridX + 1;
    			const gridY1 = gridY + 1;

    			let vertexCounter = 0;
    			let groupCount = 0;

    			const vector = new Vector3();

    			// generate vertices, normals and uvs

    			for ( let iy = 0; iy < gridY1; iy ++ ) {

    				const y = iy * segmentHeight - heightHalf;

    				for ( let ix = 0; ix < gridX1; ix ++ ) {

    					const x = ix * segmentWidth - widthHalf;

    					// set values to correct vector component

    					vector[ u ] = x * udir;
    					vector[ v ] = y * vdir;
    					vector[ w ] = depthHalf;

    					// now apply vector to vertex buffer

    					vertices.push( vector.x, vector.y, vector.z );

    					// set values to correct vector component

    					vector[ u ] = 0;
    					vector[ v ] = 0;
    					vector[ w ] = depth > 0 ? 1 : - 1;

    					// now apply vector to normal buffer

    					normals.push( vector.x, vector.y, vector.z );

    					// uvs

    					uvs.push( ix / gridX );
    					uvs.push( 1 - ( iy / gridY ) );

    					// counters

    					vertexCounter += 1;

    				}

    			}

    			// indices

    			// 1. you need three indices to draw a single face
    			// 2. a single segment consists of two faces
    			// 3. so we need to generate six (2*3) indices per segment

    			for ( let iy = 0; iy < gridY; iy ++ ) {

    				for ( let ix = 0; ix < gridX; ix ++ ) {

    					const a = numberOfVertices + ix + gridX1 * iy;
    					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
    					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
    					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

    					// faces

    					indices.push( a, b, d );
    					indices.push( b, c, d );

    					// increase counter

    					groupCount += 6;

    				}

    			}

    			// add a group to the geometry. this will ensure multi material support

    			scope.addGroup( groupStart, groupCount, materialIndex );

    			// calculate new start value for groups

    			groupStart += groupCount;

    			// update total number of vertices

    			numberOfVertices += vertexCounter;

    		}

    	}

    }

    /**
     * Uniform Utilities
     */

    function cloneUniforms( src ) {

    	const dst = {};

    	for ( const u in src ) {

    		dst[ u ] = {};

    		for ( const p in src[ u ] ) {

    			const property = src[ u ][ p ];

    			if ( property && ( property.isColor ||
    				property.isMatrix3 || property.isMatrix4 ||
    				property.isVector2 || property.isVector3 || property.isVector4 ||
    				property.isTexture ) ) {

    				dst[ u ][ p ] = property.clone();

    			} else if ( Array.isArray( property ) ) {

    				dst[ u ][ p ] = property.slice();

    			} else {

    				dst[ u ][ p ] = property;

    			}

    		}

    	}

    	return dst;

    }

    function mergeUniforms( uniforms ) {

    	const merged = {};

    	for ( let u = 0; u < uniforms.length; u ++ ) {

    		const tmp = cloneUniforms( uniforms[ u ] );

    		for ( const p in tmp ) {

    			merged[ p ] = tmp[ p ];

    		}

    	}

    	return merged;

    }

    // Legacy

    const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

    var default_vertex = /* glsl */`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`;

    var default_fragment = /* glsl */`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;

    /**
     * parameters = {
     *  defines: { "label" : "value" },
     *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
     *
     *  fragmentShader: <string>,
     *  vertexShader: <string>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  lights: <bool>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function ShaderMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'ShaderMaterial';

    	this.defines = {};
    	this.uniforms = {};

    	this.vertexShader = default_vertex;
    	this.fragmentShader = default_fragment;

    	this.linewidth = 1;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;

    	this.fog = false; // set to use scene fog
    	this.lights = false; // set to use scene lights
    	this.clipping = false; // set to use user-defined clipping planes

    	this.skinning = false; // set to use skinning attribute streams
    	this.morphTargets = false; // set to use morph targets
    	this.morphNormals = false; // set to use morph normals

    	this.extensions = {
    		derivatives: false, // set to use derivatives
    		fragDepth: false, // set to use fragment depth values
    		drawBuffers: false, // set to use draw buffers
    		shaderTextureLOD: false // set to use shader texture LOD
    	};

    	// When rendered geometry doesn't include these attributes but the material does,
    	// use these default values in WebGL. This avoids errors when buffer data is missing.
    	this.defaultAttributeValues = {
    		'color': [ 1, 1, 1 ],
    		'uv': [ 0, 0 ],
    		'uv2': [ 0, 0 ]
    	};

    	this.index0AttributeName = undefined;
    	this.uniformsNeedUpdate = false;

    	if ( parameters !== undefined ) {

    		if ( parameters.attributes !== undefined ) {

    			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

    		}

    		this.setValues( parameters );

    	}

    }

    ShaderMaterial.prototype = Object.create( Material.prototype );
    ShaderMaterial.prototype.constructor = ShaderMaterial;

    ShaderMaterial.prototype.isShaderMaterial = true;

    ShaderMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.fragmentShader = source.fragmentShader;
    	this.vertexShader = source.vertexShader;

    	this.uniforms = cloneUniforms( source.uniforms );

    	this.defines = Object.assign( {}, source.defines );

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;

    	this.lights = source.lights;
    	this.clipping = source.clipping;

    	this.skinning = source.skinning;

    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	this.extensions = Object.assign( {}, source.extensions );

    	return this;

    };

    ShaderMaterial.prototype.toJSON = function ( meta ) {

    	const data = Material.prototype.toJSON.call( this, meta );

    	data.uniforms = {};

    	for ( const name in this.uniforms ) {

    		const uniform = this.uniforms[ name ];
    		const value = uniform.value;

    		if ( value && value.isTexture ) {

    			data.uniforms[ name ] = {
    				type: 't',
    				value: value.toJSON( meta ).uuid
    			};

    		} else if ( value && value.isColor ) {

    			data.uniforms[ name ] = {
    				type: 'c',
    				value: value.getHex()
    			};

    		} else if ( value && value.isVector2 ) {

    			data.uniforms[ name ] = {
    				type: 'v2',
    				value: value.toArray()
    			};

    		} else if ( value && value.isVector3 ) {

    			data.uniforms[ name ] = {
    				type: 'v3',
    				value: value.toArray()
    			};

    		} else if ( value && value.isVector4 ) {

    			data.uniforms[ name ] = {
    				type: 'v4',
    				value: value.toArray()
    			};

    		} else if ( value && value.isMatrix3 ) {

    			data.uniforms[ name ] = {
    				type: 'm3',
    				value: value.toArray()
    			};

    		} else if ( value && value.isMatrix4 ) {

    			data.uniforms[ name ] = {
    				type: 'm4',
    				value: value.toArray()
    			};

    		} else {

    			data.uniforms[ name ] = {
    				value: value
    			};

    			// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

    		}

    	}

    	if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

    	data.vertexShader = this.vertexShader;
    	data.fragmentShader = this.fragmentShader;

    	const extensions = {};

    	for ( const key in this.extensions ) {

    		if ( this.extensions[ key ] === true ) extensions[ key ] = true;

    	}

    	if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

    	return data;

    };

    function Camera$1() {

    	Object3D.call( this );

    	this.type = 'Camera';

    	this.matrixWorldInverse = new Matrix4();

    	this.projectionMatrix = new Matrix4();
    	this.projectionMatrixInverse = new Matrix4();

    }

    Camera$1.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Camera$1,

    	isCamera: true,

    	copy: function ( source, recursive ) {

    		Object3D.prototype.copy.call( this, source, recursive );

    		this.matrixWorldInverse.copy( source.matrixWorldInverse );

    		this.projectionMatrix.copy( source.projectionMatrix );
    		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

    		return this;

    	},

    	getWorldDirection: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
    			target = new Vector3();

    		}

    		this.updateMatrixWorld( true );

    		const e = this.matrixWorld.elements;

    		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

    	},

    	updateMatrixWorld: function ( force ) {

    		Object3D.prototype.updateMatrixWorld.call( this, force );

    		this.matrixWorldInverse.getInverse( this.matrixWorld );

    	},

    	updateWorldMatrix: function ( updateParents, updateChildren ) {

    		Object3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );

    		this.matrixWorldInverse.getInverse( this.matrixWorld );

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	}

    } );

    function PerspectiveCamera( fov, aspect, near, far ) {

    	Camera$1.call( this );

    	this.type = 'PerspectiveCamera';

    	this.fov = fov !== undefined ? fov : 50;
    	this.zoom = 1;

    	this.near = near !== undefined ? near : 0.1;
    	this.far = far !== undefined ? far : 2000;
    	this.focus = 10;

    	this.aspect = aspect !== undefined ? aspect : 1;
    	this.view = null;

    	this.filmGauge = 35;	// width of the film (default in millimeters)
    	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

    	this.updateProjectionMatrix();

    }

    PerspectiveCamera.prototype = Object.assign( Object.create( Camera$1.prototype ), {

    	constructor: PerspectiveCamera,

    	isPerspectiveCamera: true,

    	copy: function ( source, recursive ) {

    		Camera$1.prototype.copy.call( this, source, recursive );

    		this.fov = source.fov;
    		this.zoom = source.zoom;

    		this.near = source.near;
    		this.far = source.far;
    		this.focus = source.focus;

    		this.aspect = source.aspect;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		this.filmGauge = source.filmGauge;
    		this.filmOffset = source.filmOffset;

    		return this;

    	},

    	/**
    	 * Sets the FOV by focal length in respect to the current .filmGauge.
    	 *
    	 * The default film gauge is 35, so that the focal length can be specified for
    	 * a 35mm (full frame) camera.
    	 *
    	 * Values for focal length and film gauge must have the same unit.
    	 */
    	setFocalLength: function ( focalLength ) {

    		// see http://www.bobatkins.com/photography/technical/field_of_view.html
    		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

    		this.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );
    		this.updateProjectionMatrix();

    	},

    	/**
    	 * Calculates the focal length from the current .fov and .filmGauge.
    	 */
    	getFocalLength: function () {

    		const vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );

    		return 0.5 * this.getFilmHeight() / vExtentSlope;

    	},

    	getEffectiveFOV: function () {

    		return MathUtils.RAD2DEG * 2 * Math.atan(
    			Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );

    	},

    	getFilmWidth: function () {

    		// film not completely covered in portrait format (aspect < 1)
    		return this.filmGauge * Math.min( this.aspect, 1 );

    	},

    	getFilmHeight: function () {

    		// film not completely covered in landscape format (aspect > 1)
    		return this.filmGauge / Math.max( this.aspect, 1 );

    	},

    	/**
    	 * Sets an offset in a larger frustum. This is useful for multi-window or
    	 * multi-monitor/multi-machine setups.
    	 *
    	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
    	 * the monitors are in grid like this
    	 *
    	 *   +---+---+---+
    	 *   | A | B | C |
    	 *   +---+---+---+
    	 *   | D | E | F |
    	 *   +---+---+---+
    	 *
    	 * then for each monitor you would call it like this
    	 *
    	 *   const w = 1920;
    	 *   const h = 1080;
    	 *   const fullWidth = w * 3;
    	 *   const fullHeight = h * 2;
    	 *
    	 *   --A--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
    	 *   --B--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
    	 *   --C--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
    	 *   --D--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
    	 *   --E--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
    	 *   --F--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
    	 *
    	 *   Note there is no reason monitors have to be the same size or in a grid.
    	 */
    	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

    		this.aspect = fullWidth / fullHeight;

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	},

    	clearViewOffset: function () {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	},

    	updateProjectionMatrix: function () {

    		let near = this.near,
    			top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,
    			height = 2 * top,
    			width = this.aspect * height,
    			left = - 0.5 * width,
    			view = this.view;

    		if ( this.view !== null && this.view.enabled ) {

    			const fullWidth = view.fullWidth,
    				fullHeight = view.fullHeight;

    			left += view.offsetX * width / fullWidth;
    			top -= view.offsetY * height / fullHeight;
    			width *= view.width / fullWidth;
    			height *= view.height / fullHeight;

    		}

    		const skew = this.filmOffset;
    		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

    		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

    		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

    	},

    	toJSON: function ( meta ) {

    		const data = Object3D.prototype.toJSON.call( this, meta );

    		data.object.fov = this.fov;
    		data.object.zoom = this.zoom;

    		data.object.near = this.near;
    		data.object.far = this.far;
    		data.object.focus = this.focus;

    		data.object.aspect = this.aspect;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		data.object.filmGauge = this.filmGauge;
    		data.object.filmOffset = this.filmOffset;

    		return data;

    	}

    } );

    const fov = 90, aspect = 1;

    function CubeCamera( near, far, renderTarget ) {

    	Object3D.call( this );

    	this.type = 'CubeCamera';

    	if ( renderTarget.isWebGLCubeRenderTarget !== true ) {

    		console.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );
    		return;

    	}

    	this.renderTarget = renderTarget;

    	const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
    	cameraPX.layers = this.layers;
    	cameraPX.up.set( 0, - 1, 0 );
    	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
    	this.add( cameraPX );

    	const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
    	cameraNX.layers = this.layers;
    	cameraNX.up.set( 0, - 1, 0 );
    	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
    	this.add( cameraNX );

    	const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
    	cameraPY.layers = this.layers;
    	cameraPY.up.set( 0, 0, 1 );
    	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
    	this.add( cameraPY );

    	const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
    	cameraNY.layers = this.layers;
    	cameraNY.up.set( 0, 0, - 1 );
    	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
    	this.add( cameraNY );

    	const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
    	cameraPZ.layers = this.layers;
    	cameraPZ.up.set( 0, - 1, 0 );
    	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
    	this.add( cameraPZ );

    	const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
    	cameraNZ.layers = this.layers;
    	cameraNZ.up.set( 0, - 1, 0 );
    	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
    	this.add( cameraNZ );

    	this.update = function ( renderer, scene ) {

    		if ( this.parent === null ) this.updateMatrixWorld();

    		const currentXrEnabled = renderer.xr.enabled;
    		const currentRenderTarget = renderer.getRenderTarget();

    		renderer.xr.enabled = false;

    		const generateMipmaps = renderTarget.texture.generateMipmaps;

    		renderTarget.texture.generateMipmaps = false;

    		renderer.setRenderTarget( renderTarget, 0 );
    		renderer.render( scene, cameraPX );

    		renderer.setRenderTarget( renderTarget, 1 );
    		renderer.render( scene, cameraNX );

    		renderer.setRenderTarget( renderTarget, 2 );
    		renderer.render( scene, cameraPY );

    		renderer.setRenderTarget( renderTarget, 3 );
    		renderer.render( scene, cameraNY );

    		renderer.setRenderTarget( renderTarget, 4 );
    		renderer.render( scene, cameraPZ );

    		renderTarget.texture.generateMipmaps = generateMipmaps;

    		renderer.setRenderTarget( renderTarget, 5 );
    		renderer.render( scene, cameraNZ );

    		renderer.setRenderTarget( currentRenderTarget );

    		renderer.xr.enabled = currentXrEnabled;

    	};

    	this.clear = function ( renderer, color, depth, stencil ) {

    		const currentRenderTarget = renderer.getRenderTarget();

    		for ( let i = 0; i < 6; i ++ ) {

    			renderer.setRenderTarget( renderTarget, i );

    			renderer.clear( color, depth, stencil );

    		}

    		renderer.setRenderTarget( currentRenderTarget );

    	};

    }

    CubeCamera.prototype = Object.create( Object3D.prototype );
    CubeCamera.prototype.constructor = CubeCamera;

    function WebGLCubeRenderTarget( size, options, dummy ) {

    	if ( Number.isInteger( options ) ) {

    		console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );

    		options = dummy;

    	}

    	WebGLRenderTarget.call( this, size, size, options );

    }

    WebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );
    WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;

    WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

    WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {

    	this.texture.type = texture.type;
    	this.texture.format = RGBAFormat; // see #18859
    	this.texture.encoding = texture.encoding;

    	this.texture.generateMipmaps = texture.generateMipmaps;
    	this.texture.minFilter = texture.minFilter;
    	this.texture.magFilter = texture.magFilter;

    	const scene = new Scene();

    	const shader = {

    		uniforms: {
    			tEquirect: { value: null },
    		},

    		vertexShader: /* glsl */`

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,

    		fragmentShader: /* glsl */`

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`
    	};

    	const material = new ShaderMaterial( {

    		name: 'CubemapFromEquirect',

    		uniforms: cloneUniforms( shader.uniforms ),
    		vertexShader: shader.vertexShader,
    		fragmentShader: shader.fragmentShader,
    		side: BackSide,
    		blending: NoBlending

    	} );

    	material.uniforms.tEquirect.value = texture;

    	const mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );

    	scene.add( mesh );

    	const camera = new CubeCamera( 1, 10, this );
    	camera.update( renderer, scene );

    	mesh.geometry.dispose();
    	mesh.material.dispose();

    	return this;

    };

    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

    	this.image = { data: data || null, width: width || 1, height: height || 1 };

    	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
    	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

    	this.generateMipmaps = false;
    	this.flipY = false;
    	this.unpackAlignment = 1;

    	this.needsUpdate = true;

    }

    DataTexture.prototype = Object.create( Texture.prototype );
    DataTexture.prototype.constructor = DataTexture;

    DataTexture.prototype.isDataTexture = true;

    const _sphere$2 = new Sphere();
    const _vector$6 = new Vector3();

    function Frustum( p0, p1, p2, p3, p4, p5 ) {

    	this.planes = [

    		( p0 !== undefined ) ? p0 : new Plane(),
    		( p1 !== undefined ) ? p1 : new Plane(),
    		( p2 !== undefined ) ? p2 : new Plane(),
    		( p3 !== undefined ) ? p3 : new Plane(),
    		( p4 !== undefined ) ? p4 : new Plane(),
    		( p5 !== undefined ) ? p5 : new Plane()

    	];

    }

    Object.assign( Frustum.prototype, {

    	set: function ( p0, p1, p2, p3, p4, p5 ) {

    		const planes = this.planes;

    		planes[ 0 ].copy( p0 );
    		planes[ 1 ].copy( p1 );
    		planes[ 2 ].copy( p2 );
    		planes[ 3 ].copy( p3 );
    		planes[ 4 ].copy( p4 );
    		planes[ 5 ].copy( p5 );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( frustum ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			planes[ i ].copy( frustum.planes[ i ] );

    		}

    		return this;

    	},

    	setFromProjectionMatrix: function ( m ) {

    		const planes = this.planes;
    		const me = m.elements;
    		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
    		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
    		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
    		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

    		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
    		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
    		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
    		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
    		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
    		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

    		return this;

    	},

    	intersectsObject: function ( object ) {

    		const geometry = object.geometry;

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

    		return this.intersectsSphere( _sphere$2 );

    	},

    	intersectsSprite: function ( sprite ) {

    		_sphere$2.center.set( 0, 0, 0 );
    		_sphere$2.radius = 0.7071067811865476;
    		_sphere$2.applyMatrix4( sprite.matrixWorld );

    		return this.intersectsSphere( _sphere$2 );

    	},

    	intersectsSphere: function ( sphere ) {

    		const planes = this.planes;
    		const center = sphere.center;
    		const negRadius = - sphere.radius;

    		for ( let i = 0; i < 6; i ++ ) {

    			const distance = planes[ i ].distanceToPoint( center );

    			if ( distance < negRadius ) {

    				return false;

    			}

    		}

    		return true;

    	},

    	intersectsBox: function ( box ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			const plane = planes[ i ];

    			// corner at max distance

    			_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
    			_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
    			_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;

    			if ( plane.distanceToPoint( _vector$6 ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	},

    	containsPoint: function ( point ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	}

    } );

    /**
     * Uniforms library for shared webgl shaders
     */

    const UniformsLib = {

    	common: {

    		diffuse: { value: new Color( 0xeeeeee ) },
    		opacity: { value: 1.0 },

    		map: { value: null },
    		uvTransform: { value: new Matrix3() },
    		uv2Transform: { value: new Matrix3() },

    		alphaMap: { value: null },

    	},

    	specularmap: {

    		specularMap: { value: null },

    	},

    	envmap: {

    		envMap: { value: null },
    		flipEnvMap: { value: - 1 },
    		reflectivity: { value: 1.0 },
    		refractionRatio: { value: 0.98 },
    		maxMipLevel: { value: 0 }

    	},

    	aomap: {

    		aoMap: { value: null },
    		aoMapIntensity: { value: 1 }

    	},

    	lightmap: {

    		lightMap: { value: null },
    		lightMapIntensity: { value: 1 }

    	},

    	emissivemap: {

    		emissiveMap: { value: null }

    	},

    	bumpmap: {

    		bumpMap: { value: null },
    		bumpScale: { value: 1 }

    	},

    	normalmap: {

    		normalMap: { value: null },
    		normalScale: { value: new Vector2( 1, 1 ) }

    	},

    	displacementmap: {

    		displacementMap: { value: null },
    		displacementScale: { value: 1 },
    		displacementBias: { value: 0 }

    	},

    	roughnessmap: {

    		roughnessMap: { value: null }

    	},

    	metalnessmap: {

    		metalnessMap: { value: null }

    	},

    	gradientmap: {

    		gradientMap: { value: null }

    	},

    	fog: {

    		fogDensity: { value: 0.00025 },
    		fogNear: { value: 1 },
    		fogFar: { value: 2000 },
    		fogColor: { value: new Color( 0xffffff ) }

    	},

    	lights: {

    		ambientLightColor: { value: [] },

    		lightProbe: { value: [] },

    		directionalLights: { value: [], properties: {
    			direction: {},
    			color: {}
    		} },

    		directionalLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		directionalShadowMap: { value: [] },
    		directionalShadowMatrix: { value: [] },

    		spotLights: { value: [], properties: {
    			color: {},
    			position: {},
    			direction: {},
    			distance: {},
    			coneCos: {},
    			penumbraCos: {},
    			decay: {}
    		} },

    		spotLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		spotShadowMap: { value: [] },
    		spotShadowMatrix: { value: [] },

    		pointLights: { value: [], properties: {
    			color: {},
    			position: {},
    			decay: {},
    			distance: {}
    		} },

    		pointLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {},
    			shadowCameraNear: {},
    			shadowCameraFar: {}
    		} },

    		pointShadowMap: { value: [] },
    		pointShadowMatrix: { value: [] },

    		hemisphereLights: { value: [], properties: {
    			direction: {},
    			skyColor: {},
    			groundColor: {}
    		} },

    		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    		rectAreaLights: { value: [], properties: {
    			color: {},
    			position: {},
    			width: {},
    			height: {}
    		} }

    	},

    	points: {

    		diffuse: { value: new Color( 0xeeeeee ) },
    		opacity: { value: 1.0 },
    		size: { value: 1.0 },
    		scale: { value: 1.0 },
    		map: { value: null },
    		alphaMap: { value: null },
    		uvTransform: { value: new Matrix3() }

    	},

    	sprite: {

    		diffuse: { value: new Color( 0xeeeeee ) },
    		opacity: { value: 1.0 },
    		center: { value: new Vector2( 0.5, 0.5 ) },
    		rotation: { value: 0.0 },
    		map: { value: null },
    		alphaMap: { value: null },
    		uvTransform: { value: new Matrix3() }

    	}

    };

    function WebGLAnimation() {

    	let context = null;
    	let isAnimating = false;
    	let animationLoop = null;
    	let requestId = null;

    	function onAnimationFrame( time, frame ) {

    		animationLoop( time, frame );

    		requestId = context.requestAnimationFrame( onAnimationFrame );

    	}

    	return {

    		start: function () {

    			if ( isAnimating === true ) return;
    			if ( animationLoop === null ) return;

    			requestId = context.requestAnimationFrame( onAnimationFrame );

    			isAnimating = true;

    		},

    		stop: function () {

    			context.cancelAnimationFrame( requestId );

    			isAnimating = false;

    		},

    		setAnimationLoop: function ( callback ) {

    			animationLoop = callback;

    		},

    		setContext: function ( value ) {

    			context = value;

    		}

    	};

    }

    function WebGLAttributes( gl, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	const buffers = new WeakMap();

    	function createBuffer( attribute, bufferType ) {

    		const array = attribute.array;
    		const usage = attribute.usage;

    		const buffer = gl.createBuffer();

    		gl.bindBuffer( bufferType, buffer );
    		gl.bufferData( bufferType, array, usage );

    		attribute.onUploadCallback();

    		let type = gl.FLOAT;

    		if ( array instanceof Float32Array ) {

    			type = gl.FLOAT;

    		} else if ( array instanceof Float64Array ) {

    			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

    		} else if ( array instanceof Uint16Array ) {

    			type = gl.UNSIGNED_SHORT;

    		} else if ( array instanceof Int16Array ) {

    			type = gl.SHORT;

    		} else if ( array instanceof Uint32Array ) {

    			type = gl.UNSIGNED_INT;

    		} else if ( array instanceof Int32Array ) {

    			type = gl.INT;

    		} else if ( array instanceof Int8Array ) {

    			type = gl.BYTE;

    		} else if ( array instanceof Uint8Array ) {

    			type = gl.UNSIGNED_BYTE;

    		}

    		return {
    			buffer: buffer,
    			type: type,
    			bytesPerElement: array.BYTES_PER_ELEMENT,
    			version: attribute.version
    		};

    	}

    	function updateBuffer( buffer, attribute, bufferType ) {

    		const array = attribute.array;
    		const updateRange = attribute.updateRange;

    		gl.bindBuffer( bufferType, buffer );

    		if ( updateRange.count === - 1 ) {

    			// Not using update ranges

    			gl.bufferSubData( bufferType, 0, array );

    		} else {

    			if ( isWebGL2 ) {

    				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
    					array, updateRange.offset, updateRange.count );

    			} else {

    				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
    					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

    			}

    			updateRange.count = - 1; // reset range

    		}

    	}

    	//

    	function get( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		return buffers.get( attribute );

    	}

    	function remove( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		const data = buffers.get( attribute );

    		if ( data ) {

    			gl.deleteBuffer( data.buffer );

    			buffers.delete( attribute );

    		}

    	}

    	function update( attribute, bufferType ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		const data = buffers.get( attribute );

    		if ( data === undefined ) {

    			buffers.set( attribute, createBuffer( attribute, bufferType ) );

    		} else if ( data.version < attribute.version ) {

    			updateBuffer( data.buffer, attribute, bufferType );

    			data.version = attribute.version;

    		}

    	}

    	return {

    		get: get,
    		remove: remove,
    		update: update

    	};

    }

    // PlaneGeometry

    function PlaneGeometry( width, height, widthSegments, heightSegments ) {

    	Geometry.call( this );

    	this.type = 'PlaneGeometry';

    	this.parameters = {
    		width: width,
    		height: height,
    		widthSegments: widthSegments,
    		heightSegments: heightSegments
    	};

    	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
    	this.mergeVertices();

    }

    PlaneGeometry.prototype = Object.create( Geometry.prototype );
    PlaneGeometry.prototype.constructor = PlaneGeometry;

    // PlaneBufferGeometry

    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

    	BufferGeometry.call( this );

    	this.type = 'PlaneBufferGeometry';

    	this.parameters = {
    		width: width,
    		height: height,
    		widthSegments: widthSegments,
    		heightSegments: heightSegments
    	};

    	width = width || 1;
    	height = height || 1;

    	const width_half = width / 2;
    	const height_half = height / 2;

    	const gridX = Math.floor( widthSegments ) || 1;
    	const gridY = Math.floor( heightSegments ) || 1;

    	const gridX1 = gridX + 1;
    	const gridY1 = gridY + 1;

    	const segment_width = width / gridX;
    	const segment_height = height / gridY;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// generate vertices, normals and uvs

    	for ( let iy = 0; iy < gridY1; iy ++ ) {

    		const y = iy * segment_height - height_half;

    		for ( let ix = 0; ix < gridX1; ix ++ ) {

    			const x = ix * segment_width - width_half;

    			vertices.push( x, - y, 0 );

    			normals.push( 0, 0, 1 );

    			uvs.push( ix / gridX );
    			uvs.push( 1 - ( iy / gridY ) );

    		}

    	}

    	// indices

    	for ( let iy = 0; iy < gridY; iy ++ ) {

    		for ( let ix = 0; ix < gridX; ix ++ ) {

    			const a = ix + gridX1 * iy;
    			const b = ix + gridX1 * ( iy + 1 );
    			const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
    			const d = ( ix + 1 ) + gridX1 * iy;

    			// faces

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

    var alphamap_fragment = /* glsl */`
#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, vUv ).g;

#endif
`;

    var alphamap_pars_fragment = /* glsl */`
#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`;

    var alphatest_fragment = /* glsl */`
#ifdef ALPHATEST

	if ( diffuseColor.a < ALPHATEST ) discard;

#endif
`;

    var aomap_fragment = /* glsl */`
#ifdef USE_AOMAP

	// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;

	reflectedLight.indirectDiffuse *= ambientOcclusion;

	#if defined( USE_ENVMAP ) && defined( STANDARD )

		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );

		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );

	#endif

#endif
`;

    var aomap_pars_fragment = /* glsl */`
#ifdef USE_AOMAP

	uniform sampler2D aoMap;
	uniform float aoMapIntensity;

#endif
`;

    var begin_vertex = /* glsl */`
vec3 transformed = vec3( position );
`;

    var beginnormal_vertex = /* glsl */`
vec3 objectNormal = vec3( normal );

#ifdef USE_TANGENT

	vec3 objectTangent = vec3( tangent.xyz );

#endif
`;

    var bsdfs = /* glsl */`

// Analytical approximation of the DFG LUT, one half of the
// split-sum approximation used in indirect specular lighting.
// via 'environmentBRDF' from "Physically Based Shading on Mobile"
// https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile
vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );

	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );

	vec4 r = roughness * c0 + c1;

	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;

	return vec2( -1.04, 1.04 ) * a004 + r.zw;

}

float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {

#if defined ( PHYSICALLY_CORRECT_LIGHTS )

	// based upon Frostbite 3 Moving to Physically-based Rendering
	// page 32, equation 26: E[window1]
	// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
	// this is intended to be used on spot and point lights who are represented as luminous intensity
	// but who must be converted to luminous irradiance for surface lighting calculation
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );

	if( cutoffDistance > 0.0 ) {

		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );

	}

	return distanceFalloff;

#else

	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {

		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );

	}

	return 1.0;

#endif

}

vec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {

	return RECIPROCAL_PI * diffuseColor;

} // validated

vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {

	// Original approximation by Christophe Schlick '94
	// float fresnel = pow( 1.0 - dotLH, 5.0 );

	// Optimized variant (presented by Epic at SIGGRAPH '13)
	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );

	return ( 1.0 - specularColor ) * fresnel + specularColor;

} // validated

vec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {

	// See F_Schlick
	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );
	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;

	return Fr * fresnel + F0;

}


// Microfacet Models for Refraction through Rough Surfaces - equation (34)
// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
// alpha is "roughness squared" in Disney’s reparameterization
float G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {

	// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)
	// also see #12151

	float a2 = pow2( alpha );

	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );

	return 1.0 / ( gl * gv );

} // validated

// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2
// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {

	float a2 = pow2( alpha );

	// dotNL and dotNV are explicitly swapped. This is not a mistake.
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );

	return 0.5 / max( gv + gl, EPSILON );

}

// Microfacet Models for Refraction through Rough Surfaces - equation (33)
// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
// alpha is "roughness squared" in Disney’s reparameterization
float D_GGX( const in float alpha, const in float dotNH ) {

	float a2 = pow2( alpha );

	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1

	return RECIPROCAL_PI * a2 / pow2( denom );

}

// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility
vec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {

	float alpha = pow2( roughness ); // UE4's roughness

	vec3 halfDir = normalize( incidentLight.direction + viewDir );

	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );

	vec3 F = F_Schlick( specularColor, dotLH );

	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );

	float D = D_GGX( alpha, dotNH );

	return F * ( G * D );

} // validated

// Rect Area Light

// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {

	const float LUT_SIZE  = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS  = 0.5 / LUT_SIZE;

	float dotNV = saturate( dot( N, V ) );

	// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );

	uv = uv * LUT_SCALE + LUT_BIAS;

	return uv;

}

float LTC_ClippedSphereFormFactor( const in vec3 f ) {

	// Real-Time Area Lighting: a Journey from Research to Production (p.102)
	// An approximation of the form factor of a horizon-clipped rectangle.

	float l = length( f );

	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );

}

vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {

	float x = dot( v1, v2 );

	float y = abs( x );

	// rational polynomial approximation to theta / sin( theta ) / 2PI
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;

	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;

	return cross( v1, v2 ) * theta_sintheta;

}

vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {

	// bail if point is on back side of plane of light
	// assumes ccw winding order of light vertices
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );

	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );

	// construct orthonormal basis around N
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system

	// compute transform
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );

	// transform rect
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );

	// project rect onto sphere
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );

	// calculate vector form factor
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );

	// adjust for horizon clipping
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );

/*
	// alternate method of adjusting for horizon clipping (see referece)
	// refactoring required
	float len = length( vectorFormFactor );
	float z = vectorFormFactor.z / len;

	const float LUT_SIZE  = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS  = 0.5 / LUT_SIZE;

	// tabulated horizon-clipped sphere, apparently...
	vec2 uv = vec2( z * 0.5 + 0.5, len );
	uv = uv * LUT_SCALE + LUT_BIAS;

	float scale = texture2D( ltc_2, uv ).w;

	float result = len * scale;
*/

	return vec3( result );

}

// End Rect Area Light

// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile
vec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {

	float dotNV = saturate( dot( normal, viewDir ) );

	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );

	return specularColor * brdf.x + brdf.y;

} // validated

// Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
// Approximates multiscattering in order to preserve energy.
// http://www.jcgt.org/published/0008/01/03/
void BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {

	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );

	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	vec3 FssEss = F * brdf.x + brdf.y;

	float Ess = brdf.x + brdf.y;
	float Ems = 1.0 - Ess;

	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619; // 1/21
	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );

	singleScatter += FssEss;
	multiScatter += Fms * Ems;

}

float G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {

	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)
	return 0.25;

}

float D_BlinnPhong( const in float shininess, const in float dotNH ) {

	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );

}

vec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {

	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );

	//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );
	//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );

	vec3 F = F_Schlick( specularColor, dotLH );

	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );

	float D = D_BlinnPhong( shininess, dotNH );

	return F * ( G * D );

} // validated

// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html
float GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {
	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );
}

float BlinnExponentToGGXRoughness( const in float blinnExponent ) {
	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );
}

#if defined( USE_SHEEN )

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L94
float D_Charlie(float roughness, float NoH) {
	// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"
	float invAlpha  = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16
	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);
}

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L136
float V_Neubelt(float NoV, float NoL) {
	// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"
	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));
}

vec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {

	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;

	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );

	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );

}

#endif
`;

    var bumpmap_pars_fragment = /* glsl */`
#ifdef USE_BUMPMAP

	uniform sampler2D bumpMap;
	uniform float bumpScale;

	// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen
	// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf

	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

	vec2 dHdxy_fwd() {

		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );

		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;

		return vec2( dBx, dBy );

	}

	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {

		// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988

		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;		// normalized

		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );

		float fDet = dot( vSigmaX, R1 );

		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );

		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );

	}

#endif
`;

    var clipping_planes_fragment = /* glsl */`
#if NUM_CLIPPING_PLANES > 0

	vec4 plane;

	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {

		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;

	}
	#pragma unroll_loop_end

	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES

		bool clipped = true;

		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {

			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;

		}
		#pragma unroll_loop_end

		if ( clipped ) discard;

	#endif

#endif
`;

    var clipping_planes_pars_fragment = /* glsl */`
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];

#endif
`;

    var clipping_planes_pars_vertex = /* glsl */`
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

#endif
`;

    var clipping_planes_vertex = /* glsl */`
#if NUM_CLIPPING_PLANES > 0

	vClipPosition = - mvPosition.xyz;

#endif
`;

    var color_fragment = /* glsl */`
#ifdef USE_COLOR

	diffuseColor.rgb *= vColor;

#endif
`;

    var color_pars_fragment = /* glsl */`
#ifdef USE_COLOR

	varying vec3 vColor;

#endif
`;

    var color_pars_vertex = /* glsl */`
#ifdef USE_COLOR

	varying vec3 vColor;

#endif
`;

    var color_vertex = /* glsl */`
#ifdef USE_COLOR

	vColor.xyz = color.xyz;

#endif
`;

    var common = /* glsl */`
#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6

#ifndef saturate
// <tonemapping_pars_fragment> may have defined saturate() already
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement(a) ( 1.0 - saturate( a ) )

float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.
// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract(sin(sn) * c);
}

#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif

struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};

struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};

struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef CLEARCOAT
	vec3 clearcoatNormal;
#endif
};

vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

}

vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {

	// dir can be either a direction vector or a normal vector
	// upper-left 3x3 of matrix is assumed to be orthogonal

	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );

}

vec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {

	float distance = dot( planeNormal, point - pointOnPlane );

	return - distance * planeNormal + point;

}

float sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {

	return sign( dot( point - pointOnPlane, planeNormal ) );

}

vec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {

	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;

}

mat3 transposeMat3( const in mat3 m ) {

	mat3 tmp;

	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );

	return tmp;

}

// https://en.wikipedia.org/wiki/Relative_luminance
float linearToRelativeLuminance( const in vec3 color ) {

	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );

	return dot( weights, color.rgb );

}

bool isPerspectiveMatrix( mat4 m ) {

	return m[ 2 ][ 3 ] == - 1.0;

}

vec2 equirectUv( in vec3 dir ) {

	// dir is assumed to be unit length

	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;

	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;

	return vec2( u, v );

}
`;

    var cube_uv_reflection_fragment = /* glsl */`
#ifdef ENVMAP_TYPE_CUBE_UV

#define cubeUV_maxMipLevel 8.0
#define cubeUV_minMipLevel 4.0
#define cubeUV_maxTileSize 256.0
#define cubeUV_minTileSize 16.0

// These shader functions convert between the UV coordinates of a single face of
// a cubemap, the 0-5 integer index of a cube face, and the direction vector for
// sampling a textureCube (not generally normalized).

float getFace(vec3 direction) {
    vec3 absDirection = abs(direction);
    float face = -1.0;
    if (absDirection.x > absDirection.z) {
      if (absDirection.x > absDirection.y)
        face = direction.x > 0.0 ? 0.0 : 3.0;
      else
        face = direction.y > 0.0 ? 1.0 : 4.0;
    } else {
      if (absDirection.z > absDirection.y)
        face = direction.z > 0.0 ? 2.0 : 5.0;
      else
        face = direction.y > 0.0 ? 1.0 : 4.0;
    }
    return face;
}

// RH coordinate system; PMREM face-indexing convention
vec2 getUV(vec3 direction, float face) {
    vec2 uv;
    if (face == 0.0) {
      uv = vec2(direction.z, direction.y) / abs(direction.x); // pos x
    } else if (face == 1.0) {
      uv = vec2(-direction.x, -direction.z) / abs(direction.y); // pos y
    } else if (face == 2.0) {
      uv = vec2(-direction.x, direction.y) / abs(direction.z); // pos z
    } else if (face == 3.0) {
      uv = vec2(-direction.z, direction.y) / abs(direction.x); // neg x
    } else if (face == 4.0) {
      uv = vec2(-direction.x, direction.z) / abs(direction.y); // neg y
    } else {
      uv = vec2(direction.x, direction.y) / abs(direction.z); // neg z
    }
    return 0.5 * (uv + 1.0);
}

vec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {
  float face = getFace(direction);
  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);
  mipInt = max(mipInt, cubeUV_minMipLevel);
  float faceSize = exp2(mipInt);

  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);

  vec2 uv = getUV(direction, face) * (faceSize - 1.0);
  vec2 f = fract(uv);
  uv += 0.5 - f;
  if (face > 2.0) {
    uv.y += faceSize;
    face -= 3.0;
  }
  uv.x += face * faceSize;
  if(mipInt < cubeUV_maxMipLevel){
    uv.y += 2.0 * cubeUV_maxTileSize;
  }
  uv.y += filterInt * 2.0 * cubeUV_minTileSize;
  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);
  uv *= texelSize;

  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
  uv.x += texelSize;
  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
  uv.y += texelSize;
  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
  uv.x -= texelSize;
  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
  vec3 tm = mix(tl, tr, f.x);
  vec3 bm = mix(bl, br, f.x);
  return mix(tm, bm, f.y);
}

// These defines must match with PMREMGenerator

#define r0 1.0
#define v0 0.339
#define m0 -2.0
#define r1 0.8
#define v1 0.276
#define m1 -1.0
#define r4 0.4
#define v4 0.046
#define m4 2.0
#define r5 0.305
#define v5 0.016
#define m5 3.0
#define r6 0.21
#define v6 0.0038
#define m6 4.0

float roughnessToMip(float roughness) {
  float mip = 0.0;
  if (roughness >= r1) {
    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;
  } else if (roughness >= r4) {
    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;
  } else if (roughness >= r5) {
    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;
  } else if (roughness >= r6) {
    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;
  } else {
    mip = -2.0 * log2(1.16 * roughness);// 1.16 = 1.79^0.25
  }
  return mip;
}

vec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {
  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);
  float mipF = fract(mip);
  float mipInt = floor(mip);

  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);
  if (mipF == 0.0) {
    return vec4(color0, 1.0);
  } else {
    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);
    return vec4(mix(color0, color1, mipF), 1.0);
  }
}
#endif
`;

    var defaultnormal_vertex = /* glsl */`
vec3 transformedNormal = objectNormal;

#ifdef USE_INSTANCING

	// this is in lieu of a per-instance normal-matrix
	// shear transforms in the instance matrix are not supported

	mat3 m = mat3( instanceMatrix );

	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );

	transformedNormal = m * transformedNormal;

#endif

transformedNormal = normalMatrix * transformedNormal;

#ifdef FLIP_SIDED

	transformedNormal = - transformedNormal;

#endif

#ifdef USE_TANGENT

	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;

	#ifdef FLIP_SIDED

		transformedTangent = - transformedTangent;

	#endif

#endif
`;

    var displacementmap_pars_vertex = /* glsl */`
#ifdef USE_DISPLACEMENTMAP

	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;

#endif
`;

    var displacementmap_vertex = /* glsl */`
#ifdef USE_DISPLACEMENTMAP

	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );

#endif
`;

    var emissivemap_fragment = /* glsl */`
#ifdef USE_EMISSIVEMAP

	vec4 emissiveColor = texture2D( emissiveMap, vUv );

	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;

	totalEmissiveRadiance *= emissiveColor.rgb;

#endif
`;

    var emissivemap_pars_fragment = /* glsl */`
#ifdef USE_EMISSIVEMAP

	uniform sampler2D emissiveMap;

#endif
`;

    var encodings_fragment = /* glsl */`
gl_FragColor = linearToOutputTexel( gl_FragColor );
`;

    var encodings_pars_fragment = /* glsl */`
// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/

vec4 LinearToLinear( in vec4 value ) {
	return value;
}

vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}

vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}

vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}

vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}

vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}

vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );
}

// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}

vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}

// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}

vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	// NOTE: The implementation with min causes the shader to not compile on
	// a common Alcatel A502DL in Chrome 78/Android 8.1. Some research suggests 
	// that the chipset is Mediatek MT6739 w/ IMG PowerVR GE8100 GPU.
	// D = min( floor( D ) / 255.0, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}

// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html

// M matrix, for encoding
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value )  {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}

// Inverse M matrix, for decoding
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}
`;

    var envmap_fragment = /* glsl */`
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vec3 cameraToFrag;
		
		if ( isOrthographic ) {

			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		}  else {

			cameraToFrag = normalize( vWorldPosition - cameraPosition );

		}

		// Transforming Normal Vectors with the Inverse Transformation
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vec3 reflectVec = reflect( cameraToFrag, worldNormal );

		#else

			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );

		#endif

	#else

		vec3 reflectVec = vReflect;

	#endif

	#ifdef ENVMAP_TYPE_CUBE

		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );

	#elif defined( ENVMAP_TYPE_CUBE_UV )

		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );

	#elif defined( ENVMAP_TYPE_EQUIREC )

		reflectVec = normalize( reflectVec );

		vec2 sampleUV = equirectUv( reflectVec );

		vec4 envColor = texture2D( envMap, sampleUV );

	#else

		vec4 envColor = vec4( 0.0 );

	#endif

	#ifndef ENVMAP_TYPE_CUBE_UV

		envColor = envMapTexelToLinear( envColor );

	#endif

	#ifdef ENVMAP_BLENDING_MULTIPLY

		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_MIX )

		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_ADD )

		outgoingLight += envColor.xyz * specularStrength * reflectivity;

	#endif

#endif
`;

    var envmap_common_pars_fragment = /* glsl */`
#ifdef USE_ENVMAP

	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;

	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif
`;

    var envmap_pars_fragment = /* glsl */`
#ifdef USE_ENVMAP

	uniform float reflectivity;

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS

		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif

#endif
`;

    var envmap_pars_vertex = /* glsl */`
#ifdef USE_ENVMAP

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;

	#else

		varying vec3 vReflect;
		uniform float refractionRatio;

	#endif

#endif
`;

    var envmap_vertex = /* glsl */`
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vWorldPosition = worldPosition.xyz;

	#else

		vec3 cameraToVertex;

		if ( isOrthographic ) {

			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		} else {

			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );

		}

		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vReflect = reflect( cameraToVertex, worldNormal );

		#else

			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );

		#endif

	#endif

#endif
`;

    var fog_vertex = /* glsl */`
#ifdef USE_FOG

	fogDepth = - mvPosition.z;

#endif
`;

    var fog_pars_vertex = /* glsl */`
#ifdef USE_FOG

	varying float fogDepth;

#endif
`;

    var fog_fragment = /* glsl */`
#ifdef USE_FOG

	#ifdef FOG_EXP2

		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );

	#else

		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );

	#endif

	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );

#endif
`;

    var fog_pars_fragment = /* glsl */`
#ifdef USE_FOG

	uniform vec3 fogColor;
	varying float fogDepth;

	#ifdef FOG_EXP2

		uniform float fogDensity;

	#else

		uniform float fogNear;
		uniform float fogFar;

	#endif

#endif
`;

    var gradientmap_pars_fragment = /* glsl */`

#ifdef USE_GRADIENTMAP

	uniform sampler2D gradientMap;

#endif

vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {

	// dotNL will be from -1.0 to 1.0
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );

	#ifdef USE_GRADIENTMAP

		return texture2D( gradientMap, coord ).rgb;

	#else

		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );

	#endif

}
`;

    var lightmap_fragment = /* glsl */`
#ifdef USE_LIGHTMAP

	vec4 lightMapTexel= texture2D( lightMap, vUv2 );
	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage

#endif
`;

    var lightmap_pars_fragment = /* glsl */`
#ifdef USE_LIGHTMAP

	uniform sampler2D lightMap;
	uniform float lightMapIntensity;

#endif
`;

    var lights_lambert_vertex = /* glsl */`
vec3 diffuse = vec3( 1.0 );

GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );

GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;

vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif

IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;

vIndirectFront += getAmbientLightIrradiance( ambientLightColor );

vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );

#ifdef DOUBLE_SIDED

	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );

	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );

#endif

#if NUM_POINT_LIGHTS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {

		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );

		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;

		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;

		#ifdef DOUBLE_SIDED

			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;

		#endif

	}
	#pragma unroll_loop_end

#endif

#if NUM_SPOT_LIGHTS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {

		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );

		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;

		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;

		#ifdef DOUBLE_SIDED

			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;

		#endif
	}
	#pragma unroll_loop_end

#endif

/*
#if NUM_RECT_AREA_LIGHTS > 0

	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {

		// TODO (abelnation): implement

	}

#endif
*/

#if NUM_DIR_LIGHTS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );

		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;

		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;

		#ifdef DOUBLE_SIDED

			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;

		#endif

	}
	#pragma unroll_loop_end

#endif

#if NUM_HEMI_LIGHTS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {

		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );

		#ifdef DOUBLE_SIDED

			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );

		#endif

	}
	#pragma unroll_loop_end

#endif
`;

    var lights_pars_begin = /* glsl */`
uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];

// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere
// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {

	// normal is assumed to have unit length

	float x = normal.x, y = normal.y, z = normal.z;

	// band 0
	vec3 result = shCoefficients[ 0 ] * 0.886227;

	// band 1
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;

	// band 2
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );

	return result;

}

vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {

	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );

	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );

	return irradiance;

}

vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {

	vec3 irradiance = ambientLightColor;

	#ifndef PHYSICALLY_CORRECT_LIGHTS

		irradiance *= PI;

	#endif

	return irradiance;

}

#if NUM_DIR_LIGHTS > 0

	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};

	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];

	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {

		directLight.color = directionalLight.color;
		directLight.direction = directionalLight.direction;
		directLight.visible = true;

	}

#endif


#if NUM_POINT_LIGHTS > 0

	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};

	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];

	// directLight is an out parameter as having it as a return value caused compiler errors on some devices
	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {

		vec3 lVector = pointLight.position - geometry.position;
		directLight.direction = normalize( lVector );

		float lightDistance = length( lVector );

		directLight.color = pointLight.color;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );

	}

#endif


#if NUM_SPOT_LIGHTS > 0

	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};

	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];

	// directLight is an out parameter as having it as a return value caused compiler errors on some devices
	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {

		vec3 lVector = spotLight.position - geometry.position;
		directLight.direction = normalize( lVector );

		float lightDistance = length( lVector );
		float angleCos = dot( directLight.direction, spotLight.direction );

		if ( angleCos > spotLight.coneCos ) {

			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );

			directLight.color = spotLight.color;
			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );
			directLight.visible = true;

		} else {

			directLight.color = vec3( 0.0 );
			directLight.visible = false;

		}
	}

#endif


#if NUM_RECT_AREA_LIGHTS > 0

	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};

	// Pre-computed values of LinearTransformedCosine approximation of BRDF
	// BRDF approximation Texture is 64x64
	uniform sampler2D ltc_1; // RGBA Float
	uniform sampler2D ltc_2; // RGBA Float

	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];

#endif


#if NUM_HEMI_LIGHTS > 0

	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};

	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];

	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {

		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;

		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );

		#ifndef PHYSICALLY_CORRECT_LIGHTS

			irradiance *= PI;

		#endif

		return irradiance;

	}

#endif
`;

    var envmap_physical_pars_fragment = /* glsl */`
#if defined( USE_ENVMAP )

	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif

	vec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {

		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );

		#ifdef ENVMAP_TYPE_CUBE

			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );

			// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level
			// of a specular cubemap, or just the default level of a specially created irradiance cubemap.

			#ifdef TEXTURE_LOD_EXT

				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );

			#else

				// force the bias high to get the last LOD level as it is the most blurred.
				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );

			#endif

			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;

		#elif defined( ENVMAP_TYPE_CUBE_UV )

			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );

		#else

			vec4 envMapColor = vec4( 0.0 );

		#endif

		return PI * envMapColor.rgb * envMapIntensity;

	}

	// Trowbridge-Reitz distribution to Mip level, following the logic of http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html
	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {

		float maxMIPLevelScalar = float( maxMIPLevel );

		float sigma = PI * roughness * roughness / ( 1.0 + roughness );
		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );

		// clamp to allowable LOD ranges.
		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );

	}

	vec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {

		#ifdef ENVMAP_MODE_REFLECTION

		  vec3 reflectVec = reflect( -viewDir, normal );

		  // Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.
		  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );

		#else

		  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );

		#endif

		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );

		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );

		#ifdef ENVMAP_TYPE_CUBE

			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );

			#ifdef TEXTURE_LOD_EXT

				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );

			#else

				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );

			#endif

			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;

		#elif defined( ENVMAP_TYPE_CUBE_UV )

			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );

		#elif defined( ENVMAP_TYPE_EQUIREC )

			vec2 sampleUV = equirectUv( reflectVec );

			#ifdef TEXTURE_LOD_EXT

				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );

			#else

				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );

			#endif

			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;

		#endif

		return envMapColor.rgb * envMapIntensity;

	}

#endif
`;

    var lights_toon_fragment = /* glsl */`
ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;
`;

    var lights_toon_pars_fragment = /* glsl */`
varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif


struct ToonMaterial {

	vec3 diffuseColor;

};

void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;

	#ifndef PHYSICALLY_CORRECT_LIGHTS

		irradiance *= PI; // punctual light

	#endif

	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );

}

void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon

#define Material_LightProbeLOD( material )	(0)
`;

    var lights_phong_fragment = /* glsl */`
BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;
`;

    var lights_phong_pars_fragment = /* glsl */`
varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif


struct BlinnPhongMaterial {

	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;

};

void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;

	#ifndef PHYSICALLY_CORRECT_LIGHTS

		irradiance *= PI; // punctual light

	#endif

	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );

	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;

}

void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong

#define Material_LightProbeLOD( material )	(0)
`;

    var lights_physical_fragment = /* glsl */`
PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );

vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );

material.specularRoughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.
material.specularRoughness += geometryRoughness;
material.specularRoughness = min( material.specularRoughness, 1.0 );

#ifdef REFLECTIVITY

	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );

#else

	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );

#endif

#ifdef CLEARCOAT

	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;

	#ifdef USE_CLEARCOATMAP

		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;

	#endif

	#ifdef USE_CLEARCOAT_ROUGHNESSMAP

		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;

	#endif

	material.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model
	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );

#endif

#ifdef USE_SHEEN

	material.sheenColor = sheen;

#endif
`;

    var lights_physical_pars_fragment = /* glsl */`
struct PhysicalMaterial {

	vec3 diffuseColor;
	float specularRoughness;
	vec3 specularColor;

#ifdef CLEARCOAT
	float clearcoat;
	float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	vec3 sheenColor;
#endif

};

#define MAXIMUM_SPECULAR_COEFFICIENT 0.16
#define DEFAULT_SPECULAR_COEFFICIENT 0.04

// Clear coat directional hemishperical reflectance (this approximation should be improved)
float clearcoatDHRApprox( const in float roughness, const in float dotNL ) {

	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );

}

#if NUM_RECT_AREA_LIGHTS > 0

	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.specularRoughness;

		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction
		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;

		vec2 uv = LTC_Uv( normal, viewDir, roughness );

		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );

		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);

		// LTC Fresnel Approximation by Stephen Hill
		// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );

		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );

		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );

	}

#endif

void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );

	vec3 irradiance = dotNL * directLight.color;

	#ifndef PHYSICALLY_CORRECT_LIGHTS

		irradiance *= PI; // punctual light

	#endif

	#ifdef CLEARCOAT

		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );

		vec3 ccIrradiance = ccDotNL * directLight.color;

		#ifndef PHYSICALLY_CORRECT_LIGHTS

			ccIrradiance *= PI; // punctual light

		#endif

		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );

		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );

	#else

		float clearcoatDHR = 0.0;

	#endif

	#ifdef USE_SHEEN
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(
			material.specularRoughness,
			directLight.direction,
			geometry,
			material.sheenColor
		);
	#else
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);
	#endif

	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}

void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );

}

void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {

	#ifdef CLEARCOAT

		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );

		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );

		float ccDotNL = ccDotNV;
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );

	#else

		float clearcoatDHR = 0.0;

	#endif

	float clearcoatInv = 1.0 - clearcoatDHR;

	// Both indirect specular and indirect diffuse light accumulate here

	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;

	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );

	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );

	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;

	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;

}

#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical

// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {

	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );

}
`;

    var lights_fragment_begin = /* glsl */`
/**
 * This is a template that can be used to light a material, it uses pluggable
 * RenderEquations (RE)for specific lighting scenarios.
 *
 * Instructions for use:
 * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined
 * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???
 * - Create a material parameter that is to be passed as the third parameter to your lighting functions.
 *
 * TODO:
 * - Add area light support.
 * - Add sphere light support.
 * - Add diffuse light probe (irradiance cubemap) support.
 */

GeometricContext geometry;

geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );

#ifdef CLEARCOAT

	geometry.clearcoatNormal = clearcoatNormal;

#endif

IncidentLight directLight;

#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )

	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {

		pointLight = pointLights[ i ];

		getPointDirectLightIrradiance( pointLight, geometry, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif

		RE_Direct( directLight, geometry, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )

	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {

		spotLight = spotLights[ i ];

		getSpotDirectLightIrradiance( spotLight, geometry, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometry, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )

	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

		directionalLight = directionalLights[ i ];

		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometry, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )

	RectAreaLight rectAreaLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {

		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if defined( RE_IndirectDiffuse )

	vec3 iblIrradiance = vec3( 0.0 );

	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );

	irradiance += getLightProbeIrradiance( lightProbe, geometry );

	#if ( NUM_HEMI_LIGHTS > 0 )

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {

			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );

		}
		#pragma unroll_loop_end

	#endif

#endif

#if defined( RE_IndirectSpecular )

	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );

#endif
`;

    var lights_fragment_maps = /* glsl */`
#if defined( RE_IndirectDiffuse )

	#ifdef USE_LIGHTMAP

		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;

		#ifndef PHYSICALLY_CORRECT_LIGHTS

			lightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage

		#endif

		irradiance += lightMapIrradiance;

	#endif

	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )

		iblIrradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, maxMipLevel );

	#endif

#endif

#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )

	radiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );

	#ifdef CLEARCOAT

		clearcoatRadiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );

	#endif

#endif
`;

    var lights_fragment_end = /* glsl */`
#if defined( RE_IndirectDiffuse )

	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );

#endif

#if defined( RE_IndirectSpecular )

	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );

#endif
`;

    var logdepthbuf_fragment = /* glsl */`
#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )

	// Doing a strict comparison with == 1.0 can cause noise artifacts
	// on some platforms. See issue #17623.
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;

#endif
`;

    var logdepthbuf_pars_fragment = /* glsl */`
#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )

	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;

#endif
`;

    var logdepthbuf_pars_vertex = /* glsl */`
#ifdef USE_LOGDEPTHBUF

	#ifdef USE_LOGDEPTHBUF_EXT

		varying float vFragDepth;
		varying float vIsPerspective;

	#else

		uniform float logDepthBufFC;

	#endif

#endif
`;

    var logdepthbuf_vertex = /* glsl */`
#ifdef USE_LOGDEPTHBUF

	#ifdef USE_LOGDEPTHBUF_EXT

		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );

	#else

		if ( isPerspectiveMatrix( projectionMatrix ) ) {

			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;

			gl_Position.z *= gl_Position.w;

		}

	#endif

#endif
`;

    var map_fragment = /* glsl */`
#ifdef USE_MAP

	vec4 texelColor = texture2D( map, vUv );

	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;

#endif
`;

    var map_pars_fragment = /* glsl */`
#ifdef USE_MAP

	uniform sampler2D map;

#endif
`;

    var map_particle_fragment = /* glsl */`
#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;

#endif

#ifdef USE_MAP

	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );

#endif

#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, uv ).g;

#endif
`;

    var map_particle_pars_fragment = /* glsl */`
#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

	uniform mat3 uvTransform;

#endif

#ifdef USE_MAP

	uniform sampler2D map;

#endif

#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`;

    var metalnessmap_fragment = /* glsl */`
float metalnessFactor = metalness;

#ifdef USE_METALNESSMAP

	vec4 texelMetalness = texture2D( metalnessMap, vUv );

	// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	metalnessFactor *= texelMetalness.b;

#endif
`;

    var metalnessmap_pars_fragment = /* glsl */`
#ifdef USE_METALNESSMAP

	uniform sampler2D metalnessMap;

#endif
`;

    var morphnormal_vertex = /* glsl */`
#ifdef USE_MORPHNORMALS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];

#endif
`;

    var morphtarget_pars_vertex = /* glsl */`
#ifdef USE_MORPHTARGETS

	uniform float morphTargetBaseInfluence;

	#ifndef USE_MORPHNORMALS

		uniform float morphTargetInfluences[ 8 ];

	#else

		uniform float morphTargetInfluences[ 4 ];

	#endif

#endif
`;

    var morphtarget_vertex = /* glsl */`
#ifdef USE_MORPHTARGETS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];

	#ifndef USE_MORPHNORMALS

		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];

	#endif

#endif
`;

    var normal_fragment_begin = /* glsl */`
#ifdef FLAT_SHADED

	// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...

	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );

#else

	vec3 normal = normalize( vNormal );

	#ifdef DOUBLE_SIDED

		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );

	#endif

	#ifdef USE_TANGENT

		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );

		#ifdef DOUBLE_SIDED

			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );

		#endif

		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )

			mat3 vTBN = mat3( tangent, bitangent, normal );

		#endif

	#endif

#endif

// non perturbed normal for clearcoat among others

vec3 geometryNormal = normal;

`;

    var normal_fragment_maps = /* glsl */`

#ifdef OBJECTSPACE_NORMALMAP

	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals

	#ifdef FLIP_SIDED

		normal = - normal;

	#endif

	#ifdef DOUBLE_SIDED

		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );

	#endif

	normal = normalize( normalMatrix * normal );

#elif defined( TANGENTSPACE_NORMALMAP )

	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;

	#ifdef USE_TANGENT

		normal = normalize( vTBN * mapN );

	#else

		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );

	#endif

#elif defined( USE_BUMPMAP )

	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );

#endif
`;

    var normalmap_pars_fragment = /* glsl */`
#ifdef USE_NORMALMAP

	uniform sampler2D normalMap;
	uniform vec2 normalScale;

#endif

#ifdef OBJECTSPACE_NORMALMAP

	uniform mat3 normalMatrix;

#endif

#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )

	// Per-Pixel Tangent Space Normal Mapping
	// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html

	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {

		// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988

		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );

		float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude

		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );
		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );
		vec3 N = normalize( surf_norm );

		mat3 tsn = mat3( S, T, N );

		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );

		return normalize( tsn * mapN );

	}

#endif
`;

    var clearcoat_normal_fragment_begin = /* glsl */`
#ifdef CLEARCOAT

	vec3 clearcoatNormal = geometryNormal;

#endif
`;

    var clearcoat_normal_fragment_maps = /* glsl */`
#ifdef USE_CLEARCOAT_NORMALMAP

	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;

	#ifdef USE_TANGENT

		clearcoatNormal = normalize( vTBN * clearcoatMapN );

	#else

		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );

	#endif

#endif
`;

    var clearcoat_pars_fragment = /* glsl */`

#ifdef USE_CLEARCOATMAP

	uniform sampler2D clearcoatMap;

#endif

#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	uniform sampler2D clearcoatRoughnessMap;

#endif

#ifdef USE_CLEARCOAT_NORMALMAP

	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;

#endif
`;

    var packing = /* glsl */`
vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}

vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}

const float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)
const float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)

const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );

const float ShiftRight8 = 1. / 256.;

vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8; // tidy overflow
	return r * PackUpscale;
}

float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}

vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}

// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions

float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}

float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}
`;

    var premultiplied_alpha_fragment = /* glsl */`
#ifdef PREMULTIPLIED_ALPHA

	// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.
	gl_FragColor.rgb *= gl_FragColor.a;

#endif
`;

    var project_vertex = /* glsl */`
vec4 mvPosition = vec4( transformed, 1.0 );

#ifdef USE_INSTANCING

	mvPosition = instanceMatrix * mvPosition;

#endif

mvPosition = modelViewMatrix * mvPosition;

gl_Position = projectionMatrix * mvPosition;
`;

    var dithering_fragment = /* glsl */`
#ifdef DITHERING

	gl_FragColor.rgb = dithering( gl_FragColor.rgb );

#endif
`;

    var dithering_pars_fragment = /* glsl */`
#ifdef DITHERING

	// based on https://www.shadertoy.com/view/MslGR8
	vec3 dithering( vec3 color ) {
		//Calculate grid position
		float grid_position = rand( gl_FragCoord.xy );

		//Shift the individual colors differently, thus making it even harder to see the dithering pattern
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );

		//modify shift acording to grid position.
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );

		//shift the color by dither_shift
		return color + dither_shift_RGB;
	}

#endif
`;

    var roughnessmap_fragment = /* glsl */`
float roughnessFactor = roughness;

#ifdef USE_ROUGHNESSMAP

	vec4 texelRoughness = texture2D( roughnessMap, vUv );

	// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	roughnessFactor *= texelRoughness.g;

#endif
`;

    var roughnessmap_pars_fragment = /* glsl */`
#ifdef USE_ROUGHNESSMAP

	uniform sampler2D roughnessMap;

#endif
`;

    var shadowmap_pars_fragment = /* glsl */`
#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];

		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): create uniforms for area light shadows

	#endif
	*/

	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {

		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );

	}

	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {

		return unpackRGBATo2Half( texture2D( shadow, uv ) );

	}

	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){

		float occlusion = 1.0;

		vec2 distribution = texture2DDistribution( shadow, uv );

		float hard_shadow = step( compare , distribution.x ); // Hard Shadow

		if (hard_shadow != 1.0 ) {

			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality
			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed
			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );

		}
		return occlusion;

	}

	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {

		float shadow = 1.0;

		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;

		// if ( something && something ) breaks ATI OpenGL shader compiler
		// if ( all( something, something ) ) using this instead

		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );

		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );

		bool frustumTest = all( frustumTestVec );

		if ( frustumTest ) {

		#if defined( SHADOWMAP_TYPE_PCF )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;

			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;

			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );

		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;

			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;

			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );

		#elif defined( SHADOWMAP_TYPE_VSM )

			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );

		#else // no percentage-closer filtering:

			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );

		#endif

		}

		return shadow;

	}

	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D
	// vector suitable for 2D texture mapping. This code uses the following layout for the
	// 2D texture:
	//
	// xzXZ
	//  y Y
	//
	// Y - Positive y direction
	// y - Negative y direction
	// X - Positive x direction
	// x - Negative x direction
	// Z - Positive z direction
	// z - Negative z direction
	//
	// Source and test bed:
	// https://gist.github.com/tschw/da10c43c467ce8afd0c4

	vec2 cubeToUV( vec3 v, float texelSizeY ) {

		// Number of texels to avoid at the edge of each square

		vec3 absV = abs( v );

		// Intersect unit cube

		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;

		// Apply scale to avoid seams

		// two texels less per square (one texel will do for NEAREST)
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );

		// Unwrap

		// space: -1 ... 1 range for each square
		//
		// #X##		dim    := ( 4 , 2 )
		//  # #		center := ( 1 , 1 )

		vec2 planar = v.xy;

		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;

		if ( absV.z >= almostOne ) {

			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;

		} else if ( absV.x >= almostOne ) {

			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;

		} else if ( absV.y >= almostOne ) {

			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;

		}

		// Transform to UV space

		// scale := 0.5 / dim
		// translate := ( center + 0.5 ) / dim
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );

	}

	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {

		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );

		// for point lights, the uniform @vShadowCoord is re-purposed to hold
		// the vector from the light to the world-space position of the fragment.
		vec3 lightToPosition = shadowCoord.xyz;

		// dp = normalized distance from light to fragment position
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?
		dp += shadowBias;

		// bd3D = base direction 3D
		vec3 bd3D = normalize( lightToPosition );

		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )

			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;

			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );

		#else // no percentage-closer filtering

			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );

		#endif

	}

#endif
`;

    var shadowmap_pars_vertex = /* glsl */`
#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];

		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): uniforms for area light shadows

	#endif
	*/

#endif
`;

    var shadowmap_vertex = /* glsl */`
#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0

		// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;

	#endif

	#if NUM_DIR_LIGHT_SHADOWS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {

		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;

	}
	#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update vAreaShadowCoord with area light info

	#endif
	*/

#endif
`;

    var shadowmask_pars_fragment = /* glsl */`
float getShadowMask() {

	float shadow = 1.0;

	#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

	DirectionalLightShadow directionalLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

	SpotLightShadow spotLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {

		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

	PointLightShadow pointLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update shadow for Area light

	#endif
	*/

	#endif

	return shadow;

}
`;

    var skinbase_vertex = /* glsl */`
#ifdef USE_SKINNING

	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );

#endif
`;

    var skinning_pars_vertex = /* glsl */`
#ifdef USE_SKINNING

	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;

	#ifdef BONE_TEXTURE

		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;

		mat4 getBoneMatrix( const in float i ) {

			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );

			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );

			y = dy * ( y + 0.5 );

			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );

			mat4 bone = mat4( v1, v2, v3, v4 );

			return bone;

		}

	#else

		uniform mat4 boneMatrices[ MAX_BONES ];

		mat4 getBoneMatrix( const in float i ) {

			mat4 bone = boneMatrices[ int(i) ];
			return bone;

		}

	#endif

#endif
`;

    var skinning_vertex = /* glsl */`
#ifdef USE_SKINNING

	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );

	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;

	transformed = ( bindMatrixInverse * skinned ).xyz;

#endif
`;

    var skinnormal_vertex = /* glsl */`
#ifdef USE_SKINNING

	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;

	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;

	#ifdef USE_TANGENT

		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;

	#endif

#endif
`;

    var specularmap_fragment = /* glsl */`
float specularStrength;

#ifdef USE_SPECULARMAP

	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;

#else

	specularStrength = 1.0;

#endif
`;

    var specularmap_pars_fragment = /* glsl */`
#ifdef USE_SPECULARMAP

	uniform sampler2D specularMap;

#endif
`;

    var tonemapping_fragment = /* glsl */`
#if defined( TONE_MAPPING )

	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );

#endif
`;

    var tonemapping_pars_fragment = /* glsl */`
#ifndef saturate
// <common> may have defined saturate() already
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif

uniform float toneMappingExposure;

// exposure only
vec3 LinearToneMapping( vec3 color ) {

	return toneMappingExposure * color;

}

// source: https://www.cs.utah.edu/~reinhard/cdrom/
vec3 ReinhardToneMapping( vec3 color ) {

	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );

}

// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/
vec3 OptimizedCineonToneMapping( vec3 color ) {

	// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );

}

// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs
vec3 RRTAndODTFit( vec3 v ) {

	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;

}

// this implementation of ACES is modified to accommodate a brighter viewing environment.
// the scale factor of 1/0.6 is subjective. see discussion in #19621.

vec3 ACESFilmicToneMapping( vec3 color ) {

	// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ), // transposed from source
		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);

	// ODT_SAT => XYZ => D60_2_D65 => sRGB
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ), // transposed from source
		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);

	color *= toneMappingExposure / 0.6;

	color = ACESInputMat * color;

	// Apply RRT and ODT
	color = RRTAndODTFit( color );

	color = ACESOutputMat * color;

	// Clamp to [0, 1]
	return saturate( color );

}

vec3 CustomToneMapping( vec3 color ) { return color; }
`;

    var transmissionmap_fragment = /* glsl */`
#ifdef USE_TRANSMISSIONMAP

	totalTransmission *= texture2D( transmissionMap, vUv ).r;

#endif
`;

    var transmissionmap_pars_fragment = /* glsl */`
#ifdef USE_TRANSMISSIONMAP

	uniform sampler2D transmissionMap;

#endif
`;

    var uv_pars_fragment = /* glsl */`
#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )

	varying vec2 vUv;

#endif
`;

    var uv_pars_vertex = /* glsl */`
#ifdef USE_UV

	#ifdef UVS_VERTEX_ONLY

		vec2 vUv;

	#else

		varying vec2 vUv;

	#endif

	uniform mat3 uvTransform;

#endif
`;

    var uv_vertex = /* glsl */`
#ifdef USE_UV

	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

#endif
`;

    var uv2_pars_fragment = /* glsl */`
#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )

	varying vec2 vUv2;

#endif
`;

    var uv2_pars_vertex = /* glsl */`
#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )

	attribute vec2 uv2;
	varying vec2 vUv2;

	uniform mat3 uv2Transform;

#endif
`;

    var uv2_vertex = /* glsl */`
#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )

	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;

#endif
`;

    var worldpos_vertex = /* glsl */`
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )

	vec4 worldPosition = vec4( transformed, 1.0 );

	#ifdef USE_INSTANCING

		worldPosition = instanceMatrix * worldPosition;

	#endif

	worldPosition = modelMatrix * worldPosition;

#endif
`;

    var background_frag = /* glsl */`
uniform sampler2D t2D;

varying vec2 vUv;

void main() {

	vec4 texColor = texture2D( t2D, vUv );

	gl_FragColor = mapTexelToLinear( texColor );

	#include <tonemapping_fragment>
	#include <encodings_fragment>

}
`;

    var background_vert = /* glsl */`
varying vec2 vUv;
uniform mat3 uvTransform;

void main() {

	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

	gl_Position = vec4( position.xy, 1.0, 1.0 );

}
`;

    var cube_frag = /* glsl */`
#include <envmap_common_pars_fragment>
uniform float opacity;

varying vec3 vWorldDirection;

#include <cube_uv_reflection_fragment>

void main() {

	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>

	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;

	#include <tonemapping_fragment>
	#include <encodings_fragment>

}
`;

    var cube_vert = /* glsl */`
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

	gl_Position.z = gl_Position.w; // set z to camera.far

}
`;

    var depth_frag = /* glsl */`
#if DEPTH_PACKING == 3200

	uniform float opacity;

#endif

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

varying vec2 vHighPrecisionZW;

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( 1.0 );

	#if DEPTH_PACKING == 3200

		diffuseColor.a = opacity;

	#endif

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>

	#include <logdepthbuf_fragment>

	// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;

	#if DEPTH_PACKING == 3200

		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );

	#elif DEPTH_PACKING == 3201

		gl_FragColor = packDepthToRGBA( fragCoordZ );

	#endif

}
`;

    var depth_vert = /* glsl */`
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.
// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for
// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.
varying vec2 vHighPrecisionZW;

void main() {

	#include <uv_vertex>

	#include <skinbase_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vHighPrecisionZW = gl_Position.zw;

}
`;

    var distanceRGBA_frag = /* glsl */`
#define DISTANCE

uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <clipping_planes_pars_fragment>

void main () {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( 1.0 );

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>

	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist ); // clamp to [ 0, 1 ]

	gl_FragColor = packDepthToRGBA( dist );

}
`;

    var distanceRGBA_vert = /* glsl */`
#define DISTANCE

varying vec3 vWorldPosition;

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	#include <skinbase_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>

	vWorldPosition = worldPosition.xyz;

}
`;

    var equirect_frag = /* glsl */`
uniform sampler2D tEquirect;

varying vec3 vWorldDirection;

#include <common>

void main() {

	vec3 direction = normalize( vWorldDirection );

	vec2 sampleUV = equirectUv( direction );

	vec4 texColor = texture2D( tEquirect, sampleUV );

	gl_FragColor = mapTexelToLinear( texColor );

	#include <tonemapping_fragment>
	#include <encodings_fragment>

}
`;

    var equirect_vert = /* glsl */`
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

}
`;

    var linedashed_frag = /* glsl */`
uniform vec3 diffuse;
uniform float opacity;

uniform float dashSize;
uniform float totalSize;

varying float vLineDistance;

#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	if ( mod( vLineDistance, totalSize ) > dashSize ) {

		discard;

	}

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <color_fragment>

	outgoingLight = diffuseColor.rgb; // simple shader

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`;

    var linedashed_vert = /* glsl */`
uniform float scale;
attribute float lineDistance;

varying float vLineDistance;

#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	vLineDistance = scale * lineDistance;

	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`;

    var meshbasic_frag = /* glsl */`
uniform vec3 diffuse;
uniform float opacity;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );

	// accumulation (baked indirect lighting only)
	#ifdef USE_LIGHTMAP
	
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;

	#else

		reflectedLight.indirectDiffuse += vec3( 1.0 );

	#endif

	// modulation
	#include <aomap_fragment>

	reflectedLight.indirectDiffuse *= diffuseColor.rgb;

	vec3 outgoingLight = reflectedLight.indirectDiffuse;

	#include <envmap_fragment>

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`;

    var meshbasic_vert = /* glsl */`
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <skinbase_vertex>

	#ifdef USE_ENVMAP

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>

	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>

}
`;

    var meshlambert_frag = /* glsl */`
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

varying vec3 vLightFront;
varying vec3 vIndirectFront;

#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif


#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>

	// accumulation

	#ifdef DOUBLE_SIDED

		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;

	#else

		reflectedLight.indirectDiffuse += vIndirectFront;

	#endif

	#include <lightmap_fragment>

	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );

	#ifdef DOUBLE_SIDED

		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;

	#else

		reflectedLight.directDiffuse = vLightFront;

	#endif

	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();

	// modulation

	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	#include <envmap_fragment>

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}
`;

    var meshlambert_vert = /* glsl */`
#define LAMBERT

varying vec3 vLightFront;
varying vec3 vIndirectFront;

#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif

#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}
`;

    var meshmatcap_frag = /* glsl */`
#define MATCAP

uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>

#include <fog_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks

	#ifdef USE_MATCAP

		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );

	#else

		vec4 matcapColor = vec4( 1.0 );

	#endif

	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`;

    var meshmatcap_vert = /* glsl */`
#define MATCAP

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>

#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED

		vNormal = normalize( transformedNormal );

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

	vViewPosition = - mvPosition.xyz;

}
`;

    var meshtoon_frag = /* glsl */`
#define TOON

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`;

    var meshtoon_vert = /* glsl */`
#define TOON

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`;

    var meshphong_frag = /* glsl */`
#define PHONG

uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;

	#include <envmap_fragment>

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`;

    var meshphong_vert = /* glsl */`
#define PHONG

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`;

    var meshphysical_frag = /* glsl */`
#define STANDARD

#ifdef PHYSICAL
	#define REFLECTIVITY
	#define CLEARCOAT
	#define TRANSMISSION
#endif

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;

#ifdef TRANSMISSION
	uniform float transmission;
#endif

#ifdef REFLECTIVITY
	uniform float reflectivity;
#endif

#ifdef CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif

#ifdef USE_SHEEN
	uniform vec3 sheen;
#endif

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <transmissionmap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <lights_physical_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#ifdef TRANSMISSION
		float totalTransmission = transmission;
	#endif

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <transmissionmap_fragment>

	// accumulation
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;

	// this is a stub for the transmission model
	#ifdef TRANSMISSION
		diffuseColor.a *= saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );
	#endif

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`;

    var meshphysical_vert = /* glsl */`
#define STANDARD

varying vec3 vViewPosition;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif

#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

	#ifdef USE_TANGENT

		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );

	#endif

#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`;

    var normal_frag = /* glsl */`
#define NORMAL

uniform float opacity;

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )

	varying vec3 vViewPosition;

#endif

#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif

#include <packing>
#include <uv_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );

}
`;

    var normal_vert = /* glsl */`
#define NORMAL

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )

	varying vec3 vViewPosition;

#endif

#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

	#ifdef USE_TANGENT

		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );

	#endif

#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )

	vViewPosition = - mvPosition.xyz;

#endif

}
`;

    var points_frag = /* glsl */`
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>

	outgoingLight = diffuseColor.rgb;

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`;

    var points_vert = /* glsl */`
uniform float size;
uniform float scale;

#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>

	gl_PointSize = size;

	#ifdef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );

	#endif

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>

}
`;

    var shadow_frag = /* glsl */`
uniform vec3 color;
uniform float opacity;

#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>

void main() {

	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>

}
`;

    var shadow_vert = /* glsl */`
#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>

void main() {

	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`;

    var sprite_frag = /* glsl */`
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>

	outgoingLight = diffuseColor.rgb;

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>

}
`;

    var sprite_vert = /* glsl */`
uniform float rotation;
uniform vec2 center;

#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );

	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );

	#ifndef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) scale *= - mvPosition.z;

	#endif

	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;

	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;

	mvPosition.xy += rotatedPosition;

	gl_Position = projectionMatrix * mvPosition;

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`;

    const ShaderChunk = {
    	alphamap_fragment: alphamap_fragment,
    	alphamap_pars_fragment: alphamap_pars_fragment,
    	alphatest_fragment: alphatest_fragment,
    	aomap_fragment: aomap_fragment,
    	aomap_pars_fragment: aomap_pars_fragment,
    	begin_vertex: begin_vertex,
    	beginnormal_vertex: beginnormal_vertex,
    	bsdfs: bsdfs,
    	bumpmap_pars_fragment: bumpmap_pars_fragment,
    	clipping_planes_fragment: clipping_planes_fragment,
    	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
    	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
    	clipping_planes_vertex: clipping_planes_vertex,
    	color_fragment: color_fragment,
    	color_pars_fragment: color_pars_fragment,
    	color_pars_vertex: color_pars_vertex,
    	color_vertex: color_vertex,
    	common: common,
    	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
    	defaultnormal_vertex: defaultnormal_vertex,
    	displacementmap_pars_vertex: displacementmap_pars_vertex,
    	displacementmap_vertex: displacementmap_vertex,
    	emissivemap_fragment: emissivemap_fragment,
    	emissivemap_pars_fragment: emissivemap_pars_fragment,
    	encodings_fragment: encodings_fragment,
    	encodings_pars_fragment: encodings_pars_fragment,
    	envmap_fragment: envmap_fragment,
    	envmap_common_pars_fragment: envmap_common_pars_fragment,
    	envmap_pars_fragment: envmap_pars_fragment,
    	envmap_pars_vertex: envmap_pars_vertex,
    	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
    	envmap_vertex: envmap_vertex,
    	fog_vertex: fog_vertex,
    	fog_pars_vertex: fog_pars_vertex,
    	fog_fragment: fog_fragment,
    	fog_pars_fragment: fog_pars_fragment,
    	gradientmap_pars_fragment: gradientmap_pars_fragment,
    	lightmap_fragment: lightmap_fragment,
    	lightmap_pars_fragment: lightmap_pars_fragment,
    	lights_lambert_vertex: lights_lambert_vertex,
    	lights_pars_begin: lights_pars_begin,
    	lights_toon_fragment: lights_toon_fragment,
    	lights_toon_pars_fragment: lights_toon_pars_fragment,
    	lights_phong_fragment: lights_phong_fragment,
    	lights_phong_pars_fragment: lights_phong_pars_fragment,
    	lights_physical_fragment: lights_physical_fragment,
    	lights_physical_pars_fragment: lights_physical_pars_fragment,
    	lights_fragment_begin: lights_fragment_begin,
    	lights_fragment_maps: lights_fragment_maps,
    	lights_fragment_end: lights_fragment_end,
    	logdepthbuf_fragment: logdepthbuf_fragment,
    	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
    	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
    	logdepthbuf_vertex: logdepthbuf_vertex,
    	map_fragment: map_fragment,
    	map_pars_fragment: map_pars_fragment,
    	map_particle_fragment: map_particle_fragment,
    	map_particle_pars_fragment: map_particle_pars_fragment,
    	metalnessmap_fragment: metalnessmap_fragment,
    	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
    	morphnormal_vertex: morphnormal_vertex,
    	morphtarget_pars_vertex: morphtarget_pars_vertex,
    	morphtarget_vertex: morphtarget_vertex,
    	normal_fragment_begin: normal_fragment_begin,
    	normal_fragment_maps: normal_fragment_maps,
    	normalmap_pars_fragment: normalmap_pars_fragment,
    	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
    	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
    	clearcoat_pars_fragment: clearcoat_pars_fragment,
    	packing: packing,
    	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
    	project_vertex: project_vertex,
    	dithering_fragment: dithering_fragment,
    	dithering_pars_fragment: dithering_pars_fragment,
    	roughnessmap_fragment: roughnessmap_fragment,
    	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
    	shadowmap_pars_fragment: shadowmap_pars_fragment,
    	shadowmap_pars_vertex: shadowmap_pars_vertex,
    	shadowmap_vertex: shadowmap_vertex,
    	shadowmask_pars_fragment: shadowmask_pars_fragment,
    	skinbase_vertex: skinbase_vertex,
    	skinning_pars_vertex: skinning_pars_vertex,
    	skinning_vertex: skinning_vertex,
    	skinnormal_vertex: skinnormal_vertex,
    	specularmap_fragment: specularmap_fragment,
    	specularmap_pars_fragment: specularmap_pars_fragment,
    	tonemapping_fragment: tonemapping_fragment,
    	tonemapping_pars_fragment: tonemapping_pars_fragment,
    	transmissionmap_fragment: transmissionmap_fragment,
    	transmissionmap_pars_fragment: transmissionmap_pars_fragment,
    	uv_pars_fragment: uv_pars_fragment,
    	uv_pars_vertex: uv_pars_vertex,
    	uv_vertex: uv_vertex,
    	uv2_pars_fragment: uv2_pars_fragment,
    	uv2_pars_vertex: uv2_pars_vertex,
    	uv2_vertex: uv2_vertex,
    	worldpos_vertex: worldpos_vertex,

    	background_frag: background_frag,
    	background_vert: background_vert,
    	cube_frag: cube_frag,
    	cube_vert: cube_vert,
    	depth_frag: depth_frag,
    	depth_vert: depth_vert,
    	distanceRGBA_frag: distanceRGBA_frag,
    	distanceRGBA_vert: distanceRGBA_vert,
    	equirect_frag: equirect_frag,
    	equirect_vert: equirect_vert,
    	linedashed_frag: linedashed_frag,
    	linedashed_vert: linedashed_vert,
    	meshbasic_frag: meshbasic_frag,
    	meshbasic_vert: meshbasic_vert,
    	meshlambert_frag: meshlambert_frag,
    	meshlambert_vert: meshlambert_vert,
    	meshmatcap_frag: meshmatcap_frag,
    	meshmatcap_vert: meshmatcap_vert,
    	meshtoon_frag: meshtoon_frag,
    	meshtoon_vert: meshtoon_vert,
    	meshphong_frag: meshphong_frag,
    	meshphong_vert: meshphong_vert,
    	meshphysical_frag: meshphysical_frag,
    	meshphysical_vert: meshphysical_vert,
    	normal_frag: normal_frag,
    	normal_vert: normal_vert,
    	points_frag: points_frag,
    	points_vert: points_vert,
    	shadow_frag: shadow_frag,
    	shadow_vert: shadow_vert,
    	sprite_frag: sprite_frag,
    	sprite_vert: sprite_vert
    };

    const ShaderLib = {

    	basic: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.meshbasic_vert,
    		fragmentShader: ShaderChunk.meshbasic_frag

    	},

    	lambert: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshlambert_vert,
    		fragmentShader: ShaderChunk.meshlambert_frag

    	},

    	phong: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) },
    				specular: { value: new Color( 0x111111 ) },
    				shininess: { value: 30 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphong_vert,
    		fragmentShader: ShaderChunk.meshphong_frag

    	},

    	standard: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.roughnessmap,
    			UniformsLib.metalnessmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) },
    				roughness: { value: 1.0 },
    				metalness: { value: 0.0 },
    				envMapIntensity: { value: 1 } // temporary
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphysical_vert,
    		fragmentShader: ShaderChunk.meshphysical_frag

    	},

    	toon: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.gradientmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshtoon_vert,
    		fragmentShader: ShaderChunk.meshtoon_frag

    	},

    	matcap: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			{
    				matcap: { value: null }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshmatcap_vert,
    		fragmentShader: ShaderChunk.meshmatcap_frag

    	},

    	points: {

    		uniforms: mergeUniforms( [
    			UniformsLib.points,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.points_vert,
    		fragmentShader: ShaderChunk.points_frag

    	},

    	dashed: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.fog,
    			{
    				scale: { value: 1 },
    				dashSize: { value: 1 },
    				totalSize: { value: 2 }
    			}
    		] ),

    		vertexShader: ShaderChunk.linedashed_vert,
    		fragmentShader: ShaderChunk.linedashed_frag

    	},

    	depth: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap
    		] ),

    		vertexShader: ShaderChunk.depth_vert,
    		fragmentShader: ShaderChunk.depth_frag

    	},

    	normal: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			{
    				opacity: { value: 1.0 }
    			}
    		] ),

    		vertexShader: ShaderChunk.normal_vert,
    		fragmentShader: ShaderChunk.normal_frag

    	},

    	sprite: {

    		uniforms: mergeUniforms( [
    			UniformsLib.sprite,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.sprite_vert,
    		fragmentShader: ShaderChunk.sprite_frag

    	},

    	background: {

    		uniforms: {
    			uvTransform: { value: new Matrix3() },
    			t2D: { value: null },
    		},

    		vertexShader: ShaderChunk.background_vert,
    		fragmentShader: ShaderChunk.background_frag

    	},
    	/* -------------------------------------------------------------------------
    	//	Cube map shader
    	 ------------------------------------------------------------------------- */

    	cube: {

    		uniforms: mergeUniforms( [
    			UniformsLib.envmap,
    			{
    				opacity: { value: 1.0 }
    			}
    		] ),

    		vertexShader: ShaderChunk.cube_vert,
    		fragmentShader: ShaderChunk.cube_frag

    	},

    	equirect: {

    		uniforms: {
    			tEquirect: { value: null },
    		},

    		vertexShader: ShaderChunk.equirect_vert,
    		fragmentShader: ShaderChunk.equirect_frag

    	},

    	distanceRGBA: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap,
    			{
    				referencePosition: { value: new Vector3() },
    				nearDistance: { value: 1 },
    				farDistance: { value: 1000 }
    			}
    		] ),

    		vertexShader: ShaderChunk.distanceRGBA_vert,
    		fragmentShader: ShaderChunk.distanceRGBA_frag

    	},

    	shadow: {

    		uniforms: mergeUniforms( [
    			UniformsLib.lights,
    			UniformsLib.fog,
    			{
    				color: { value: new Color( 0x00000 ) },
    				opacity: { value: 1.0 }
    			},
    		] ),

    		vertexShader: ShaderChunk.shadow_vert,
    		fragmentShader: ShaderChunk.shadow_frag

    	}

    };

    ShaderLib.physical = {

    	uniforms: mergeUniforms( [
    		ShaderLib.standard.uniforms,
    		{
    			clearcoat: { value: 0 },
    			clearcoatMap: { value: null },
    			clearcoatRoughness: { value: 0 },
    			clearcoatRoughnessMap: { value: null },
    			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
    			clearcoatNormalMap: { value: null },
    			sheen: { value: new Color( 0x000000 ) },
    			transmission: { value: 0 },
    			transmissionMap: { value: null },
    		}
    	] ),

    	vertexShader: ShaderChunk.meshphysical_vert,
    	fragmentShader: ShaderChunk.meshphysical_frag

    };

    function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

    	const clearColor = new Color( 0x000000 );
    	let clearAlpha = 0;

    	let planeMesh;
    	let boxMesh;

    	let currentBackground = null;
    	let currentBackgroundVersion = 0;
    	let currentTonemapping = null;

    	function render( renderList, scene, camera, forceClear ) {

    		let background = scene.isScene === true ? scene.background : null;

    		// Ignore background in AR
    		// TODO: Reconsider this.

    		const xr = renderer.xr;
    		const session = xr.getSession && xr.getSession();

    		if ( session && session.environmentBlendMode === 'additive' ) {

    			background = null;

    		}

    		if ( background === null ) {

    			setClear( clearColor, clearAlpha );

    		} else if ( background && background.isColor ) {

    			setClear( background, 1 );
    			forceClear = true;

    		}

    		if ( renderer.autoClear || forceClear ) {

    			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

    		}

    		if ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {

    			if ( boxMesh === undefined ) {

    				boxMesh = new Mesh(
    					new BoxBufferGeometry( 1, 1, 1 ),
    					new ShaderMaterial( {
    						name: 'BackgroundCubeMaterial',
    						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
    						vertexShader: ShaderLib.cube.vertexShader,
    						fragmentShader: ShaderLib.cube.fragmentShader,
    						side: BackSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false
    					} )
    				);

    				boxMesh.geometry.deleteAttribute( 'normal' );
    				boxMesh.geometry.deleteAttribute( 'uv' );

    				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

    					this.matrixWorld.copyPosition( camera.matrixWorld );

    				};

    				// enable code injection for non-built-in material
    				Object.defineProperty( boxMesh.material, 'envMap', {

    					get: function () {

    						return this.uniforms.envMap.value;

    					}

    				} );

    				objects.update( boxMesh );

    			}

    			const texture = background.isWebGLCubeRenderTarget ? background.texture : background;

    			boxMesh.material.uniforms.envMap.value = texture;
    			boxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== texture.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				boxMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = texture.version;
    				currentTonemapping = renderer.toneMapping;

    			}

    			// push to the pre-sorted opaque render list
    			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

    		} else if ( background && background.isTexture ) {

    			if ( planeMesh === undefined ) {

    				planeMesh = new Mesh(
    					new PlaneBufferGeometry( 2, 2 ),
    					new ShaderMaterial( {
    						name: 'BackgroundMaterial',
    						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
    						vertexShader: ShaderLib.background.vertexShader,
    						fragmentShader: ShaderLib.background.fragmentShader,
    						side: FrontSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false
    					} )
    				);

    				planeMesh.geometry.deleteAttribute( 'normal' );

    				// enable code injection for non-built-in material
    				Object.defineProperty( planeMesh.material, 'map', {

    					get: function () {

    						return this.uniforms.t2D.value;

    					}

    				} );

    				objects.update( planeMesh );

    			}

    			planeMesh.material.uniforms.t2D.value = background;

    			if ( background.matrixAutoUpdate === true ) {

    				background.updateMatrix();

    			}

    			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== background.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				planeMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = background.version;
    				currentTonemapping = renderer.toneMapping;

    			}


    			// push to the pre-sorted opaque render list
    			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

    		}

    	}

    	function setClear( color, alpha ) {

    		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

    	}

    	return {

    		getClearColor: function () {

    			return clearColor;

    		},
    		setClearColor: function ( color, alpha ) {

    			clearColor.set( color );
    			clearAlpha = alpha !== undefined ? alpha : 1;
    			setClear( clearColor, clearAlpha );

    		},
    		getClearAlpha: function () {

    			return clearAlpha;

    		},
    		setClearAlpha: function ( alpha ) {

    			clearAlpha = alpha;
    			setClear( clearColor, clearAlpha );

    		},
    		render: render

    	};

    }

    function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

    	const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

    	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
    	const vaoAvailable = capabilities.isWebGL2 || extension !== null;

    	const bindingStates = {};

    	const defaultState = createBindingState( null );
    	let currentState = defaultState;

    	function setup( object, material, program, geometry, index ) {

    		let updateBuffers = false;

    		if ( vaoAvailable ) {

    			const state = getBindingState( geometry, program, material );

    			if ( currentState !== state ) {

    				currentState = state;
    				bindVertexArrayObject( currentState.object );

    			}

    			updateBuffers = needsUpdate( geometry );

    			if ( updateBuffers ) saveCache( geometry );

    		} else {

    			const wireframe = ( material.wireframe === true );

    			if ( currentState.geometry !== geometry.id ||
    				currentState.program !== program.id ||
    				currentState.wireframe !== wireframe ) {

    				currentState.geometry = geometry.id;
    				currentState.program = program.id;
    				currentState.wireframe = wireframe;

    				updateBuffers = true;

    			}

    		}

    		if ( object.isInstancedMesh === true ) {

    			updateBuffers = true;

    		}

    		if ( index !== null ) {

    			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

    		}

    		if ( updateBuffers ) {

    			setupVertexAttributes( object, material, program, geometry );

    			if ( index !== null ) {

    				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

    			}

    		}

    	}

    	function createVertexArrayObject() {

    		if ( capabilities.isWebGL2 ) return gl.createVertexArray();

    		return extension.createVertexArrayOES();

    	}

    	function bindVertexArrayObject( vao ) {

    		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

    		return extension.bindVertexArrayOES( vao );

    	}

    	function deleteVertexArrayObject( vao ) {

    		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

    		return extension.deleteVertexArrayOES( vao );

    	}

    	function getBindingState( geometry, program, material ) {

    		const wireframe = ( material.wireframe === true );

    		let programMap = bindingStates[ geometry.id ];

    		if ( programMap === undefined ) {

    			programMap = {};
    			bindingStates[ geometry.id ] = programMap;

    		}

    		let stateMap = programMap[ program.id ];

    		if ( stateMap === undefined ) {

    			stateMap = {};
    			programMap[ program.id ] = stateMap;

    		}

    		let state = stateMap[ wireframe ];

    		if ( state === undefined ) {

    			state = createBindingState( createVertexArrayObject() );
    			stateMap[ wireframe ] = state;

    		}

    		return state;

    	}

    	function createBindingState( vao ) {

    		const newAttributes = [];
    		const enabledAttributes = [];
    		const attributeDivisors = [];

    		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

    			newAttributes[ i ] = 0;
    			enabledAttributes[ i ] = 0;
    			attributeDivisors[ i ] = 0;

    		}

    		return {

    			// for backward compatibility on non-VAO support browser
    			geometry: null,
    			program: null,
    			wireframe: false,

    			newAttributes: newAttributes,
    			enabledAttributes: enabledAttributes,
    			attributeDivisors: attributeDivisors,
    			object: vao,
    			attributes: {}

    		};

    	}

    	function needsUpdate( geometry ) {

    		const cachedAttributes = currentState.attributes;
    		const geometryAttributes = geometry.attributes;

    		if ( Object.keys( cachedAttributes ).length !== Object.keys( geometryAttributes ).length ) return true;

    		for ( const key in geometryAttributes ) {

    			const cachedAttribute = cachedAttributes[ key ];
    			const geometryAttribute = geometryAttributes[ key ];

    			if ( cachedAttribute.attribute !== geometryAttribute ) return true;

    			if ( cachedAttribute.data !== geometryAttribute.data ) return true;

    		}

    		return false;

    	}

    	function saveCache( geometry ) {

    		const cache = {};
    		const attributes = geometry.attributes;

    		for ( const key in attributes ) {

    			const attribute = attributes[ key ];

    			const data = {};
    			data.attribute = attribute;

    			if ( attribute.data ) {

    				data.data = attribute.data;

    			}

    			cache[ key ] = data;

    		}

    		currentState.attributes = cache;

    	}

    	function initAttributes() {

    		const newAttributes = currentState.newAttributes;

    		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

    			newAttributes[ i ] = 0;

    		}

    	}

    	function enableAttribute( attribute ) {

    		enableAttributeAndDivisor( attribute, 0 );

    	}

    	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;
    		const attributeDivisors = currentState.attributeDivisors;

    		newAttributes[ attribute ] = 1;

    		if ( enabledAttributes[ attribute ] === 0 ) {

    			gl.enableVertexAttribArray( attribute );
    			enabledAttributes[ attribute ] = 1;

    		}

    		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

    			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

    			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
    			attributeDivisors[ attribute ] = meshPerAttribute;

    		}

    	}

    	function disableUnusedAttributes() {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;

    		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

    			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

    				gl.disableVertexAttribArray( i );
    				enabledAttributes[ i ] = 0;

    			}

    		}

    	}

    	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {

    		if ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT ) ) {

    			gl.vertexAttribIPointer( index, size, type, stride, offset );

    		} else {

    			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

    		}

    	}

    	function setupVertexAttributes( object, material, program, geometry ) {

    		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

    			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

    		}

    		initAttributes();

    		const geometryAttributes = geometry.attributes;

    		const programAttributes = program.getAttributes();

    		const materialDefaultAttributeValues = material.defaultAttributeValues;

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute >= 0 ) {

    				const geometryAttribute = geometryAttributes[ name ];

    				if ( geometryAttribute !== undefined ) {

    					const normalized = geometryAttribute.normalized;
    					const size = geometryAttribute.itemSize;

    					const attribute = attributes.get( geometryAttribute );

    					// TODO Attribute may not be available on context restore

    					if ( attribute === undefined ) continue;

    					const buffer = attribute.buffer;
    					const type = attribute.type;
    					const bytesPerElement = attribute.bytesPerElement;

    					if ( geometryAttribute.isInterleavedBufferAttribute ) {

    						const data = geometryAttribute.data;
    						const stride = data.stride;
    						const offset = geometryAttribute.offset;

    						if ( data && data.isInstancedInterleavedBuffer ) {

    							enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

    							if ( geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

    							}

    						} else {

    							enableAttribute( programAttribute );

    						}

    						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );
    						vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

    					} else {

    						if ( geometryAttribute.isInstancedBufferAttribute ) {

    							enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

    							if ( geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

    							}

    						} else {

    							enableAttribute( programAttribute );

    						}

    						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );
    						vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

    					}

    				} else if ( name === 'instanceMatrix' ) {

    					const attribute = attributes.get( object.instanceMatrix );

    					// TODO Attribute may not be available on context restore

    					if ( attribute === undefined ) continue;

    					const buffer = attribute.buffer;
    					const type = attribute.type;

    					enableAttributeAndDivisor( programAttribute + 0, 1 );
    					enableAttributeAndDivisor( programAttribute + 1, 1 );
    					enableAttributeAndDivisor( programAttribute + 2, 1 );
    					enableAttributeAndDivisor( programAttribute + 3, 1 );

    					gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

    					gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
    					gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
    					gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
    					gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );

    				} else if ( materialDefaultAttributeValues !== undefined ) {

    					const value = materialDefaultAttributeValues[ name ];

    					if ( value !== undefined ) {

    						switch ( value.length ) {

    							case 2:
    								gl.vertexAttrib2fv( programAttribute, value );
    								break;

    							case 3:
    								gl.vertexAttrib3fv( programAttribute, value );
    								break;

    							case 4:
    								gl.vertexAttrib4fv( programAttribute, value );
    								break;

    							default:
    								gl.vertexAttrib1fv( programAttribute, value );

    						}

    					}

    				}

    			}

    		}

    		disableUnusedAttributes();

    	}

    	function dispose() {

    		reset();

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			for ( const programId in programMap ) {

    				const stateMap = programMap[ programId ];

    				for ( const wireframe in stateMap ) {

    					deleteVertexArrayObject( stateMap[ wireframe ].object );

    					delete stateMap[ wireframe ];

    				}

    				delete programMap[ programId ];

    			}

    			delete bindingStates[ geometryId ];

    		}

    	}

    	function releaseStatesOfGeometry( geometry ) {

    		if ( bindingStates[ geometry.id ] === undefined ) return;

    		const programMap = bindingStates[ geometry.id ];

    		for ( const programId in programMap ) {

    			const stateMap = programMap[ programId ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ programId ];

    		}

    		delete bindingStates[ geometry.id ];

    	}

    	function releaseStatesOfProgram( program ) {

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			if ( programMap[ program.id ] === undefined ) continue;

    			const stateMap = programMap[ program.id ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ program.id ];

    		}

    	}

    	function reset() {

    		resetDefaultState();

    		if ( currentState === defaultState ) return;

    		currentState = defaultState;
    		bindVertexArrayObject( currentState.object );

    	}

    	// for backward-compatilibity

    	function resetDefaultState() {

    		defaultState.geometry = null;
    		defaultState.program = null;
    		defaultState.wireframe = false;

    	}

    	return {

    		setup: setup,
    		reset: reset,
    		resetDefaultState: resetDefaultState,
    		dispose: dispose,
    		releaseStatesOfGeometry: releaseStatesOfGeometry,
    		releaseStatesOfProgram: releaseStatesOfProgram,

    		initAttributes: initAttributes,
    		enableAttribute: enableAttribute,
    		disableUnusedAttributes: disableUnusedAttributes

    	};

    }

    function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	function render( start, count ) {

    		gl.drawArrays( mode, start, count );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		let extension, methodName;

    		if ( isWebGL2 ) {

    			extension = gl;
    			methodName = 'drawArraysInstanced';

    		} else {

    			extension = extensions.get( 'ANGLE_instanced_arrays' );
    			methodName = 'drawArraysInstancedANGLE';

    			if ( extension === null ) {

    				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
    				return;

    			}

    		}

    		extension[ methodName ]( mode, start, count, primcount );

    		info.update( count, mode, primcount );

    	}

    	//

    	this.setMode = setMode;
    	this.render = render;
    	this.renderInstances = renderInstances;

    }

    function WebGLCapabilities( gl, extensions, parameters ) {

    	let maxAnisotropy;

    	function getMaxAnisotropy() {

    		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

    		const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

    		if ( extension !== null ) {

    			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

    		} else {

    			maxAnisotropy = 0;

    		}

    		return maxAnisotropy;

    	}

    	function getMaxPrecision( precision ) {

    		if ( precision === 'highp' ) {

    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
    				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

    				return 'highp';

    			}

    			precision = 'mediump';

    		}

    		if ( precision === 'mediump' ) {

    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
    				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

    				return 'mediump';

    			}

    		}

    		return 'lowp';

    	}

    	/* eslint-disable no-undef */
    	const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
    		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
    	/* eslint-enable no-undef */

    	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
    	const maxPrecision = getMaxPrecision( precision );

    	if ( maxPrecision !== precision ) {

    		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
    		precision = maxPrecision;

    	}

    	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

    	const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
    	const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
    	const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
    	const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

    	const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
    	const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
    	const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
    	const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

    	const vertexTextures = maxVertexTextures > 0;
    	const floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
    	const floatVertexTextures = vertexTextures && floatFragmentTextures;

    	const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;

    	return {

    		isWebGL2: isWebGL2,

    		getMaxAnisotropy: getMaxAnisotropy,
    		getMaxPrecision: getMaxPrecision,

    		precision: precision,
    		logarithmicDepthBuffer: logarithmicDepthBuffer,

    		maxTextures: maxTextures,
    		maxVertexTextures: maxVertexTextures,
    		maxTextureSize: maxTextureSize,
    		maxCubemapSize: maxCubemapSize,

    		maxAttributes: maxAttributes,
    		maxVertexUniforms: maxVertexUniforms,
    		maxVaryings: maxVaryings,
    		maxFragmentUniforms: maxFragmentUniforms,

    		vertexTextures: vertexTextures,
    		floatFragmentTextures: floatFragmentTextures,
    		floatVertexTextures: floatVertexTextures,

    		maxSamples: maxSamples

    	};

    }

    function WebGLClipping() {

    	const scope = this;

    	let globalState = null,
    		numGlobalPlanes = 0,
    		localClippingEnabled = false,
    		renderingShadows = false;

    	const plane = new Plane(),
    		viewNormalMatrix = new Matrix3(),

    		uniform = { value: null, needsUpdate: false };

    	this.uniform = uniform;
    	this.numPlanes = 0;
    	this.numIntersection = 0;

    	this.init = function ( planes, enableLocalClipping, camera ) {

    		const enabled =
    			planes.length !== 0 ||
    			enableLocalClipping ||
    			// enable state of previous frame - the clipping code has to
    			// run another frame in order to reset the state:
    			numGlobalPlanes !== 0 ||
    			localClippingEnabled;

    		localClippingEnabled = enableLocalClipping;

    		globalState = projectPlanes( planes, camera, 0 );
    		numGlobalPlanes = planes.length;

    		return enabled;

    	};

    	this.beginShadows = function () {

    		renderingShadows = true;
    		projectPlanes( null );

    	};

    	this.endShadows = function () {

    		renderingShadows = false;
    		resetGlobalState();

    	};

    	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

    		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

    			// there's no local clipping

    			if ( renderingShadows ) {

    				// there's no global clipping

    				projectPlanes( null );

    			} else {

    				resetGlobalState();

    			}

    		} else {

    			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
    				lGlobal = nGlobal * 4;

    			let dstArray = cache.clippingState || null;

    			uniform.value = dstArray; // ensure unique state

    			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

    			for ( let i = 0; i !== lGlobal; ++ i ) {

    				dstArray[ i ] = globalState[ i ];

    			}

    			cache.clippingState = dstArray;
    			this.numIntersection = clipIntersection ? this.numPlanes : 0;
    			this.numPlanes += nGlobal;

    		}


    	};

    	function resetGlobalState() {

    		if ( uniform.value !== globalState ) {

    			uniform.value = globalState;
    			uniform.needsUpdate = numGlobalPlanes > 0;

    		}

    		scope.numPlanes = numGlobalPlanes;
    		scope.numIntersection = 0;

    	}

    	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

    		let nPlanes = planes !== null ? planes.length : 0,
    			dstArray = null;

    		if ( nPlanes !== 0 ) {

    			dstArray = uniform.value;

    			if ( skipTransform !== true || dstArray === null ) {

    				const flatSize = dstOffset + nPlanes * 4,
    					viewMatrix = camera.matrixWorldInverse;

    				viewNormalMatrix.getNormalMatrix( viewMatrix );

    				if ( dstArray === null || dstArray.length < flatSize ) {

    					dstArray = new Float32Array( flatSize );

    				}

    				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

    					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

    					plane.normal.toArray( dstArray, i4 );
    					dstArray[ i4 + 3 ] = plane.constant;

    				}

    			}

    			uniform.value = dstArray;
    			uniform.needsUpdate = true;

    		}

    		scope.numPlanes = nPlanes;
    		scope.numIntersection = 0;

    		return dstArray;

    	}

    }

    function WebGLExtensions( gl ) {

    	const extensions = {};

    	return {

    		has: function ( name ) {

    			if ( extensions[ name ] !== undefined ) {

    				return extensions[ name ];

    			}

    			let extension;

    			switch ( name ) {

    				case 'WEBGL_depth_texture':
    					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
    					break;

    				case 'EXT_texture_filter_anisotropic':
    					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
    					break;

    				case 'WEBGL_compressed_texture_s3tc':
    					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
    					break;

    				case 'WEBGL_compressed_texture_pvrtc':
    					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
    					break;

    				default:
    					extension = gl.getExtension( name );

    			}

    			extensions[ name ] = extension;

    			return !! extension;

    		},

    		get: function ( name ) {

    			if ( ! this.has( name ) ) {

    				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

    			}

    			return extensions[ name ];

    		}

    	};

    }

    function WebGLGeometries( gl, attributes, info, bindingStates ) {

    	const geometries = new WeakMap();
    	const wireframeAttributes = new WeakMap();

    	function onGeometryDispose( event ) {

    		const geometry = event.target;
    		const buffergeometry = geometries.get( geometry );

    		if ( buffergeometry.index !== null ) {

    			attributes.remove( buffergeometry.index );

    		}

    		for ( const name in buffergeometry.attributes ) {

    			attributes.remove( buffergeometry.attributes[ name ] );

    		}

    		geometry.removeEventListener( 'dispose', onGeometryDispose );

    		geometries.delete( geometry );

    		const attribute = wireframeAttributes.get( buffergeometry );

    		if ( attribute ) {

    			attributes.remove( attribute );
    			wireframeAttributes.delete( buffergeometry );

    		}

    		bindingStates.releaseStatesOfGeometry( geometry );

    		if ( geometry.isInstancedBufferGeometry === true ) {

    			delete geometry._maxInstanceCount;

    		}

    		//

    		info.memory.geometries --;

    	}

    	function get( object, geometry ) {

    		let buffergeometry = geometries.get( geometry );

    		if ( buffergeometry ) return buffergeometry;

    		geometry.addEventListener( 'dispose', onGeometryDispose );

    		if ( geometry.isBufferGeometry ) {

    			buffergeometry = geometry;

    		} else if ( geometry.isGeometry ) {

    			if ( geometry._bufferGeometry === undefined ) {

    				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

    			}

    			buffergeometry = geometry._bufferGeometry;

    		}

    		geometries.set( geometry, buffergeometry );

    		info.memory.geometries ++;

    		return buffergeometry;

    	}

    	function update( geometry ) {

    		const geometryAttributes = geometry.attributes;

    		// Updating index buffer in VAO now. See WebGLBindingStates.

    		for ( const name in geometryAttributes ) {

    			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

    		}

    		// morph targets

    		const morphAttributes = geometry.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const array = morphAttributes[ name ];

    			for ( let i = 0, l = array.length; i < l; i ++ ) {

    				attributes.update( array[ i ], gl.ARRAY_BUFFER );

    			}

    		}

    	}

    	function updateWireframeAttribute( geometry ) {

    		const indices = [];

    		const geometryIndex = geometry.index;
    		const geometryPosition = geometry.attributes.position;
    		let version = 0;

    		if ( geometryIndex !== null ) {

    			const array = geometryIndex.array;
    			version = geometryIndex.version;

    			for ( let i = 0, l = array.length; i < l; i += 3 ) {

    				const a = array[ i + 0 ];
    				const b = array[ i + 1 ];
    				const c = array[ i + 2 ];

    				indices.push( a, b, b, c, c, a );

    			}

    		} else {

    			const array = geometryPosition.array;
    			version = geometryPosition.version;

    			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

    				const a = i + 0;
    				const b = i + 1;
    				const c = i + 2;

    				indices.push( a, b, b, c, c, a );

    			}

    		}

    		const attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
    		attribute.version = version;

    		// Updating index buffer in VAO now. See WebGLBindingStates

    		//

    		const previousAttribute = wireframeAttributes.get( geometry );

    		if ( previousAttribute ) attributes.remove( previousAttribute );

    		//

    		wireframeAttributes.set( geometry, attribute );

    	}

    	function getWireframeAttribute( geometry ) {

    		const currentAttribute = wireframeAttributes.get( geometry );

    		if ( currentAttribute ) {

    			const geometryIndex = geometry.index;

    			if ( geometryIndex !== null ) {

    				// if the attribute is obsolete, create a new one

    				if ( currentAttribute.version < geometryIndex.version ) {

    					updateWireframeAttribute( geometry );

    				}

    			}

    		} else {

    			updateWireframeAttribute( geometry );

    		}

    		return wireframeAttributes.get( geometry );

    	}

    	return {

    		get: get,
    		update: update,

    		getWireframeAttribute: getWireframeAttribute

    	};

    }

    function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	let type, bytesPerElement;

    	function setIndex( value ) {

    		type = value.type;
    		bytesPerElement = value.bytesPerElement;

    	}

    	function render( start, count ) {

    		gl.drawElements( mode, count, type, start * bytesPerElement );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		let extension, methodName;

    		if ( isWebGL2 ) {

    			extension = gl;
    			methodName = 'drawElementsInstanced';

    		} else {

    			extension = extensions.get( 'ANGLE_instanced_arrays' );
    			methodName = 'drawElementsInstancedANGLE';

    			if ( extension === null ) {

    				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
    				return;

    			}

    		}

    		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

    		info.update( count, mode, primcount );

    	}

    	//

    	this.setMode = setMode;
    	this.setIndex = setIndex;
    	this.render = render;
    	this.renderInstances = renderInstances;

    }

    function WebGLInfo( gl ) {

    	const memory = {
    		geometries: 0,
    		textures: 0
    	};

    	const render = {
    		frame: 0,
    		calls: 0,
    		triangles: 0,
    		points: 0,
    		lines: 0
    	};

    	function update( count, mode, instanceCount ) {

    		render.calls ++;

    		switch ( mode ) {

    			case gl.TRIANGLES:
    				render.triangles += instanceCount * ( count / 3 );
    				break;

    			case gl.LINES:
    				render.lines += instanceCount * ( count / 2 );
    				break;

    			case gl.LINE_STRIP:
    				render.lines += instanceCount * ( count - 1 );
    				break;

    			case gl.LINE_LOOP:
    				render.lines += instanceCount * count;
    				break;

    			case gl.POINTS:
    				render.points += instanceCount * count;
    				break;

    			default:
    				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
    				break;

    		}

    	}

    	function reset() {

    		render.frame ++;
    		render.calls = 0;
    		render.triangles = 0;
    		render.points = 0;
    		render.lines = 0;

    	}

    	return {
    		memory: memory,
    		render: render,
    		programs: null,
    		autoReset: true,
    		reset: reset,
    		update: update
    	};

    }

    function numericalSort( a, b ) {

    	return a[ 0 ] - b[ 0 ];

    }

    function absNumericalSort( a, b ) {

    	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

    }

    function WebGLMorphtargets( gl ) {

    	const influencesList = {};
    	const morphInfluences = new Float32Array( 8 );

    	const workInfluences = [];

    	for ( let i = 0; i < 8; i ++ ) {

    		workInfluences[ i ] = [ i, 0 ];

    	}

    	function update( object, geometry, material, program ) {

    		const objectInfluences = object.morphTargetInfluences;

    		// When object doesn't have morph target influences defined, we treat it as a 0-length array
    		// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

    		const length = objectInfluences === undefined ? 0 : objectInfluences.length;

    		let influences = influencesList[ geometry.id ];

    		if ( influences === undefined ) {

    			// initialise list

    			influences = [];

    			for ( let i = 0; i < length; i ++ ) {

    				influences[ i ] = [ i, 0 ];

    			}

    			influencesList[ geometry.id ] = influences;

    		}

    		// Collect influences

    		for ( let i = 0; i < length; i ++ ) {

    			const influence = influences[ i ];

    			influence[ 0 ] = i;
    			influence[ 1 ] = objectInfluences[ i ];

    		}

    		influences.sort( absNumericalSort );

    		for ( let i = 0; i < 8; i ++ ) {

    			if ( i < length && influences[ i ][ 1 ] ) {

    				workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
    				workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

    			} else {

    				workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
    				workInfluences[ i ][ 1 ] = 0;

    			}

    		}

    		workInfluences.sort( numericalSort );

    		const morphTargets = material.morphTargets && geometry.morphAttributes.position;
    		const morphNormals = material.morphNormals && geometry.morphAttributes.normal;

    		let morphInfluencesSum = 0;

    		for ( let i = 0; i < 8; i ++ ) {

    			const influence = workInfluences[ i ];
    			const index = influence[ 0 ];
    			const value = influence[ 1 ];

    			if ( index !== Number.MAX_SAFE_INTEGER && value ) {

    				if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

    					geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

    				}

    				if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

    					geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

    				}

    				morphInfluences[ i ] = value;
    				morphInfluencesSum += value;

    			} else {

    				if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== undefined ) {

    					geometry.deleteAttribute( 'morphTarget' + i );

    				}

    				if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== undefined ) {

    					geometry.deleteAttribute( 'morphNormal' + i );

    				}

    				morphInfluences[ i ] = 0;

    			}

    		}

    		// GLSL shader uses formula baseinfluence * base + sum(target * influence)
    		// This allows us to switch between absolute morphs and relative morphs without changing shader code
    		// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
    		const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

    		program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
    		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

    	}

    	return {

    		update: update

    	};

    }

    function WebGLObjects( gl, geometries, attributes, info ) {

    	let updateMap = new WeakMap();

    	function update( object ) {

    		const frame = info.render.frame;

    		const geometry = object.geometry;
    		const buffergeometry = geometries.get( object, geometry );

    		// Update once per frame

    		if ( updateMap.get( buffergeometry ) !== frame ) {

    			if ( geometry.isGeometry ) {

    				buffergeometry.updateFromObject( object );

    			}

    			geometries.update( buffergeometry );

    			updateMap.set( buffergeometry, frame );

    		}

    		if ( object.isInstancedMesh ) {

    			attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

    		}

    		return buffergeometry;

    	}

    	function dispose() {

    		updateMap = new WeakMap();

    	}

    	return {

    		update: update,
    		dispose: dispose

    	};

    }

    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

    	images = images !== undefined ? images : [];
    	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
    	format = format !== undefined ? format : RGBFormat;

    	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

    	this.flipY = false;

    }

    CubeTexture.prototype = Object.create( Texture.prototype );
    CubeTexture.prototype.constructor = CubeTexture;

    CubeTexture.prototype.isCubeTexture = true;

    Object.defineProperty( CubeTexture.prototype, 'images', {

    	get: function () {

    		return this.image;

    	},

    	set: function ( value ) {

    		this.image = value;

    	}

    } );

    function DataTexture2DArray( data, width, height, depth ) {

    	Texture.call( this, null );

    	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

    	this.magFilter = NearestFilter;
    	this.minFilter = NearestFilter;

    	this.wrapR = ClampToEdgeWrapping;

    	this.generateMipmaps = false;
    	this.flipY = false;

    	this.needsUpdate = true;

    }

    DataTexture2DArray.prototype = Object.create( Texture.prototype );
    DataTexture2DArray.prototype.constructor = DataTexture2DArray;
    DataTexture2DArray.prototype.isDataTexture2DArray = true;

    function DataTexture3D( data, width, height, depth ) {

    	// We're going to add .setXXX() methods for setting properties later.
    	// Users can still set in DataTexture3D directly.
    	//
    	//	const texture = new THREE.DataTexture3D( data, width, height, depth );
    	// 	texture.anisotropy = 16;
    	//
    	// See #14839

    	Texture.call( this, null );

    	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

    	this.magFilter = NearestFilter;
    	this.minFilter = NearestFilter;

    	this.wrapR = ClampToEdgeWrapping;

    	this.generateMipmaps = false;
    	this.flipY = false;

    	this.needsUpdate = true;


    }

    DataTexture3D.prototype = Object.create( Texture.prototype );
    DataTexture3D.prototype.constructor = DataTexture3D;
    DataTexture3D.prototype.isDataTexture3D = true;

    /**
     * Uniforms of a program.
     * Those form a tree structure with a special top-level container for the root,
     * which you get by calling 'new WebGLUniforms( gl, program )'.
     *
     *
     * Properties of inner nodes including the top-level container:
     *
     * .seq - array of nested uniforms
     * .map - nested uniforms by name
     *
     *
     * Methods of all nodes except the top-level container:
     *
     * .setValue( gl, value, [textures] )
     *
     * 		uploads a uniform value(s)
     *  	the 'textures' parameter is needed for sampler uniforms
     *
     *
     * Static methods of the top-level container (textures factorizations):
     *
     * .upload( gl, seq, values, textures )
     *
     * 		sets uniforms in 'seq' to 'values[id].value'
     *
     * .seqWithValue( seq, values ) : filteredSeq
     *
     * 		filters 'seq' entries with corresponding entry in values
     *
     *
     * Methods of the top-level container (textures factorizations):
     *
     * .setValue( gl, name, value, textures )
     *
     * 		sets uniform with  name 'name' to 'value'
     *
     * .setOptional( gl, obj, prop )
     *
     * 		like .set for an optional property of the object
     *
     */

    const emptyTexture = new Texture();
    const emptyTexture2dArray = new DataTexture2DArray();
    const emptyTexture3d = new DataTexture3D();
    const emptyCubeTexture = new CubeTexture();

    // --- Utilities ---

    // Array Caches (provide typed arrays for temporary by size)

    const arrayCacheF32 = [];
    const arrayCacheI32 = [];

    // Float32Array caches used for uploading Matrix uniforms

    const mat4array = new Float32Array( 16 );
    const mat3array = new Float32Array( 9 );
    const mat2array = new Float32Array( 4 );

    // Flattening for arrays of vectors and matrices

    function flatten( array, nBlocks, blockSize ) {

    	const firstElem = array[ 0 ];

    	if ( firstElem <= 0 || firstElem > 0 ) return array;
    	// unoptimized: ! isNaN( firstElem )
    	// see http://jacksondunstan.com/articles/983

    	let n = nBlocks * blockSize,
    		r = arrayCacheF32[ n ];

    	if ( r === undefined ) {

    		r = new Float32Array( n );
    		arrayCacheF32[ n ] = r;

    	}

    	if ( nBlocks !== 0 ) {

    		firstElem.toArray( r, 0 );

    		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

    			offset += blockSize;
    			array[ i ].toArray( r, offset );

    		}

    	}

    	return r;

    }

    function arraysEqual( a, b ) {

    	if ( a.length !== b.length ) return false;

    	for ( let i = 0, l = a.length; i < l; i ++ ) {

    		if ( a[ i ] !== b[ i ] ) return false;

    	}

    	return true;

    }

    function copyArray( a, b ) {

    	for ( let i = 0, l = b.length; i < l; i ++ ) {

    		a[ i ] = b[ i ];

    	}

    }

    // Texture unit allocation

    function allocTexUnits( textures, n ) {

    	let r = arrayCacheI32[ n ];

    	if ( r === undefined ) {

    		r = new Int32Array( n );
    		arrayCacheI32[ n ] = r;

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		r[ i ] = textures.allocateTextureUnit();

    	}

    	return r;

    }

    // --- Setters ---

    // Note: Defining these methods externally, because they come in a bunch
    // and this way their names minify.

    // Single scalar

    function setValueV1f( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1f( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single float vector (from flat array or THREE.VectorN)

    function setValueV2f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

    			gl.uniform2f( this.addr, v.x, v.y );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform2fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV3f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

    			gl.uniform3f( this.addr, v.x, v.y, v.z );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;

    		}

    	} else if ( v.r !== undefined ) {

    		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

    			gl.uniform3f( this.addr, v.r, v.g, v.b );

    			cache[ 0 ] = v.r;
    			cache[ 1 ] = v.g;
    			cache[ 2 ] = v.b;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform3fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV4f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

    			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;
    			cache[ 3 ] = v.w;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform4fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    // Single matrix (from flat array or MatrixN)

    function setValueM2( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix2fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat2array.set( elements );

    		gl.uniformMatrix2fv( this.addr, false, mat2array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM3( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix3fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat3array.set( elements );

    		gl.uniformMatrix3fv( this.addr, false, mat3array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM4( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix4fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat4array.set( elements );

    		gl.uniformMatrix4fv( this.addr, false, mat4array );

    		copyArray( cache, elements );

    	}

    }

    // Single texture (2D / Cube)

    function setValueT1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.safeSetTexture2D( v || emptyTexture, unit );

    }

    function setValueT2DArray1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture2DArray( v || emptyTexture2dArray, unit );

    }

    function setValueT3D1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture3D( v || emptyTexture3d, unit );

    }

    function setValueT6( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.safeSetTextureCube( v || emptyCubeTexture, unit );

    }

    // Integer / Boolean vectors or arrays thereof (always flat arrays)

    function setValueV1i( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1i( this.addr, v );

    	cache[ 0 ] = v;

    }

    function setValueV2i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform2iv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV3i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform3iv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV4i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform4iv( this.addr, v );

    	copyArray( cache, v );

    }

    // uint

    function setValueV1ui( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1ui( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Helper to pick the right setter for the singular case

    function getSingularSetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1f; // FLOAT
    		case 0x8b50: return setValueV2f; // _VEC2
    		case 0x8b51: return setValueV3f; // _VEC3
    		case 0x8b52: return setValueV4f; // _VEC4

    		case 0x8b5a: return setValueM2; // _MAT2
    		case 0x8b5b: return setValueM3; // _MAT3
    		case 0x8b5c: return setValueM4; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

    		case 0x1405: return setValueV1ui; // UINT

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1;

    		case 0x8b5f: // SAMPLER_3D
    		case 0x8dcb: // INT_SAMPLER_3D
    		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
    			return setValueT3D1;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6;

    		case 0x8dc1: // SAMPLER_2D_ARRAY
    		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
    		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
    		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
    			return setValueT2DArray1;

    	}

    }

    // Array of scalars
    function setValueV1fArray( gl, v ) {

    	gl.uniform1fv( this.addr, v );

    }

    // Integer / Boolean vectors or arrays thereof (always flat arrays)
    function setValueV1iArray( gl, v ) {

    	gl.uniform1iv( this.addr, v );

    }

    function setValueV2iArray( gl, v ) {

    	gl.uniform2iv( this.addr, v );

    }

    function setValueV3iArray( gl, v ) {

    	gl.uniform3iv( this.addr, v );

    }

    function setValueV4iArray( gl, v ) {

    	gl.uniform4iv( this.addr, v );

    }


    // Array of vectors (flat or from THREE classes)

    function setValueV2fArray( gl, v ) {

    	const data = flatten( v, this.size, 2 );

    	gl.uniform2fv( this.addr, data );

    }

    function setValueV3fArray( gl, v ) {

    	const data = flatten( v, this.size, 3 );

    	gl.uniform3fv( this.addr, data );

    }

    function setValueV4fArray( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniform4fv( this.addr, data );

    }

    // Array of matrices (flat or from THREE clases)

    function setValueM2Array( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniformMatrix2fv( this.addr, false, data );

    }

    function setValueM3Array( gl, v ) {

    	const data = flatten( v, this.size, 9 );

    	gl.uniformMatrix3fv( this.addr, false, data );

    }

    function setValueM4Array( gl, v ) {

    	const data = flatten( v, this.size, 16 );

    	gl.uniformMatrix4fv( this.addr, false, data );

    }

    // Array of textures (2D / Cube)

    function setValueT1Array( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

    	}

    }

    function setValueT6Array( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

    	}

    }

    // Helper to pick the right setter for a pure (bottom-level) array

    function getPureArraySetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1fArray; // FLOAT
    		case 0x8b50: return setValueV2fArray; // _VEC2
    		case 0x8b51: return setValueV3fArray; // _VEC3
    		case 0x8b52: return setValueV4fArray; // _VEC4

    		case 0x8b5a: return setValueM2Array; // _MAT2
    		case 0x8b5b: return setValueM3Array; // _MAT3
    		case 0x8b5c: return setValueM4Array; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1Array;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6Array;

    	}

    }

    // --- Uniform Classes ---

    function SingleUniform( id, activeInfo, addr ) {

    	this.id = id;
    	this.addr = addr;
    	this.cache = [];
    	this.setValue = getSingularSetter( activeInfo.type );

    	// this.path = activeInfo.name; // DEBUG

    }

    function PureArrayUniform( id, activeInfo, addr ) {

    	this.id = id;
    	this.addr = addr;
    	this.cache = [];
    	this.size = activeInfo.size;
    	this.setValue = getPureArraySetter( activeInfo.type );

    	// this.path = activeInfo.name; // DEBUG

    }

    PureArrayUniform.prototype.updateCache = function ( data ) {

    	let cache = this.cache;

    	if ( data instanceof Float32Array && cache.length !== data.length ) {

    		this.cache = new Float32Array( data.length );

    	}

    	copyArray( cache, data );

    };

    function StructuredUniform( id ) {

    	this.id = id;

    	this.seq = [];
    	this.map = {};

    }

    StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

    	const seq = this.seq;

    	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    		const u = seq[ i ];
    		u.setValue( gl, value[ u.id ], textures );

    	}

    };

    // --- Top-level ---

    // Parser - builds up the property tree from the path strings

    const RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

    // extracts
    // 	- the identifier (member name or array index)
    //  - followed by an optional right bracket (found when array index)
    //  - followed by an optional left bracket or dot (type of subscript)
    //
    // Note: These portions can be read in a non-overlapping fashion and
    // allow straightforward parsing of the hierarchy that WebGL encodes
    // in the uniform names.

    function addUniform( container, uniformObject ) {

    	container.seq.push( uniformObject );
    	container.map[ uniformObject.id ] = uniformObject;

    }

    function parseUniform( activeInfo, addr, container ) {

    	const path = activeInfo.name,
    		pathLength = path.length;

    	// reset RegExp object, because of the early exit of a previous run
    	RePathPart.lastIndex = 0;

    	while ( true ) {

    		const match = RePathPart.exec( path ),
    			matchEnd = RePathPart.lastIndex;

    		let id = match[ 1 ],
    			idIsIndex = match[ 2 ] === ']',
    			subscript = match[ 3 ];

    		if ( idIsIndex ) id = id | 0; // convert to integer

    		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

    			// bare name or "pure" bottom-level array "[0]" suffix

    			addUniform( container, subscript === undefined ?
    				new SingleUniform( id, activeInfo, addr ) :
    				new PureArrayUniform( id, activeInfo, addr ) );

    			break;

    		} else {

    			// step into inner node / create it in case it doesn't exist

    			const map = container.map;
    			let next = map[ id ];

    			if ( next === undefined ) {

    				next = new StructuredUniform( id );
    				addUniform( container, next );

    			}

    			container = next;

    		}

    	}

    }

    // Root Container

    function WebGLUniforms( gl, program ) {

    	this.seq = [];
    	this.map = {};

    	const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

    	for ( let i = 0; i < n; ++ i ) {

    		const info = gl.getActiveUniform( program, i ),
    			addr = gl.getUniformLocation( program, info.name );

    		parseUniform( info, addr, this );

    	}

    }

    WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

    	const u = this.map[ name ];

    	if ( u !== undefined ) u.setValue( gl, value, textures );

    };

    WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

    	const v = object[ name ];

    	if ( v !== undefined ) this.setValue( gl, name, v );

    };


    // Static interface

    WebGLUniforms.upload = function ( gl, seq, values, textures ) {

    	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    		const u = seq[ i ],
    			v = values[ u.id ];

    		if ( v.needsUpdate !== false ) {

    			// note: always updating when .needsUpdate is undefined
    			u.setValue( gl, v.value, textures );

    		}

    	}

    };

    WebGLUniforms.seqWithValue = function ( seq, values ) {

    	const r = [];

    	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    		const u = seq[ i ];
    		if ( u.id in values ) r.push( u );

    	}

    	return r;

    };

    function WebGLShader( gl, type, string ) {

    	const shader = gl.createShader( type );

    	gl.shaderSource( shader, string );
    	gl.compileShader( shader );

    	return shader;

    }

    let programIdCount = 0;

    function addLineNumbers( string ) {

    	const lines = string.split( '\n' );

    	for ( let i = 0; i < lines.length; i ++ ) {

    		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

    	}

    	return lines.join( '\n' );

    }

    function getEncodingComponents( encoding ) {

    	switch ( encoding ) {

    		case LinearEncoding:
    			return [ 'Linear', '( value )' ];
    		case sRGBEncoding:
    			return [ 'sRGB', '( value )' ];
    		case RGBEEncoding:
    			return [ 'RGBE', '( value )' ];
    		case RGBM7Encoding:
    			return [ 'RGBM', '( value, 7.0 )' ];
    		case RGBM16Encoding:
    			return [ 'RGBM', '( value, 16.0 )' ];
    		case RGBDEncoding:
    			return [ 'RGBD', '( value, 256.0 )' ];
    		case GammaEncoding:
    			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
    		case LogLuvEncoding:
    			return [ 'LogLuv', '( value )' ];
    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
    			return [ 'Linear', '( value )' ];

    	}

    }

    function getShaderErrors( gl, shader, type ) {

    	const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
    	const log = gl.getShaderInfoLog( shader ).trim();

    	if ( status && log === '' ) return '';

    	// --enable-privileged-webgl-extension
    	// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

    	const source = gl.getShaderSource( shader );

    	return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );

    }

    function getTexelDecodingFunction( functionName, encoding ) {

    	const components = getEncodingComponents( encoding );
    	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

    }

    function getTexelEncodingFunction( functionName, encoding ) {

    	const components = getEncodingComponents( encoding );
    	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

    }

    function getToneMappingFunction( functionName, toneMapping ) {

    	let toneMappingName;

    	switch ( toneMapping ) {

    		case LinearToneMapping:
    			toneMappingName = 'Linear';
    			break;

    		case ReinhardToneMapping:
    			toneMappingName = 'Reinhard';
    			break;

    		case CineonToneMapping:
    			toneMappingName = 'OptimizedCineon';
    			break;

    		case ACESFilmicToneMapping:
    			toneMappingName = 'ACESFilmic';
    			break;

    		case CustomToneMapping:
    			toneMappingName = 'Custom';
    			break;

    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
    			toneMappingName = 'Linear';

    	}

    	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

    }

    function generateExtensions( parameters ) {

    	const chunks = [
    		( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
    		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
    		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
    		( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
    	];

    	return chunks.filter( filterEmptyLine ).join( '\n' );

    }

    function generateDefines( defines ) {

    	const chunks = [];

    	for ( const name in defines ) {

    		const value = defines[ name ];

    		if ( value === false ) continue;

    		chunks.push( '#define ' + name + ' ' + value );

    	}

    	return chunks.join( '\n' );

    }

    function fetchAttributeLocations( gl, program ) {

    	const attributes = {};

    	const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

    	for ( let i = 0; i < n; i ++ ) {

    		const info = gl.getActiveAttrib( program, i );
    		const name = info.name;

    		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

    		attributes[ name ] = gl.getAttribLocation( program, name );

    	}

    	return attributes;

    }

    function filterEmptyLine( string ) {

    	return string !== '';

    }

    function replaceLightNums( string, parameters ) {

    	return string
    		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
    		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
    		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
    		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
    		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
    		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
    		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
    		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

    }

    function replaceClippingPlaneNums( string, parameters ) {

    	return string
    		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
    		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

    }

    // Resolve Includes

    const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

    function resolveIncludes( string ) {

    	return string.replace( includePattern, includeReplacer );

    }

    function includeReplacer( match, include ) {

    	const string = ShaderChunk[ include ];

    	if ( string === undefined ) {

    		throw new Error( 'Can not resolve #include <' + include + '>' );

    	}

    	return resolveIncludes( string );

    }

    // Unroll Loops

    const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
    const unrollLoopPattern = /#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;

    function unrollLoops( string ) {

    	return string
    		.replace( unrollLoopPattern, loopReplacer )
    		.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );

    }

    function deprecatedLoopReplacer( match, start, end, snippet ) {

    	console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );
    	return loopReplacer( match, start, end, snippet );

    }

    function loopReplacer( match, start, end, snippet ) {

    	let string = '';

    	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

    		string += snippet
    			.replace( /\[ i \]/g, '[ ' + i + ' ]' )
    			.replace( /UNROLLED_LOOP_INDEX/g, i );

    	}

    	return string;

    }

    //

    function generatePrecision( parameters ) {

    	let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";

    	if ( parameters.precision === "highp" ) {

    		precisionstring += "\n#define HIGH_PRECISION";

    	} else if ( parameters.precision === "mediump" ) {

    		precisionstring += "\n#define MEDIUM_PRECISION";

    	} else if ( parameters.precision === "lowp" ) {

    		precisionstring += "\n#define LOW_PRECISION";

    	}

    	return precisionstring;

    }

    function generateShadowMapTypeDefine( parameters ) {

    	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

    	if ( parameters.shadowMapType === PCFShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

    	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

    	} else if ( parameters.shadowMapType === VSMShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

    	}

    	return shadowMapTypeDefine;

    }

    function generateEnvMapTypeDefine( parameters ) {

    	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeReflectionMapping:
    			case CubeRefractionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
    				break;

    			case CubeUVReflectionMapping:
    			case CubeUVRefractionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
    				break;

    			case EquirectangularReflectionMapping:
    			case EquirectangularRefractionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
    				break;

    		}

    	}

    	return envMapTypeDefine;

    }

    function generateEnvMapModeDefine( parameters ) {

    	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeRefractionMapping:
    			case EquirectangularRefractionMapping:
    			case CubeUVRefractionMapping:

    				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
    				break;

    		}

    	}

    	return envMapModeDefine;

    }

    function generateEnvMapBlendingDefine( parameters ) {

    	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

    	if ( parameters.envMap ) {

    		switch ( parameters.combine ) {

    			case MultiplyOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
    				break;

    			case MixOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
    				break;

    			case AddOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
    				break;

    		}

    	}

    	return envMapBlendingDefine;

    }

    function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

    	const gl = renderer.getContext();

    	const defines = parameters.defines;

    	let vertexShader = parameters.vertexShader;
    	let fragmentShader = parameters.fragmentShader;

    	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
    	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
    	const envMapModeDefine = generateEnvMapModeDefine( parameters );
    	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


    	const gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

    	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

    	const customDefines = generateDefines( defines );

    	const program = gl.createProgram();

    	let prefixVertex, prefixFragment;

    	if ( parameters.isRawShaderMaterial ) {

    		prefixVertex = [

    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixVertex.length > 0 ) {

    			prefixVertex += '\n';

    		}

    		prefixFragment = [

    			customExtensions,
    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixFragment.length > 0 ) {

    			prefixFragment += '\n';

    		}

    	} else {

    		prefixVertex = [

    			generatePrecision( parameters ),

    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			parameters.instancing ? '#define USE_INSTANCING' : '',
    			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

    			'#define GAMMA_FACTOR ' + gammaFactorDefine,

    			'#define MAX_BONES ' + parameters.maxBones,
    			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
    			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

    			parameters.map ? '#define USE_MAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
    			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',

    			parameters.vertexTangents ? '#define USE_TANGENT' : '',
    			parameters.vertexColors ? '#define USE_COLOR' : '',
    			parameters.vertexUvs ? '#define USE_UV' : '',
    			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.skinning ? '#define USE_SKINNING' : '',
    			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

    			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
    			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

    			'uniform mat4 modelMatrix;',
    			'uniform mat4 modelViewMatrix;',
    			'uniform mat4 projectionMatrix;',
    			'uniform mat4 viewMatrix;',
    			'uniform mat3 normalMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			'#ifdef USE_INSTANCING',

    			' attribute mat4 instanceMatrix;',

    			'#endif',

    			'attribute vec3 position;',
    			'attribute vec3 normal;',
    			'attribute vec2 uv;',

    			'#ifdef USE_TANGENT',

    			'	attribute vec4 tangent;',

    			'#endif',

    			'#ifdef USE_COLOR',

    			'	attribute vec3 color;',

    			'#endif',

    			'#ifdef USE_MORPHTARGETS',

    			'	attribute vec3 morphTarget0;',
    			'	attribute vec3 morphTarget1;',
    			'	attribute vec3 morphTarget2;',
    			'	attribute vec3 morphTarget3;',

    			'	#ifdef USE_MORPHNORMALS',

    			'		attribute vec3 morphNormal0;',
    			'		attribute vec3 morphNormal1;',
    			'		attribute vec3 morphNormal2;',
    			'		attribute vec3 morphNormal3;',

    			'	#else',

    			'		attribute vec3 morphTarget4;',
    			'		attribute vec3 morphTarget5;',
    			'		attribute vec3 morphTarget6;',
    			'		attribute vec3 morphTarget7;',

    			'	#endif',

    			'#endif',

    			'#ifdef USE_SKINNING',

    			'	attribute vec4 skinIndex;',
    			'	attribute vec4 skinWeight;',

    			'#endif',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    		prefixFragment = [

    			customExtensions,

    			generatePrecision( parameters ),

    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

    			'#define GAMMA_FACTOR ' + gammaFactorDefine,

    			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
    			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

    			parameters.map ? '#define USE_MAP' : '',
    			parameters.matcap ? '#define USE_MATCAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapTypeDefine : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

    			parameters.sheen ? '#define USE_SHEEN' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',

    			parameters.vertexTangents ? '#define USE_TANGENT' : '',
    			parameters.vertexColors ? '#define USE_COLOR' : '',
    			parameters.vertexUvs ? '#define USE_UV' : '',
    			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

    			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

    			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

    			( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',

    			'uniform mat4 viewMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
    			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
    			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

    			parameters.dithering ? '#define DITHERING' : '',

    			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
    			parameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
    			parameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
    			parameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
    			parameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
    			parameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',
    			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),

    			parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    	}

    	vertexShader = resolveIncludes( vertexShader );
    	vertexShader = replaceLightNums( vertexShader, parameters );
    	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

    	fragmentShader = resolveIncludes( fragmentShader );
    	fragmentShader = replaceLightNums( fragmentShader, parameters );
    	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

    	vertexShader = unrollLoops( vertexShader );
    	fragmentShader = unrollLoops( fragmentShader );

    	if ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {

    		// GLSL 3.0 conversion

    		prefixVertex = [
    			'#version 300 es\n',
    			'#define attribute in',
    			'#define varying out',
    			'#define texture2D texture'
    		].join( '\n' ) + '\n' + prefixVertex;

    		prefixFragment = [
    			'#version 300 es\n',
    			'#define varying in',
    			'out highp vec4 pc_fragColor;',
    			'#define gl_FragColor pc_fragColor',
    			'#define gl_FragDepthEXT gl_FragDepth',
    			'#define texture2D texture',
    			'#define textureCube texture',
    			'#define texture2DProj textureProj',
    			'#define texture2DLodEXT textureLod',
    			'#define texture2DProjLodEXT textureProjLod',
    			'#define textureCubeLodEXT textureLod',
    			'#define texture2DGradEXT textureGrad',
    			'#define texture2DProjGradEXT textureProjGrad',
    			'#define textureCubeGradEXT textureGrad'
    		].join( '\n' ) + '\n' + prefixFragment;

    	}

    	const vertexGlsl = prefixVertex + vertexShader;
    	const fragmentGlsl = prefixFragment + fragmentShader;

    	// console.log( '*VERTEX*', vertexGlsl );
    	// console.log( '*FRAGMENT*', fragmentGlsl );

    	const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
    	const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

    	gl.attachShader( program, glVertexShader );
    	gl.attachShader( program, glFragmentShader );

    	// Force a particular attribute to index 0.

    	if ( parameters.index0AttributeName !== undefined ) {

    		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

    	} else if ( parameters.morphTargets === true ) {

    		// programs with morphTargets displace position out of attribute 0
    		gl.bindAttribLocation( program, 0, 'position' );

    	}

    	gl.linkProgram( program );

    	// check for link errors
    	if ( renderer.debug.checkShaderErrors ) {

    		const programLog = gl.getProgramInfoLog( program ).trim();
    		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
    		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

    		let runnable = true;
    		let haveDiagnostics = true;

    		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

    			runnable = false;

    			const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
    			const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

    			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );

    		} else if ( programLog !== '' ) {

    			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

    		} else if ( vertexLog === '' || fragmentLog === '' ) {

    			haveDiagnostics = false;

    		}

    		if ( haveDiagnostics ) {

    			this.diagnostics = {

    				runnable: runnable,

    				programLog: programLog,

    				vertexShader: {

    					log: vertexLog,
    					prefix: prefixVertex

    				},

    				fragmentShader: {

    					log: fragmentLog,
    					prefix: prefixFragment

    				}

    			};

    		}

    	}

    	// Clean up

    	// Crashes in iOS9 and iOS10. #18402
    	// gl.detachShader( program, glVertexShader );
    	// gl.detachShader( program, glFragmentShader );

    	gl.deleteShader( glVertexShader );
    	gl.deleteShader( glFragmentShader );

    	// set up caching for uniform locations

    	let cachedUniforms;

    	this.getUniforms = function () {

    		if ( cachedUniforms === undefined ) {

    			cachedUniforms = new WebGLUniforms( gl, program );

    		}

    		return cachedUniforms;

    	};

    	// set up caching for attribute locations

    	let cachedAttributes;

    	this.getAttributes = function () {

    		if ( cachedAttributes === undefined ) {

    			cachedAttributes = fetchAttributeLocations( gl, program );

    		}

    		return cachedAttributes;

    	};

    	// free resource

    	this.destroy = function () {

    		bindingStates.releaseStatesOfProgram( this );

    		gl.deleteProgram( program );
    		this.program = undefined;

    	};

    	//

    	this.name = parameters.shaderName;
    	this.id = programIdCount ++;
    	this.cacheKey = cacheKey;
    	this.usedTimes = 1;
    	this.program = program;
    	this.vertexShader = glVertexShader;
    	this.fragmentShader = glFragmentShader;

    	return this;

    }

    function WebGLPrograms( renderer, extensions, capabilities, bindingStates ) {

    	const programs = [];

    	const isWebGL2 = capabilities.isWebGL2;
    	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    	const floatVertexTextures = capabilities.floatVertexTextures;
    	const maxVertexUniforms = capabilities.maxVertexUniforms;
    	const vertexTextures = capabilities.vertexTextures;

    	let precision = capabilities.precision;

    	const shaderIDs = {
    		MeshDepthMaterial: 'depth',
    		MeshDistanceMaterial: 'distanceRGBA',
    		MeshNormalMaterial: 'normal',
    		MeshBasicMaterial: 'basic',
    		MeshLambertMaterial: 'lambert',
    		MeshPhongMaterial: 'phong',
    		MeshToonMaterial: 'toon',
    		MeshStandardMaterial: 'physical',
    		MeshPhysicalMaterial: 'physical',
    		MeshMatcapMaterial: 'matcap',
    		LineBasicMaterial: 'basic',
    		LineDashedMaterial: 'dashed',
    		PointsMaterial: 'points',
    		ShadowMaterial: 'shadow',
    		SpriteMaterial: 'sprite'
    	};

    	const parameterNames = [
    		"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing",
    		"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
    		"lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap",
    		"roughnessMap", "metalnessMap", "gradientMap",
    		"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
    		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
    		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
    		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
    		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
    		"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
    		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
    		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
    		"sheen", "transmissionMap"
    	];

    	function allocateBones( object ) {

    		const skeleton = object.skeleton;
    		const bones = skeleton.bones;

    		if ( floatVertexTextures ) {

    			return 1024;

    		} else {

    			// default for when object is not specified
    			// ( for example when prebuilding shader to be used with multiple objects )
    			//
    			//  - leave some extra space for other uniforms
    			//  - limit here is ANGLE's 254 max uniform vectors
    			//    (up to 54 should be safe)

    			const nVertexUniforms = maxVertexUniforms;
    			const nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

    			const maxBones = Math.min( nVertexMatrices, bones.length );

    			if ( maxBones < bones.length ) {

    				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
    				return 0;

    			}

    			return maxBones;

    		}

    	}

    	function getTextureEncodingFromMap( map ) {

    		let encoding;

    		if ( ! map ) {

    			encoding = LinearEncoding;

    		} else if ( map.isTexture ) {

    			encoding = map.encoding;

    		} else if ( map.isWebGLRenderTarget ) {

    			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
    			encoding = map.texture.encoding;

    		}

    		return encoding;

    	}

    	function getParameters( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {

    		const fog = scene.fog;
    		const environment = material.isMeshStandardMaterial ? scene.environment : null;

    		const envMap = material.envMap || environment;

    		const shaderID = shaderIDs[ material.type ];

    		// heuristics to create shader parameters according to lights in the scene
    		// (not to blow over maxLights budget)

    		const maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;

    		if ( material.precision !== null ) {

    			precision = capabilities.getMaxPrecision( material.precision );

    			if ( precision !== material.precision ) {

    				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

    			}

    		}

    		let vertexShader, fragmentShader;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];

    			vertexShader = shader.vertexShader;
    			fragmentShader = shader.fragmentShader;

    		} else {

    			vertexShader = material.vertexShader;
    			fragmentShader = material.fragmentShader;

    		}

    		const currentRenderTarget = renderer.getRenderTarget();

    		const parameters = {

    			isWebGL2: isWebGL2,

    			shaderID: shaderID,
    			shaderName: material.type,

    			vertexShader: vertexShader,
    			fragmentShader: fragmentShader,
    			defines: material.defines,

    			isRawShaderMaterial: material.isRawShaderMaterial,
    			isShaderMaterial: material.isShaderMaterial,

    			precision: precision,

    			instancing: object.isInstancedMesh === true,

    			supportsVertexTextures: vertexTextures,
    			outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,
    			map: !! material.map,
    			mapEncoding: getTextureEncodingFromMap( material.map ),
    			matcap: !! material.matcap,
    			matcapEncoding: getTextureEncodingFromMap( material.matcap ),
    			envMap: !! envMap,
    			envMapMode: envMap && envMap.mapping,
    			envMapEncoding: getTextureEncodingFromMap( envMap ),
    			envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),
    			lightMap: !! material.lightMap,
    			lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),
    			aoMap: !! material.aoMap,
    			emissiveMap: !! material.emissiveMap,
    			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),
    			bumpMap: !! material.bumpMap,
    			normalMap: !! material.normalMap,
    			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
    			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
    			clearcoatMap: !! material.clearcoatMap,
    			clearcoatRoughnessMap: !! material.clearcoatRoughnessMap,
    			clearcoatNormalMap: !! material.clearcoatNormalMap,
    			displacementMap: !! material.displacementMap,
    			roughnessMap: !! material.roughnessMap,
    			metalnessMap: !! material.metalnessMap,
    			specularMap: !! material.specularMap,
    			alphaMap: !! material.alphaMap,

    			gradientMap: !! material.gradientMap,

    			sheen: !! material.sheen,

    			transmissionMap: !! material.transmissionMap,

    			combine: material.combine,

    			vertexTangents: ( material.normalMap && material.vertexTangents ),
    			vertexColors: material.vertexColors,
    			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap,
    			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.transmissionMap ) && !! material.displacementMap,

    			fog: !! fog,
    			useFog: material.fog,
    			fogExp2: ( fog && fog.isFogExp2 ),

    			flatShading: material.flatShading,

    			sizeAttenuation: material.sizeAttenuation,
    			logarithmicDepthBuffer: logarithmicDepthBuffer,

    			skinning: material.skinning && maxBones > 0,
    			maxBones: maxBones,
    			useVertexTexture: floatVertexTextures,

    			morphTargets: material.morphTargets,
    			morphNormals: material.morphNormals,
    			maxMorphTargets: renderer.maxMorphTargets,
    			maxMorphNormals: renderer.maxMorphNormals,

    			numDirLights: lights.directional.length,
    			numPointLights: lights.point.length,
    			numSpotLights: lights.spot.length,
    			numRectAreaLights: lights.rectArea.length,
    			numHemiLights: lights.hemi.length,

    			numDirLightShadows: lights.directionalShadowMap.length,
    			numPointLightShadows: lights.pointShadowMap.length,
    			numSpotLightShadows: lights.spotShadowMap.length,

    			numClippingPlanes: nClipPlanes,
    			numClipIntersection: nClipIntersection,

    			dithering: material.dithering,

    			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
    			shadowMapType: renderer.shadowMap.type,

    			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
    			physicallyCorrectLights: renderer.physicallyCorrectLights,

    			premultipliedAlpha: material.premultipliedAlpha,

    			alphaTest: material.alphaTest,
    			doubleSided: material.side === DoubleSide,
    			flipSided: material.side === BackSide,

    			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,

    			index0AttributeName: material.index0AttributeName,

    			extensionDerivatives: material.extensions && material.extensions.derivatives,
    			extensionFragDepth: material.extensions && material.extensions.fragDepth,
    			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
    			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

    			rendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,
    			rendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,
    			rendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,

    			customProgramCacheKey: material.customProgramCacheKey()

    		};

    		return parameters;

    	}

    	function getProgramCacheKey( parameters ) {

    		const array = [];

    		if ( parameters.shaderID ) {

    			array.push( parameters.shaderID );

    		} else {

    			array.push( parameters.fragmentShader );
    			array.push( parameters.vertexShader );

    		}

    		if ( parameters.defines !== undefined ) {

    			for ( const name in parameters.defines ) {

    				array.push( name );
    				array.push( parameters.defines[ name ] );

    			}

    		}

    		if ( parameters.isRawShaderMaterial === undefined ) {

    			for ( let i = 0; i < parameterNames.length; i ++ ) {

    				array.push( parameters[ parameterNames[ i ] ] );

    			}

    			array.push( renderer.outputEncoding );
    			array.push( renderer.gammaFactor );

    		}

    		array.push( parameters.customProgramCacheKey );

    		return array.join();

    	}

    	function getUniforms( material ) {

    		const shaderID = shaderIDs[ material.type ];
    		let uniforms;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];
    			uniforms = UniformsUtils.clone( shader.uniforms );

    		} else {

    			uniforms = material.uniforms;

    		}

    		return uniforms;

    	}

    	function acquireProgram( parameters, cacheKey ) {

    		let program;

    		// Check if code has been already compiled
    		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

    			const preexistingProgram = programs[ p ];

    			if ( preexistingProgram.cacheKey === cacheKey ) {

    				program = preexistingProgram;
    				++ program.usedTimes;

    				break;

    			}

    		}

    		if ( program === undefined ) {

    			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
    			programs.push( program );

    		}

    		return program;

    	}

    	function releaseProgram( program ) {

    		if ( -- program.usedTimes === 0 ) {

    			// Remove from unordered set
    			const i = programs.indexOf( program );
    			programs[ i ] = programs[ programs.length - 1 ];
    			programs.pop();

    			// Free WebGL resources
    			program.destroy();

    		}

    	}

    	return {
    		getParameters: getParameters,
    		getProgramCacheKey: getProgramCacheKey,
    		getUniforms: getUniforms,
    		acquireProgram: acquireProgram,
    		releaseProgram: releaseProgram,
    		// Exposed for resource monitoring & error feedback via renderer.info:
    		programs: programs
    	};

    }

    function WebGLProperties() {

    	let properties = new WeakMap();

    	function get( object ) {

    		let map = properties.get( object );

    		if ( map === undefined ) {

    			map = {};
    			properties.set( object, map );

    		}

    		return map;

    	}

    	function remove( object ) {

    		properties.delete( object );

    	}

    	function update( object, key, value ) {

    		properties.get( object )[ key ] = value;

    	}

    	function dispose() {

    		properties = new WeakMap();

    	}

    	return {
    		get: get,
    		remove: remove,
    		update: update,
    		dispose: dispose
    	};

    }

    function painterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.program !== b.program ) {

    		return a.program.id - b.program.id;

    	} else if ( a.material.id !== b.material.id ) {

    		return a.material.id - b.material.id;

    	} else if ( a.z !== b.z ) {

    		return a.z - b.z;

    	} else {

    		return a.id - b.id;

    	}

    }

    function reversePainterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.z !== b.z ) {

    		return b.z - a.z;

    	} else {

    		return a.id - b.id;

    	}

    }


    function WebGLRenderList( properties ) {

    	const renderItems = [];
    	let renderItemsIndex = 0;

    	const opaque = [];
    	const transparent = [];

    	const defaultProgram = { id: - 1 };

    	function init() {

    		renderItemsIndex = 0;

    		opaque.length = 0;
    		transparent.length = 0;

    	}

    	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

    		let renderItem = renderItems[ renderItemsIndex ];
    		const materialProperties = properties.get( material );

    		if ( renderItem === undefined ) {

    			renderItem = {
    				id: object.id,
    				object: object,
    				geometry: geometry,
    				material: material,
    				program: materialProperties.program || defaultProgram,
    				groupOrder: groupOrder,
    				renderOrder: object.renderOrder,
    				z: z,
    				group: group
    			};

    			renderItems[ renderItemsIndex ] = renderItem;

    		} else {

    			renderItem.id = object.id;
    			renderItem.object = object;
    			renderItem.geometry = geometry;
    			renderItem.material = material;
    			renderItem.program = materialProperties.program || defaultProgram;
    			renderItem.groupOrder = groupOrder;
    			renderItem.renderOrder = object.renderOrder;
    			renderItem.z = z;
    			renderItem.group = group;

    		}

    		renderItemsIndex ++;

    		return renderItem;

    	}

    	function push( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		( material.transparent === true ? transparent : opaque ).push( renderItem );

    	}

    	function unshift( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		( material.transparent === true ? transparent : opaque ).unshift( renderItem );

    	}

    	function sort( customOpaqueSort, customTransparentSort ) {

    		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
    		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

    	}

    	function finish() {

    		// Clear references from inactive renderItems in the list

    		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

    			const renderItem = renderItems[ i ];

    			if ( renderItem.id === null ) break;

    			renderItem.id = null;
    			renderItem.object = null;
    			renderItem.geometry = null;
    			renderItem.material = null;
    			renderItem.program = null;
    			renderItem.group = null;

    		}

    	}

    	return {

    		opaque: opaque,
    		transparent: transparent,

    		init: init,
    		push: push,
    		unshift: unshift,
    		finish: finish,

    		sort: sort
    	};

    }

    function WebGLRenderLists( properties ) {

    	let lists = new WeakMap();

    	function onSceneDispose( event ) {

    		const scene = event.target;

    		scene.removeEventListener( 'dispose', onSceneDispose );

    		lists.delete( scene );

    	}

    	function get( scene, camera ) {

    		const cameras = lists.get( scene );
    		let list;

    		if ( cameras === undefined ) {

    			list = new WebGLRenderList( properties );
    			lists.set( scene, new WeakMap() );
    			lists.get( scene ).set( camera, list );

    			scene.addEventListener( 'dispose', onSceneDispose );

    		} else {

    			list = cameras.get( camera );
    			if ( list === undefined ) {

    				list = new WebGLRenderList( properties );
    				cameras.set( camera, list );

    			}

    		}

    		return list;

    	}

    	function dispose() {

    		lists = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    function UniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						direction: new Vector3(),
    						color: new Color()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						position: new Vector3(),
    						direction: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						coneCos: 0,
    						penumbraCos: 0,
    						decay: 0
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						position: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						decay: 0
    					};
    					break;

    				case 'HemisphereLight':
    					uniforms = {
    						direction: new Vector3(),
    						skyColor: new Color(),
    						groundColor: new Color()
    					};
    					break;

    				case 'RectAreaLight':
    					uniforms = {
    						color: new Color(),
    						position: new Vector3(),
    						halfWidth: new Vector3(),
    						halfHeight: new Vector3()
    					};
    					break;

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }

    function ShadowUniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2(),
    						shadowCameraNear: 1,
    						shadowCameraFar: 1000
    					};
    					break;

    				// TODO (abelnation): set RectAreaLight shadow uniforms

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }



    let nextVersion = 0;

    function shadowCastingLightsFirst( lightA, lightB ) {

    	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

    }

    function WebGLLights() {

    	const cache = new UniformsCache();

    	const shadowCache = ShadowUniformsCache();

    	const state = {

    		version: 0,

    		hash: {
    			directionalLength: - 1,
    			pointLength: - 1,
    			spotLength: - 1,
    			rectAreaLength: - 1,
    			hemiLength: - 1,

    			numDirectionalShadows: - 1,
    			numPointShadows: - 1,
    			numSpotShadows: - 1
    		},

    		ambient: [ 0, 0, 0 ],
    		probe: [],
    		directional: [],
    		directionalShadow: [],
    		directionalShadowMap: [],
    		directionalShadowMatrix: [],
    		spot: [],
    		spotShadow: [],
    		spotShadowMap: [],
    		spotShadowMatrix: [],
    		rectArea: [],
    		point: [],
    		pointShadow: [],
    		pointShadowMap: [],
    		pointShadowMatrix: [],
    		hemi: []

    	};

    	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

    	const vector3 = new Vector3();
    	const matrix4 = new Matrix4();
    	const matrix42 = new Matrix4();

    	function setup( lights, shadows, camera ) {

    		let r = 0, g = 0, b = 0;

    		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

    		let directionalLength = 0;
    		let pointLength = 0;
    		let spotLength = 0;
    		let rectAreaLength = 0;
    		let hemiLength = 0;

    		let numDirectionalShadows = 0;
    		let numPointShadows = 0;
    		let numSpotShadows = 0;

    		const viewMatrix = camera.matrixWorldInverse;

    		lights.sort( shadowCastingLightsFirst );

    		for ( let i = 0, l = lights.length; i < l; i ++ ) {

    			const light = lights[ i ];

    			const color = light.color;
    			const intensity = light.intensity;
    			const distance = light.distance;

    			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

    			if ( light.isAmbientLight ) {

    				r += color.r * intensity;
    				g += color.g * intensity;
    				b += color.b * intensity;

    			} else if ( light.isLightProbe ) {

    				for ( let j = 0; j < 9; j ++ ) {

    					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

    				}

    			} else if ( light.isDirectionalLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.directionalShadow[ directionalLength ] = shadowUniforms;
    					state.directionalShadowMap[ directionalLength ] = shadowMap;
    					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

    					numDirectionalShadows ++;

    				}

    				state.directional[ directionalLength ] = uniforms;

    				directionalLength ++;

    			} else if ( light.isSpotLight ) {

    				const uniforms = cache.get( light );

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				uniforms.color.copy( color ).multiplyScalar( intensity );
    				uniforms.distance = distance;

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				uniforms.coneCos = Math.cos( light.angle );
    				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
    				uniforms.decay = light.decay;

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.spotShadow[ spotLength ] = shadowUniforms;
    					state.spotShadowMap[ spotLength ] = shadowMap;
    					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

    					numSpotShadows ++;

    				}

    				state.spot[ spotLength ] = uniforms;

    				spotLength ++;

    			} else if ( light.isRectAreaLight ) {

    				const uniforms = cache.get( light );

    				// (a) intensity is the total visible light emitted
    				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

    				// (b) intensity is the brightness of the light
    				uniforms.color.copy( color ).multiplyScalar( intensity );

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				// extract local rotation of light to derive width/height half vectors
    				matrix42.identity();
    				matrix4.copy( light.matrixWorld );
    				matrix4.premultiply( viewMatrix );
    				matrix42.extractRotation( matrix4 );

    				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
    				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

    				uniforms.halfWidth.applyMatrix4( matrix42 );
    				uniforms.halfHeight.applyMatrix4( matrix42 );

    				// TODO (abelnation): RectAreaLight distance?
    				// uniforms.distance = distance;

    				state.rectArea[ rectAreaLength ] = uniforms;

    				rectAreaLength ++;

    			} else if ( light.isPointLight ) {

    				const uniforms = cache.get( light );

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
    				uniforms.distance = light.distance;
    				uniforms.decay = light.decay;

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;
    					shadowUniforms.shadowCameraNear = shadow.camera.near;
    					shadowUniforms.shadowCameraFar = shadow.camera.far;

    					state.pointShadow[ pointLength ] = shadowUniforms;
    					state.pointShadowMap[ pointLength ] = shadowMap;
    					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

    					numPointShadows ++;

    				}

    				state.point[ pointLength ] = uniforms;

    				pointLength ++;

    			} else if ( light.isHemisphereLight ) {

    				const uniforms = cache.get( light );

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				uniforms.direction.transformDirection( viewMatrix );
    				uniforms.direction.normalize();

    				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
    				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

    				state.hemi[ hemiLength ] = uniforms;

    				hemiLength ++;

    			}

    		}

    		state.ambient[ 0 ] = r;
    		state.ambient[ 1 ] = g;
    		state.ambient[ 2 ] = b;

    		const hash = state.hash;

    		if ( hash.directionalLength !== directionalLength ||
    			hash.pointLength !== pointLength ||
    			hash.spotLength !== spotLength ||
    			hash.rectAreaLength !== rectAreaLength ||
    			hash.hemiLength !== hemiLength ||
    			hash.numDirectionalShadows !== numDirectionalShadows ||
    			hash.numPointShadows !== numPointShadows ||
    			hash.numSpotShadows !== numSpotShadows ) {

    			state.directional.length = directionalLength;
    			state.spot.length = spotLength;
    			state.rectArea.length = rectAreaLength;
    			state.point.length = pointLength;
    			state.hemi.length = hemiLength;

    			state.directionalShadow.length = numDirectionalShadows;
    			state.directionalShadowMap.length = numDirectionalShadows;
    			state.pointShadow.length = numPointShadows;
    			state.pointShadowMap.length = numPointShadows;
    			state.spotShadow.length = numSpotShadows;
    			state.spotShadowMap.length = numSpotShadows;
    			state.directionalShadowMatrix.length = numDirectionalShadows;
    			state.pointShadowMatrix.length = numPointShadows;
    			state.spotShadowMatrix.length = numSpotShadows;

    			hash.directionalLength = directionalLength;
    			hash.pointLength = pointLength;
    			hash.spotLength = spotLength;
    			hash.rectAreaLength = rectAreaLength;
    			hash.hemiLength = hemiLength;

    			hash.numDirectionalShadows = numDirectionalShadows;
    			hash.numPointShadows = numPointShadows;
    			hash.numSpotShadows = numSpotShadows;

    			state.version = nextVersion ++;

    		}

    	}

    	return {
    		setup: setup,
    		state: state
    	};

    }

    function WebGLRenderState() {

    	const lights = new WebGLLights();

    	const lightsArray = [];
    	const shadowsArray = [];

    	function init() {

    		lightsArray.length = 0;
    		shadowsArray.length = 0;

    	}

    	function pushLight( light ) {

    		lightsArray.push( light );

    	}

    	function pushShadow( shadowLight ) {

    		shadowsArray.push( shadowLight );

    	}

    	function setupLights( camera ) {

    		lights.setup( lightsArray, shadowsArray, camera );

    	}

    	const state = {
    		lightsArray: lightsArray,
    		shadowsArray: shadowsArray,

    		lights: lights
    	};

    	return {
    		init: init,
    		state: state,
    		setupLights: setupLights,

    		pushLight: pushLight,
    		pushShadow: pushShadow
    	};

    }

    function WebGLRenderStates() {

    	let renderStates = new WeakMap();

    	function onSceneDispose( event ) {

    		const scene = event.target;

    		scene.removeEventListener( 'dispose', onSceneDispose );

    		renderStates.delete( scene );

    	}

    	function get( scene, camera ) {

    		let renderState;

    		if ( renderStates.has( scene ) === false ) {

    			renderState = new WebGLRenderState();
    			renderStates.set( scene, new WeakMap() );
    			renderStates.get( scene ).set( camera, renderState );

    			scene.addEventListener( 'dispose', onSceneDispose );

    		} else {

    			if ( renderStates.get( scene ).has( camera ) === false ) {

    				renderState = new WebGLRenderState();
    				renderStates.get( scene ).set( camera, renderState );

    			} else {

    				renderState = renderStates.get( scene ).get( camera );

    			}

    		}

    		return renderState;

    	}

    	function dispose() {

    		renderStates = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    /**
     * parameters = {
     *
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     * }
     */

    function MeshDepthMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshDepthMaterial';

    	this.depthPacking = BasicDepthPacking;

    	this.skinning = false;
    	this.morphTargets = false;

    	this.map = null;

    	this.alphaMap = null;

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;

    	this.fog = false;

    	this.setValues( parameters );

    }

    MeshDepthMaterial.prototype = Object.create( Material.prototype );
    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

    MeshDepthMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.depthPacking = source.depthPacking;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;

    	this.map = source.map;

    	this.alphaMap = source.alphaMap;

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;

    	return this;

    };

    /**
     * parameters = {
     *
     *  referencePosition: <float>,
     *  nearDistance: <float>,
     *  farDistance: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>
     *
     * }
     */

    function MeshDistanceMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshDistanceMaterial';

    	this.referencePosition = new Vector3();
    	this.nearDistance = 1;
    	this.farDistance = 1000;

    	this.skinning = false;
    	this.morphTargets = false;

    	this.map = null;

    	this.alphaMap = null;

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.fog = false;

    	this.setValues( parameters );

    }

    MeshDistanceMaterial.prototype = Object.create( Material.prototype );
    MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

    MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

    MeshDistanceMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.referencePosition.copy( source.referencePosition );
    	this.nearDistance = source.nearDistance;
    	this.farDistance = source.farDistance;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;

    	this.map = source.map;

    	this.alphaMap = source.alphaMap;

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	return this;

    };

    var vsm_frag = /* glsl */`
uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;

#include <packing>

void main() {

  float mean = 0.0;
  float squared_mean = 0.0;

	// This seems totally useless but it's a crazy work around for a Adreno compiler bug
	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );

  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {

    #ifdef HORIZONAL_PASS

      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );
      mean += distribution.x;
      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;

    #else

      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );
      mean += depth;
      squared_mean += depth * depth;

    #endif

  }

  mean = mean * HALF_SAMPLE_RATE;
  squared_mean = squared_mean * HALF_SAMPLE_RATE;

  float std_dev = sqrt( squared_mean - mean * mean );

  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );

}
`;

    var vsm_vert = /* glsl */`
void main() {

	gl_Position = vec4( position, 1.0 );

}
`;

    function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

    	let _frustum = new Frustum();

    	const _shadowMapSize = new Vector2(),
    		_viewportSize = new Vector2(),

    		_viewport = new Vector4(),

    		_depthMaterials = [],
    		_distanceMaterials = [],

    		_materialCache = {};

    	const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

    	const shadowMaterialVertical = new ShaderMaterial( {

    		defines: {
    			SAMPLE_RATE: 2.0 / 8.0,
    			HALF_SAMPLE_RATE: 1.0 / 8.0
    		},

    		uniforms: {
    			shadow_pass: { value: null },
    			resolution: { value: new Vector2() },
    			radius: { value: 4.0 }
    		},

    		vertexShader: vsm_vert,

    		fragmentShader: vsm_frag

    	} );

    	const shadowMaterialHorizonal = shadowMaterialVertical.clone();
    	shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;

    	const fullScreenTri = new BufferGeometry();
    	fullScreenTri.setAttribute(
    		"position",
    		new BufferAttribute(
    			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
    			3
    		)
    	);

    	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

    	const scope = this;

    	this.enabled = false;

    	this.autoUpdate = true;
    	this.needsUpdate = false;

    	this.type = PCFShadowMap;

    	this.render = function ( lights, scene, camera ) {

    		if ( scope.enabled === false ) return;
    		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

    		if ( lights.length === 0 ) return;

    		const currentRenderTarget = _renderer.getRenderTarget();
    		const activeCubeFace = _renderer.getActiveCubeFace();
    		const activeMipmapLevel = _renderer.getActiveMipmapLevel();

    		const _state = _renderer.state;

    		// Set GL state for depth map.
    		_state.setBlending( NoBlending );
    		_state.buffers.color.setClear( 1, 1, 1, 1 );
    		_state.buffers.depth.setTest( true );
    		_state.setScissorTest( false );

    		// render depth map

    		for ( let i = 0, il = lights.length; i < il; i ++ ) {

    			const light = lights[ i ];
    			const shadow = light.shadow;

    			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

    			if ( shadow === undefined ) {

    				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
    				continue;

    			}

    			_shadowMapSize.copy( shadow.mapSize );

    			const shadowFrameExtents = shadow.getFrameExtents();

    			_shadowMapSize.multiply( shadowFrameExtents );

    			_viewportSize.copy( shadow.mapSize );

    			if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {

    				if ( _shadowMapSize.x > maxTextureSize ) {

    					_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
    					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
    					shadow.mapSize.x = _viewportSize.x;

    				}

    				if ( _shadowMapSize.y > maxTextureSize ) {

    					_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
    					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
    					shadow.mapSize.y = _viewportSize.y;

    				}

    			}

    			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

    				const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat, stencilBuffer: false };

    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
    				shadow.map.texture.name = light.name + ".shadowMap";

    				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

    				shadow.camera.updateProjectionMatrix();

    			}

    			if ( shadow.map === null ) {

    				const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat, stencilBuffer: false };

    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
    				shadow.map.texture.name = light.name + ".shadowMap";

    				shadow.camera.updateProjectionMatrix();

    			}

    			_renderer.setRenderTarget( shadow.map );
    			_renderer.clear();

    			const viewportCount = shadow.getViewportCount();

    			for ( let vp = 0; vp < viewportCount; vp ++ ) {

    				const viewport = shadow.getViewport( vp );

    				_viewport.set(
    					_viewportSize.x * viewport.x,
    					_viewportSize.y * viewport.y,
    					_viewportSize.x * viewport.z,
    					_viewportSize.y * viewport.w
    				);

    				_state.viewport( _viewport );

    				shadow.updateMatrices( light, vp );

    				_frustum = shadow.getFrustum();

    				renderObject( scene, camera, shadow.camera, light, this.type );

    			}

    			// do blur pass for VSM

    			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

    				VSMPass( shadow, camera );

    			}

    			shadow.needsUpdate = false;

    		}

    		scope.needsUpdate = false;

    		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

    	};

    	function VSMPass( shadow, camera ) {

    		const geometry = _objects.update( fullScreenMesh );

    		// vertical pass

    		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    		_renderer.setRenderTarget( shadow.mapPass );
    		_renderer.clear();
    		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

    		// horizonal pass

    		shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    		shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
    		_renderer.setRenderTarget( shadow.map );
    		_renderer.clear();
    		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );

    	}

    	function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {

    		const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

    		let material = _depthMaterials[ index ];

    		if ( material === undefined ) {

    			material = new MeshDepthMaterial( {

    				depthPacking: RGBADepthPacking,

    				morphTargets: useMorphing,
    				skinning: useSkinning

    			} );

    			_depthMaterials[ index ] = material;

    		}

    		return material;

    	}

    	function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {

    		const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

    		let material = _distanceMaterials[ index ];

    		if ( material === undefined ) {

    			material = new MeshDistanceMaterial( {

    				morphTargets: useMorphing,
    				skinning: useSkinning

    			} );

    			_distanceMaterials[ index ] = material;

    		}

    		return material;

    	}

    	function getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {

    		let result = null;

    		let getMaterialVariant = getDepthMaterialVariant;
    		let customMaterial = object.customDepthMaterial;

    		if ( light.isPointLight === true ) {

    			getMaterialVariant = getDistanceMaterialVariant;
    			customMaterial = object.customDistanceMaterial;

    		}

    		if ( customMaterial === undefined ) {

    			let useMorphing = false;

    			if ( material.morphTargets === true ) {

    				useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

    			}

    			let useSkinning = false;

    			if ( object.isSkinnedMesh === true ) {

    				if ( material.skinning === true ) {

    					useSkinning = true;

    				} else {

    					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

    				}

    			}

    			const useInstancing = object.isInstancedMesh === true;

    			result = getMaterialVariant( useMorphing, useSkinning, useInstancing );

    		} else {

    			result = customMaterial;

    		}

    		if ( _renderer.localClippingEnabled &&
    				material.clipShadows === true &&
    				material.clippingPlanes.length !== 0 ) {

    			// in this case we need a unique material instance reflecting the
    			// appropriate state

    			const keyA = result.uuid, keyB = material.uuid;

    			let materialsForVariant = _materialCache[ keyA ];

    			if ( materialsForVariant === undefined ) {

    				materialsForVariant = {};
    				_materialCache[ keyA ] = materialsForVariant;

    			}

    			let cachedMaterial = materialsForVariant[ keyB ];

    			if ( cachedMaterial === undefined ) {

    				cachedMaterial = result.clone();
    				materialsForVariant[ keyB ] = cachedMaterial;

    			}

    			result = cachedMaterial;

    		}

    		result.visible = material.visible;
    		result.wireframe = material.wireframe;

    		if ( type === VSMShadowMap ) {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

    		} else {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

    		}

    		result.clipShadows = material.clipShadows;
    		result.clippingPlanes = material.clippingPlanes;
    		result.clipIntersection = material.clipIntersection;

    		result.wireframeLinewidth = material.wireframeLinewidth;
    		result.linewidth = material.linewidth;

    		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

    			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
    			result.nearDistance = shadowCameraNear;
    			result.farDistance = shadowCameraFar;

    		}

    		return result;

    	}

    	function renderObject( object, camera, shadowCamera, light, type ) {

    		if ( object.visible === false ) return;

    		const visible = object.layers.test( camera.layers );

    		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

    			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

    				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

    				const geometry = _objects.update( object );
    				const material = object.material;

    				if ( Array.isArray( material ) ) {

    					const groups = geometry.groups;

    					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

    						const group = groups[ k ];
    						const groupMaterial = material[ group.materialIndex ];

    						if ( groupMaterial && groupMaterial.visible ) {

    							const depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

    							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

    						}

    					}

    				} else if ( material.visible ) {

    					const depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );

    					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

    				}

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			renderObject( children[ i ], camera, shadowCamera, light, type );

    		}

    	}

    }

    function WebGLState( gl, extensions, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	function ColorBuffer() {

    		let locked = false;

    		const color = new Vector4();
    		let currentColorMask = null;
    		const currentColorClear = new Vector4( 0, 0, 0, 0 );

    		return {

    			setMask: function ( colorMask ) {

    				if ( currentColorMask !== colorMask && ! locked ) {

    					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
    					currentColorMask = colorMask;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( r, g, b, a, premultipliedAlpha ) {

    				if ( premultipliedAlpha === true ) {

    					r *= a; g *= a; b *= a;

    				}

    				color.set( r, g, b, a );

    				if ( currentColorClear.equals( color ) === false ) {

    					gl.clearColor( r, g, b, a );
    					currentColorClear.copy( color );

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentColorMask = null;
    				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

    			}

    		};

    	}

    	function DepthBuffer() {

    		let locked = false;

    		let currentDepthMask = null;
    		let currentDepthFunc = null;
    		let currentDepthClear = null;

    		return {

    			setTest: function ( depthTest ) {

    				if ( depthTest ) {

    					enable( gl.DEPTH_TEST );

    				} else {

    					disable( gl.DEPTH_TEST );

    				}

    			},

    			setMask: function ( depthMask ) {

    				if ( currentDepthMask !== depthMask && ! locked ) {

    					gl.depthMask( depthMask );
    					currentDepthMask = depthMask;

    				}

    			},

    			setFunc: function ( depthFunc ) {

    				if ( currentDepthFunc !== depthFunc ) {

    					if ( depthFunc ) {

    						switch ( depthFunc ) {

    							case NeverDepth:

    								gl.depthFunc( gl.NEVER );
    								break;

    							case AlwaysDepth:

    								gl.depthFunc( gl.ALWAYS );
    								break;

    							case LessDepth:

    								gl.depthFunc( gl.LESS );
    								break;

    							case LessEqualDepth:

    								gl.depthFunc( gl.LEQUAL );
    								break;

    							case EqualDepth:

    								gl.depthFunc( gl.EQUAL );
    								break;

    							case GreaterEqualDepth:

    								gl.depthFunc( gl.GEQUAL );
    								break;

    							case GreaterDepth:

    								gl.depthFunc( gl.GREATER );
    								break;

    							case NotEqualDepth:

    								gl.depthFunc( gl.NOTEQUAL );
    								break;

    							default:

    								gl.depthFunc( gl.LEQUAL );

    						}

    					} else {

    						gl.depthFunc( gl.LEQUAL );

    					}

    					currentDepthFunc = depthFunc;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( depth ) {

    				if ( currentDepthClear !== depth ) {

    					gl.clearDepth( depth );
    					currentDepthClear = depth;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentDepthMask = null;
    				currentDepthFunc = null;
    				currentDepthClear = null;

    			}

    		};

    	}

    	function StencilBuffer() {

    		let locked = false;

    		let currentStencilMask = null;
    		let currentStencilFunc = null;
    		let currentStencilRef = null;
    		let currentStencilFuncMask = null;
    		let currentStencilFail = null;
    		let currentStencilZFail = null;
    		let currentStencilZPass = null;
    		let currentStencilClear = null;

    		return {

    			setTest: function ( stencilTest ) {

    				if ( ! locked ) {

    					if ( stencilTest ) {

    						enable( gl.STENCIL_TEST );

    					} else {

    						disable( gl.STENCIL_TEST );

    					}

    				}

    			},

    			setMask: function ( stencilMask ) {

    				if ( currentStencilMask !== stencilMask && ! locked ) {

    					gl.stencilMask( stencilMask );
    					currentStencilMask = stencilMask;

    				}

    			},

    			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

    				if ( currentStencilFunc !== stencilFunc ||
    				     currentStencilRef 	!== stencilRef 	||
    				     currentStencilFuncMask !== stencilMask ) {

    					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

    					currentStencilFunc = stencilFunc;
    					currentStencilRef = stencilRef;
    					currentStencilFuncMask = stencilMask;

    				}

    			},

    			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

    				if ( currentStencilFail	 !== stencilFail 	||
    				     currentStencilZFail !== stencilZFail ||
    				     currentStencilZPass !== stencilZPass ) {

    					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

    					currentStencilFail = stencilFail;
    					currentStencilZFail = stencilZFail;
    					currentStencilZPass = stencilZPass;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( stencil ) {

    				if ( currentStencilClear !== stencil ) {

    					gl.clearStencil( stencil );
    					currentStencilClear = stencil;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentStencilMask = null;
    				currentStencilFunc = null;
    				currentStencilRef = null;
    				currentStencilFuncMask = null;
    				currentStencilFail = null;
    				currentStencilZFail = null;
    				currentStencilZPass = null;
    				currentStencilClear = null;

    			}

    		};

    	}

    	//

    	const colorBuffer = new ColorBuffer();
    	const depthBuffer = new DepthBuffer();
    	const stencilBuffer = new StencilBuffer();

    	let enabledCapabilities = {};

    	let currentProgram = null;

    	let currentBlendingEnabled = null;
    	let currentBlending = null;
    	let currentBlendEquation = null;
    	let currentBlendSrc = null;
    	let currentBlendDst = null;
    	let currentBlendEquationAlpha = null;
    	let currentBlendSrcAlpha = null;
    	let currentBlendDstAlpha = null;
    	let currentPremultipledAlpha = false;

    	let currentFlipSided = null;
    	let currentCullFace = null;

    	let currentLineWidth = null;

    	let currentPolygonOffsetFactor = null;
    	let currentPolygonOffsetUnits = null;

    	const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

    	let lineWidthAvailable = false;
    	let version = 0;
    	const glVersion = gl.getParameter( gl.VERSION );

    	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

    		version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 1.0 );

    	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

    		version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 2.0 );

    	}

    	let currentTextureSlot = null;
    	let currentBoundTextures = {};

    	const currentScissor = new Vector4();
    	const currentViewport = new Vector4();

    	function createTexture( type, target, count ) {

    		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
    		const texture = gl.createTexture();

    		gl.bindTexture( type, texture );
    		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
    		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

    		for ( let i = 0; i < count; i ++ ) {

    			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

    		}

    		return texture;

    	}

    	const emptyTextures = {};
    	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
    	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

    	// init

    	colorBuffer.setClear( 0, 0, 0, 1 );
    	depthBuffer.setClear( 1 );
    	stencilBuffer.setClear( 0 );

    	enable( gl.DEPTH_TEST );
    	depthBuffer.setFunc( LessEqualDepth );

    	setFlipSided( false );
    	setCullFace( CullFaceBack );
    	enable( gl.CULL_FACE );

    	setBlending( NoBlending );

    	//

    	function enable( id ) {

    		if ( enabledCapabilities[ id ] !== true ) {

    			gl.enable( id );
    			enabledCapabilities[ id ] = true;

    		}

    	}

    	function disable( id ) {

    		if ( enabledCapabilities[ id ] !== false ) {

    			gl.disable( id );
    			enabledCapabilities[ id ] = false;

    		}

    	}

    	function useProgram( program ) {

    		if ( currentProgram !== program ) {

    			gl.useProgram( program );

    			currentProgram = program;

    			return true;

    		}

    		return false;

    	}

    	const equationToGL = {
    		[ AddEquation ]: gl.FUNC_ADD,
    		[ SubtractEquation ]: gl.FUNC_SUBTRACT,
    		[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
    	};

    	if ( isWebGL2 ) {

    		equationToGL[ MinEquation ] = gl.MIN;
    		equationToGL[ MaxEquation ] = gl.MAX;

    	} else {

    		const extension = extensions.get( 'EXT_blend_minmax' );

    		if ( extension !== null ) {

    			equationToGL[ MinEquation ] = extension.MIN_EXT;
    			equationToGL[ MaxEquation ] = extension.MAX_EXT;

    		}

    	}

    	const factorToGL = {
    		[ ZeroFactor ]: gl.ZERO,
    		[ OneFactor ]: gl.ONE,
    		[ SrcColorFactor ]: gl.SRC_COLOR,
    		[ SrcAlphaFactor ]: gl.SRC_ALPHA,
    		[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
    		[ DstColorFactor ]: gl.DST_COLOR,
    		[ DstAlphaFactor ]: gl.DST_ALPHA,
    		[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
    		[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
    		[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
    		[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA
    	};

    	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

    		if ( blending === NoBlending ) {

    			if ( currentBlendingEnabled ) {

    				disable( gl.BLEND );
    				currentBlendingEnabled = false;

    			}

    			return;

    		}

    		if ( ! currentBlendingEnabled ) {

    			enable( gl.BLEND );
    			currentBlendingEnabled = true;

    		}

    		if ( blending !== CustomBlending ) {

    			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

    				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

    					gl.blendEquation( gl.FUNC_ADD );

    					currentBlendEquation = AddEquation;
    					currentBlendEquationAlpha = AddEquation;

    				}

    				if ( premultipliedAlpha ) {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
    							break;

    						case AdditiveBlending:
    							gl.blendFunc( gl.ONE, gl.ONE );
    							break;

    						case SubtractiveBlending:
    							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );
    							break;

    						case MultiplyBlending:
    							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				} else {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
    							break;

    						case AdditiveBlending:
    							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
    							break;

    						case SubtractiveBlending:
    							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );
    							break;

    						case MultiplyBlending:
    							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				}

    				currentBlendSrc = null;
    				currentBlendDst = null;
    				currentBlendSrcAlpha = null;
    				currentBlendDstAlpha = null;

    				currentBlending = blending;
    				currentPremultipledAlpha = premultipliedAlpha;

    			}

    			return;

    		}

    		// custom blending

    		blendEquationAlpha = blendEquationAlpha || blendEquation;
    		blendSrcAlpha = blendSrcAlpha || blendSrc;
    		blendDstAlpha = blendDstAlpha || blendDst;

    		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

    			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

    			currentBlendEquation = blendEquation;
    			currentBlendEquationAlpha = blendEquationAlpha;

    		}

    		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

    			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

    			currentBlendSrc = blendSrc;
    			currentBlendDst = blendDst;
    			currentBlendSrcAlpha = blendSrcAlpha;
    			currentBlendDstAlpha = blendDstAlpha;

    		}

    		currentBlending = blending;
    		currentPremultipledAlpha = null;

    	}

    	function setMaterial( material, frontFaceCW ) {

    		material.side === DoubleSide
    			? disable( gl.CULL_FACE )
    			: enable( gl.CULL_FACE );

    		let flipSided = ( material.side === BackSide );
    		if ( frontFaceCW ) flipSided = ! flipSided;

    		setFlipSided( flipSided );

    		( material.blending === NormalBlending && material.transparent === false )
    			? setBlending( NoBlending )
    			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

    		depthBuffer.setFunc( material.depthFunc );
    		depthBuffer.setTest( material.depthTest );
    		depthBuffer.setMask( material.depthWrite );
    		colorBuffer.setMask( material.colorWrite );

    		const stencilWrite = material.stencilWrite;
    		stencilBuffer.setTest( stencilWrite );
    		if ( stencilWrite ) {

    			stencilBuffer.setMask( material.stencilWriteMask );
    			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
    			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

    		}

    		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

    	}

    	//

    	function setFlipSided( flipSided ) {

    		if ( currentFlipSided !== flipSided ) {

    			if ( flipSided ) {

    				gl.frontFace( gl.CW );

    			} else {

    				gl.frontFace( gl.CCW );

    			}

    			currentFlipSided = flipSided;

    		}

    	}

    	function setCullFace( cullFace ) {

    		if ( cullFace !== CullFaceNone ) {

    			enable( gl.CULL_FACE );

    			if ( cullFace !== currentCullFace ) {

    				if ( cullFace === CullFaceBack ) {

    					gl.cullFace( gl.BACK );

    				} else if ( cullFace === CullFaceFront ) {

    					gl.cullFace( gl.FRONT );

    				} else {

    					gl.cullFace( gl.FRONT_AND_BACK );

    				}

    			}

    		} else {

    			disable( gl.CULL_FACE );

    		}

    		currentCullFace = cullFace;

    	}

    	function setLineWidth( width ) {

    		if ( width !== currentLineWidth ) {

    			if ( lineWidthAvailable ) gl.lineWidth( width );

    			currentLineWidth = width;

    		}

    	}

    	function setPolygonOffset( polygonOffset, factor, units ) {

    		if ( polygonOffset ) {

    			enable( gl.POLYGON_OFFSET_FILL );

    			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

    				gl.polygonOffset( factor, units );

    				currentPolygonOffsetFactor = factor;
    				currentPolygonOffsetUnits = units;

    			}

    		} else {

    			disable( gl.POLYGON_OFFSET_FILL );

    		}

    	}

    	function setScissorTest( scissorTest ) {

    		if ( scissorTest ) {

    			enable( gl.SCISSOR_TEST );

    		} else {

    			disable( gl.SCISSOR_TEST );

    		}

    	}

    	// texture

    	function activeTexture( webglSlot ) {

    		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

    		if ( currentTextureSlot !== webglSlot ) {

    			gl.activeTexture( webglSlot );
    			currentTextureSlot = webglSlot;

    		}

    	}

    	function bindTexture( webglType, webglTexture ) {

    		if ( currentTextureSlot === null ) {

    			activeTexture();

    		}

    		let boundTexture = currentBoundTextures[ currentTextureSlot ];

    		if ( boundTexture === undefined ) {

    			boundTexture = { type: undefined, texture: undefined };
    			currentBoundTextures[ currentTextureSlot ] = boundTexture;

    		}

    		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

    			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

    			boundTexture.type = webglType;
    			boundTexture.texture = webglTexture;

    		}

    	}

    	function unbindTexture() {

    		const boundTexture = currentBoundTextures[ currentTextureSlot ];

    		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

    			gl.bindTexture( boundTexture.type, null );

    			boundTexture.type = undefined;
    			boundTexture.texture = undefined;

    		}

    	}

    	function compressedTexImage2D() {

    		try {

    			gl.compressedTexImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage2D() {

    		try {

    			gl.texImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage3D() {

    		try {

    			gl.texImage3D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	//

    	function scissor( scissor ) {

    		if ( currentScissor.equals( scissor ) === false ) {

    			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
    			currentScissor.copy( scissor );

    		}

    	}

    	function viewport( viewport ) {

    		if ( currentViewport.equals( viewport ) === false ) {

    			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
    			currentViewport.copy( viewport );

    		}

    	}

    	//

    	function reset() {

    		enabledCapabilities = {};

    		currentTextureSlot = null;
    		currentBoundTextures = {};

    		currentProgram = null;

    		currentBlending = null;

    		currentFlipSided = null;
    		currentCullFace = null;

    		colorBuffer.reset();
    		depthBuffer.reset();
    		stencilBuffer.reset();

    	}

    	return {

    		buffers: {
    			color: colorBuffer,
    			depth: depthBuffer,
    			stencil: stencilBuffer
    		},

    		enable: enable,
    		disable: disable,

    		useProgram: useProgram,

    		setBlending: setBlending,
    		setMaterial: setMaterial,

    		setFlipSided: setFlipSided,
    		setCullFace: setCullFace,

    		setLineWidth: setLineWidth,
    		setPolygonOffset: setPolygonOffset,

    		setScissorTest: setScissorTest,

    		activeTexture: activeTexture,
    		bindTexture: bindTexture,
    		unbindTexture: unbindTexture,
    		compressedTexImage2D: compressedTexImage2D,
    		texImage2D: texImage2D,
    		texImage3D: texImage3D,

    		scissor: scissor,
    		viewport: viewport,

    		reset: reset

    	};

    }

    function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

    	const isWebGL2 = capabilities.isWebGL2;
    	const maxTextures = capabilities.maxTextures;
    	const maxCubemapSize = capabilities.maxCubemapSize;
    	const maxTextureSize = capabilities.maxTextureSize;
    	const maxSamples = capabilities.maxSamples;

    	const _videoTextures = new WeakMap();
    	let _canvas;

    	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

    	let useOffscreenCanvas = false;

    	try {

    		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
    			&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;

    	} catch ( err ) {

    		// Ignore any errors

    	}

    	function createCanvas( width, height ) {

    		// Use OffscreenCanvas when available. Specially needed in web workers

    		return useOffscreenCanvas ?
    			new OffscreenCanvas( width, height ) :
    			document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

    	}

    	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

    		let scale = 1;

    		// handle case if texture exceeds max size

    		if ( image.width > maxSize || image.height > maxSize ) {

    			scale = maxSize / Math.max( image.width, image.height );

    		}

    		// only perform resize if necessary

    		if ( scale < 1 || needsPowerOfTwo === true ) {

    			// only perform resize for certain image types

    			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    				const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;

    				const width = floor( scale * image.width );
    				const height = floor( scale * image.height );

    				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

    				// cube textures can't reuse the same canvas

    				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

    				canvas.width = width;
    				canvas.height = height;

    				const context = canvas.getContext( '2d' );
    				context.drawImage( image, 0, 0, width, height );

    				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

    				return canvas;

    			} else {

    				if ( 'data' in image ) {

    					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

    				}

    				return image;

    			}

    		}

    		return image;

    	}

    	function isPowerOfTwo( image ) {

    		return MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );

    	}

    	function textureNeedsPowerOfTwo( texture ) {

    		if ( isWebGL2 ) return false;

    		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
    			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

    	}

    	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

    		return texture.generateMipmaps && supportsMips &&
    			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

    	}

    	function generateMipmap( target, texture, width, height ) {

    		_gl.generateMipmap( target );

    		const textureProperties = properties.get( texture );

    		// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
    		textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

    	}

    	function getInternalFormat( internalFormatName, glFormat, glType ) {

    		if ( isWebGL2 === false ) return glFormat;

    		if ( internalFormatName !== null ) {

    			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

    			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

    		}

    		let internalFormat = glFormat;

    		if ( glFormat === _gl.RED ) {

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

    		}

    		if ( glFormat === _gl.RGB ) {

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.RGB32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGB16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8;

    		}

    		if ( glFormat === _gl.RGBA ) {

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8;

    		}

    		if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
    			internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

    			extensions.get( 'EXT_color_buffer_float' );

    		}

    		return internalFormat;

    	}

    	// Fallback filters for non-power-of-2 textures

    	function filterFallback( f ) {

    		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

    			return _gl.NEAREST;

    		}

    		return _gl.LINEAR;

    	}

    	//

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		deallocateTexture( texture );

    		if ( texture.isVideoTexture ) {

    			_videoTextures.delete( texture );

    		}

    		info.memory.textures --;

    	}

    	function onRenderTargetDispose( event ) {

    		const renderTarget = event.target;

    		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

    		deallocateRenderTarget( renderTarget );

    		info.memory.textures --;

    	}

    	//

    	function deallocateTexture( texture ) {

    		const textureProperties = properties.get( texture );

    		if ( textureProperties.__webglInit === undefined ) return;

    		_gl.deleteTexture( textureProperties.__webglTexture );

    		properties.remove( texture );

    	}

    	function deallocateRenderTarget( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( renderTarget.texture );

    		if ( ! renderTarget ) return;

    		if ( textureProperties.__webglTexture !== undefined ) {

    			_gl.deleteTexture( textureProperties.__webglTexture );

    		}

    		if ( renderTarget.depthTexture ) {

    			renderTarget.depthTexture.dispose();

    		}

    		if ( renderTarget.isWebGLCubeRenderTarget ) {

    			for ( let i = 0; i < 6; i ++ ) {

    				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
    				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

    			}

    		} else {

    			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
    			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
    			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );
    			if ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );
    			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

    		}

    		properties.remove( renderTarget.texture );
    		properties.remove( renderTarget );

    	}

    	//

    	let textureUnits = 0;

    	function resetTextureUnits() {

    		textureUnits = 0;

    	}

    	function allocateTextureUnit() {

    		const textureUnit = textureUnits;

    		if ( textureUnit >= maxTextures ) {

    			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

    		}

    		textureUnits += 1;

    		return textureUnit;

    	}

    	//

    	function setTexture2D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.isVideoTexture ) updateVideoTexture( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			const image = texture.image;

    			if ( image === undefined ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

    			} else if ( image.complete === false ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

    			} else {

    				uploadTexture( textureProperties, texture, slot );
    				return;

    			}

    		}

    		state.activeTexture( _gl.TEXTURE0 + slot );
    		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

    	}

    	function setTexture2DArray( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.activeTexture( _gl.TEXTURE0 + slot );
    		state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture );

    	}

    	function setTexture3D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.activeTexture( _gl.TEXTURE0 + slot );
    		state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture );

    	}

    	function setTextureCube( texture, slot ) {

    		if ( texture.image.length !== 6 ) return;

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			initTexture( textureProperties, texture );

    			state.activeTexture( _gl.TEXTURE0 + slot );
    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );

    			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

    			const isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );
    			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

    			const cubeImage = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( ! isCompressed && ! isDataTexture ) {

    					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

    				} else {

    					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

    				}

    			}

    			const image = cubeImage[ 0 ],
    				supportsMips = isPowerOfTwo( image ) || isWebGL2,
    				glFormat = utils.convert( texture.format ),
    				glType = utils.convert( texture.type ),
    				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

    			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

    			let mipmaps;

    			if ( isCompressed ) {

    				for ( let i = 0; i < 6; i ++ ) {

    					mipmaps = cubeImage[ i ].mipmaps;

    					for ( let j = 0; j < mipmaps.length; j ++ ) {

    						const mipmap = mipmaps[ j ];

    						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

    							if ( glFormat !== null ) {

    								state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    							} else {

    								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

    							}

    						} else {

    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    						}

    					}

    				}

    				textureProperties.__maxMipLevel = mipmaps.length - 1;

    			} else {

    				mipmaps = texture.mipmaps;

    				for ( let i = 0; i < 6; i ++ ) {

    					if ( isDataTexture ) {

    						state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];
    							const mipmapImage = mipmap.image[ i ].image;

    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

    						}

    					} else {

    						state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];

    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

    						}

    					}

    				}

    				textureProperties.__maxMipLevel = mipmaps.length;

    			}

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				// We assume images for cube map have the same size.
    				generateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );

    			}

    			textureProperties.__version = texture.version;

    			if ( texture.onUpdate ) texture.onUpdate( texture );

    		} else {

    			state.activeTexture( _gl.TEXTURE0 + slot );
    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );

    		}

    	}

    	function setTextureCubeDynamic( texture, slot ) {

    		state.activeTexture( _gl.TEXTURE0 + slot );
    		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

    	}

    	const wrappingToGL = {
    		[ RepeatWrapping ]: _gl.REPEAT,
    		[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,
    		[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT
    	};

    	const filterToGL = {
    		[ NearestFilter ]: _gl.NEAREST,
    		[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,
    		[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,

    		[ LinearFilter ]: _gl.LINEAR,
    		[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,
    		[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR
    	};

    	function setTextureParameters( textureType, texture, supportsMips ) {

    		if ( supportsMips ) {

    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

    			if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

    				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

    			}

    			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
    			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

    		} else {

    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

    			if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

    				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );

    			}

    			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

    			}

    			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
    			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

    			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

    			}

    		}

    		const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

    		if ( extension ) {

    			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
    			if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;

    			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

    				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
    				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

    			}

    		}

    	}

    	function initTexture( textureProperties, texture ) {

    		if ( textureProperties.__webglInit === undefined ) {

    			textureProperties.__webglInit = true;

    			texture.addEventListener( 'dispose', onTextureDispose );

    			textureProperties.__webglTexture = _gl.createTexture();

    			info.memory.textures ++;

    		}

    	}

    	function uploadTexture( textureProperties, texture, slot ) {

    		let textureType = _gl.TEXTURE_2D;

    		if ( texture.isDataTexture2DArray ) textureType = _gl.TEXTURE_2D_ARRAY;
    		if ( texture.isDataTexture3D ) textureType = _gl.TEXTURE_3D;

    		initTexture( textureProperties, texture );

    		state.activeTexture( _gl.TEXTURE0 + slot );
    		state.bindTexture( textureType, textureProperties.__webglTexture );

    		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
    		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
    		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

    		const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
    		const image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

    		const supportsMips = isPowerOfTwo( image ) || isWebGL2,
    			glFormat = utils.convert( texture.format );

    		let glType = utils.convert( texture.type ),
    			glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

    		setTextureParameters( textureType, texture, supportsMips );

    		let mipmap;
    		const mipmaps = texture.mipmaps;

    		if ( texture.isDepthTexture ) {

    			// populate depth texture with dummy data

    			glInternalFormat = _gl.DEPTH_COMPONENT;

    			if ( isWebGL2 ) {

    				if ( texture.type === FloatType ) {

    					glInternalFormat = _gl.DEPTH_COMPONENT32F;

    				} else if ( texture.type === UnsignedIntType ) {

    					glInternalFormat = _gl.DEPTH_COMPONENT24;

    				} else if ( texture.type === UnsignedInt248Type ) {

    					glInternalFormat = _gl.DEPTH24_STENCIL8;

    				} else {

    					glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D

    				}

    			} else {

    				if ( texture.type === FloatType ) {

    					console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

    				}

    			}

    			// validation checks for WebGL 1

    			if ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

    				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
    				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
    				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

    					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

    					texture.type = UnsignedShortType;
    					glType = utils.convert( texture.type );

    				}

    			}

    			if ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

    				// Depth stencil textures need the DEPTH_STENCIL internal format
    				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    				glInternalFormat = _gl.DEPTH_STENCIL;

    				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
    				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
    				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    				if ( texture.type !== UnsignedInt248Type ) {

    					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

    					texture.type = UnsignedInt248Type;
    					glType = utils.convert( texture.type );

    				}

    			}

    			//

    			state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

    		} else if ( texture.isDataTexture ) {

    			// use manually created mipmaps if available
    			// if there are no manual mipmaps
    			// set 0 level mipmap and then use GL to generate other mipmap levels

    			if ( mipmaps.length > 0 && supportsMips ) {

    				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    					mipmap = mipmaps[ i ];
    					state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    				}

    				texture.generateMipmaps = false;
    				textureProperties.__maxMipLevel = mipmaps.length - 1;

    			} else {

    				state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
    				textureProperties.__maxMipLevel = 0;

    			}

    		} else if ( texture.isCompressedTexture ) {

    			for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    				mipmap = mipmaps[ i ];

    				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

    					if ( glFormat !== null ) {

    						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    					} else {

    						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

    					}

    				} else {

    					state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    				}

    			}

    			textureProperties.__maxMipLevel = mipmaps.length - 1;

    		} else if ( texture.isDataTexture2DArray ) {

    			state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
    			textureProperties.__maxMipLevel = 0;

    		} else if ( texture.isDataTexture3D ) {

    			state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
    			textureProperties.__maxMipLevel = 0;

    		} else {

    			// regular Texture (image, video, canvas)

    			// use manually created mipmaps if available
    			// if there are no manual mipmaps
    			// set 0 level mipmap and then use GL to generate other mipmap levels

    			if ( mipmaps.length > 0 && supportsMips ) {

    				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    					mipmap = mipmaps[ i ];
    					state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

    				}

    				texture.generateMipmaps = false;
    				textureProperties.__maxMipLevel = mipmaps.length - 1;

    			} else {

    				state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );
    				textureProperties.__maxMipLevel = 0;

    			}

    		}

    		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    			generateMipmap( textureType, texture, image.width, image.height );

    		}

    		textureProperties.__version = texture.version;

    		if ( texture.onUpdate ) texture.onUpdate( texture );

    	}

    	// Render targets

    	// Setup storage for target texture and bind it to correct framebuffer
    	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

    		const glFormat = utils.convert( renderTarget.texture.format );
    		const glType = utils.convert( renderTarget.texture.type );
    		const glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
    		state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
    		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

    	}

    	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

    		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

    			let glInternalFormat = _gl.DEPTH_COMPONENT16;

    			if ( isMultisample ) {

    				const depthTexture = renderTarget.depthTexture;

    				if ( depthTexture && depthTexture.isDepthTexture ) {

    					if ( depthTexture.type === FloatType ) {

    						glInternalFormat = _gl.DEPTH_COMPONENT32F;

    					} else if ( depthTexture.type === UnsignedIntType ) {

    						glInternalFormat = _gl.DEPTH_COMPONENT24;

    					}

    				}

    				const samples = getRenderTargetSamples( renderTarget );

    				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    			} else {

    				_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

    			}

    			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

    		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

    			if ( isMultisample ) {

    				const samples = getRenderTargetSamples( renderTarget );

    				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

    			} else {

    				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );

    			}


    			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

    		} else {

    			const glFormat = utils.convert( renderTarget.texture.format );
    			const glType = utils.convert( renderTarget.texture.type );
    			const glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );

    			if ( isMultisample ) {

    				const samples = getRenderTargetSamples( renderTarget );

    				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    			} else {

    				_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

    			}

    		}

    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

    	}

    	// Setup resources for a Depth Texture for a FBO (needs an extension)
    	function setupDepthTexture( framebuffer, renderTarget ) {

    		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
    		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

    			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

    		}

    		// upload an empty depth texture with framebuffer size
    		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
    				renderTarget.depthTexture.image.width !== renderTarget.width ||
    				renderTarget.depthTexture.image.height !== renderTarget.height ) {

    			renderTarget.depthTexture.image.width = renderTarget.width;
    			renderTarget.depthTexture.image.height = renderTarget.height;
    			renderTarget.depthTexture.needsUpdate = true;

    		}

    		setTexture2D( renderTarget.depthTexture, 0 );

    		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

    		if ( renderTarget.depthTexture.format === DepthFormat ) {

    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

    		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

    		} else {

    			throw new Error( 'Unknown depthTexture format' );

    		}

    	}

    	// Setup GL resources for a non-texture depth buffer
    	function setupDepthRenderbuffer( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

    		if ( renderTarget.depthTexture ) {

    			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

    			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

    		} else {

    			if ( isCube ) {

    				renderTargetProperties.__webglDepthbuffer = [];

    				for ( let i = 0; i < 6; i ++ ) {

    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
    					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
    					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

    				}

    			} else {

    				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
    				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
    				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

    			}

    		}

    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

    	}

    	// Set up GL resources for the render target
    	function setupRenderTarget( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( renderTarget.texture );

    		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

    		textureProperties.__webglTexture = _gl.createTexture();

    		info.memory.textures ++;

    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
    		const isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
    		const supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

    		// Handles WebGL2 RGBFormat fallback - #18858

    		if ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {

    			renderTarget.texture.format = RGBAFormat;

    			console.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );

    		}

    		// Setup framebuffer

    		if ( isCube ) {

    			renderTargetProperties.__webglFramebuffer = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

    			}

    		} else {

    			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

    			if ( isMultisample ) {

    				if ( isWebGL2 ) {

    					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
    					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

    					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );

    					const glFormat = utils.convert( renderTarget.texture.format );
    					const glType = utils.convert( renderTarget.texture.type );
    					const glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
    					const samples = getRenderTargetSamples( renderTarget );
    					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
    					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );
    					_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

    					if ( renderTarget.depthBuffer ) {

    						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
    						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

    					}

    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );


    				} else {

    					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

    				}

    			}

    		}

    		// Setup color buffer

    		if ( isCube ) {

    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
    			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, supportsMips );

    			for ( let i = 0; i < 6; i ++ ) {

    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

    			}

    			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

    				generateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );

    			}

    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

    		} else {

    			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
    			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, supportsMips );
    			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

    			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

    				generateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );

    			}

    			state.bindTexture( _gl.TEXTURE_2D, null );

    		}

    		// Setup depth and stencil buffers

    		if ( renderTarget.depthBuffer ) {

    			setupDepthRenderbuffer( renderTarget );

    		}

    	}

    	function updateRenderTargetMipmap( renderTarget ) {

    		const texture = renderTarget.texture;
    		const supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

    		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    			const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
    			const webglTexture = properties.get( texture ).__webglTexture;

    			state.bindTexture( target, webglTexture );
    			generateMipmap( target, texture, renderTarget.width, renderTarget.height );
    			state.bindTexture( target, null );

    		}

    	}

    	function updateMultisampleRenderTarget( renderTarget ) {

    		if ( renderTarget.isWebGLMultisampleRenderTarget ) {

    			if ( isWebGL2 ) {

    				const renderTargetProperties = properties.get( renderTarget );

    				_gl.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
    				_gl.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

    				const width = renderTarget.width;
    				const height = renderTarget.height;
    				let mask = _gl.COLOR_BUFFER_BIT;

    				if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;
    				if ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

    				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

    				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905

    			} else {

    				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

    			}

    		}

    	}

    	function getRenderTargetSamples( renderTarget ) {

    		return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
    			Math.min( maxSamples, renderTarget.samples ) : 0;

    	}

    	function updateVideoTexture( texture ) {

    		const frame = info.render.frame;

    		// Check the last frame we updated the VideoTexture

    		if ( _videoTextures.get( texture ) !== frame ) {

    			_videoTextures.set( texture, frame );
    			texture.update();

    		}

    	}

    	// backwards compatibility

    	let warnedTexture2D = false;
    	let warnedTextureCube = false;

    	function safeSetTexture2D( texture, slot ) {

    		if ( texture && texture.isWebGLRenderTarget ) {

    			if ( warnedTexture2D === false ) {

    				console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
    				warnedTexture2D = true;

    			}

    			texture = texture.texture;

    		}

    		setTexture2D( texture, slot );

    	}

    	function safeSetTextureCube( texture, slot ) {

    		if ( texture && texture.isWebGLCubeRenderTarget ) {

    			if ( warnedTextureCube === false ) {

    				console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
    				warnedTextureCube = true;

    			}

    			texture = texture.texture;

    		}

    		// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture
    		// TODO: unify these code paths
    		if ( ( texture && texture.isCubeTexture ) ||
    			( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

    			// CompressedTexture can have Array in image :/

    			// this function alone should take care of cube textures
    			setTextureCube( texture, slot );

    		} else {

    			// assumed: texture property of THREE.WebGLCubeRenderTarget
    			setTextureCubeDynamic( texture, slot );

    		}

    	}

    	//

    	this.allocateTextureUnit = allocateTextureUnit;
    	this.resetTextureUnits = resetTextureUnits;

    	this.setTexture2D = setTexture2D;
    	this.setTexture2DArray = setTexture2DArray;
    	this.setTexture3D = setTexture3D;
    	this.setTextureCube = setTextureCube;
    	this.setTextureCubeDynamic = setTextureCubeDynamic;
    	this.setupRenderTarget = setupRenderTarget;
    	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

    	this.safeSetTexture2D = safeSetTexture2D;
    	this.safeSetTextureCube = safeSetTextureCube;

    }

    function WebGLUtils( gl, extensions, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	function convert( p ) {

    		let extension;

    		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
    		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
    		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
    		if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

    		if ( p === ByteType ) return gl.BYTE;
    		if ( p === ShortType ) return gl.SHORT;
    		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
    		if ( p === IntType ) return gl.INT;
    		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
    		if ( p === FloatType ) return gl.FLOAT;

    		if ( p === HalfFloatType ) {

    			if ( isWebGL2 ) return gl.HALF_FLOAT;

    			extension = extensions.get( 'OES_texture_half_float' );

    			if ( extension !== null ) {

    				return extension.HALF_FLOAT_OES;

    			} else {

    				return null;

    			}

    		}

    		if ( p === AlphaFormat ) return gl.ALPHA;
    		if ( p === RGBFormat ) return gl.RGB;
    		if ( p === RGBAFormat ) return gl.RGBA;
    		if ( p === LuminanceFormat ) return gl.LUMINANCE;
    		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
    		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
    		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;
    		if ( p === RedFormat ) return gl.RED;

    		// WebGL2 formats.

    		if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
    		if ( p === RGFormat ) return gl.RG;
    		if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
    		if ( p === RGBIntegerFormat ) return gl.RGB_INTEGER;
    		if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

    		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
    			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

    			if ( extension !== null ) {

    				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
    				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
    				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
    				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

    			} else {

    				return null;

    			}

    		}

    		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
    			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

    			if ( extension !== null ) {

    				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
    				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
    				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
    				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

    			} else {

    				return null;

    			}

    		}

    		if ( p === RGB_ETC1_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

    			if ( extension !== null ) {

    				return extension.COMPRESSED_RGB_ETC1_WEBGL;

    			} else {

    				return null;

    			}

    		}

    		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

    			if ( extension !== null ) {

    				if ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;
    				if ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;

    			}

    		}

    		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
    			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
    			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
    			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
    			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||
    			p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||
    			p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||
    			p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||
    			p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||
    			p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

    			if ( extension !== null ) {

    				// TODO Complete?

    				return p;

    			} else {

    				return null;

    			}

    		}

    		if ( p === RGBA_BPTC_Format ) {

    			extension = extensions.get( 'EXT_texture_compression_bptc' );

    			if ( extension !== null ) {

    				// TODO Complete?

    				return p;

    			} else {

    				return null;

    			}

    		}

    		if ( p === UnsignedInt248Type ) {

    			if ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;

    			extension = extensions.get( 'WEBGL_depth_texture' );

    			if ( extension !== null ) {

    				return extension.UNSIGNED_INT_24_8_WEBGL;

    			} else {

    				return null;

    			}

    		}

    	}

    	return { convert: convert };

    }

    function ArrayCamera( array ) {

    	PerspectiveCamera.call( this );

    	this.cameras = array || [];

    }

    ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

    	constructor: ArrayCamera,

    	isArrayCamera: true

    } );

    function Group() {

    	Object3D.call( this );

    	this.type = 'Group';

    }

    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Group,

    	isGroup: true

    } );

    function WebXRController() {

    	this._targetRay = null;
    	this._grip = null;
    	this._hand = null;

    }

    Object.assign( WebXRController.prototype, {

    	constructor: WebXRController,

    	getHandSpace: function () {

    		if ( this._hand === null ) {

    			this._hand = new Group();
    			this._hand.matrixAutoUpdate = false;
    			this._hand.visible = false;

    			this._hand.joints = [];
    			this._hand.inputState = { pinching: false };

    			if ( window.XRHand ) {

    				for ( let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {

    					// The transform of this joint will be updated with the joint pose on each frame
    					let joint = new Group();
    					joint.matrixAutoUpdate = false;
    					joint.visible = false;
    					this._hand.joints.push( joint );
    					// ??
    					this._hand.add( joint );

    				}

    			}

    		}

    		return this._hand;

    	},

    	getTargetRaySpace: function () {

    		if ( this._targetRay === null ) {

    			this._targetRay = new Group();
    			this._targetRay.matrixAutoUpdate = false;
    			this._targetRay.visible = false;

    		}

    		return this._targetRay;

    	},

    	getGripSpace: function () {

    		if ( this._grip === null ) {

    			this._grip = new Group();
    			this._grip.matrixAutoUpdate = false;
    			this._grip.visible = false;

    		}

    		return this._grip;

    	},

    	dispatchEvent: function ( event ) {

    		if ( this._targetRay !== null ) {

    			this._targetRay.dispatchEvent( event );

    		}

    		if ( this._grip !== null ) {

    			this._grip.dispatchEvent( event );

    		}

    		if ( this._hand !== null ) {

    			this._hand.dispatchEvent( event );

    		}

    		return this;

    	},

    	disconnect: function ( inputSource ) {

    		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

    		if ( this._targetRay !== null ) {

    			this._targetRay.visible = false;

    		}

    		if ( this._grip !== null ) {

    			this._grip.visible = false;

    		}

    		if ( this._hand !== null ) {

    			this._hand.visible = false;

    		}

    		return this;

    	},

    	update: function ( inputSource, frame, referenceSpace ) {

    		let inputPose = null;
    		let gripPose = null;
    		let handPose = null;

    		const targetRay = this._targetRay;
    		const grip = this._grip;
    		const hand = this._hand;

    		if ( inputSource ) {

    			if ( inputSource.hand ) {

    				handPose = true;

    				for ( let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {

    					if ( inputSource.hand[ i ] ) {

    						// Update the joints groups with the XRJoint poses
    						let jointPose = frame.getJointPose( inputSource.hand[ i ], referenceSpace );
    						const joint = hand.joints[ i ];

    						if ( jointPose !== null ) {

    							joint.matrix.fromArray( jointPose.transform.matrix );
    							joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
    							joint.jointRadius = jointPose.radius;

    						}

    						joint.visible = jointPose !== null;

    						// Custom events

    						// Check pinch
    						const indexTip = hand.joints[ window.XRHand.INDEX_PHALANX_TIP ];
    						const thumbTip = hand.joints[ window.XRHand.THUMB_PHALANX_TIP ];
    						const distance = indexTip.position.distanceTo( thumbTip.position );

    						const distanceToPinch = 0.02;
    						const threshold = 0.005;

    						if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

    							hand.inputState.pinching = false;
    							this.dispatchEvent( {
    								type: "pinchend",
    								handedness: inputSource.handedness,
    								target: this
    							} );

    						} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

    							hand.inputState.pinching = true;
    							this.dispatchEvent( {
    								type: "pinchstart",
    								handedness: inputSource.handedness,
    								target: this
    							} );

    						}

    					}

    				}

    			} else {

    				if ( targetRay !== null ) {

    					inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

    					if ( inputPose !== null ) {

    						targetRay.matrix.fromArray( inputPose.transform.matrix );
    						targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );

    					}

    				}

    				if ( grip !== null && inputSource.gripSpace ) {

    					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

    					if ( gripPose !== null ) {

    						grip.matrix.fromArray( gripPose.transform.matrix );
    						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );

    					}

    				}

    			}

    		}

    		if ( targetRay !== null ) {

    			targetRay.visible = ( inputPose !== null );

    		}

    		if ( grip !== null ) {

    			grip.visible = ( gripPose !== null );

    		}

    		if ( hand !== null ) {

    			hand.visible = ( handPose !== null );

    		}

    		return this;

    	}

    } );

    function WebXRManager( renderer, gl ) {

    	const scope = this;

    	let session = null;

    	let framebufferScaleFactor = 1.0;

    	let referenceSpace = null;
    	let referenceSpaceType = 'local-floor';

    	let pose = null;

    	const controllers = [];
    	const inputSourcesMap = new Map();

    	//

    	const cameraL = new PerspectiveCamera();
    	cameraL.layers.enable( 1 );
    	cameraL.viewport = new Vector4();

    	const cameraR = new PerspectiveCamera();
    	cameraR.layers.enable( 2 );
    	cameraR.viewport = new Vector4();

    	const cameras = [ cameraL, cameraR ];

    	const cameraVR = new ArrayCamera();
    	cameraVR.layers.enable( 1 );
    	cameraVR.layers.enable( 2 );

    	let _currentDepthNear = null;
    	let _currentDepthFar = null;

    	//

    	this.enabled = false;

    	this.isPresenting = false;

    	this.getController = function ( index ) {

    		let controller = controllers[ index ];

    		if ( controller === undefined ) {

    			controller = new WebXRController();
    			controllers[ index ] = controller;

    		}

    		return controller.getTargetRaySpace();

    	};

    	this.getControllerGrip = function ( index ) {

    		let controller = controllers[ index ];

    		if ( controller === undefined ) {

    			controller = new WebXRController();
    			controllers[ index ] = controller;

    		}

    		return controller.getGripSpace();

    	};

    	this.getHand = function ( index ) {

    		let controller = controllers[ index ];

    		if ( controller === undefined ) {

    			controller = new WebXRController();
    			controllers[ index ] = controller;

    		}

    		return controller.getHandSpace();

    	};

    	//

    	function onSessionEvent( event ) {

    		const controller = inputSourcesMap.get( event.inputSource );

    		if ( controller ) {

    			controller.dispatchEvent( { type: event.type } );

    		}

    	}

    	function onSessionEnd() {

    		inputSourcesMap.forEach( function ( controller, inputSource ) {

    			controller.disconnect( inputSource );

    		} );

    		inputSourcesMap.clear();

    		//

    		renderer.setFramebuffer( null );
    		renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
    		animation.stop();

    		scope.isPresenting = false;

    		scope.dispatchEvent( { type: 'sessionend' } );

    	}

    	function onRequestReferenceSpace( value ) {

    		referenceSpace = value;

    		animation.setContext( session );
    		animation.start();

    		scope.isPresenting = true;

    		scope.dispatchEvent( { type: 'sessionstart' } );

    	}

    	this.setFramebufferScaleFactor = function ( value ) {

    		framebufferScaleFactor = value;

    		if ( scope.isPresenting === true ) {

    			console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

    		}

    	};

    	this.setReferenceSpaceType = function ( value ) {

    		referenceSpaceType = value;

    		if ( scope.isPresenting === true ) {

    			console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

    		}

    	};

    	this.getReferenceSpace = function () {

    		return referenceSpace;

    	};

    	this.getSession = function () {

    		return session;

    	};

    	this.setSession = function ( value ) {

    		session = value;

    		if ( session !== null ) {

    			session.addEventListener( 'select', onSessionEvent );
    			session.addEventListener( 'selectstart', onSessionEvent );
    			session.addEventListener( 'selectend', onSessionEvent );
    			session.addEventListener( 'squeeze', onSessionEvent );
    			session.addEventListener( 'squeezestart', onSessionEvent );
    			session.addEventListener( 'squeezeend', onSessionEvent );
    			session.addEventListener( 'end', onSessionEnd );

    			const attributes = gl.getContextAttributes();

    			if ( attributes.xrCompatible !== true ) {

    				gl.makeXRCompatible();

    			}

    			const layerInit = {
    				antialias: attributes.antialias,
    				alpha: attributes.alpha,
    				depth: attributes.depth,
    				stencil: attributes.stencil,
    				framebufferScaleFactor: framebufferScaleFactor
    			};

    			// eslint-disable-next-line no-undef
    			const baseLayer = new XRWebGLLayer( session, gl, layerInit );

    			session.updateRenderState( { baseLayer: baseLayer } );

    			session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );

    			//

    			session.addEventListener( 'inputsourceschange', updateInputSources );

    		}

    	};

    	function updateInputSources( event ) {

    		const inputSources = session.inputSources;

    		// Assign inputSources to available controllers

    		for ( let i = 0; i < controllers.length; i ++ ) {

    			inputSourcesMap.set( inputSources[ i ], controllers[ i ] );

    		}

    		// Notify disconnected

    		for ( let i = 0; i < event.removed.length; i ++ ) {

    			const inputSource = event.removed[ i ];
    			const controller = inputSourcesMap.get( inputSource );

    			if ( controller ) {

    				controller.dispatchEvent( { type: 'disconnected', data: inputSource } );
    				inputSourcesMap.delete( inputSource );

    			}

    		}

    		// Notify connected

    		for ( let i = 0; i < event.added.length; i ++ ) {

    			const inputSource = event.added[ i ];
    			const controller = inputSourcesMap.get( inputSource );

    			if ( controller ) {

    				controller.dispatchEvent( { type: 'connected', data: inputSource } );

    			}

    		}

    	}

    	//

    	const cameraLPos = new Vector3();
    	const cameraRPos = new Vector3();

    	/**
    	 * Assumes 2 cameras that are parallel and share an X-axis, and that
    	 * the cameras' projection and world matrices have already been set.
    	 * And that near and far planes are identical for both cameras.
    	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
    	 */
    	function setProjectionFromUnion( camera, cameraL, cameraR ) {

    		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
    		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

    		const ipd = cameraLPos.distanceTo( cameraRPos );

    		const projL = cameraL.projectionMatrix.elements;
    		const projR = cameraR.projectionMatrix.elements;

    		// VR systems will have identical far and near planes, and
    		// most likely identical top and bottom frustum extents.
    		// Use the left camera for these values.
    		const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
    		const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
    		const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
    		const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

    		const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
    		const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
    		const left = near * leftFov;
    		const right = near * rightFov;

    		// Calculate the new camera's position offset from the
    		// left camera. xOffset should be roughly half `ipd`.
    		const zOffset = ipd / ( - leftFov + rightFov );
    		const xOffset = zOffset * - leftFov;

    		// TODO: Better way to apply this offset?
    		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
    		camera.translateX( xOffset );
    		camera.translateZ( zOffset );
    		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
    		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

    		// Find the union of the frustum values of the cameras and scale
    		// the values so that the near plane's position does not change in world space,
    		// although must now be relative to the new union camera.
    		const near2 = near + zOffset;
    		const far2 = far + zOffset;
    		const left2 = left - xOffset;
    		const right2 = right + ( ipd - xOffset );
    		const top2 = topFov * far / far2 * near2;
    		const bottom2 = bottomFov * far / far2 * near2;

    		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

    	}

    	function updateCamera( camera, parent ) {

    		if ( parent === null ) {

    			camera.matrixWorld.copy( camera.matrix );

    		} else {

    			camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

    		}

    		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

    	}

    	this.getCamera = function ( camera ) {

    		cameraVR.near = cameraR.near = cameraL.near = camera.near;
    		cameraVR.far = cameraR.far = cameraL.far = camera.far;

    		if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {

    			// Note that the new renderState won't apply until the next frame. See #18320

    			session.updateRenderState( {
    				depthNear: cameraVR.near,
    				depthFar: cameraVR.far
    			} );

    			_currentDepthNear = cameraVR.near;
    			_currentDepthFar = cameraVR.far;

    		}

    		const parent = camera.parent;
    		const cameras = cameraVR.cameras;

    		updateCamera( cameraVR, parent );

    		for ( let i = 0; i < cameras.length; i ++ ) {

    			updateCamera( cameras[ i ], parent );

    		}

    		// update camera and its children

    		camera.matrixWorld.copy( cameraVR.matrixWorld );

    		const children = camera.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].updateMatrixWorld( true );

    		}

    		// update projection matrix for proper view frustum culling

    		if ( cameras.length === 2 ) {

    			setProjectionFromUnion( cameraVR, cameraL, cameraR );

    		} else {

    			// assume single camera setup (AR)

    			cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

    		}

    		return cameraVR;

    	};

    	// Animation Loop

    	let onAnimationFrameCallback = null;

    	function onAnimationFrame( time, frame ) {

    		pose = frame.getViewerPose( referenceSpace );

    		if ( pose !== null ) {

    			const views = pose.views;
    			const baseLayer = session.renderState.baseLayer;

    			renderer.setFramebuffer( baseLayer.framebuffer );

    			let cameraVRNeedsUpdate = false;

    			// check if it's necessary to rebuild cameraVR's camera list

    			if ( views.length !== cameraVR.cameras.length ) {

    				cameraVR.cameras.length = 0;
    				cameraVRNeedsUpdate = true;

    			}

    			for ( let i = 0; i < views.length; i ++ ) {

    				const view = views[ i ];
    				const viewport = baseLayer.getViewport( view );

    				const camera = cameras[ i ];
    				camera.matrix.fromArray( view.transform.matrix );
    				camera.projectionMatrix.fromArray( view.projectionMatrix );
    				camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

    				if ( i === 0 ) {

    					cameraVR.matrix.copy( camera.matrix );

    				}

    				if ( cameraVRNeedsUpdate === true ) {

    					cameraVR.cameras.push( camera );

    				}

    			}

    		}

    		//

    		const inputSources = session.inputSources;

    		for ( let i = 0; i < controllers.length; i ++ ) {

    			const controller = controllers[ i ];
    			const inputSource = inputSources[ i ];

    			controller.update( inputSource, frame, referenceSpace );

    		}

    		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

    	}

    	const animation = new WebGLAnimation();
    	animation.setAnimationLoop( onAnimationFrame );

    	this.setAnimationLoop = function ( callback ) {

    		onAnimationFrameCallback = callback;

    	};

    	this.dispose = function () {};

    }

    Object.assign( WebXRManager.prototype, EventDispatcher.prototype );

    function WebGLMaterials( properties ) {

    	function refreshFogUniforms( uniforms, fog ) {

    		uniforms.fogColor.value.copy( fog.color );

    		if ( fog.isFog ) {

    			uniforms.fogNear.value = fog.near;
    			uniforms.fogFar.value = fog.far;

    		} else if ( fog.isFogExp2 ) {

    			uniforms.fogDensity.value = fog.density;

    		}

    	}

    	function refreshMaterialUniforms( uniforms, material, environment, pixelRatio, height ) {

    		if ( material.isMeshBasicMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshLambertMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsLambert( uniforms, material );

    		} else if ( material.isMeshToonMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsToon( uniforms, material );

    		} else if ( material.isMeshPhongMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsPhong( uniforms, material );

    		} else if ( material.isMeshStandardMaterial ) {

    			refreshUniformsCommon( uniforms, material, environment );

    			if ( material.isMeshPhysicalMaterial ) {

    				refreshUniformsPhysical( uniforms, material, environment );

    			} else {

    				refreshUniformsStandard( uniforms, material, environment );

    			}

    		} else if ( material.isMeshMatcapMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsMatcap( uniforms, material );

    		} else if ( material.isMeshDepthMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsDepth( uniforms, material );

    		} else if ( material.isMeshDistanceMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsDistance( uniforms, material );

    		} else if ( material.isMeshNormalMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsNormal( uniforms, material );

    		} else if ( material.isLineBasicMaterial ) {

    			refreshUniformsLine( uniforms, material );

    			if ( material.isLineDashedMaterial ) {

    				refreshUniformsDash( uniforms, material );

    			}

    		} else if ( material.isPointsMaterial ) {

    			refreshUniformsPoints( uniforms, material, pixelRatio, height );

    		} else if ( material.isSpriteMaterial ) {

    			refreshUniformsSprites( uniforms, material );

    		} else if ( material.isShadowMaterial ) {

    			uniforms.color.value.copy( material.color );
    			uniforms.opacity.value = material.opacity;

    		} else if ( material.isShaderMaterial ) {

    			material.uniformsNeedUpdate = false; // #15581

    		}

    	}

    	function refreshUniformsCommon( uniforms, material, environment ) {

    		uniforms.opacity.value = material.opacity;

    		if ( material.color ) {

    			uniforms.diffuse.value.copy( material.color );

    		}

    		if ( material.emissive ) {

    			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

    		}

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		if ( material.specularMap ) {

    			uniforms.specularMap.value = material.specularMap;

    		}

    		const envMap = material.envMap || environment;

    		if ( envMap ) {

    			uniforms.envMap.value = envMap;

    			uniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;

    			uniforms.reflectivity.value = material.reflectivity;
    			uniforms.refractionRatio.value = material.refractionRatio;

    			var maxMipLevel = properties.get( envMap ).__maxMipLevel;

    			if ( maxMipLevel !== undefined ) {

    				uniforms.maxMipLevel.value = maxMipLevel;

    			}

    		}

    		if ( material.lightMap ) {

    			uniforms.lightMap.value = material.lightMap;
    			uniforms.lightMapIntensity.value = material.lightMapIntensity;

    		}

    		if ( material.aoMap ) {

    			uniforms.aoMap.value = material.aoMap;
    			uniforms.aoMapIntensity.value = material.aoMapIntensity;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. specular map
    		// 3. normal map
    		// 4. bump map
    		// 5. alpha map
    		// 6. emissive map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.specularMap ) {

    			uvScaleMap = material.specularMap;

    		} else if ( material.displacementMap ) {

    			uvScaleMap = material.displacementMap;

    		} else if ( material.normalMap ) {

    			uvScaleMap = material.normalMap;

    		} else if ( material.bumpMap ) {

    			uvScaleMap = material.bumpMap;

    		} else if ( material.roughnessMap ) {

    			uvScaleMap = material.roughnessMap;

    		} else if ( material.metalnessMap ) {

    			uvScaleMap = material.metalnessMap;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		} else if ( material.emissiveMap ) {

    			uvScaleMap = material.emissiveMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			// backwards compatibility
    			if ( uvScaleMap.isWebGLRenderTarget ) {

    				uvScaleMap = uvScaleMap.texture;

    			}

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    		// uv repeat and offset setting priorities for uv2
    		// 1. ao map
    		// 2. light map

    		let uv2ScaleMap;

    		if ( material.aoMap ) {

    			uv2ScaleMap = material.aoMap;

    		} else if ( material.lightMap ) {

    			uv2ScaleMap = material.lightMap;

    		}

    		if ( uv2ScaleMap !== undefined ) {

    			// backwards compatibility
    			if ( uv2ScaleMap.isWebGLRenderTarget ) {

    				uv2ScaleMap = uv2ScaleMap.texture;

    			}

    			if ( uv2ScaleMap.matrixAutoUpdate === true ) {

    				uv2ScaleMap.updateMatrix();

    			}

    			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );

    		}

    	}

    	function refreshUniformsLine( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;

    	}

    	function refreshUniformsDash( uniforms, material ) {

    		uniforms.dashSize.value = material.dashSize;
    		uniforms.totalSize.value = material.dashSize + material.gapSize;
    		uniforms.scale.value = material.scale;

    	}

    	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.size.value = material.size * pixelRatio;
    		uniforms.scale.value = height * 0.5;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. alpha map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    	}

    	function refreshUniformsSprites( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.rotation.value = material.rotation;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. alpha map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    	}

    	function refreshUniformsLambert( uniforms, material ) {

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    		}

    	}

    	function refreshUniformsPhong( uniforms, material ) {

    		uniforms.specular.value.copy( material.specular );
    		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    	}

    	function refreshUniformsToon( uniforms, material ) {

    		if ( material.gradientMap ) {

    			uniforms.gradientMap.value = material.gradientMap;

    		}

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    	}

    	function refreshUniformsStandard( uniforms, material, environment ) {

    		uniforms.roughness.value = material.roughness;
    		uniforms.metalness.value = material.metalness;

    		if ( material.roughnessMap ) {

    			uniforms.roughnessMap.value = material.roughnessMap;

    		}

    		if ( material.metalnessMap ) {

    			uniforms.metalnessMap.value = material.metalnessMap;

    		}

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    		if ( material.envMap || environment ) {

    			//uniforms.envMap.value = material.envMap; // part of uniforms common
    			uniforms.envMapIntensity.value = material.envMapIntensity;

    		}

    	}

    	function refreshUniformsPhysical( uniforms, material, environment ) {

    		refreshUniformsStandard( uniforms, material, environment );

    		uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

    		uniforms.clearcoat.value = material.clearcoat;
    		uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
    		if ( material.sheen ) uniforms.sheen.value.copy( material.sheen );

    		if ( material.clearcoatMap ) {

    			uniforms.clearcoatMap.value = material.clearcoatMap;

    		}

    		if ( material.clearcoatRoughnessMap ) {

    			uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

    		}

    		if ( material.clearcoatNormalMap ) {

    			uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
    			uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

    			if ( material.side === BackSide ) {

    				uniforms.clearcoatNormalScale.value.negate();

    			}

    		}

    		uniforms.transmission.value = material.transmission;

    		if ( material.transmissionMap ) {

    			uniforms.transmissionMap.value = material.transmissionMap;

    		}

    	}

    	function refreshUniformsMatcap( uniforms, material ) {

    		if ( material.matcap ) {

    			uniforms.matcap.value = material.matcap;

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    	}

    	function refreshUniformsDepth( uniforms, material ) {

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    	}

    	function refreshUniformsDistance( uniforms, material ) {

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    		uniforms.referencePosition.value.copy( material.referencePosition );
    		uniforms.nearDistance.value = material.nearDistance;
    		uniforms.farDistance.value = material.farDistance;

    	}

    	function refreshUniformsNormal( uniforms, material ) {

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    	}

    	return {
    		refreshFogUniforms: refreshFogUniforms,
    		refreshMaterialUniforms: refreshMaterialUniforms
    	};

    }

    function WebGLRenderer( parameters ) {

    	parameters = parameters || {};

    	const _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
    		_context = parameters.context !== undefined ? parameters.context : null,

    		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
    		_depth = parameters.depth !== undefined ? parameters.depth : true,
    		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
    		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
    		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
    		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
    		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
    		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

    	let currentRenderList = null;
    	let currentRenderState = null;

    	// public properties

    	this.domElement = _canvas;

    	// Debug configuration container
    	this.debug = {

    		/**
    		 * Enables error checking and reporting when shader programs are being compiled
    		 * @type {boolean}
    		 */
    		checkShaderErrors: true
    	};

    	// clearing

    	this.autoClear = true;
    	this.autoClearColor = true;
    	this.autoClearDepth = true;
    	this.autoClearStencil = true;

    	// scene graph

    	this.sortObjects = true;

    	// user-defined clipping

    	this.clippingPlanes = [];
    	this.localClippingEnabled = false;

    	// physically based shading

    	this.gammaFactor = 2.0;	// for backwards compatibility
    	this.outputEncoding = LinearEncoding;

    	// physical lights

    	this.physicallyCorrectLights = false;

    	// tone mapping

    	this.toneMapping = NoToneMapping;
    	this.toneMappingExposure = 1.0;

    	// morphs

    	this.maxMorphTargets = 8;
    	this.maxMorphNormals = 4;

    	// internal properties

    	const _this = this;

    	let _isContextLost = false;

    	// internal state cache

    	let _framebuffer = null;

    	let _currentActiveCubeFace = 0;
    	let _currentActiveMipmapLevel = 0;
    	let _currentRenderTarget = null;
    	let _currentFramebuffer = null;
    	let _currentMaterialId = - 1;

    	let _currentCamera = null;
    	let _currentArrayCamera = null;

    	const _currentViewport = new Vector4();
    	const _currentScissor = new Vector4();
    	let _currentScissorTest = null;

    	//

    	let _width = _canvas.width;
    	let _height = _canvas.height;

    	let _pixelRatio = 1;
    	let _opaqueSort = null;
    	let _transparentSort = null;

    	const _viewport = new Vector4( 0, 0, _width, _height );
    	const _scissor = new Vector4( 0, 0, _width, _height );
    	let _scissorTest = false;

    	// frustum

    	const _frustum = new Frustum();

    	// clipping

    	const _clipping = new WebGLClipping();
    	let _clippingEnabled = false;
    	let _localClippingEnabled = false;

    	// camera matrices cache

    	const _projScreenMatrix = new Matrix4();

    	const _vector3 = new Vector3();

    	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

    	function getTargetPixelRatio() {

    		return _currentRenderTarget === null ? _pixelRatio : 1;

    	}

    	// initialize

    	let _gl = _context;

    	function getContext( contextNames, contextAttributes ) {

    		for ( let i = 0; i < contextNames.length; i ++ ) {

    			const contextName = contextNames[ i ];
    			const context = _canvas.getContext( contextName, contextAttributes );
    			if ( context !== null ) return context;

    		}

    		return null;

    	}

    	try {

    		const contextAttributes = {
    			alpha: _alpha,
    			depth: _depth,
    			stencil: _stencil,
    			antialias: _antialias,
    			premultipliedAlpha: _premultipliedAlpha,
    			preserveDrawingBuffer: _preserveDrawingBuffer,
    			powerPreference: _powerPreference,
    			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
    		};

    		// event listeners must be registered before WebGL context is created, see #12753

    		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
    		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

    		if ( _gl === null ) {

    			const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

    			if ( _this.isWebGL1Renderer === true ) {

    				contextNames.shift();

    			}

    			_gl = getContext( contextNames, contextAttributes );

    			if ( _gl === null ) {

    				if ( getContext( contextNames ) ) {

    					throw new Error( 'Error creating WebGL context with your selected attributes.' );

    				} else {

    					throw new Error( 'Error creating WebGL context.' );

    				}

    			}

    		}

    		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

    		if ( _gl.getShaderPrecisionFormat === undefined ) {

    			_gl.getShaderPrecisionFormat = function () {

    				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

    			};

    		}

    	} catch ( error ) {

    		console.error( 'THREE.WebGLRenderer: ' + error.message );
    		throw error;

    	}

    	let extensions, capabilities, state, info;
    	let properties, textures, attributes, geometries, objects;
    	let programCache, materials, renderLists, renderStates;

    	let background, morphtargets, bufferRenderer, indexedBufferRenderer;

    	let utils, bindingStates;

    	function initGLContext() {

    		extensions = new WebGLExtensions( _gl );

    		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

    		if ( capabilities.isWebGL2 === false ) {

    			extensions.get( 'WEBGL_depth_texture' );
    			extensions.get( 'OES_texture_float' );
    			extensions.get( 'OES_texture_half_float' );
    			extensions.get( 'OES_texture_half_float_linear' );
    			extensions.get( 'OES_standard_derivatives' );
    			extensions.get( 'OES_element_index_uint' );
    			extensions.get( 'OES_vertex_array_object' );
    			extensions.get( 'ANGLE_instanced_arrays' );

    		}

    		extensions.get( 'OES_texture_float_linear' );

    		utils = new WebGLUtils( _gl, extensions, capabilities );

    		state = new WebGLState( _gl, extensions, capabilities );
    		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
    		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

    		info = new WebGLInfo( _gl );
    		properties = new WebGLProperties();
    		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
    		attributes = new WebGLAttributes( _gl, capabilities );
    		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
    		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
    		objects = new WebGLObjects( _gl, geometries, attributes, info );
    		morphtargets = new WebGLMorphtargets( _gl );
    		programCache = new WebGLPrograms( _this, extensions, capabilities, bindingStates );
    		materials = new WebGLMaterials( properties );
    		renderLists = new WebGLRenderLists( properties );
    		renderStates = new WebGLRenderStates();

    		background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

    		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
    		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

    		info.programs = programCache.programs;

    		_this.capabilities = capabilities;
    		_this.extensions = extensions;
    		_this.properties = properties;
    		_this.renderLists = renderLists;
    		_this.state = state;
    		_this.info = info;

    	}

    	initGLContext();

    	// xr

    	const xr = new WebXRManager( _this, _gl );

    	this.xr = xr;

    	// shadow map

    	const shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

    	this.shadowMap = shadowMap;

    	// API

    	this.getContext = function () {

    		return _gl;

    	};

    	this.getContextAttributes = function () {

    		return _gl.getContextAttributes();

    	};

    	this.forceContextLoss = function () {

    		const extension = extensions.get( 'WEBGL_lose_context' );
    		if ( extension ) extension.loseContext();

    	};

    	this.forceContextRestore = function () {

    		const extension = extensions.get( 'WEBGL_lose_context' );
    		if ( extension ) extension.restoreContext();

    	};

    	this.getPixelRatio = function () {

    		return _pixelRatio;

    	};

    	this.setPixelRatio = function ( value ) {

    		if ( value === undefined ) return;

    		_pixelRatio = value;

    		this.setSize( _width, _height, false );

    	};

    	this.getSize = function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

    			target = new Vector2();

    		}

    		return target.set( _width, _height );

    	};

    	this.setSize = function ( width, height, updateStyle ) {

    		if ( xr.isPresenting ) {

    			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
    			return;

    		}

    		_width = width;
    		_height = height;

    		_canvas.width = Math.floor( width * _pixelRatio );
    		_canvas.height = Math.floor( height * _pixelRatio );

    		if ( updateStyle !== false ) {

    			_canvas.style.width = width + 'px';
    			_canvas.style.height = height + 'px';

    		}

    		this.setViewport( 0, 0, width, height );

    	};

    	this.getDrawingBufferSize = function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

    			target = new Vector2();

    		}

    		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

    	};

    	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

    		_width = width;
    		_height = height;

    		_pixelRatio = pixelRatio;

    		_canvas.width = Math.floor( width * pixelRatio );
    		_canvas.height = Math.floor( height * pixelRatio );

    		this.setViewport( 0, 0, width, height );

    	};

    	this.getCurrentViewport = function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

    			target = new Vector4();

    		}

    		return target.copy( _currentViewport );

    	};

    	this.getViewport = function ( target ) {

    		return target.copy( _viewport );

    	};

    	this.setViewport = function ( x, y, width, height ) {

    		if ( x.isVector4 ) {

    			_viewport.set( x.x, x.y, x.z, x.w );

    		} else {

    			_viewport.set( x, y, width, height );

    		}

    		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

    	};

    	this.getScissor = function ( target ) {

    		return target.copy( _scissor );

    	};

    	this.setScissor = function ( x, y, width, height ) {

    		if ( x.isVector4 ) {

    			_scissor.set( x.x, x.y, x.z, x.w );

    		} else {

    			_scissor.set( x, y, width, height );

    		}

    		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

    	};

    	this.getScissorTest = function () {

    		return _scissorTest;

    	};

    	this.setScissorTest = function ( boolean ) {

    		state.setScissorTest( _scissorTest = boolean );

    	};

    	this.setOpaqueSort = function ( method ) {

    		_opaqueSort = method;

    	};

    	this.setTransparentSort = function ( method ) {

    		_transparentSort = method;

    	};

    	// Clearing

    	this.getClearColor = function () {

    		return background.getClearColor();

    	};

    	this.setClearColor = function () {

    		background.setClearColor.apply( background, arguments );

    	};

    	this.getClearAlpha = function () {

    		return background.getClearAlpha();

    	};

    	this.setClearAlpha = function () {

    		background.setClearAlpha.apply( background, arguments );

    	};

    	this.clear = function ( color, depth, stencil ) {

    		let bits = 0;

    		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
    		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
    		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

    		_gl.clear( bits );

    	};

    	this.clearColor = function () {

    		this.clear( true, false, false );

    	};

    	this.clearDepth = function () {

    		this.clear( false, true, false );

    	};

    	this.clearStencil = function () {

    		this.clear( false, false, true );

    	};

    	//

    	this.dispose = function () {

    		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
    		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

    		renderLists.dispose();
    		renderStates.dispose();
    		properties.dispose();
    		objects.dispose();
    		bindingStates.dispose();

    		xr.dispose();

    		animation.stop();

    	};

    	// Events

    	function onContextLost( event ) {

    		event.preventDefault();

    		console.log( 'THREE.WebGLRenderer: Context Lost.' );

    		_isContextLost = true;

    	}

    	function onContextRestore( /* event */ ) {

    		console.log( 'THREE.WebGLRenderer: Context Restored.' );

    		_isContextLost = false;

    		initGLContext();

    	}

    	function onMaterialDispose( event ) {

    		const material = event.target;

    		material.removeEventListener( 'dispose', onMaterialDispose );

    		deallocateMaterial( material );

    	}

    	// Buffer deallocation

    	function deallocateMaterial( material ) {

    		releaseMaterialProgramReference( material );

    		properties.remove( material );

    	}


    	function releaseMaterialProgramReference( material ) {

    		const programInfo = properties.get( material ).program;

    		if ( programInfo !== undefined ) {

    			programCache.releaseProgram( programInfo );

    		}

    	}

    	// Buffer rendering

    	function renderObjectImmediate( object, program ) {

    		object.render( function ( object ) {

    			_this.renderBufferImmediate( object, program );

    		} );

    	}

    	this.renderBufferImmediate = function ( object, program ) {

    		bindingStates.initAttributes();

    		const buffers = properties.get( object );

    		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
    		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
    		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
    		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

    		const programAttributes = program.getAttributes();

    		if ( object.hasPositions ) {

    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
    			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

    			bindingStates.enableAttribute( programAttributes.position );
    			_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

    		}

    		if ( object.hasNormals ) {

    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );
    			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

    			bindingStates.enableAttribute( programAttributes.normal );
    			_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

    		}

    		if ( object.hasUvs ) {

    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
    			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

    			bindingStates.enableAttribute( programAttributes.uv );
    			_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

    		}

    		if ( object.hasColors ) {

    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
    			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

    			bindingStates.enableAttribute( programAttributes.color );
    			_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

    		}

    		bindingStates.disableUnusedAttributes();

    		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

    		object.count = 0;

    	};

    	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

    		if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

    		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

    		const program = setProgram( camera, scene, material, object );

    		state.setMaterial( material, frontFaceCW );

    		//

    		let index = geometry.index;
    		const position = geometry.attributes.position;

    		//

    		if ( index === null ) {

    			if ( position === undefined || position.count === 0 ) return;

    		} else if ( index.count === 0 ) {

    			return;

    		}

    		//

    		let rangeFactor = 1;

    		if ( material.wireframe === true ) {

    			index = geometries.getWireframeAttribute( geometry );
    			rangeFactor = 2;

    		}

    		if ( material.morphTargets || material.morphNormals ) {

    			morphtargets.update( object, geometry, material, program );

    		}

    		bindingStates.setup( object, material, program, geometry, index );

    		let attribute;
    		let renderer = bufferRenderer;

    		if ( index !== null ) {

    			attribute = attributes.get( index );

    			renderer = indexedBufferRenderer;
    			renderer.setIndex( attribute );

    		}

    		//

    		const dataCount = ( index !== null ) ? index.count : position.count;

    		const rangeStart = geometry.drawRange.start * rangeFactor;
    		const rangeCount = geometry.drawRange.count * rangeFactor;

    		const groupStart = group !== null ? group.start * rangeFactor : 0;
    		const groupCount = group !== null ? group.count * rangeFactor : Infinity;

    		const drawStart = Math.max( rangeStart, groupStart );
    		const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

    		const drawCount = Math.max( 0, drawEnd - drawStart + 1 );

    		if ( drawCount === 0 ) return;

    		//

    		if ( object.isMesh ) {

    			if ( material.wireframe === true ) {

    				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
    				renderer.setMode( _gl.LINES );

    			} else {

    				renderer.setMode( _gl.TRIANGLES );

    			}

    		} else if ( object.isLine ) {

    			let lineWidth = material.linewidth;

    			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

    			state.setLineWidth( lineWidth * getTargetPixelRatio() );

    			if ( object.isLineSegments ) {

    				renderer.setMode( _gl.LINES );

    			} else if ( object.isLineLoop ) {

    				renderer.setMode( _gl.LINE_LOOP );

    			} else {

    				renderer.setMode( _gl.LINE_STRIP );

    			}

    		} else if ( object.isPoints ) {

    			renderer.setMode( _gl.POINTS );

    		} else if ( object.isSprite ) {

    			renderer.setMode( _gl.TRIANGLES );

    		}

    		if ( object.isInstancedMesh ) {

    			renderer.renderInstances( drawStart, drawCount, object.count );

    		} else if ( geometry.isInstancedBufferGeometry ) {

    			const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );

    			renderer.renderInstances( drawStart, drawCount, instanceCount );

    		} else {

    			renderer.render( drawStart, drawCount );

    		}

    	};

    	// Compile

    	this.compile = function ( scene, camera ) {

    		currentRenderState = renderStates.get( scene, camera );
    		currentRenderState.init();

    		scene.traverse( function ( object ) {

    			if ( object.isLight ) {

    				currentRenderState.pushLight( object );

    				if ( object.castShadow ) {

    					currentRenderState.pushShadow( object );

    				}

    			}

    		} );

    		currentRenderState.setupLights( camera );

    		const compiled = new WeakMap();

    		scene.traverse( function ( object ) {

    			let material = object.material;

    			if ( material ) {

    				if ( Array.isArray( material ) ) {

    					for ( let i = 0; i < material.length; i ++ ) {

    						let material2 = material[ i ];

    						if ( compiled.has( material2 ) === false ) {

    							initMaterial( material2, scene, object );
    							compiled.set( material2 );

    						}

    					}

    				} else if ( compiled.has( material ) === false ) {

    					initMaterial( material, scene, object );
    					compiled.set( material );

    				}

    			}

    		} );

    	};

    	// Animation Loop

    	let onAnimationFrameCallback = null;

    	function onAnimationFrame( time ) {

    		if ( xr.isPresenting ) return;
    		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

    	}

    	const animation = new WebGLAnimation();
    	animation.setAnimationLoop( onAnimationFrame );

    	if ( typeof window !== 'undefined' ) animation.setContext( window );

    	this.setAnimationLoop = function ( callback ) {

    		onAnimationFrameCallback = callback;
    		xr.setAnimationLoop( callback );

    		( callback === null ) ? animation.stop() : animation.start();

    	};

    	// Rendering

    	this.render = function ( scene, camera ) {

    		let renderTarget, forceClear;

    		if ( arguments[ 2 ] !== undefined ) {

    			console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
    			renderTarget = arguments[ 2 ];

    		}

    		if ( arguments[ 3 ] !== undefined ) {

    			console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
    			forceClear = arguments[ 3 ];

    		}

    		if ( camera !== undefined && camera.isCamera !== true ) {

    			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
    			return;

    		}

    		if ( _isContextLost === true ) return;

    		// reset caching for this frame

    		bindingStates.resetDefaultState();
    		_currentMaterialId = - 1;
    		_currentCamera = null;

    		// update scene graph

    		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

    		// update camera matrices and frustum

    		if ( camera.parent === null ) camera.updateMatrixWorld();

    		if ( xr.enabled === true && xr.isPresenting === true ) {

    			camera = xr.getCamera( camera );

    		}

    		//
    		if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );

    		currentRenderState = renderStates.get( scene, camera );
    		currentRenderState.init();

    		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    		_frustum.setFromProjectionMatrix( _projScreenMatrix );

    		_localClippingEnabled = this.localClippingEnabled;
    		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

    		currentRenderList = renderLists.get( scene, camera );
    		currentRenderList.init();

    		projectObject( scene, camera, 0, _this.sortObjects );

    		currentRenderList.finish();

    		if ( _this.sortObjects === true ) {

    			currentRenderList.sort( _opaqueSort, _transparentSort );

    		}

    		//

    		if ( _clippingEnabled === true ) _clipping.beginShadows();

    		const shadowsArray = currentRenderState.state.shadowsArray;

    		shadowMap.render( shadowsArray, scene, camera );

    		currentRenderState.setupLights( camera );

    		if ( _clippingEnabled === true ) _clipping.endShadows();

    		//

    		if ( this.info.autoReset === true ) this.info.reset();

    		if ( renderTarget !== undefined ) {

    			this.setRenderTarget( renderTarget );

    		}

    		//

    		background.render( currentRenderList, scene, camera, forceClear );

    		// render scene

    		const opaqueObjects = currentRenderList.opaque;
    		const transparentObjects = currentRenderList.transparent;

    		if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
    		if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

    		//

    		if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

    		//

    		if ( _currentRenderTarget !== null ) {

    			// Generate mipmap if we're using any kind of mipmap filtering

    			textures.updateRenderTargetMipmap( _currentRenderTarget );

    			// resolve multisample renderbuffers to a single-sample texture if necessary

    			textures.updateMultisampleRenderTarget( _currentRenderTarget );

    		}

    		// Ensure depth buffer writing is enabled so it can be cleared on next render

    		state.buffers.depth.setTest( true );
    		state.buffers.depth.setMask( true );
    		state.buffers.color.setMask( true );

    		state.setPolygonOffset( false );

    		// _gl.finish();

    		currentRenderList = null;
    		currentRenderState = null;

    	};

    	function projectObject( object, camera, groupOrder, sortObjects ) {

    		if ( object.visible === false ) return;

    		const visible = object.layers.test( camera.layers );

    		if ( visible ) {

    			if ( object.isGroup ) {

    				groupOrder = object.renderOrder;

    			} else if ( object.isLOD ) {

    				if ( object.autoUpdate === true ) object.update( camera );

    			} else if ( object.isLight ) {

    				currentRenderState.pushLight( object );

    				if ( object.castShadow ) {

    					currentRenderState.pushShadow( object );

    				}

    			} else if ( object.isSprite ) {

    				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

    					if ( sortObjects ) {

    						_vector3.setFromMatrixPosition( object.matrixWorld )
    							.applyMatrix4( _projScreenMatrix );

    					}

    					const geometry = objects.update( object );
    					const material = object.material;

    					if ( material.visible ) {

    						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

    					}

    				}

    			} else if ( object.isImmediateRenderObject ) {

    				if ( sortObjects ) {

    					_vector3.setFromMatrixPosition( object.matrixWorld )
    						.applyMatrix4( _projScreenMatrix );

    				}

    				currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

    			} else if ( object.isMesh || object.isLine || object.isPoints ) {

    				if ( object.isSkinnedMesh ) {

    					// update skeleton only once in a frame

    					if ( object.skeleton.frame !== info.render.frame ) {

    						object.skeleton.update();
    						object.skeleton.frame = info.render.frame;

    					}

    				}

    				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

    					if ( sortObjects ) {

    						_vector3.setFromMatrixPosition( object.matrixWorld )
    							.applyMatrix4( _projScreenMatrix );

    					}

    					const geometry = objects.update( object );
    					const material = object.material;

    					if ( Array.isArray( material ) ) {

    						const groups = geometry.groups;

    						for ( let i = 0, l = groups.length; i < l; i ++ ) {

    							const group = groups[ i ];
    							const groupMaterial = material[ group.materialIndex ];

    							if ( groupMaterial && groupMaterial.visible ) {

    								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

    							}

    						}

    					} else if ( material.visible ) {

    						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

    					}

    				}

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			projectObject( children[ i ], camera, groupOrder, sortObjects );

    		}

    	}

    	function renderObjects( renderList, scene, camera ) {

    		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

    		for ( let i = 0, l = renderList.length; i < l; i ++ ) {

    			const renderItem = renderList[ i ];

    			const object = renderItem.object;
    			const geometry = renderItem.geometry;
    			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
    			const group = renderItem.group;

    			if ( camera.isArrayCamera ) {

    				_currentArrayCamera = camera;

    				const cameras = camera.cameras;

    				for ( let j = 0, jl = cameras.length; j < jl; j ++ ) {

    					const camera2 = cameras[ j ];

    					if ( object.layers.test( camera2.layers ) ) {

    						state.viewport( _currentViewport.copy( camera2.viewport ) );

    						currentRenderState.setupLights( camera2 );

    						renderObject( object, scene, camera2, geometry, material, group );

    					}

    				}

    			} else {

    				_currentArrayCamera = null;

    				renderObject( object, scene, camera, geometry, material, group );

    			}

    		}

    	}

    	function renderObject( object, scene, camera, geometry, material, group ) {

    		object.onBeforeRender( _this, scene, camera, geometry, material, group );
    		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

    		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
    		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

    		if ( object.isImmediateRenderObject ) {

    			const program = setProgram( camera, scene, material, object );

    			state.setMaterial( material );

    			bindingStates.reset();

    			renderObjectImmediate( object, program );

    		} else {

    			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    		}

    		object.onAfterRender( _this, scene, camera, geometry, material, group );
    		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

    	}

    	function initMaterial( material, scene, object ) {

    		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    		const materialProperties = properties.get( material );

    		const lights = currentRenderState.state.lights;
    		const shadowsArray = currentRenderState.state.shadowsArray;

    		const lightsStateVersion = lights.state.version;

    		const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );
    		const programCacheKey = programCache.getProgramCacheKey( parameters );

    		let program = materialProperties.program;
    		let programChange = true;

    		if ( program === undefined ) {

    			// new material
    			material.addEventListener( 'dispose', onMaterialDispose );

    		} else if ( program.cacheKey !== programCacheKey ) {

    			// changed glsl or parameters
    			releaseMaterialProgramReference( material );

    		} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {

    			materialProperties.lightsStateVersion = lightsStateVersion;

    			programChange = false;

    		} else if ( parameters.shaderID !== undefined ) {

    			// same glsl and uniform list
    			return;

    		} else {

    			// only rebuild uniform list
    			programChange = false;

    		}

    		if ( programChange ) {

    			parameters.uniforms = programCache.getUniforms( material, parameters );

    			material.onBeforeCompile( parameters, _this );

    			program = programCache.acquireProgram( parameters, programCacheKey );

    			materialProperties.program = program;
    			materialProperties.uniforms = parameters.uniforms;
    			materialProperties.outputEncoding = parameters.outputEncoding;

    		}

    		const programAttributes = program.getAttributes();

    		if ( material.morphTargets ) {

    			material.numSupportedMorphTargets = 0;

    			for ( let i = 0; i < _this.maxMorphTargets; i ++ ) {

    				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

    					material.numSupportedMorphTargets ++;

    				}

    			}

    		}

    		if ( material.morphNormals ) {

    			material.numSupportedMorphNormals = 0;

    			for ( let i = 0; i < _this.maxMorphNormals; i ++ ) {

    				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

    					material.numSupportedMorphNormals ++;

    				}

    			}

    		}

    		const uniforms = materialProperties.uniforms;

    		if ( ! material.isShaderMaterial &&
    			! material.isRawShaderMaterial ||
    			material.clipping === true ) {

    			materialProperties.numClippingPlanes = _clipping.numPlanes;
    			materialProperties.numIntersection = _clipping.numIntersection;
    			uniforms.clippingPlanes = _clipping.uniform;

    		}

    		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    		materialProperties.fog = scene.fog;

    		// store the light setup it was created for

    		materialProperties.needsLights = materialNeedsLights( material );
    		materialProperties.lightsStateVersion = lightsStateVersion;

    		if ( materialProperties.needsLights ) {

    			// wire up the material to this renderer's lighting state

    			uniforms.ambientLightColor.value = lights.state.ambient;
    			uniforms.lightProbe.value = lights.state.probe;
    			uniforms.directionalLights.value = lights.state.directional;
    			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
    			uniforms.spotLights.value = lights.state.spot;
    			uniforms.spotLightShadows.value = lights.state.spotShadow;
    			uniforms.rectAreaLights.value = lights.state.rectArea;
    			uniforms.pointLights.value = lights.state.point;
    			uniforms.pointLightShadows.value = lights.state.pointShadow;
    			uniforms.hemisphereLights.value = lights.state.hemi;

    			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
    			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
    			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
    			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
    			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
    			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
    			// TODO (abelnation): add area lights shadow info to uniforms

    		}

    		const progUniforms = materialProperties.program.getUniforms(),
    			uniformsList =
    				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

    		materialProperties.uniformsList = uniformsList;

    	}

    	function setProgram( camera, scene, material, object ) {

    		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    		textures.resetTextureUnits();

    		const fog = scene.fog;
    		const environment = material.isMeshStandardMaterial ? scene.environment : null;
    		const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;

    		const materialProperties = properties.get( material );
    		const lights = currentRenderState.state.lights;

    		if ( _clippingEnabled === true ) {

    			if ( _localClippingEnabled === true || camera !== _currentCamera ) {

    				const useCache =
    					camera === _currentCamera &&
    					material.id === _currentMaterialId;

    				// we might want to call this function with some ClippingGroup
    				// object instead of the material, once it becomes feasible
    				// (#8465, #8379)
    				_clipping.setState(
    					material.clippingPlanes, material.clipIntersection, material.clipShadows,
    					camera, materialProperties, useCache );

    			}

    		}

    		if ( material.version === materialProperties.__version ) {

    			if ( materialProperties.program === undefined ) {

    				initMaterial( material, scene, object );

    			} else if ( material.fog && materialProperties.fog !== fog ) {

    				initMaterial( material, scene, object );

    			} else if ( materialProperties.environment !== environment ) {

    				initMaterial( material, scene, object );

    			} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

    				initMaterial( material, scene, object );

    			} else if ( materialProperties.numClippingPlanes !== undefined &&
    				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
    				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

    				initMaterial( material, scene, object );

    			} else if ( materialProperties.outputEncoding !== encoding ) {

    				initMaterial( material, scene, object );

    			}

    		} else {

    			initMaterial( material, scene, object );
    			materialProperties.__version = material.version;

    		}

    		let refreshProgram = false;
    		let refreshMaterial = false;
    		let refreshLights = false;

    		const program = materialProperties.program,
    			p_uniforms = program.getUniforms(),
    			m_uniforms = materialProperties.uniforms;

    		if ( state.useProgram( program.program ) ) {

    			refreshProgram = true;
    			refreshMaterial = true;
    			refreshLights = true;

    		}

    		if ( material.id !== _currentMaterialId ) {

    			_currentMaterialId = material.id;

    			refreshMaterial = true;

    		}

    		if ( refreshProgram || _currentCamera !== camera ) {

    			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

    			if ( capabilities.logarithmicDepthBuffer ) {

    				p_uniforms.setValue( _gl, 'logDepthBufFC',
    					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

    			}

    			if ( _currentCamera !== camera ) {

    				_currentCamera = camera;

    				// lighting uniforms depend on the camera so enforce an update
    				// now, in case this material supports lights - or later, when
    				// the next material that does gets activated:

    				refreshMaterial = true;		// set to true on material change
    				refreshLights = true;		// remains set until update done

    			}

    			// load material specific uniforms
    			// (shader material also gets them for the sake of genericity)

    			if ( material.isShaderMaterial ||
    				material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshStandardMaterial ||
    				material.envMap ) {

    				const uCamPos = p_uniforms.map.cameraPosition;

    				if ( uCamPos !== undefined ) {

    					uCamPos.setValue( _gl,
    						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

    				}

    			}

    			if ( material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshLambertMaterial ||
    				material.isMeshBasicMaterial ||
    				material.isMeshStandardMaterial ||
    				material.isShaderMaterial ) {

    				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

    			}

    			if ( material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshLambertMaterial ||
    				material.isMeshBasicMaterial ||
    				material.isMeshStandardMaterial ||
    				material.isShaderMaterial ||
    				material.isShadowMaterial ||
    				material.skinning ) {

    				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

    			}

    		}

    		// skinning uniforms must be set even if material didn't change
    		// auto-setting of texture unit for bone texture must go before other textures
    		// otherwise textures used for skinning can take over texture units reserved for other material textures

    		if ( material.skinning ) {

    			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
    			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

    			const skeleton = object.skeleton;

    			if ( skeleton ) {

    				const bones = skeleton.bones;

    				if ( capabilities.floatVertexTextures ) {

    					if ( skeleton.boneTexture === undefined ) {

    						// layout (1 matrix = 4 pixels)
    						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
    						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
    						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
    						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
    						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


    						let size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
    						size = MathUtils.ceilPowerOfTwo( size );
    						size = Math.max( size, 4 );

    						const boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
    						boneMatrices.set( skeleton.boneMatrices ); // copy current values

    						const boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

    						skeleton.boneMatrices = boneMatrices;
    						skeleton.boneTexture = boneTexture;
    						skeleton.boneTextureSize = size;

    					}

    					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
    					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

    				} else {

    					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

    				}

    			}

    		}

    		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

    			materialProperties.receiveShadow = object.receiveShadow;
    			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

    		}

    		if ( refreshMaterial ) {

    			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

    			if ( materialProperties.needsLights ) {

    				// the current material requires lighting info

    				// note: all lighting uniforms are always set correctly
    				// they simply reference the renderer's state for their
    				// values
    				//
    				// use the current material's .needsUpdate flags to set
    				// the GL state when required

    				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

    			}

    			// refresh uniforms common to several materials

    			if ( fog && material.fog ) {

    				materials.refreshFogUniforms( m_uniforms, fog );

    			}

    			materials.refreshMaterialUniforms( m_uniforms, material, environment, _pixelRatio, _height );

    			// RectAreaLight Texture
    			// TODO (mrdoob): Find a nicer implementation

    			if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
    			if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;

    			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

    		}

    		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

    			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
    			material.uniformsNeedUpdate = false;

    		}

    		if ( material.isSpriteMaterial ) {

    			p_uniforms.setValue( _gl, 'center', object.center );

    		}

    		// common matrices

    		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
    		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
    		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

    		return program;

    	}

    	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

    	function markUniformsLightsNeedsUpdate( uniforms, value ) {

    		uniforms.ambientLightColor.needsUpdate = value;
    		uniforms.lightProbe.needsUpdate = value;

    		uniforms.directionalLights.needsUpdate = value;
    		uniforms.directionalLightShadows.needsUpdate = value;
    		uniforms.pointLights.needsUpdate = value;
    		uniforms.pointLightShadows.needsUpdate = value;
    		uniforms.spotLights.needsUpdate = value;
    		uniforms.spotLightShadows.needsUpdate = value;
    		uniforms.rectAreaLights.needsUpdate = value;
    		uniforms.hemisphereLights.needsUpdate = value;

    	}

    	function materialNeedsLights( material ) {

    		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
    			material.isMeshStandardMaterial || material.isShadowMaterial ||
    			( material.isShaderMaterial && material.lights === true );

    	}

    	//
    	this.setFramebuffer = function ( value ) {

    		if ( _framebuffer !== value && _currentRenderTarget === null ) _gl.bindFramebuffer( _gl.FRAMEBUFFER, value );

    		_framebuffer = value;

    	};

    	this.getActiveCubeFace = function () {

    		return _currentActiveCubeFace;

    	};

    	this.getActiveMipmapLevel = function () {

    		return _currentActiveMipmapLevel;

    	};

    	this.getRenderTarget = function () {

    		return _currentRenderTarget;

    	};

    	this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {

    		_currentRenderTarget = renderTarget;
    		_currentActiveCubeFace = activeCubeFace;
    		_currentActiveMipmapLevel = activeMipmapLevel;

    		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

    			textures.setupRenderTarget( renderTarget );

    		}

    		let framebuffer = _framebuffer;
    		let isCube = false;

    		if ( renderTarget ) {

    			const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

    			if ( renderTarget.isWebGLCubeRenderTarget ) {

    				framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
    				isCube = true;

    			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

    				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

    			} else {

    				framebuffer = __webglFramebuffer;

    			}

    			_currentViewport.copy( renderTarget.viewport );
    			_currentScissor.copy( renderTarget.scissor );
    			_currentScissorTest = renderTarget.scissorTest;

    		} else {

    			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
    			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
    			_currentScissorTest = _scissorTest;

    		}

    		if ( _currentFramebuffer !== framebuffer ) {

    			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
    			_currentFramebuffer = framebuffer;

    		}

    		state.viewport( _currentViewport );
    		state.scissor( _currentScissor );
    		state.setScissorTest( _currentScissorTest );

    		if ( isCube ) {

    			const textureProperties = properties.get( renderTarget.texture );
    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );

    		}

    	};

    	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

    		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

    			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
    			return;

    		}

    		let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

    		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

    			framebuffer = framebuffer[ activeCubeFaceIndex ];

    		}

    		if ( framebuffer ) {

    			let restore = false;

    			if ( framebuffer !== _currentFramebuffer ) {

    				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    				restore = true;

    			}

    			try {

    				const texture = renderTarget.texture;
    				const textureFormat = texture.format;
    				const textureType = texture.type;

    				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
    					return;

    				}

    				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
    					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
    					! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
    					return;

    				}

    				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

    					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

    					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

    						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

    					}

    				} else {

    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

    				}

    			} finally {

    				if ( restore ) {

    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

    				}

    			}

    		}

    	};

    	this.copyFramebufferToTexture = function ( position, texture, level ) {

    		if ( level === undefined ) level = 0;

    		const levelScale = Math.pow( 2, - level );
    		const width = Math.floor( texture.image.width * levelScale );
    		const height = Math.floor( texture.image.height * levelScale );
    		const glFormat = utils.convert( texture.format );

    		textures.setTexture2D( texture, 0 );

    		_gl.copyTexImage2D( _gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0 );

    		state.unbindTexture();

    	};

    	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

    		if ( level === undefined ) level = 0;

    		const width = srcTexture.image.width;
    		const height = srcTexture.image.height;
    		const glFormat = utils.convert( dstTexture.format );
    		const glType = utils.convert( dstTexture.type );

    		textures.setTexture2D( dstTexture, 0 );

    		// As another texture upload may have changed pixelStorei
    		// parameters, make sure they are correct for the dstTexture
    		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
    		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
    		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

    		if ( srcTexture.isDataTexture ) {

    			_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

    		} else {

    			if ( srcTexture.isCompressedTexture ) {

    				_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

    			} else {

    				_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );

    			}

    		}

    		// Generate mipmaps only when copying level 0
    		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );

    		state.unbindTexture();

    	};

    	this.initTexture = function ( texture ) {

    		textures.setTexture2D( texture, 0 );

    		state.unbindTexture();

    	};

    	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

    	}

    }

    function WebGL1Renderer( parameters ) {

    	WebGLRenderer.call( this, parameters );

    }

    WebGL1Renderer.prototype = Object.assign( Object.create( WebGLRenderer.prototype ), {

    	constructor: WebGL1Renderer,

    	isWebGL1Renderer: true

    } );

    function FogExp2( color, density ) {

    	this.name = '';

    	this.color = new Color( color );
    	this.density = ( density !== undefined ) ? density : 0.00025;

    }

    Object.assign( FogExp2.prototype, {

    	isFogExp2: true,

    	clone: function () {

    		return new FogExp2( this.color, this.density );

    	},

    	toJSON: function ( /* meta */ ) {

    		return {
    			type: 'FogExp2',
    			color: this.color.getHex(),
    			density: this.density
    		};

    	}

    } );

    function Fog( color, near, far ) {

    	this.name = '';

    	this.color = new Color( color );

    	this.near = ( near !== undefined ) ? near : 1;
    	this.far = ( far !== undefined ) ? far : 1000;

    }

    Object.assign( Fog.prototype, {

    	isFog: true,

    	clone: function () {

    		return new Fog( this.color, this.near, this.far );

    	},

    	toJSON: function ( /* meta */ ) {

    		return {
    			type: 'Fog',
    			color: this.color.getHex(),
    			near: this.near,
    			far: this.far
    		};

    	}

    } );

    function InterleavedBuffer( array, stride ) {

    	this.array = array;
    	this.stride = stride;
    	this.count = array !== undefined ? array.length / stride : 0;

    	this.usage = StaticDrawUsage;
    	this.updateRange = { offset: 0, count: - 1 };

    	this.version = 0;

    	this.uuid = MathUtils.generateUUID();

    }

    Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

    	set: function ( value ) {

    		if ( value === true ) this.version ++;

    	}

    } );

    Object.assign( InterleavedBuffer.prototype, {

    	isInterleavedBuffer: true,

    	onUploadCallback: function () {},

    	setUsage: function ( value ) {

    		this.usage = value;

    		return this;

    	},

    	copy: function ( source ) {

    		this.array = new source.array.constructor( source.array );
    		this.count = source.count;
    		this.stride = source.stride;
    		this.usage = source.usage;

    		return this;

    	},

    	copyAt: function ( index1, attribute, index2 ) {

    		index1 *= this.stride;
    		index2 *= attribute.stride;

    		for ( let i = 0, l = this.stride; i < l; i ++ ) {

    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

    		}

    		return this;

    	},

    	set: function ( value, offset ) {

    		if ( offset === undefined ) offset = 0;

    		this.array.set( value, offset );

    		return this;

    	},

    	clone: function ( data ) {

    		if ( data.arrayBuffers === undefined ) {

    			data.arrayBuffers = {};

    		}

    		if ( this.array.buffer._uuid === undefined ) {

    			this.array.buffer._uuid = MathUtils.generateUUID();

    		}

    		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

    			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

    		}

    		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

    		const ib = new InterleavedBuffer( array, this.stride );
    		ib.setUsage( this.usage );

    		return ib;

    	},

    	onUpload: function ( callback ) {

    		this.onUploadCallback = callback;

    		return this;

    	},

    	toJSON: function ( data ) {

    		if ( data.arrayBuffers === undefined ) {

    			data.arrayBuffers = {};

    		}

    		// generate UUID for array buffer if necessary

    		if ( this.array.buffer._uuid === undefined ) {

    			this.array.buffer._uuid = MathUtils.generateUUID();

    		}

    		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

    			data.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );

    		}

    		//

    		return {
    			uuid: this.uuid,
    			buffer: this.array.buffer._uuid,
    			type: this.array.constructor.name,
    			stride: this.stride
    		};

    	}

    } );

    const _vector$5 = new Vector3();

    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

    	this.name = '';

    	this.data = interleavedBuffer;
    	this.itemSize = itemSize;
    	this.offset = offset;

    	this.normalized = normalized === true;

    }

    Object.defineProperties( InterleavedBufferAttribute.prototype, {

    	count: {

    		get: function () {

    			return this.data.count;

    		}

    	},

    	array: {

    		get: function () {

    			return this.data.array;

    		}

    	},

    	needsUpdate: {

    		set: function ( value ) {

    			this.data.needsUpdate = value;

    		}

    	}

    } );

    Object.assign( InterleavedBufferAttribute.prototype, {

    	isInterleavedBufferAttribute: true,

    	applyMatrix4: function ( m ) {

    		for ( let i = 0, l = this.data.count; i < l; i ++ ) {

    			_vector$5.x = this.getX( i );
    			_vector$5.y = this.getY( i );
    			_vector$5.z = this.getZ( i );

    			_vector$5.applyMatrix4( m );

    			this.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );

    		}

    		return this;

    	},

    	setX: function ( index, x ) {

    		this.data.array[ index * this.data.stride + this.offset ] = x;

    		return this;

    	},

    	setY: function ( index, y ) {

    		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

    		return this;

    	},

    	setZ: function ( index, z ) {

    		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

    		return this;

    	},

    	setW: function ( index, w ) {

    		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

    		return this;

    	},

    	getX: function ( index ) {

    		return this.data.array[ index * this.data.stride + this.offset ];

    	},

    	getY: function ( index ) {

    		return this.data.array[ index * this.data.stride + this.offset + 1 ];

    	},

    	getZ: function ( index ) {

    		return this.data.array[ index * this.data.stride + this.offset + 2 ];

    	},

    	getW: function ( index ) {

    		return this.data.array[ index * this.data.stride + this.offset + 3 ];

    	},

    	setXY: function ( index, x, y ) {

    		index = index * this.data.stride + this.offset;

    		this.data.array[ index + 0 ] = x;
    		this.data.array[ index + 1 ] = y;

    		return this;

    	},

    	setXYZ: function ( index, x, y, z ) {

    		index = index * this.data.stride + this.offset;

    		this.data.array[ index + 0 ] = x;
    		this.data.array[ index + 1 ] = y;
    		this.data.array[ index + 2 ] = z;

    		return this;

    	},

    	setXYZW: function ( index, x, y, z, w ) {

    		index = index * this.data.stride + this.offset;

    		this.data.array[ index + 0 ] = x;
    		this.data.array[ index + 1 ] = y;
    		this.data.array[ index + 2 ] = z;
    		this.data.array[ index + 3 ] = w;

    		return this;

    	},

    	clone: function ( data ) {

    		if ( data === undefined ) {

    			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );

    			const array = [];

    			for ( let i = 0; i < this.count; i ++ ) {

    				const index = i * this.data.stride + this.offset;

    				for ( let j = 0; j < this.itemSize; j ++ ) {

    					array.push( this.data.array[ index + j ] );

    				}

    			}

    			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

    		} else {

    			if ( data.interleavedBuffers === undefined ) {

    				data.interleavedBuffers = {};

    			}

    			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

    				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

    			}

    			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

    		}

    	},

    	toJSON: function ( data ) {

    		if ( data === undefined ) {

    			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );

    			const array = [];

    			for ( let i = 0; i < this.count; i ++ ) {

    				const index = i * this.data.stride + this.offset;

    				for ( let j = 0; j < this.itemSize; j ++ ) {

    					array.push( this.data.array[ index + j ] );

    				}

    			}

    			// deinterleave data and save it as an ordinary buffer attribute for now

    			return {
    				itemSize: this.itemSize,
    				type: this.array.constructor.name,
    				array: array,
    				normalized: this.normalized
    			};

    		} else {

    			// save as true interlaved attribtue

    			if ( data.interleavedBuffers === undefined ) {

    				data.interleavedBuffers = {};

    			}

    			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

    				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

    			}

    			return {
    				isInterleavedBufferAttribute: true,
    				itemSize: this.itemSize,
    				data: this.data.uuid,
    				offset: this.offset,
    				normalized: this.normalized
    			};

    		}

    	}

    } );

    /**
     * parameters = {
     *  color: <hex>,
     *  map: new THREE.Texture( <Image> ),
     *  alphaMap: new THREE.Texture( <Image> ),
     *  rotation: <float>,
     *  sizeAttenuation: <bool>
     * }
     */

    function SpriteMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'SpriteMaterial';

    	this.color = new Color( 0xffffff );

    	this.map = null;

    	this.alphaMap = null;

    	this.rotation = 0;

    	this.sizeAttenuation = true;

    	this.transparent = true;

    	this.setValues( parameters );

    }

    SpriteMaterial.prototype = Object.create( Material.prototype );
    SpriteMaterial.prototype.constructor = SpriteMaterial;
    SpriteMaterial.prototype.isSpriteMaterial = true;

    SpriteMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.map = source.map;

    	this.alphaMap = source.alphaMap;

    	this.rotation = source.rotation;

    	this.sizeAttenuation = source.sizeAttenuation;

    	return this;

    };

    let _geometry;

    const _intersectPoint = new Vector3();
    const _worldScale = new Vector3();
    const _mvPosition = new Vector3();

    const _alignedPosition = new Vector2();
    const _rotatedPosition = new Vector2();
    const _viewWorldMatrix = new Matrix4();

    const _vA = new Vector3();
    const _vB = new Vector3();
    const _vC = new Vector3();

    const _uvA = new Vector2();
    const _uvB = new Vector2();
    const _uvC = new Vector2();

    function Sprite( material ) {

    	Object3D.call( this );

    	this.type = 'Sprite';

    	if ( _geometry === undefined ) {

    		_geometry = new BufferGeometry();

    		const float32Array = new Float32Array( [
    			- 0.5, - 0.5, 0, 0, 0,
    			0.5, - 0.5, 0, 1, 0,
    			0.5, 0.5, 0, 1, 1,
    			- 0.5, 0.5, 0, 0, 1
    		] );

    		const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

    		_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
    		_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
    		_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

    	}

    	this.geometry = _geometry;
    	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

    	this.center = new Vector2( 0.5, 0.5 );

    }

    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Sprite,

    	isSprite: true,

    	raycast: function ( raycaster, intersects ) {

    		if ( raycaster.camera === null ) {

    			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

    		}

    		_worldScale.setFromMatrixScale( this.matrixWorld );

    		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
    		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

    		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

    		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

    			_worldScale.multiplyScalar( - _mvPosition.z );

    		}

    		const rotation = this.material.rotation;
    		let sin, cos;

    		if ( rotation !== 0 ) {

    			cos = Math.cos( rotation );
    			sin = Math.sin( rotation );

    		}

    		const center = this.center;

    		transformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
    		transformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
    		transformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

    		_uvA.set( 0, 0 );
    		_uvB.set( 1, 0 );
    		_uvC.set( 1, 1 );

    		// check first triangle
    		let intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );

    		if ( intersect === null ) {

    			// check second triangle
    			transformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
    			_uvB.set( 0, 1 );

    			intersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );
    			if ( intersect === null ) {

    				return;

    			}

    		}

    		const distance = raycaster.ray.origin.distanceTo( _intersectPoint );

    		if ( distance < raycaster.near || distance > raycaster.far ) return;

    		intersects.push( {

    			distance: distance,
    			point: _intersectPoint.clone(),
    			uv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),
    			face: null,
    			object: this

    		} );

    	},

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source );

    		if ( source.center !== undefined ) this.center.copy( source.center );

    		this.material = source.material;

    		return this;

    	}

    } );

    function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

    	// compute position in camera space
    	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

    	// to check if rotation is not zero
    	if ( sin !== undefined ) {

    		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
    		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

    	} else {

    		_rotatedPosition.copy( _alignedPosition );

    	}


    	vertexPosition.copy( mvPosition );
    	vertexPosition.x += _rotatedPosition.x;
    	vertexPosition.y += _rotatedPosition.y;

    	// transform to world space
    	vertexPosition.applyMatrix4( _viewWorldMatrix );

    }

    const _v1$1 = new Vector3();
    const _v2$1 = new Vector3();

    function LOD() {

    	Object3D.call( this );

    	this._currentLevel = 0;

    	this.type = 'LOD';

    	Object.defineProperties( this, {
    		levels: {
    			enumerable: true,
    			value: []
    		}
    	} );

    	this.autoUpdate = true;

    }

    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: LOD,

    	isLOD: true,

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source, false );

    		const levels = source.levels;

    		for ( let i = 0, l = levels.length; i < l; i ++ ) {

    			const level = levels[ i ];

    			this.addLevel( level.object.clone(), level.distance );

    		}

    		this.autoUpdate = source.autoUpdate;

    		return this;

    	},

    	addLevel: function ( object, distance ) {

    		if ( distance === undefined ) distance = 0;

    		distance = Math.abs( distance );

    		const levels = this.levels;

    		let l;

    		for ( l = 0; l < levels.length; l ++ ) {

    			if ( distance < levels[ l ].distance ) {

    				break;

    			}

    		}

    		levels.splice( l, 0, { distance: distance, object: object } );

    		this.add( object );

    		return this;

    	},

    	getCurrentLevel: function () {

    		return this._currentLevel;

    	},

    	getObjectForDistance: function ( distance ) {

    		const levels = this.levels;

    		if ( levels.length > 0 ) {

    			let i, l;

    			for ( i = 1, l = levels.length; i < l; i ++ ) {

    				if ( distance < levels[ i ].distance ) {

    					break;

    				}

    			}

    			return levels[ i - 1 ].object;

    		}

    		return null;

    	},

    	raycast: function ( raycaster, intersects ) {

    		const levels = this.levels;

    		if ( levels.length > 0 ) {

    			_v1$1.setFromMatrixPosition( this.matrixWorld );

    			const distance = raycaster.ray.origin.distanceTo( _v1$1 );

    			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

    		}

    	},

    	update: function ( camera ) {

    		const levels = this.levels;

    		if ( levels.length > 1 ) {

    			_v1$1.setFromMatrixPosition( camera.matrixWorld );
    			_v2$1.setFromMatrixPosition( this.matrixWorld );

    			const distance = _v1$1.distanceTo( _v2$1 ) / camera.zoom;

    			levels[ 0 ].object.visible = true;

    			let i, l;

    			for ( i = 1, l = levels.length; i < l; i ++ ) {

    				if ( distance >= levels[ i ].distance ) {

    					levels[ i - 1 ].object.visible = false;
    					levels[ i ].object.visible = true;

    				} else {

    					break;

    				}

    			}

    			this._currentLevel = i - 1;

    			for ( ; i < l; i ++ ) {

    				levels[ i ].object.visible = false;

    			}

    		}

    	},

    	toJSON: function ( meta ) {

    		const data = Object3D.prototype.toJSON.call( this, meta );

    		if ( this.autoUpdate === false ) data.object.autoUpdate = false;

    		data.object.levels = [];

    		const levels = this.levels;

    		for ( let i = 0, l = levels.length; i < l; i ++ ) {

    			const level = levels[ i ];

    			data.object.levels.push( {
    				object: level.object.uuid,
    				distance: level.distance
    			} );

    		}

    		return data;

    	}

    } );

    function SkinnedMesh( geometry, material ) {

    	if ( geometry && geometry.isGeometry ) {

    		console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

    	}

    	Mesh.call( this, geometry, material );

    	this.type = 'SkinnedMesh';

    	this.bindMode = 'attached';
    	this.bindMatrix = new Matrix4();
    	this.bindMatrixInverse = new Matrix4();

    }

    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

    	constructor: SkinnedMesh,

    	isSkinnedMesh: true,

    	copy: function ( source ) {

    		Mesh.prototype.copy.call( this, source );

    		this.bindMode = source.bindMode;
    		this.bindMatrix.copy( source.bindMatrix );
    		this.bindMatrixInverse.copy( source.bindMatrixInverse );

    		this.skeleton = source.skeleton;

    		return this;

    	},

    	bind: function ( skeleton, bindMatrix ) {

    		this.skeleton = skeleton;

    		if ( bindMatrix === undefined ) {

    			this.updateMatrixWorld( true );

    			this.skeleton.calculateInverses();

    			bindMatrix = this.matrixWorld;

    		}

    		this.bindMatrix.copy( bindMatrix );
    		this.bindMatrixInverse.getInverse( bindMatrix );

    	},

    	pose: function () {

    		this.skeleton.pose();

    	},

    	normalizeSkinWeights: function () {

    		const vector = new Vector4();

    		const skinWeight = this.geometry.attributes.skinWeight;

    		for ( let i = 0, l = skinWeight.count; i < l; i ++ ) {

    			vector.x = skinWeight.getX( i );
    			vector.y = skinWeight.getY( i );
    			vector.z = skinWeight.getZ( i );
    			vector.w = skinWeight.getW( i );

    			const scale = 1.0 / vector.manhattanLength();

    			if ( scale !== Infinity ) {

    				vector.multiplyScalar( scale );

    			} else {

    				vector.set( 1, 0, 0, 0 ); // do something reasonable

    			}

    			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

    		}

    	},

    	updateMatrixWorld: function ( force ) {

    		Mesh.prototype.updateMatrixWorld.call( this, force );

    		if ( this.bindMode === 'attached' ) {

    			this.bindMatrixInverse.getInverse( this.matrixWorld );

    		} else if ( this.bindMode === 'detached' ) {

    			this.bindMatrixInverse.getInverse( this.bindMatrix );

    		} else {

    			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

    		}

    	},

    	boneTransform: ( function () {

    		const basePosition = new Vector3();

    		const skinIndex = new Vector4();
    		const skinWeight = new Vector4();

    		const vector = new Vector3();
    		const matrix = new Matrix4();

    		return function ( index, target ) {

    			const skeleton = this.skeleton;
    			const geometry = this.geometry;

    			skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );
    			skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );

    			basePosition.fromBufferAttribute( geometry.attributes.position, index ).applyMatrix4( this.bindMatrix );

    			target.set( 0, 0, 0 );

    			for ( let i = 0; i < 4; i ++ ) {

    				const weight = skinWeight.getComponent( i );

    				if ( weight !== 0 ) {

    					const boneIndex = skinIndex.getComponent( i );

    					matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );

    					target.addScaledVector( vector.copy( basePosition ).applyMatrix4( matrix ), weight );

    				}

    			}

    			return target.applyMatrix4( this.bindMatrixInverse );

    		};

    	}() )

    } );

    const _offsetMatrix = new Matrix4();
    const _identityMatrix = new Matrix4();

    function Skeleton( bones, boneInverses ) {

    	// copy the bone array

    	bones = bones || [];

    	this.bones = bones.slice( 0 );
    	this.boneMatrices = new Float32Array( this.bones.length * 16 );

    	this.frame = - 1;

    	// use the supplied bone inverses or calculate the inverses

    	if ( boneInverses === undefined ) {

    		this.calculateInverses();

    	} else {

    		if ( this.bones.length === boneInverses.length ) {

    			this.boneInverses = boneInverses.slice( 0 );

    		} else {

    			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

    			this.boneInverses = [];

    			for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

    				this.boneInverses.push( new Matrix4() );

    			}

    		}

    	}

    }

    Object.assign( Skeleton.prototype, {

    	calculateInverses: function () {

    		this.boneInverses = [];

    		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

    			const inverse = new Matrix4();

    			if ( this.bones[ i ] ) {

    				inverse.getInverse( this.bones[ i ].matrixWorld );

    			}

    			this.boneInverses.push( inverse );

    		}

    	},

    	pose: function () {

    		// recover the bind-time world matrices

    		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

    			const bone = this.bones[ i ];

    			if ( bone ) {

    				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

    			}

    		}

    		// compute the local matrices, positions, rotations and scales

    		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

    			const bone = this.bones[ i ];

    			if ( bone ) {

    				if ( bone.parent && bone.parent.isBone ) {

    					bone.matrix.getInverse( bone.parent.matrixWorld );
    					bone.matrix.multiply( bone.matrixWorld );

    				} else {

    					bone.matrix.copy( bone.matrixWorld );

    				}

    				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

    			}

    		}

    	},

    	update: function () {

    		const bones = this.bones;
    		const boneInverses = this.boneInverses;
    		const boneMatrices = this.boneMatrices;
    		const boneTexture = this.boneTexture;

    		// flatten bone matrices to array

    		for ( let i = 0, il = bones.length; i < il; i ++ ) {

    			// compute the offset between the current and the original transform

    			const matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

    			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
    			_offsetMatrix.toArray( boneMatrices, i * 16 );

    		}

    		if ( boneTexture !== undefined ) {

    			boneTexture.needsUpdate = true;

    		}

    	},

    	clone: function () {

    		return new Skeleton( this.bones, this.boneInverses );

    	},

    	getBoneByName: function ( name ) {

    		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

    			const bone = this.bones[ i ];

    			if ( bone.name === name ) {

    				return bone;

    			}

    		}

    		return undefined;

    	},

    	dispose: function ( ) {

    		if ( this.boneTexture ) {

    			this.boneTexture.dispose();

    			this.boneTexture = undefined;

    		}

    	}

    } );

    function Bone() {

    	Object3D.call( this );

    	this.type = 'Bone';

    }

    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Bone,

    	isBone: true

    } );

    const _instanceLocalMatrix = new Matrix4();
    const _instanceWorldMatrix = new Matrix4();

    const _instanceIntersects = [];

    const _mesh = new Mesh();

    function InstancedMesh( geometry, material, count ) {

    	Mesh.call( this, geometry, material );

    	this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );

    	this.count = count;

    	this.frustumCulled = false;

    }

    InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

    	constructor: InstancedMesh,

    	isInstancedMesh: true,

    	copy: function ( source ) {

    		Mesh.prototype.copy.call( this, source );

    		this.instanceMatrix.copy( source.instanceMatrix );
    		this.count = source.count;

    		return this;

    	},

    	getMatrixAt: function ( index, matrix ) {

    		matrix.fromArray( this.instanceMatrix.array, index * 16 );

    	},

    	raycast: function ( raycaster, intersects ) {

    		const matrixWorld = this.matrixWorld;
    		const raycastTimes = this.count;

    		_mesh.geometry = this.geometry;
    		_mesh.material = this.material;

    		if ( _mesh.material === undefined ) return;

    		for ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

    			// calculate the world matrix for each instance

    			this.getMatrixAt( instanceId, _instanceLocalMatrix );

    			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

    			// the mesh represents this single instance

    			_mesh.matrixWorld = _instanceWorldMatrix;

    			_mesh.raycast( raycaster, _instanceIntersects );

    			// process the result of raycast

    			for ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {

    				const intersect = _instanceIntersects[ i ];
    				intersect.instanceId = instanceId;
    				intersect.object = this;
    				intersects.push( intersect );

    			}

    			_instanceIntersects.length = 0;

    		}

    	},

    	setMatrixAt: function ( index, matrix ) {

    		matrix.toArray( this.instanceMatrix.array, index * 16 );

    	},

    	updateMorphTargets: function () {

    	}

    } );

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  linewidth: <float>,
     *  linecap: "round",
     *  linejoin: "round"
     * }
     */

    function LineBasicMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'LineBasicMaterial';

    	this.color = new Color( 0xffffff );

    	this.linewidth = 1;
    	this.linecap = 'round';
    	this.linejoin = 'round';

    	this.morphTargets = false;

    	this.setValues( parameters );

    }

    LineBasicMaterial.prototype = Object.create( Material.prototype );
    LineBasicMaterial.prototype.constructor = LineBasicMaterial;

    LineBasicMaterial.prototype.isLineBasicMaterial = true;

    LineBasicMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.linewidth = source.linewidth;
    	this.linecap = source.linecap;
    	this.linejoin = source.linejoin;

    	this.morphTargets = source.morphTargets;

    	return this;

    };

    const _start$1 = new Vector3();
    const _end$1 = new Vector3();
    const _inverseMatrix$1 = new Matrix4();
    const _ray$1 = new Ray();
    const _sphere$1 = new Sphere();

    function Line( geometry, material, mode ) {

    	if ( mode === 1 ) {

    		console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

    	}

    	Object3D.call( this );

    	this.type = 'Line';

    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
    	this.material = material !== undefined ? material : new LineBasicMaterial();

    	this.updateMorphTargets();

    }

    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Line,

    	isLine: true,

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source );

    		this.material = source.material;
    		this.geometry = source.geometry;

    		return this;

    	},

    	computeLineDistances: function () {

    		const geometry = this.geometry;

    		if ( geometry.isBufferGeometry ) {

    			// we assume non-indexed geometry

    			if ( geometry.index === null ) {

    				const positionAttribute = geometry.attributes.position;
    				const lineDistances = [ 0 ];

    				for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {

    					_start$1.fromBufferAttribute( positionAttribute, i - 1 );
    					_end$1.fromBufferAttribute( positionAttribute, i );

    					lineDistances[ i ] = lineDistances[ i - 1 ];
    					lineDistances[ i ] += _start$1.distanceTo( _end$1 );

    				}

    				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

    			} else {

    				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

    			}

    		} else if ( geometry.isGeometry ) {

    			const vertices = geometry.vertices;
    			const lineDistances = geometry.lineDistances;

    			lineDistances[ 0 ] = 0;

    			for ( let i = 1, l = vertices.length; i < l; i ++ ) {

    				lineDistances[ i ] = lineDistances[ i - 1 ];
    				lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

    			}

    		}

    		return this;

    	},

    	raycast: function ( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const matrixWorld = this.matrixWorld;
    		const threshold = raycaster.params.Line.threshold;

    		// Checking boundingSphere distance to ray

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$1.copy( geometry.boundingSphere );
    		_sphere$1.applyMatrix4( matrixWorld );
    		_sphere$1.radius += threshold;

    		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;

    		//

    		_inverseMatrix$1.getInverse( matrixWorld );
    		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

    		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
    		const localThresholdSq = localThreshold * localThreshold;

    		const vStart = new Vector3();
    		const vEnd = new Vector3();
    		const interSegment = new Vector3();
    		const interRay = new Vector3();
    		const step = ( this && this.isLineSegments ) ? 2 : 1;

    		if ( geometry.isBufferGeometry ) {

    			const index = geometry.index;
    			const attributes = geometry.attributes;
    			const positions = attributes.position.array;

    			if ( index !== null ) {

    				const indices = index.array;

    				for ( let i = 0, l = indices.length - 1; i < l; i += step ) {

    					const a = indices[ i ];
    					const b = indices[ i + 1 ];

    					vStart.fromArray( positions, a * 3 );
    					vEnd.fromArray( positions, b * 3 );

    					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

    					if ( distSq > localThresholdSq ) continue;

    					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

    					const distance = raycaster.ray.origin.distanceTo( interRay );

    					if ( distance < raycaster.near || distance > raycaster.far ) continue;

    					intersects.push( {

    						distance: distance,
    						// What do we want? intersection point on the ray or on the segment??
    						// point: raycaster.ray.at( distance ),
    						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
    						index: i,
    						face: null,
    						faceIndex: null,
    						object: this

    					} );

    				}

    			} else {

    				for ( let i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

    					vStart.fromArray( positions, 3 * i );
    					vEnd.fromArray( positions, 3 * i + 3 );

    					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

    					if ( distSq > localThresholdSq ) continue;

    					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

    					const distance = raycaster.ray.origin.distanceTo( interRay );

    					if ( distance < raycaster.near || distance > raycaster.far ) continue;

    					intersects.push( {

    						distance: distance,
    						// What do we want? intersection point on the ray or on the segment??
    						// point: raycaster.ray.at( distance ),
    						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
    						index: i,
    						face: null,
    						faceIndex: null,
    						object: this

    					} );

    				}

    			}

    		} else if ( geometry.isGeometry ) {

    			const vertices = geometry.vertices;
    			const nbVertices = vertices.length;

    			for ( let i = 0; i < nbVertices - 1; i += step ) {

    				const distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

    				if ( distSq > localThresholdSq ) continue;

    				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

    				const distance = raycaster.ray.origin.distanceTo( interRay );

    				if ( distance < raycaster.near || distance > raycaster.far ) continue;

    				intersects.push( {

    					distance: distance,
    					// What do we want? intersection point on the ray or on the segment??
    					// point: raycaster.ray.at( distance ),
    					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
    					index: i,
    					face: null,
    					faceIndex: null,
    					object: this

    				} );

    			}

    		}

    	},

    	updateMorphTargets: function () {

    		const geometry = this.geometry;

    		if ( geometry.isBufferGeometry ) {

    			const morphAttributes = geometry.morphAttributes;
    			const keys = Object.keys( morphAttributes );

    			if ( keys.length > 0 ) {

    				const morphAttribute = morphAttributes[ keys[ 0 ] ];

    				if ( morphAttribute !== undefined ) {

    					this.morphTargetInfluences = [];
    					this.morphTargetDictionary = {};

    					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    						const name = morphAttribute[ m ].name || String( m );

    						this.morphTargetInfluences.push( 0 );
    						this.morphTargetDictionary[ name ] = m;

    					}

    				}

    			}

    		} else {

    			const morphTargets = geometry.morphTargets;

    			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

    				console.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

    			}

    		}

    	}

    } );

    const _start = new Vector3();
    const _end = new Vector3();

    function LineSegments( geometry, material ) {

    	Line.call( this, geometry, material );

    	this.type = 'LineSegments';

    }

    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

    	constructor: LineSegments,

    	isLineSegments: true,

    	computeLineDistances: function () {

    		const geometry = this.geometry;

    		if ( geometry.isBufferGeometry ) {

    			// we assume non-indexed geometry

    			if ( geometry.index === null ) {

    				const positionAttribute = geometry.attributes.position;
    				const lineDistances = [];

    				for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {

    					_start.fromBufferAttribute( positionAttribute, i );
    					_end.fromBufferAttribute( positionAttribute, i + 1 );

    					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
    					lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );

    				}

    				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

    			} else {

    				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

    			}

    		} else if ( geometry.isGeometry ) {

    			const vertices = geometry.vertices;
    			const lineDistances = geometry.lineDistances;

    			for ( let i = 0, l = vertices.length; i < l; i += 2 ) {

    				_start.copy( vertices[ i ] );
    				_end.copy( vertices[ i + 1 ] );

    				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
    				lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );

    			}

    		}

    		return this;

    	}

    } );

    function LineLoop( geometry, material ) {

    	Line.call( this, geometry, material );

    	this.type = 'LineLoop';

    }

    LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

    	constructor: LineLoop,

    	isLineLoop: true,

    } );

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  size: <float>,
     *  sizeAttenuation: <bool>
     *
     *  morphTargets: <bool>
     * }
     */

    function PointsMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'PointsMaterial';

    	this.color = new Color( 0xffffff );

    	this.map = null;

    	this.alphaMap = null;

    	this.size = 1;
    	this.sizeAttenuation = true;

    	this.morphTargets = false;

    	this.setValues( parameters );

    }

    PointsMaterial.prototype = Object.create( Material.prototype );
    PointsMaterial.prototype.constructor = PointsMaterial;

    PointsMaterial.prototype.isPointsMaterial = true;

    PointsMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.map = source.map;

    	this.alphaMap = source.alphaMap;

    	this.size = source.size;
    	this.sizeAttenuation = source.sizeAttenuation;

    	this.morphTargets = source.morphTargets;

    	return this;

    };

    const _inverseMatrix = new Matrix4();
    const _ray = new Ray();
    const _sphere = new Sphere();
    const _position$2 = new Vector3();

    function Points( geometry, material ) {

    	Object3D.call( this );

    	this.type = 'Points';

    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
    	this.material = material !== undefined ? material : new PointsMaterial();

    	this.updateMorphTargets();

    }

    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Points,

    	isPoints: true,

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source );

    		this.material = source.material;
    		this.geometry = source.geometry;

    		return this;

    	},

    	raycast: function ( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const matrixWorld = this.matrixWorld;
    		const threshold = raycaster.params.Points.threshold;

    		// Checking boundingSphere distance to ray

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere.copy( geometry.boundingSphere );
    		_sphere.applyMatrix4( matrixWorld );
    		_sphere.radius += threshold;

    		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;

    		//

    		_inverseMatrix.getInverse( matrixWorld );
    		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

    		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
    		const localThresholdSq = localThreshold * localThreshold;

    		if ( geometry.isBufferGeometry ) {

    			const index = geometry.index;
    			const attributes = geometry.attributes;
    			const positions = attributes.position.array;

    			if ( index !== null ) {

    				const indices = index.array;

    				for ( let i = 0, il = indices.length; i < il; i ++ ) {

    					const a = indices[ i ];

    					_position$2.fromArray( positions, a * 3 );

    					testPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

    				}

    			} else {

    				for ( let i = 0, l = positions.length / 3; i < l; i ++ ) {

    					_position$2.fromArray( positions, i * 3 );

    					testPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );

    				}

    			}

    		} else {

    			const vertices = geometry.vertices;

    			for ( let i = 0, l = vertices.length; i < l; i ++ ) {

    				testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );

    			}

    		}

    	},

    	updateMorphTargets: function () {

    		const geometry = this.geometry;

    		if ( geometry.isBufferGeometry ) {

    			const morphAttributes = geometry.morphAttributes;
    			const keys = Object.keys( morphAttributes );

    			if ( keys.length > 0 ) {

    				const morphAttribute = morphAttributes[ keys[ 0 ] ];

    				if ( morphAttribute !== undefined ) {

    					this.morphTargetInfluences = [];
    					this.morphTargetDictionary = {};

    					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    						const name = morphAttribute[ m ].name || String( m );

    						this.morphTargetInfluences.push( 0 );
    						this.morphTargetDictionary[ name ] = m;

    					}

    				}

    			}

    		} else {

    			const morphTargets = geometry.morphTargets;

    			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

    				console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

    			}

    		}

    	}

    } );

    function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

    	const rayPointDistanceSq = _ray.distanceSqToPoint( point );

    	if ( rayPointDistanceSq < localThresholdSq ) {

    		const intersectPoint = new Vector3();

    		_ray.closestPointToPoint( point, intersectPoint );
    		intersectPoint.applyMatrix4( matrixWorld );

    		const distance = raycaster.ray.origin.distanceTo( intersectPoint );

    		if ( distance < raycaster.near || distance > raycaster.far ) return;

    		intersects.push( {

    			distance: distance,
    			distanceToRay: Math.sqrt( rayPointDistanceSq ),
    			point: intersectPoint,
    			index: index,
    			face: null,
    			object: object

    		} );

    	}

    }

    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

    	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    	this.format = format !== undefined ? format : RGBFormat;

    	this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
    	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

    	this.generateMipmaps = false;

    	const scope = this;

    	function updateVideo() {

    		scope.needsUpdate = true;
    		video.requestVideoFrameCallback( updateVideo );

    	}

    	if ( 'requestVideoFrameCallback' in video ) {

    		video.requestVideoFrameCallback( updateVideo );

    	}

    }

    VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

    	constructor: VideoTexture,

    	isVideoTexture: true,

    	update: function () {

    		const video = this.image;
    		const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;

    		if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {

    			this.needsUpdate = true;

    		}

    	}

    } );

    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

    	this.image = { width: width, height: height };
    	this.mipmaps = mipmaps;

    	// no flipping for cube textures
    	// (also flipping doesn't work for compressed textures )

    	this.flipY = false;

    	// can't generate mipmaps for compressed textures
    	// mips must be embedded in DDS files

    	this.generateMipmaps = false;

    }

    CompressedTexture.prototype = Object.create( Texture.prototype );
    CompressedTexture.prototype.constructor = CompressedTexture;

    CompressedTexture.prototype.isCompressedTexture = true;

    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

    	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    	this.needsUpdate = true;

    }

    CanvasTexture.prototype = Object.create( Texture.prototype );
    CanvasTexture.prototype.constructor = CanvasTexture;
    CanvasTexture.prototype.isCanvasTexture = true;

    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

    	format = format !== undefined ? format : DepthFormat;

    	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

    		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

    	}

    	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
    	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    	this.image = { width: width, height: height };

    	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
    	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

    	this.flipY = false;
    	this.generateMipmaps	= false;

    }

    DepthTexture.prototype = Object.create( Texture.prototype );
    DepthTexture.prototype.constructor = DepthTexture;
    DepthTexture.prototype.isDepthTexture = true;

    function WireframeGeometry( geometry ) {

    	BufferGeometry.call( this );

    	this.type = 'WireframeGeometry';

    	// buffer

    	const vertices = [];

    	// helper variables

    	const edge = [ 0, 0 ], edges = {};
    	const keys = [ 'a', 'b', 'c' ];

    	// different logic for Geometry and BufferGeometry

    	if ( geometry && geometry.isGeometry ) {

    		// create a data structure that contains all edges without duplicates

    		const faces = geometry.faces;

    		for ( let i = 0, l = faces.length; i < l; i ++ ) {

    			const face = faces[ i ];

    			for ( let j = 0; j < 3; j ++ ) {

    				const edge1 = face[ keys[ j ] ];
    				const edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
    				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
    				edge[ 1 ] = Math.max( edge1, edge2 );

    				const key = edge[ 0 ] + ',' + edge[ 1 ];

    				if ( edges[ key ] === undefined ) {

    					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

    				}

    			}

    		}

    		// generate vertices

    		for ( const key in edges ) {

    			const e = edges[ key ];

    			let vertex = geometry.vertices[ e.index1 ];
    			vertices.push( vertex.x, vertex.y, vertex.z );

    			vertex = geometry.vertices[ e.index2 ];
    			vertices.push( vertex.x, vertex.y, vertex.z );

    		}

    	} else if ( geometry && geometry.isBufferGeometry ) {

    		let vertex = new Vector3();

    		if ( geometry.index !== null ) {

    			// indexed BufferGeometry

    			const position = geometry.attributes.position;
    			const indices = geometry.index;
    			let groups = geometry.groups;

    			if ( groups.length === 0 ) {

    				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

    			}

    			// create a data structure that contains all eges without duplicates

    			for ( let o = 0, ol = groups.length; o < ol; ++ o ) {

    				const group = groups[ o ];

    				const start = group.start;
    				const count = group.count;

    				for ( let i = start, l = ( start + count ); i < l; i += 3 ) {

    					for ( let j = 0; j < 3; j ++ ) {

    						const edge1 = indices.getX( i + j );
    						const edge2 = indices.getX( i + ( j + 1 ) % 3 );
    						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
    						edge[ 1 ] = Math.max( edge1, edge2 );

    						const key = edge[ 0 ] + ',' + edge[ 1 ];

    						if ( edges[ key ] === undefined ) {

    							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

    						}

    					}

    				}

    			}

    			// generate vertices

    			for ( const key in edges ) {

    				const e = edges[ key ];

    				vertex.fromBufferAttribute( position, e.index1 );
    				vertices.push( vertex.x, vertex.y, vertex.z );

    				vertex.fromBufferAttribute( position, e.index2 );
    				vertices.push( vertex.x, vertex.y, vertex.z );

    			}

    		} else {

    			// non-indexed BufferGeometry

    			const position = geometry.attributes.position;

    			for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

    				for ( let j = 0; j < 3; j ++ ) {

    					// three edges per triangle, an edge is represented as (index1, index2)
    					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

    					const index1 = 3 * i + j;
    					vertex.fromBufferAttribute( position, index1 );
    					vertices.push( vertex.x, vertex.y, vertex.z );

    					const index2 = 3 * i + ( ( j + 1 ) % 3 );
    					vertex.fromBufferAttribute( position, index2 );
    					vertices.push( vertex.x, vertex.y, vertex.z );

    				}

    			}

    		}

    	}

    	// build geometry

    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

    }

    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
    WireframeGeometry.prototype.constructor = WireframeGeometry;

    /**
     * Parametric Surfaces Geometry
     * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
     */

    // ParametricGeometry

    function ParametricGeometry( func, slices, stacks ) {

    	Geometry.call( this );

    	this.type = 'ParametricGeometry';

    	this.parameters = {
    		func: func,
    		slices: slices,
    		stacks: stacks
    	};

    	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
    	this.mergeVertices();

    }

    ParametricGeometry.prototype = Object.create( Geometry.prototype );
    ParametricGeometry.prototype.constructor = ParametricGeometry;

    // ParametricBufferGeometry

    function ParametricBufferGeometry( func, slices, stacks ) {

    	BufferGeometry.call( this );

    	this.type = 'ParametricBufferGeometry';

    	this.parameters = {
    		func: func,
    		slices: slices,
    		stacks: stacks
    	};

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	const EPS = 0.00001;

    	const normal = new Vector3();

    	const p0 = new Vector3(), p1 = new Vector3();
    	const pu = new Vector3(), pv = new Vector3();

    	if ( func.length < 3 ) {

    		console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

    	}

    	// generate vertices, normals and uvs

    	const sliceCount = slices + 1;

    	for ( let i = 0; i <= stacks; i ++ ) {

    		const v = i / stacks;

    		for ( let j = 0; j <= slices; j ++ ) {

    			const u = j / slices;

    			// vertex

    			func( u, v, p0 );
    			vertices.push( p0.x, p0.y, p0.z );

    			// normal

    			// approximate tangent vectors via finite differences

    			if ( u - EPS >= 0 ) {

    				func( u - EPS, v, p1 );
    				pu.subVectors( p0, p1 );

    			} else {

    				func( u + EPS, v, p1 );
    				pu.subVectors( p1, p0 );

    			}

    			if ( v - EPS >= 0 ) {

    				func( u, v - EPS, p1 );
    				pv.subVectors( p0, p1 );

    			} else {

    				func( u, v + EPS, p1 );
    				pv.subVectors( p1, p0 );

    			}

    			// cross product of tangent vectors returns surface normal

    			normal.crossVectors( pu, pv ).normalize();
    			normals.push( normal.x, normal.y, normal.z );

    			// uv

    			uvs.push( u, v );

    		}

    	}

    	// generate indices

    	for ( let i = 0; i < stacks; i ++ ) {

    		for ( let j = 0; j < slices; j ++ ) {

    			const a = i * sliceCount + j;
    			const b = i * sliceCount + j + 1;
    			const c = ( i + 1 ) * sliceCount + j + 1;
    			const d = ( i + 1 ) * sliceCount + j;

    			// faces one and two

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

    // PolyhedronGeometry

    function PolyhedronGeometry( vertices, indices, radius, detail ) {

    	Geometry.call( this );

    	this.type = 'PolyhedronGeometry';

    	this.parameters = {
    		vertices: vertices,
    		indices: indices,
    		radius: radius,
    		detail: detail
    	};

    	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
    	this.mergeVertices();

    }

    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

    // PolyhedronBufferGeometry

    function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

    	BufferGeometry.call( this );

    	this.type = 'PolyhedronBufferGeometry';

    	this.parameters = {
    		vertices: vertices,
    		indices: indices,
    		radius: radius,
    		detail: detail
    	};

    	radius = radius || 1;
    	detail = detail || 0;

    	// default buffer data

    	const vertexBuffer = [];
    	const uvBuffer = [];

    	// the subdivision creates the vertex buffer data

    	subdivide( detail );

    	// all vertices should lie on a conceptual sphere with a given radius

    	applyRadius( radius );

    	// finally, create the uv data

    	generateUVs();

    	// build non-indexed geometry

    	this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

    	if ( detail === 0 ) {

    		this.computeVertexNormals(); // flat normals

    	} else {

    		this.normalizeNormals(); // smooth normals

    	}

    	// helper functions

    	function subdivide( detail ) {

    		const a = new Vector3();
    		const b = new Vector3();
    		const c = new Vector3();

    		// iterate over all faces and apply a subdivison with the given detail value

    		for ( let i = 0; i < indices.length; i += 3 ) {

    			// get the vertices of the face

    			getVertexByIndex( indices[ i + 0 ], a );
    			getVertexByIndex( indices[ i + 1 ], b );
    			getVertexByIndex( indices[ i + 2 ], c );

    			// perform subdivision

    			subdivideFace( a, b, c, detail );

    		}

    	}

    	function subdivideFace( a, b, c, detail ) {

    		const cols = Math.pow( 2, detail );

    		// we use this multidimensional array as a data structure for creating the subdivision

    		const v = [];

    		// construct all of the vertices for this subdivision

    		for ( let i = 0; i <= cols; i ++ ) {

    			v[ i ] = [];

    			const aj = a.clone().lerp( c, i / cols );
    			const bj = b.clone().lerp( c, i / cols );

    			const rows = cols - i;

    			for ( let j = 0; j <= rows; j ++ ) {

    				if ( j === 0 && i === cols ) {

    					v[ i ][ j ] = aj;

    				} else {

    					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

    				}

    			}

    		}

    		// construct all of the faces

    		for ( let i = 0; i < cols; i ++ ) {

    			for ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

    				const k = Math.floor( j / 2 );

    				if ( j % 2 === 0 ) {

    					pushVertex( v[ i ][ k + 1 ] );
    					pushVertex( v[ i + 1 ][ k ] );
    					pushVertex( v[ i ][ k ] );

    				} else {

    					pushVertex( v[ i ][ k + 1 ] );
    					pushVertex( v[ i + 1 ][ k + 1 ] );
    					pushVertex( v[ i + 1 ][ k ] );

    				}

    			}

    		}

    	}

    	function applyRadius( radius ) {

    		const vertex = new Vector3();

    		// iterate over the entire buffer and apply the radius to each vertex

    		for ( let i = 0; i < vertexBuffer.length; i += 3 ) {

    			vertex.x = vertexBuffer[ i + 0 ];
    			vertex.y = vertexBuffer[ i + 1 ];
    			vertex.z = vertexBuffer[ i + 2 ];

    			vertex.normalize().multiplyScalar( radius );

    			vertexBuffer[ i + 0 ] = vertex.x;
    			vertexBuffer[ i + 1 ] = vertex.y;
    			vertexBuffer[ i + 2 ] = vertex.z;

    		}

    	}

    	function generateUVs() {

    		const vertex = new Vector3();

    		for ( let i = 0; i < vertexBuffer.length; i += 3 ) {

    			vertex.x = vertexBuffer[ i + 0 ];
    			vertex.y = vertexBuffer[ i + 1 ];
    			vertex.z = vertexBuffer[ i + 2 ];

    			const u = azimuth( vertex ) / 2 / Math.PI + 0.5;
    			const v = inclination( vertex ) / Math.PI + 0.5;
    			uvBuffer.push( u, 1 - v );

    		}

    		correctUVs();

    		correctSeam();

    	}

    	function correctSeam() {

    		// handle case when face straddles the seam, see #3269

    		for ( let i = 0; i < uvBuffer.length; i += 6 ) {

    			// uv data of a single face

    			const x0 = uvBuffer[ i + 0 ];
    			const x1 = uvBuffer[ i + 2 ];
    			const x2 = uvBuffer[ i + 4 ];

    			const max = Math.max( x0, x1, x2 );
    			const min = Math.min( x0, x1, x2 );

    			// 0.9 is somewhat arbitrary

    			if ( max > 0.9 && min < 0.1 ) {

    				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
    				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
    				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

    			}

    		}

    	}

    	function pushVertex( vertex ) {

    		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

    	}

    	function getVertexByIndex( index, vertex ) {

    		const stride = index * 3;

    		vertex.x = vertices[ stride + 0 ];
    		vertex.y = vertices[ stride + 1 ];
    		vertex.z = vertices[ stride + 2 ];

    	}

    	function correctUVs() {

    		const a = new Vector3();
    		const b = new Vector3();
    		const c = new Vector3();

    		const centroid = new Vector3();

    		const uvA = new Vector2();
    		const uvB = new Vector2();
    		const uvC = new Vector2();

    		for ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

    			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
    			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
    			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

    			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
    			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
    			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

    			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

    			const azi = azimuth( centroid );

    			correctUV( uvA, j + 0, a, azi );
    			correctUV( uvB, j + 2, b, azi );
    			correctUV( uvC, j + 4, c, azi );

    		}

    	}

    	function correctUV( uv, stride, vector, azimuth ) {

    		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

    			uvBuffer[ stride ] = uv.x - 1;

    		}

    		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

    			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

    		}

    	}

    	// Angle around the Y axis, counter-clockwise when looking from above.

    	function azimuth( vector ) {

    		return Math.atan2( vector.z, - vector.x );

    	}


    	// Angle above the XZ plane.

    	function inclination( vector ) {

    		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

    	}

    }

    PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

    // TetrahedronGeometry

    function TetrahedronGeometry( radius, detail ) {

    	Geometry.call( this );

    	this.type = 'TetrahedronGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
    	this.mergeVertices();

    }

    TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

    // TetrahedronBufferGeometry

    function TetrahedronBufferGeometry( radius, detail ) {

    	const vertices = [
    		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
    	];

    	const indices = [
    		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
    	];

    	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

    	this.type = 'TetrahedronBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    }

    TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
    TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

    // OctahedronGeometry

    function OctahedronGeometry( radius, detail ) {

    	Geometry.call( this );

    	this.type = 'OctahedronGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
    	this.mergeVertices();

    }

    OctahedronGeometry.prototype = Object.create( Geometry.prototype );
    OctahedronGeometry.prototype.constructor = OctahedronGeometry;

    // OctahedronBufferGeometry

    function OctahedronBufferGeometry( radius, detail ) {

    	const vertices = [
    		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
    		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
    	];

    	const indices = [
    		0, 2, 4,	0, 4, 3,	0, 3, 5,
    		0, 5, 2,	1, 2, 5,	1, 5, 3,
    		1, 3, 4,	1, 4, 2
    	];

    	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

    	this.type = 'OctahedronBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    }

    OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
    OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

    // IcosahedronGeometry

    function IcosahedronGeometry( radius, detail ) {

    	Geometry.call( this );

    	this.type = 'IcosahedronGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
    	this.mergeVertices();

    }

    IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

    // IcosahedronBufferGeometry

    function IcosahedronBufferGeometry( radius, detail ) {

    	const t = ( 1 + Math.sqrt( 5 ) ) / 2;

    	const vertices = [
    		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
    		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
    		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
    	];

    	const indices = [
    		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
    		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
    		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
    		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
    	];

    	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

    	this.type = 'IcosahedronBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    }

    IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
    IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

    // DodecahedronGeometry

    function DodecahedronGeometry( radius, detail ) {

    	Geometry.call( this );

    	this.type = 'DodecahedronGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
    	this.mergeVertices();

    }

    DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

    // DodecahedronBufferGeometry

    function DodecahedronBufferGeometry( radius, detail ) {

    	const t = ( 1 + Math.sqrt( 5 ) ) / 2;
    	const r = 1 / t;

    	const vertices = [

    		// (±1, ±1, ±1)
    		- 1, - 1, - 1,	- 1, - 1, 1,
    		- 1, 1, - 1, - 1, 1, 1,
    		1, - 1, - 1, 1, - 1, 1,
    		1, 1, - 1, 1, 1, 1,

    		// (0, ±1/φ, ±φ)
    		 0, - r, - t, 0, - r, t,
    		 0, r, - t, 0, r, t,

    		// (±1/φ, ±φ, 0)
    		- r, - t, 0, - r, t, 0,
    		 r, - t, 0, r, t, 0,

    		// (±φ, 0, ±1/φ)
    		- t, 0, - r, t, 0, - r,
    		- t, 0, r, t, 0, r
    	];

    	const indices = [
    		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
    		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
    		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
    		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
    		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
    		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
    		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
    		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
    		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
    		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
    		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
    		1, 12, 14, 	1, 14, 5, 	1, 5, 9
    	];

    	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

    	this.type = 'DodecahedronBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		detail: detail
    	};

    }

    DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
    DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

    // TubeGeometry

    function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

    	Geometry.call( this );

    	this.type = 'TubeGeometry';

    	this.parameters = {
    		path: path,
    		tubularSegments: tubularSegments,
    		radius: radius,
    		radialSegments: radialSegments,
    		closed: closed
    	};

    	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

    	const bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

    	// expose internals

    	this.tangents = bufferGeometry.tangents;
    	this.normals = bufferGeometry.normals;
    	this.binormals = bufferGeometry.binormals;

    	// create geometry

    	this.fromBufferGeometry( bufferGeometry );
    	this.mergeVertices();

    }

    TubeGeometry.prototype = Object.create( Geometry.prototype );
    TubeGeometry.prototype.constructor = TubeGeometry;

    // TubeBufferGeometry

    function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

    	BufferGeometry.call( this );

    	this.type = 'TubeBufferGeometry';

    	this.parameters = {
    		path: path,
    		tubularSegments: tubularSegments,
    		radius: radius,
    		radialSegments: radialSegments,
    		closed: closed
    	};

    	tubularSegments = tubularSegments || 64;
    	radius = radius || 1;
    	radialSegments = radialSegments || 8;
    	closed = closed || false;

    	const frames = path.computeFrenetFrames( tubularSegments, closed );

    	// expose internals

    	this.tangents = frames.tangents;
    	this.normals = frames.normals;
    	this.binormals = frames.binormals;

    	// helper variables

    	const vertex = new Vector3();
    	const normal = new Vector3();
    	const uv = new Vector2();
    	let P = new Vector3();

    	// buffer

    	const vertices = [];
    	const normals = [];
    	const uvs = [];
    	const indices = [];

    	// create buffer data

    	generateBufferData();

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	// functions

    	function generateBufferData() {

    		for ( let i = 0; i < tubularSegments; i ++ ) {

    			generateSegment( i );

    		}

    		// if the geometry is not closed, generate the last row of vertices and normals
    		// at the regular position on the given path
    		//
    		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

    		generateSegment( ( closed === false ) ? tubularSegments : 0 );

    		// uvs are generated in a separate function.
    		// this makes it easy compute correct values for closed geometries

    		generateUVs();

    		// finally create faces

    		generateIndices();

    	}

    	function generateSegment( i ) {

    		// we use getPointAt to sample evenly distributed points from the given path

    		P = path.getPointAt( i / tubularSegments, P );

    		// retrieve corresponding normal and binormal

    		const N = frames.normals[ i ];
    		const B = frames.binormals[ i ];

    		// generate normals and vertices for the current segment

    		for ( let j = 0; j <= radialSegments; j ++ ) {

    			const v = j / radialSegments * Math.PI * 2;

    			const sin = Math.sin( v );
    			const cos = - Math.cos( v );

    			// normal

    			normal.x = ( cos * N.x + sin * B.x );
    			normal.y = ( cos * N.y + sin * B.y );
    			normal.z = ( cos * N.z + sin * B.z );
    			normal.normalize();

    			normals.push( normal.x, normal.y, normal.z );

    			// vertex

    			vertex.x = P.x + radius * normal.x;
    			vertex.y = P.y + radius * normal.y;
    			vertex.z = P.z + radius * normal.z;

    			vertices.push( vertex.x, vertex.y, vertex.z );

    		}

    	}

    	function generateIndices() {

    		for ( let j = 1; j <= tubularSegments; j ++ ) {

    			for ( let i = 1; i <= radialSegments; i ++ ) {

    				const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
    				const b = ( radialSegments + 1 ) * j + ( i - 1 );
    				const c = ( radialSegments + 1 ) * j + i;
    				const d = ( radialSegments + 1 ) * ( j - 1 ) + i;

    				// faces

    				indices.push( a, b, d );
    				indices.push( b, c, d );

    			}

    		}

    	}

    	function generateUVs() {

    		for ( let i = 0; i <= tubularSegments; i ++ ) {

    			for ( let j = 0; j <= radialSegments; j ++ ) {

    				uv.x = i / tubularSegments;
    				uv.y = j / radialSegments;

    				uvs.push( uv.x, uv.y );

    			}

    		}

    	}

    }

    TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

    TubeBufferGeometry.prototype.toJSON = function () {

    	const data = BufferGeometry.prototype.toJSON.call( this );

    	data.path = this.parameters.path.toJSON();

    	return data;

    };

    // TorusKnotGeometry

    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

    	Geometry.call( this );

    	this.type = 'TorusKnotGeometry';

    	this.parameters = {
    		radius: radius,
    		tube: tube,
    		tubularSegments: tubularSegments,
    		radialSegments: radialSegments,
    		p: p,
    		q: q
    	};

    	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

    	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
    	this.mergeVertices();

    }

    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

    // TorusKnotBufferGeometry

    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

    	BufferGeometry.call( this );

    	this.type = 'TorusKnotBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		tube: tube,
    		tubularSegments: tubularSegments,
    		radialSegments: radialSegments,
    		p: p,
    		q: q
    	};

    	radius = radius || 1;
    	tube = tube || 0.4;
    	tubularSegments = Math.floor( tubularSegments ) || 64;
    	radialSegments = Math.floor( radialSegments ) || 8;
    	p = p || 2;
    	q = q || 3;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// helper variables

    	const vertex = new Vector3();
    	const normal = new Vector3();

    	const P1 = new Vector3();
    	const P2 = new Vector3();

    	const B = new Vector3();
    	const T = new Vector3();
    	const N = new Vector3();

    	// generate vertices, normals and uvs

    	for ( let i = 0; i <= tubularSegments; ++ i ) {

    		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

    		const u = i / tubularSegments * p * Math.PI * 2;

    		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
    		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

    		calculatePositionOnCurve( u, p, q, radius, P1 );
    		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

    		// calculate orthonormal basis

    		T.subVectors( P2, P1 );
    		N.addVectors( P2, P1 );
    		B.crossVectors( T, N );
    		N.crossVectors( B, T );

    		// normalize B, N. T can be ignored, we don't use it

    		B.normalize();
    		N.normalize();

    		for ( let j = 0; j <= radialSegments; ++ j ) {

    			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
    			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

    			const v = j / radialSegments * Math.PI * 2;
    			const cx = - tube * Math.cos( v );
    			const cy = tube * Math.sin( v );

    			// now calculate the final vertex position.
    			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

    			vertex.x = P1.x + ( cx * N.x + cy * B.x );
    			vertex.y = P1.y + ( cx * N.y + cy * B.y );
    			vertex.z = P1.z + ( cx * N.z + cy * B.z );

    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

    			normal.subVectors( vertex, P1 ).normalize();

    			normals.push( normal.x, normal.y, normal.z );

    			// uv

    			uvs.push( i / tubularSegments );
    			uvs.push( j / radialSegments );

    		}

    	}

    	// generate indices

    	for ( let j = 1; j <= tubularSegments; j ++ ) {

    		for ( let i = 1; i <= radialSegments; i ++ ) {

    			// indices

    			const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
    			const b = ( radialSegments + 1 ) * j + ( i - 1 );
    			const c = ( radialSegments + 1 ) * j + i;
    			const d = ( radialSegments + 1 ) * ( j - 1 ) + i;

    			// faces

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	// this function calculates the current position on the torus curve

    	function calculatePositionOnCurve( u, p, q, radius, position ) {

    		const cu = Math.cos( u );
    		const su = Math.sin( u );
    		const quOverP = q / p * u;
    		const cs = Math.cos( quOverP );

    		position.x = radius * ( 2 + cs ) * 0.5 * cu;
    		position.y = radius * ( 2 + cs ) * su * 0.5;
    		position.z = radius * Math.sin( quOverP ) * 0.5;

    	}

    }

    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

    // TorusGeometry

    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

    	Geometry.call( this );

    	this.type = 'TorusGeometry';

    	this.parameters = {
    		radius: radius,
    		tube: tube,
    		radialSegments: radialSegments,
    		tubularSegments: tubularSegments,
    		arc: arc
    	};

    	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
    	this.mergeVertices();

    }

    TorusGeometry.prototype = Object.create( Geometry.prototype );
    TorusGeometry.prototype.constructor = TorusGeometry;

    // TorusBufferGeometry

    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

    	BufferGeometry.call( this );

    	this.type = 'TorusBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		tube: tube,
    		radialSegments: radialSegments,
    		tubularSegments: tubularSegments,
    		arc: arc
    	};

    	radius = radius || 1;
    	tube = tube || 0.4;
    	radialSegments = Math.floor( radialSegments ) || 8;
    	tubularSegments = Math.floor( tubularSegments ) || 6;
    	arc = arc || Math.PI * 2;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// helper variables

    	const center = new Vector3();
    	const vertex = new Vector3();
    	const normal = new Vector3();

    	// generate vertices, normals and uvs

    	for ( let j = 0; j <= radialSegments; j ++ ) {

    		for ( let i = 0; i <= tubularSegments; i ++ ) {

    			const u = i / tubularSegments * arc;
    			const v = j / radialSegments * Math.PI * 2;

    			// vertex

    			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
    			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
    			vertex.z = tube * Math.sin( v );

    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// normal

    			center.x = radius * Math.cos( u );
    			center.y = radius * Math.sin( u );
    			normal.subVectors( vertex, center ).normalize();

    			normals.push( normal.x, normal.y, normal.z );

    			// uv

    			uvs.push( i / tubularSegments );
    			uvs.push( j / radialSegments );

    		}

    	}

    	// generate indices

    	for ( let j = 1; j <= radialSegments; j ++ ) {

    		for ( let i = 1; i <= tubularSegments; i ++ ) {

    			// indices

    			const a = ( tubularSegments + 1 ) * j + i - 1;
    			const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
    			const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
    			const d = ( tubularSegments + 1 ) * j + i;

    			// faces

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

    /**
     * Port from https://github.com/mapbox/earcut (v2.2.2)
     */

    const Earcut = {

    	triangulate: function ( data, holeIndices, dim ) {

    		dim = dim || 2;

    		let hasHoles = holeIndices && holeIndices.length,
    			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
    			outerNode = linkedList( data, 0, outerLen, dim, true ),
    			triangles = [];

    		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;

    		let minX, minY, maxX, maxY, x, y, invSize;

    		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

    		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    		if ( data.length > 80 * dim ) {

    			minX = maxX = data[ 0 ];
    			minY = maxY = data[ 1 ];

    			for ( let i = dim; i < outerLen; i += dim ) {

    				x = data[ i ];
    				y = data[ i + 1 ];
    				if ( x < minX ) minX = x;
    				if ( y < minY ) minY = y;
    				if ( x > maxX ) maxX = x;
    				if ( y > maxY ) maxY = y;

    			}

    			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
    			invSize = Math.max( maxX - minX, maxY - minY );
    			invSize = invSize !== 0 ? 1 / invSize : 0;

    		}

    		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

    		return triangles;

    	}

    };

    // create a circular doubly linked list from polygon points in the specified winding order
    function linkedList( data, start, end, dim, clockwise ) {

    	let i, last;

    	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

    		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

    	} else {

    		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

    	}

    	if ( last && equals( last, last.next ) ) {

    		removeNode( last );
    		last = last.next;

    	}

    	return last;

    }

    // eliminate colinear or duplicate points
    function filterPoints( start, end ) {

    	if ( ! start ) return start;
    	if ( ! end ) end = start;

    	let p = start,
    		again;
    	do {

    		again = false;

    		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

    			removeNode( p );
    			p = end = p.prev;
    			if ( p === p.next ) break;
    			again = true;

    		} else {

    			p = p.next;

    		}

    	} while ( again || p !== end );

    	return end;

    }

    // main ear slicing loop which triangulates a polygon (given as a linked list)
    function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

    	if ( ! ear ) return;

    	// interlink polygon nodes in z-order
    	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

    	let stop = ear,
    		prev, next;

    	// iterate through ears, slicing them one by one
    	while ( ear.prev !== ear.next ) {

    		prev = ear.prev;
    		next = ear.next;

    		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

    			// cut off the triangle
    			triangles.push( prev.i / dim );
    			triangles.push( ear.i / dim );
    			triangles.push( next.i / dim );

    			removeNode( ear );

    			// skipping the next vertex leads to less sliver triangles
    			ear = next.next;
    			stop = next.next;

    			continue;

    		}

    		ear = next;

    		// if we looped through the whole remaining polygon and can't find any more ears
    		if ( ear === stop ) {

    			// try filtering points and slicing again
    			if ( ! pass ) {

    				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

    				// if this didn't work, try curing all small self-intersections locally

    			} else if ( pass === 1 ) {

    				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
    				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

    				// as a last resort, try splitting the remaining polygon into two

    			} else if ( pass === 2 ) {

    				splitEarcut( ear, triangles, dim, minX, minY, invSize );

    			}

    			break;

    		}

    	}

    }

    // check whether a polygon node forms a valid ear with adjacent nodes
    function isEar( ear ) {

    	let a = ear.prev,
    		b = ear,
    		c = ear.next;

    	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

    	// now make sure we don't have other points inside the potential ear
    	let p = ear.next.next;

    	while ( p !== ear.prev ) {

    		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
    			area( p.prev, p, p.next ) >= 0 ) return false;
    		p = p.next;

    	}

    	return true;

    }

    function isEarHashed( ear, minX, minY, invSize ) {

    	let a = ear.prev,
    		b = ear,
    		c = ear.next;

    	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

    	// triangle bbox; min & max are calculated like this for speed
    	let minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
    		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
    		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
    		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

    	// z-order range for the current triangle bbox;
    	let minZ = zOrder( minTX, minTY, minX, minY, invSize ),
    		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

    	let p = ear.prevZ,
    		n = ear.nextZ;

    	// look for points inside the triangle in both directions
    	while ( p && p.z >= minZ && n && n.z <= maxZ ) {

    		if ( p !== ear.prev && p !== ear.next &&
    			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
    			area( p.prev, p, p.next ) >= 0 ) return false;
    		p = p.prevZ;

    		if ( n !== ear.prev && n !== ear.next &&
    			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
    			area( n.prev, n, n.next ) >= 0 ) return false;
    		n = n.nextZ;

    	}

    	// look for remaining points in decreasing z-order
    	while ( p && p.z >= minZ ) {

    		if ( p !== ear.prev && p !== ear.next &&
    			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
    			area( p.prev, p, p.next ) >= 0 ) return false;
    		p = p.prevZ;

    	}

    	// look for remaining points in increasing z-order
    	while ( n && n.z <= maxZ ) {

    		if ( n !== ear.prev && n !== ear.next &&
    			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
    			area( n.prev, n, n.next ) >= 0 ) return false;
    		n = n.nextZ;

    	}

    	return true;

    }

    // go through all polygon nodes and cure small local self-intersections
    function cureLocalIntersections( start, triangles, dim ) {

    	let p = start;
    	do {

    		let a = p.prev,
    			b = p.next.next;

    		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

    			triangles.push( a.i / dim );
    			triangles.push( p.i / dim );
    			triangles.push( b.i / dim );

    			// remove two nodes involved
    			removeNode( p );
    			removeNode( p.next );

    			p = start = b;

    		}

    		p = p.next;

    	} while ( p !== start );

    	return filterPoints( p );

    }

    // try splitting polygon into two and triangulate them independently
    function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

    	// look for a valid diagonal that divides the polygon into two
    	let a = start;
    	do {

    		let b = a.next.next;
    		while ( b !== a.prev ) {

    			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

    				// split the polygon in two by the diagonal
    				let c = splitPolygon( a, b );

    				// filter colinear points around the cuts
    				a = filterPoints( a, a.next );
    				c = filterPoints( c, c.next );

    				// run earcut on each half
    				earcutLinked( a, triangles, dim, minX, minY, invSize );
    				earcutLinked( c, triangles, dim, minX, minY, invSize );
    				return;

    			}

    			b = b.next;

    		}

    		a = a.next;

    	} while ( a !== start );

    }

    // link every hole into the outer loop, producing a single-ring polygon without holes
    function eliminateHoles( data, holeIndices, outerNode, dim ) {

    	let queue = [],
    		i, len, start, end, list;

    	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

    		start = holeIndices[ i ] * dim;
    		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
    		list = linkedList( data, start, end, dim, false );
    		if ( list === list.next ) list.steiner = true;
    		queue.push( getLeftmost( list ) );

    	}

    	queue.sort( compareX );

    	// process holes from left to right
    	for ( i = 0; i < queue.length; i ++ ) {

    		eliminateHole( queue[ i ], outerNode );
    		outerNode = filterPoints( outerNode, outerNode.next );

    	}

    	return outerNode;

    }

    function compareX( a, b ) {

    	return a.x - b.x;

    }

    // find a bridge between vertices that connects hole with an outer ring and and link it
    function eliminateHole( hole, outerNode ) {

    	outerNode = findHoleBridge( hole, outerNode );
    	if ( outerNode ) {

    		const b = splitPolygon( outerNode, hole );

    		// filter collinear points around the cuts
    		filterPoints( outerNode, outerNode.next );
    		filterPoints( b, b.next );

    	}

    }

    // David Eberly's algorithm for finding a bridge between hole and outer polygon
    function findHoleBridge( hole, outerNode ) {

    	let p = outerNode,
    		hx = hole.x,
    		hy = hole.y,
    		qx = - Infinity,
    		m;

    	// find a segment intersected by a ray from the hole's leftmost point to the left;
    	// segment's endpoint with lesser x will be potential connection point
    	do {

    		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

    			let x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
    			if ( x <= hx && x > qx ) {

    				qx = x;
    				if ( x === hx ) {

    					if ( hy === p.y ) return p;
    					if ( hy === p.next.y ) return p.next;

    				}

    				m = p.x < p.next.x ? p : p.next;

    			}

    		}

    		p = p.next;

    	} while ( p !== outerNode );

    	if ( ! m ) return null;

    	if ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint

    	// look for points inside the triangle of hole point, segment intersection and endpoint;
    	// if there are no points found, we have a valid connection;
    	// otherwise choose the point of the minimum angle with the ray as connection point

    	let stop = m,
    		mx = m.x,
    		my = m.y,
    		tanMin = Infinity,
    		tan;

    	p = m;

    	do {

    		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
    				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

    			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

    			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {

    				m = p;
    				tanMin = tan;

    			}

    		}

    		p = p.next;

    	} while ( p !== stop );

    	return m;

    }

    // whether sector in vertex m contains sector in vertex p in the same coordinates
    function sectorContainsSector( m, p ) {

    	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;

    }

    // interlink polygon nodes in z-order
    function indexCurve( start, minX, minY, invSize ) {

    	let p = start;
    	do {

    		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
    		p.prevZ = p.prev;
    		p.nextZ = p.next;
    		p = p.next;

    	} while ( p !== start );

    	p.prevZ.nextZ = null;
    	p.prevZ = null;

    	sortLinked( p );

    }

    // Simon Tatham's linked list merge sort algorithm
    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    function sortLinked( list ) {

    	let i, p, q, e, tail, numMerges, pSize, qSize,
    		inSize = 1;

    	do {

    		p = list;
    		list = null;
    		tail = null;
    		numMerges = 0;

    		while ( p ) {

    			numMerges ++;
    			q = p;
    			pSize = 0;
    			for ( i = 0; i < inSize; i ++ ) {

    				pSize ++;
    				q = q.nextZ;
    				if ( ! q ) break;

    			}

    			qSize = inSize;

    			while ( pSize > 0 || ( qSize > 0 && q ) ) {

    				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

    					e = p;
    					p = p.nextZ;
    					pSize --;

    				} else {

    					e = q;
    					q = q.nextZ;
    					qSize --;

    				}

    				if ( tail ) tail.nextZ = e;
    				else list = e;

    				e.prevZ = tail;
    				tail = e;

    			}

    			p = q;

    		}

    		tail.nextZ = null;
    		inSize *= 2;

    	} while ( numMerges > 1 );

    	return list;

    }

    // z-order of a point given coords and inverse of the longer side of data bbox
    function zOrder( x, y, minX, minY, invSize ) {

    	// coords are transformed into non-negative 15-bit integer range
    	x = 32767 * ( x - minX ) * invSize;
    	y = 32767 * ( y - minY ) * invSize;

    	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
    	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
    	x = ( x | ( x << 2 ) ) & 0x33333333;
    	x = ( x | ( x << 1 ) ) & 0x55555555;

    	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
    	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
    	y = ( y | ( y << 2 ) ) & 0x33333333;
    	y = ( y | ( y << 1 ) ) & 0x55555555;

    	return x | ( y << 1 );

    }

    // find the leftmost node of a polygon ring
    function getLeftmost( start ) {

    	let p = start,
    		leftmost = start;
    	do {

    		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
    		p = p.next;

    	} while ( p !== start );

    	return leftmost;

    }

    // check if a point lies within a convex triangle
    function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

    	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
    			( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
    			( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

    }

    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    function isValidDiagonal( a, b ) {

    	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges
    		( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
    		( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
    		equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case

    }

    // signed area of a triangle
    function area( p, q, r ) {

    	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

    }

    // check if two points are equal
    function equals( p1, p2 ) {

    	return p1.x === p2.x && p1.y === p2.y;

    }

    // check if two segments intersect
    function intersects( p1, q1, p2, q2 ) {

    	const o1 = sign( area( p1, q1, p2 ) );
    	const o2 = sign( area( p1, q1, q2 ) );
    	const o3 = sign( area( p2, q2, p1 ) );
    	const o4 = sign( area( p2, q2, q1 ) );

    	if ( o1 !== o2 && o3 !== o4 ) return true; // general case

    	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    	return false;

    }

    // for collinear points p, q, r, check if point q lies on segment pr
    function onSegment( p, q, r ) {

    	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );

    }

    function sign( num ) {

    	return num > 0 ? 1 : num < 0 ? - 1 : 0;

    }

    // check if a polygon diagonal intersects any polygon segments
    function intersectsPolygon( a, b ) {

    	let p = a;
    	do {

    		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
    				intersects( p, p.next, a, b ) ) return true;
    		p = p.next;

    	} while ( p !== a );

    	return false;

    }

    // check if a polygon diagonal is locally inside the polygon
    function locallyInside( a, b ) {

    	return area( a.prev, a, a.next ) < 0 ?
    		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
    		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

    }

    // check if the middle point of a polygon diagonal is inside the polygon
    function middleInside( a, b ) {

    	let p = a,
    		inside = false,
    		px = ( a.x + b.x ) / 2,
    		py = ( a.y + b.y ) / 2;
    	do {

    		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
    				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
    			inside = ! inside;
    		p = p.next;

    	} while ( p !== a );

    	return inside;

    }

    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
    // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    function splitPolygon( a, b ) {

    	let a2 = new Node( a.i, a.x, a.y ),
    		b2 = new Node( b.i, b.x, b.y ),
    		an = a.next,
    		bp = b.prev;

    	a.next = b;
    	b.prev = a;

    	a2.next = an;
    	an.prev = a2;

    	b2.next = a2;
    	a2.prev = b2;

    	bp.next = b2;
    	b2.prev = bp;

    	return b2;

    }

    // create a node and optionally link it with previous one (in a circular doubly linked list)
    function insertNode( i, x, y, last ) {

    	const p = new Node( i, x, y );

    	if ( ! last ) {

    		p.prev = p;
    		p.next = p;

    	} else {

    		p.next = last.next;
    		p.prev = last;
    		last.next.prev = p;
    		last.next = p;

    	}

    	return p;

    }

    function removeNode( p ) {

    	p.next.prev = p.prev;
    	p.prev.next = p.next;

    	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
    	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

    }

    function Node( i, x, y ) {

    	// vertex index in coordinates array
    	this.i = i;

    	// vertex coordinates
    	this.x = x;
    	this.y = y;

    	// previous and next vertex nodes in a polygon ring
    	this.prev = null;
    	this.next = null;

    	// z-order curve value
    	this.z = null;

    	// previous and next nodes in z-order
    	this.prevZ = null;
    	this.nextZ = null;

    	// indicates whether this is a steiner point
    	this.steiner = false;

    }

    function signedArea( data, start, end, dim ) {

    	let sum = 0;
    	for ( let i = start, j = end - dim; i < end; i += dim ) {

    		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
    		j = i;

    	}

    	return sum;

    }

    const ShapeUtils = {

    	// calculate area of the contour polygon

    	area: function ( contour ) {

    		const n = contour.length;
    		let a = 0.0;

    		for ( let p = n - 1, q = 0; q < n; p = q ++ ) {

    			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

    		}

    		return a * 0.5;

    	},

    	isClockWise: function ( pts ) {

    		return ShapeUtils.area( pts ) < 0;

    	},

    	triangulateShape: function ( contour, holes ) {

    		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
    		const holeIndices = []; // array of hole indices
    		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

    		removeDupEndPts( contour );
    		addContour( vertices, contour );

    		//

    		let holeIndex = contour.length;

    		holes.forEach( removeDupEndPts );

    		for ( let i = 0; i < holes.length; i ++ ) {

    			holeIndices.push( holeIndex );
    			holeIndex += holes[ i ].length;
    			addContour( vertices, holes[ i ] );

    		}

    		//

    		const triangles = Earcut.triangulate( vertices, holeIndices );

    		//

    		for ( let i = 0; i < triangles.length; i += 3 ) {

    			faces.push( triangles.slice( i, i + 3 ) );

    		}

    		return faces;

    	}

    };

    function removeDupEndPts( points ) {

    	const l = points.length;

    	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

    		points.pop();

    	}

    }

    function addContour( vertices, contour ) {

    	for ( let i = 0; i < contour.length; i ++ ) {

    		vertices.push( contour[ i ].x );
    		vertices.push( contour[ i ].y );

    	}

    }

    /**
     * Creates extruded geometry from a path shape.
     *
     * parameters = {
     *
     *  curveSegments: <int>, // number of points on the curves
     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
     *  depth: <float>, // Depth to extrude the shape
     *
     *  bevelEnabled: <bool>, // turn on bevel
     *  bevelThickness: <float>, // how deep into the original shape bevel goes
     *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
     *  bevelOffset: <float>, // how far from shape outline does bevel start
     *  bevelSegments: <int>, // number of bevel layers
     *
     *  extrudePath: <THREE.Curve> // curve to extrude shape along
     *
     *  UVGenerator: <Object> // object that provides UV generator functions
     *
     * }
     */

    // ExtrudeGeometry

    function ExtrudeGeometry( shapes, options ) {

    	Geometry.call( this );

    	this.type = 'ExtrudeGeometry';

    	this.parameters = {
    		shapes: shapes,
    		options: options
    	};

    	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
    	this.mergeVertices();

    }

    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

    ExtrudeGeometry.prototype.toJSON = function () {

    	const data = Geometry.prototype.toJSON.call( this );

    	const shapes = this.parameters.shapes;
    	const options = this.parameters.options;

    	return toJSON$1( shapes, options, data );

    };

    // ExtrudeBufferGeometry

    function ExtrudeBufferGeometry( shapes, options ) {

    	BufferGeometry.call( this );

    	this.type = 'ExtrudeBufferGeometry';

    	this.parameters = {
    		shapes: shapes,
    		options: options
    	};

    	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

    	const scope = this;

    	const verticesArray = [];
    	const uvArray = [];

    	for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    		const shape = shapes[ i ];
    		addShape( shape );

    	}

    	// build geometry

    	this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

    	this.computeVertexNormals();

    	// functions

    	function addShape( shape ) {

    		const placeholder = [];

    		// options

    		const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
    		const steps = options.steps !== undefined ? options.steps : 1;
    		let depth = options.depth !== undefined ? options.depth : 100;

    		let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
    		let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
    		let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
    		let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
    		let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

    		const extrudePath = options.extrudePath;

    		const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

    		// deprecated options

    		if ( options.amount !== undefined ) {

    			console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
    			depth = options.amount;

    		}

    		//

    		let extrudePts, extrudeByPath = false;
    		let splineTube, binormal, normal, position2;

    		if ( extrudePath ) {

    			extrudePts = extrudePath.getSpacedPoints( steps );

    			extrudeByPath = true;
    			bevelEnabled = false; // bevels not supported for path extrusion

    			// SETUP TNB variables

    			// TODO1 - have a .isClosed in spline?

    			splineTube = extrudePath.computeFrenetFrames( steps, false );

    			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

    			binormal = new Vector3();
    			normal = new Vector3();
    			position2 = new Vector3();

    		}

    		// Safeguards if bevels are not enabled

    		if ( ! bevelEnabled ) {

    			bevelSegments = 0;
    			bevelThickness = 0;
    			bevelSize = 0;
    			bevelOffset = 0;

    		}

    		// Variables initialization

    		const shapePoints = shape.extractPoints( curveSegments );

    		let vertices = shapePoints.shape;
    		const holes = shapePoints.holes;

    		const reverse = ! ShapeUtils.isClockWise( vertices );

    		if ( reverse ) {

    			vertices = vertices.reverse();

    			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

    			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    				const ahole = holes[ h ];

    				if ( ShapeUtils.isClockWise( ahole ) ) {

    					holes[ h ] = ahole.reverse();

    				}

    			}

    		}


    		const faces = ShapeUtils.triangulateShape( vertices, holes );

    		/* Vertices */

    		const contour = vertices; // vertices has all points but contour has only points of circumference

    		for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    			const ahole = holes[ h ];

    			vertices = vertices.concat( ahole );

    		}


    		function scalePt2( pt, vec, size ) {

    			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

    			return vec.clone().multiplyScalar( size ).add( pt );

    		}

    		const vlen = vertices.length, flen = faces.length;


    		// Find directions for point movement


    		function getBevelVec( inPt, inPrev, inNext ) {

    			// computes for inPt the corresponding point inPt' on a new contour
    			//   shifted by 1 unit (length of normalized vector) to the left
    			// if we walk along contour clockwise, this new contour is outside the old one
    			//
    			// inPt' is the intersection of the two lines parallel to the two
    			//  adjacent edges of inPt at a distance of 1 unit on the left side.

    			let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

    			// good reading for geometry algorithms (here: line-line intersection)
    			// http://geomalgorithms.com/a05-_intersect-1.html

    			const v_prev_x = inPt.x - inPrev.x,
    				v_prev_y = inPt.y - inPrev.y;
    			const v_next_x = inNext.x - inPt.x,
    				v_next_y = inNext.y - inPt.y;

    			const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

    			// check for collinear edges
    			const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

    			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

    				// not collinear

    				// length of vectors for normalizing

    				const v_prev_len = Math.sqrt( v_prev_lensq );
    				const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

    				// shift adjacent points by unit vectors to the left

    				const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
    				const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

    				const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
    				const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

    				// scaling factor for v_prev to intersection point

    				const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
    						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
    					( v_prev_x * v_next_y - v_prev_y * v_next_x );

    				// vector from inPt to intersection point

    				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
    				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

    				// Don't normalize!, otherwise sharp corners become ugly
    				//  but prevent crazy spikes
    				const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
    				if ( v_trans_lensq <= 2 ) {

    					return new Vector2( v_trans_x, v_trans_y );

    				} else {

    					shrink_by = Math.sqrt( v_trans_lensq / 2 );

    				}

    			} else {

    				// handle special case of collinear edges

    				let direction_eq = false; // assumes: opposite

    				if ( v_prev_x > Number.EPSILON ) {

    					if ( v_next_x > Number.EPSILON ) {

    						direction_eq = true;

    					}

    				} else {

    					if ( v_prev_x < - Number.EPSILON ) {

    						if ( v_next_x < - Number.EPSILON ) {

    							direction_eq = true;

    						}

    					} else {

    						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

    							direction_eq = true;

    						}

    					}

    				}

    				if ( direction_eq ) {

    					// console.log("Warning: lines are a straight sequence");
    					v_trans_x = - v_prev_y;
    					v_trans_y = v_prev_x;
    					shrink_by = Math.sqrt( v_prev_lensq );

    				} else {

    					// console.log("Warning: lines are a straight spike");
    					v_trans_x = v_prev_x;
    					v_trans_y = v_prev_y;
    					shrink_by = Math.sqrt( v_prev_lensq / 2 );

    				}

    			}

    			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

    		}


    		const contourMovements = [];

    		for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

    			if ( j === il ) j = 0;
    			if ( k === il ) k = 0;

    			//  (j)---(i)---(k)
    			// console.log('i,j,k', i, j , k)

    			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

    		}

    		const holesMovements = [];
    		let oneHoleMovements, verticesMovements = contourMovements.concat();

    		for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    			const ahole = holes[ h ];

    			oneHoleMovements = [];

    			for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

    				if ( j === il ) j = 0;
    				if ( k === il ) k = 0;

    				//  (j)---(i)---(k)
    				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

    			}

    			holesMovements.push( oneHoleMovements );
    			verticesMovements = verticesMovements.concat( oneHoleMovements );

    		}


    		// Loop bevelSegments, 1 for the front, 1 for the back

    		for ( let b = 0; b < bevelSegments; b ++ ) {

    			//for ( b = bevelSegments; b > 0; b -- ) {

    			const t = b / bevelSegments;
    			const z = bevelThickness * Math.cos( t * Math.PI / 2 );
    			const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

    			// contract shape

    			for ( let i = 0, il = contour.length; i < il; i ++ ) {

    				const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

    				v( vert.x, vert.y, - z );

    			}

    			// expand holes

    			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    				const ahole = holes[ h ];
    				oneHoleMovements = holesMovements[ h ];

    				for ( let i = 0, il = ahole.length; i < il; i ++ ) {

    					const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

    					v( vert.x, vert.y, - z );

    				}

    			}

    		}

    		const bs = bevelSize + bevelOffset;

    		// Back facing vertices

    		for ( let i = 0; i < vlen; i ++ ) {

    			const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

    			if ( ! extrudeByPath ) {

    				v( vert.x, vert.y, 0 );

    			} else {

    				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

    				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
    				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

    				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

    				v( position2.x, position2.y, position2.z );

    			}

    		}

    		// Add stepped vertices...
    		// Including front facing vertices

    		for ( let s = 1; s <= steps; s ++ ) {

    			for ( let i = 0; i < vlen; i ++ ) {

    				const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

    				if ( ! extrudeByPath ) {

    					v( vert.x, vert.y, depth / steps * s );

    				} else {

    					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

    					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
    					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

    					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

    					v( position2.x, position2.y, position2.z );

    				}

    			}

    		}


    		// Add bevel segments planes

    		//for ( b = 1; b <= bevelSegments; b ++ ) {
    		for ( let b = bevelSegments - 1; b >= 0; b -- ) {

    			const t = b / bevelSegments;
    			const z = bevelThickness * Math.cos( t * Math.PI / 2 );
    			const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

    			// contract shape

    			for ( let i = 0, il = contour.length; i < il; i ++ ) {

    				const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
    				v( vert.x, vert.y, depth + z );

    			}

    			// expand holes

    			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    				const ahole = holes[ h ];
    				oneHoleMovements = holesMovements[ h ];

    				for ( let i = 0, il = ahole.length; i < il; i ++ ) {

    					const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

    					if ( ! extrudeByPath ) {

    						v( vert.x, vert.y, depth + z );

    					} else {

    						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

    					}

    				}

    			}

    		}

    		/* Faces */

    		// Top and bottom faces

    		buildLidFaces();

    		// Sides faces

    		buildSideFaces();


    		/////  Internal functions

    		function buildLidFaces() {

    			const start = verticesArray.length / 3;

    			if ( bevelEnabled ) {

    				let layer = 0; // steps + 1
    				let offset = vlen * layer;

    				// Bottom faces

    				for ( let i = 0; i < flen; i ++ ) {

    					const face = faces[ i ];
    					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

    				}

    				layer = steps + bevelSegments * 2;
    				offset = vlen * layer;

    				// Top faces

    				for ( let i = 0; i < flen; i ++ ) {

    					const face = faces[ i ];
    					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

    				}

    			} else {

    				// Bottom faces

    				for ( let i = 0; i < flen; i ++ ) {

    					const face = faces[ i ];
    					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

    				}

    				// Top faces

    				for ( let i = 0; i < flen; i ++ ) {

    					const face = faces[ i ];
    					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

    				}

    			}

    			scope.addGroup( start, verticesArray.length / 3 - start, 0 );

    		}

    		// Create faces for the z-sides of the shape

    		function buildSideFaces() {

    			const start = verticesArray.length / 3;
    			let layeroffset = 0;
    			sidewalls( contour, layeroffset );
    			layeroffset += contour.length;

    			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

    				const ahole = holes[ h ];
    				sidewalls( ahole, layeroffset );

    				//, true
    				layeroffset += ahole.length;

    			}


    			scope.addGroup( start, verticesArray.length / 3 - start, 1 );


    		}

    		function sidewalls( contour, layeroffset ) {

    			let i = contour.length;

    			while ( -- i >= 0 ) {

    				const j = i;
    				let k = i - 1;
    				if ( k < 0 ) k = contour.length - 1;

    				//console.log('b', i,j, i-1, k,vertices.length);

    				for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {

    					const slen1 = vlen * s;
    					const slen2 = vlen * ( s + 1 );

    					const a = layeroffset + j + slen1,
    						b = layeroffset + k + slen1,
    						c = layeroffset + k + slen2,
    						d = layeroffset + j + slen2;

    					f4( a, b, c, d );

    				}

    			}

    		}

    		function v( x, y, z ) {

    			placeholder.push( x );
    			placeholder.push( y );
    			placeholder.push( z );

    		}


    		function f3( a, b, c ) {

    			addVertex( a );
    			addVertex( b );
    			addVertex( c );

    			const nextIndex = verticesArray.length / 3;
    			const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

    			addUV( uvs[ 0 ] );
    			addUV( uvs[ 1 ] );
    			addUV( uvs[ 2 ] );

    		}

    		function f4( a, b, c, d ) {

    			addVertex( a );
    			addVertex( b );
    			addVertex( d );

    			addVertex( b );
    			addVertex( c );
    			addVertex( d );


    			const nextIndex = verticesArray.length / 3;
    			const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

    			addUV( uvs[ 0 ] );
    			addUV( uvs[ 1 ] );
    			addUV( uvs[ 3 ] );

    			addUV( uvs[ 1 ] );
    			addUV( uvs[ 2 ] );
    			addUV( uvs[ 3 ] );

    		}

    		function addVertex( index ) {

    			verticesArray.push( placeholder[ index * 3 + 0 ] );
    			verticesArray.push( placeholder[ index * 3 + 1 ] );
    			verticesArray.push( placeholder[ index * 3 + 2 ] );

    		}


    		function addUV( vector2 ) {

    			uvArray.push( vector2.x );
    			uvArray.push( vector2.y );

    		}

    	}

    }

    ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

    ExtrudeBufferGeometry.prototype.toJSON = function () {

    	const data = BufferGeometry.prototype.toJSON.call( this );

    	const shapes = this.parameters.shapes;
    	const options = this.parameters.options;

    	return toJSON$1( shapes, options, data );

    };

    //

    const WorldUVGenerator = {

    	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

    		const a_x = vertices[ indexA * 3 ];
    		const a_y = vertices[ indexA * 3 + 1 ];
    		const b_x = vertices[ indexB * 3 ];
    		const b_y = vertices[ indexB * 3 + 1 ];
    		const c_x = vertices[ indexC * 3 ];
    		const c_y = vertices[ indexC * 3 + 1 ];

    		return [
    			new Vector2( a_x, a_y ),
    			new Vector2( b_x, b_y ),
    			new Vector2( c_x, c_y )
    		];

    	},

    	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

    		const a_x = vertices[ indexA * 3 ];
    		const a_y = vertices[ indexA * 3 + 1 ];
    		const a_z = vertices[ indexA * 3 + 2 ];
    		const b_x = vertices[ indexB * 3 ];
    		const b_y = vertices[ indexB * 3 + 1 ];
    		const b_z = vertices[ indexB * 3 + 2 ];
    		const c_x = vertices[ indexC * 3 ];
    		const c_y = vertices[ indexC * 3 + 1 ];
    		const c_z = vertices[ indexC * 3 + 2 ];
    		const d_x = vertices[ indexD * 3 ];
    		const d_y = vertices[ indexD * 3 + 1 ];
    		const d_z = vertices[ indexD * 3 + 2 ];

    		if ( Math.abs( a_y - b_y ) < 0.01 ) {

    			return [
    				new Vector2( a_x, 1 - a_z ),
    				new Vector2( b_x, 1 - b_z ),
    				new Vector2( c_x, 1 - c_z ),
    				new Vector2( d_x, 1 - d_z )
    			];

    		} else {

    			return [
    				new Vector2( a_y, 1 - a_z ),
    				new Vector2( b_y, 1 - b_z ),
    				new Vector2( c_y, 1 - c_z ),
    				new Vector2( d_y, 1 - d_z )
    			];

    		}

    	}
    };

    function toJSON$1( shapes, options, data ) {

    	//

    	data.shapes = [];

    	if ( Array.isArray( shapes ) ) {

    		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    			const shape = shapes[ i ];

    			data.shapes.push( shape.uuid );

    		}

    	} else {

    		data.shapes.push( shapes.uuid );

    	}

    	//

    	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

    	return data;

    }

    /**
     * Text = 3D Text
     *
     * parameters = {
     *  font: <THREE.Font>, // font
     *
     *  size: <float>, // size of the text
     *  height: <float>, // thickness to extrude text
     *  curveSegments: <int>, // number of points on the curves
     *
     *  bevelEnabled: <bool>, // turn on bevel
     *  bevelThickness: <float>, // how deep into text bevel goes
     *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
     *  bevelOffset: <float> // how far from text outline does bevel start
     * }
     */

    // TextGeometry

    function TextGeometry( text, parameters ) {

    	Geometry.call( this );

    	this.type = 'TextGeometry';

    	this.parameters = {
    		text: text,
    		parameters: parameters
    	};

    	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
    	this.mergeVertices();

    }

    TextGeometry.prototype = Object.create( Geometry.prototype );
    TextGeometry.prototype.constructor = TextGeometry;

    // TextBufferGeometry

    function TextBufferGeometry( text, parameters ) {

    	parameters = parameters || {};

    	const font = parameters.font;

    	if ( ! ( font && font.isFont ) ) {

    		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
    		return new Geometry();

    	}

    	const shapes = font.generateShapes( text, parameters.size );

    	// translate parameters to ExtrudeGeometry API

    	parameters.depth = parameters.height !== undefined ? parameters.height : 50;

    	// defaults

    	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
    	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
    	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

    	ExtrudeBufferGeometry.call( this, shapes, parameters );

    	this.type = 'TextBufferGeometry';

    }

    TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
    TextBufferGeometry.prototype.constructor = TextBufferGeometry;

    // SphereGeometry

    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

    	Geometry.call( this );

    	this.type = 'SphereGeometry';

    	this.parameters = {
    		radius: radius,
    		widthSegments: widthSegments,
    		heightSegments: heightSegments,
    		phiStart: phiStart,
    		phiLength: phiLength,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
    	this.mergeVertices();

    }

    SphereGeometry.prototype = Object.create( Geometry.prototype );
    SphereGeometry.prototype.constructor = SphereGeometry;

    // SphereBufferGeometry

    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

    	BufferGeometry.call( this );

    	this.type = 'SphereBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		widthSegments: widthSegments,
    		heightSegments: heightSegments,
    		phiStart: phiStart,
    		phiLength: phiLength,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	radius = radius || 1;

    	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
    	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

    	phiStart = phiStart !== undefined ? phiStart : 0;
    	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

    	const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

    	let index = 0;
    	const grid = [];

    	const vertex = new Vector3();
    	const normal = new Vector3();

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// generate vertices, normals and uvs

    	for ( let iy = 0; iy <= heightSegments; iy ++ ) {

    		const verticesRow = [];

    		const v = iy / heightSegments;

    		// special case for the poles

    		let uOffset = 0;

    		if ( iy == 0 && thetaStart == 0 ) {

    			uOffset = 0.5 / widthSegments;

    		} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

    			uOffset = - 0.5 / widthSegments;

    		}

    		for ( let ix = 0; ix <= widthSegments; ix ++ ) {

    			const u = ix / widthSegments;

    			// vertex

    			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
    			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
    			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// normal

    			normal.copy( vertex ).normalize();
    			normals.push( normal.x, normal.y, normal.z );

    			// uv

    			uvs.push( u + uOffset, 1 - v );

    			verticesRow.push( index ++ );

    		}

    		grid.push( verticesRow );

    	}

    	// indices

    	for ( let iy = 0; iy < heightSegments; iy ++ ) {

    		for ( let ix = 0; ix < widthSegments; ix ++ ) {

    			const a = grid[ iy ][ ix + 1 ];
    			const b = grid[ iy ][ ix ];
    			const c = grid[ iy + 1 ][ ix ];
    			const d = grid[ iy + 1 ][ ix + 1 ];

    			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
    			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

    // RingGeometry

    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

    	Geometry.call( this );

    	this.type = 'RingGeometry';

    	this.parameters = {
    		innerRadius: innerRadius,
    		outerRadius: outerRadius,
    		thetaSegments: thetaSegments,
    		phiSegments: phiSegments,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
    	this.mergeVertices();

    }

    RingGeometry.prototype = Object.create( Geometry.prototype );
    RingGeometry.prototype.constructor = RingGeometry;

    // RingBufferGeometry

    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

    	BufferGeometry.call( this );

    	this.type = 'RingBufferGeometry';

    	this.parameters = {
    		innerRadius: innerRadius,
    		outerRadius: outerRadius,
    		thetaSegments: thetaSegments,
    		phiSegments: phiSegments,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	innerRadius = innerRadius || 0.5;
    	outerRadius = outerRadius || 1;

    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

    	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
    	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// some helper variables

    	let radius = innerRadius;
    	const radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
    	const vertex = new Vector3();
    	const uv = new Vector2();

    	// generate vertices, normals and uvs

    	for ( let j = 0; j <= phiSegments; j ++ ) {

    		for ( let i = 0; i <= thetaSegments; i ++ ) {

    			// values are generate from the inside of the ring to the outside

    			const segment = thetaStart + i / thetaSegments * thetaLength;

    			// vertex

    			vertex.x = radius * Math.cos( segment );
    			vertex.y = radius * Math.sin( segment );

    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// normal

    			normals.push( 0, 0, 1 );

    			// uv

    			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
    			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

    			uvs.push( uv.x, uv.y );

    		}

    		// increase the radius for next row of vertices

    		radius += radiusStep;

    	}

    	// indices

    	for ( let j = 0; j < phiSegments; j ++ ) {

    		const thetaSegmentLevel = j * ( thetaSegments + 1 );

    		for ( let i = 0; i < thetaSegments; i ++ ) {

    			const segment = i + thetaSegmentLevel;

    			const a = segment;
    			const b = segment + thetaSegments + 1;
    			const c = segment + thetaSegments + 2;
    			const d = segment + 1;

    			// faces

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    RingBufferGeometry.prototype.constructor = RingBufferGeometry;

    // LatheGeometry

    function LatheGeometry( points, segments, phiStart, phiLength ) {

    	Geometry.call( this );

    	this.type = 'LatheGeometry';

    	this.parameters = {
    		points: points,
    		segments: segments,
    		phiStart: phiStart,
    		phiLength: phiLength
    	};

    	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
    	this.mergeVertices();

    }

    LatheGeometry.prototype = Object.create( Geometry.prototype );
    LatheGeometry.prototype.constructor = LatheGeometry;

    // LatheBufferGeometry

    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

    	BufferGeometry.call( this );

    	this.type = 'LatheBufferGeometry';

    	this.parameters = {
    		points: points,
    		segments: segments,
    		phiStart: phiStart,
    		phiLength: phiLength
    	};

    	segments = Math.floor( segments ) || 12;
    	phiStart = phiStart || 0;
    	phiLength = phiLength || Math.PI * 2;

    	// clamp phiLength so it's in range of [ 0, 2PI ]

    	phiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );


    	// buffers

    	const indices = [];
    	const vertices = [];
    	const uvs = [];

    	// helper variables

    	const inverseSegments = 1.0 / segments;
    	const vertex = new Vector3();
    	const uv = new Vector2();

    	// generate vertices and uvs

    	for ( let i = 0; i <= segments; i ++ ) {

    		const phi = phiStart + i * inverseSegments * phiLength;

    		const sin = Math.sin( phi );
    		const cos = Math.cos( phi );

    		for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {

    			// vertex

    			vertex.x = points[ j ].x * sin;
    			vertex.y = points[ j ].y;
    			vertex.z = points[ j ].x * cos;

    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// uv

    			uv.x = i / segments;
    			uv.y = j / ( points.length - 1 );

    			uvs.push( uv.x, uv.y );


    		}

    	}

    	// indices

    	for ( let i = 0; i < segments; i ++ ) {

    		for ( let j = 0; j < ( points.length - 1 ); j ++ ) {

    			const base = j + i * points.length;

    			const a = base;
    			const b = base + points.length;
    			const c = base + points.length + 1;
    			const d = base + 1;

    			// faces

    			indices.push( a, b, d );
    			indices.push( b, c, d );

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	// generate normals

    	this.computeVertexNormals();

    	// if the geometry is closed, we need to average the normals along the seam.
    	// because the corresponding vertices are identical (but still have different UVs).

    	if ( phiLength === Math.PI * 2 ) {

    		const normals = this.attributes.normal.array;
    		const n1 = new Vector3();
    		const n2 = new Vector3();
    		const n = new Vector3();

    		// this is the buffer offset for the last line of vertices

    		const base = segments * points.length * 3;

    		for ( let i = 0, j = 0; i < points.length; i ++, j += 3 ) {

    			// select the normal of the vertex in the first line

    			n1.x = normals[ j + 0 ];
    			n1.y = normals[ j + 1 ];
    			n1.z = normals[ j + 2 ];

    			// select the normal of the vertex in the last line

    			n2.x = normals[ base + j + 0 ];
    			n2.y = normals[ base + j + 1 ];
    			n2.z = normals[ base + j + 2 ];

    			// average normals

    			n.addVectors( n1, n2 ).normalize();

    			// assign the new values to both normals

    			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
    			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
    			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

    		}

    	}

    }

    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

    // ShapeGeometry

    function ShapeGeometry( shapes, curveSegments ) {

    	Geometry.call( this );

    	this.type = 'ShapeGeometry';

    	if ( typeof curveSegments === 'object' ) {

    		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

    		curveSegments = curveSegments.curveSegments;

    	}

    	this.parameters = {
    		shapes: shapes,
    		curveSegments: curveSegments
    	};

    	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
    	this.mergeVertices();

    }

    ShapeGeometry.prototype = Object.create( Geometry.prototype );
    ShapeGeometry.prototype.constructor = ShapeGeometry;

    ShapeGeometry.prototype.toJSON = function () {

    	const data = Geometry.prototype.toJSON.call( this );

    	const shapes = this.parameters.shapes;

    	return toJSON( shapes, data );

    };

    // ShapeBufferGeometry

    function ShapeBufferGeometry( shapes, curveSegments ) {

    	BufferGeometry.call( this );

    	this.type = 'ShapeBufferGeometry';

    	this.parameters = {
    		shapes: shapes,
    		curveSegments: curveSegments
    	};

    	curveSegments = curveSegments || 12;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// helper variables

    	let groupStart = 0;
    	let groupCount = 0;

    	// allow single and array values for "shapes" parameter

    	if ( Array.isArray( shapes ) === false ) {

    		addShape( shapes );

    	} else {

    		for ( let i = 0; i < shapes.length; i ++ ) {

    			addShape( shapes[ i ] );

    			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

    			groupStart += groupCount;
    			groupCount = 0;

    		}

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


    	// helper functions

    	function addShape( shape ) {

    		const indexOffset = vertices.length / 3;
    		const points = shape.extractPoints( curveSegments );

    		let shapeVertices = points.shape;
    		const shapeHoles = points.holes;

    		// check direction of vertices

    		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

    			shapeVertices = shapeVertices.reverse();

    		}

    		for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

    			const shapeHole = shapeHoles[ i ];

    			if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

    				shapeHoles[ i ] = shapeHole.reverse();

    			}

    		}

    		const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

    		// join vertices of inner and outer paths to a single array

    		for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

    			const shapeHole = shapeHoles[ i ];
    			shapeVertices = shapeVertices.concat( shapeHole );

    		}

    		// vertices, normals, uvs

    		for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {

    			const vertex = shapeVertices[ i ];

    			vertices.push( vertex.x, vertex.y, 0 );
    			normals.push( 0, 0, 1 );
    			uvs.push( vertex.x, vertex.y ); // world uvs

    		}

    		// incides

    		for ( let i = 0, l = faces.length; i < l; i ++ ) {

    			const face = faces[ i ];

    			const a = face[ 0 ] + indexOffset;
    			const b = face[ 1 ] + indexOffset;
    			const c = face[ 2 ] + indexOffset;

    			indices.push( a, b, c );
    			groupCount += 3;

    		}

    	}

    }

    ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

    ShapeBufferGeometry.prototype.toJSON = function () {

    	const data = BufferGeometry.prototype.toJSON.call( this );

    	const shapes = this.parameters.shapes;

    	return toJSON( shapes, data );

    };

    //

    function toJSON( shapes, data ) {

    	data.shapes = [];

    	if ( Array.isArray( shapes ) ) {

    		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    			const shape = shapes[ i ];

    			data.shapes.push( shape.uuid );

    		}

    	} else {

    		data.shapes.push( shapes.uuid );

    	}

    	return data;

    }

    function EdgesGeometry( geometry, thresholdAngle ) {

    	BufferGeometry.call( this );

    	this.type = 'EdgesGeometry';

    	this.parameters = {
    		thresholdAngle: thresholdAngle
    	};

    	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

    	// buffer

    	const vertices = [];

    	// helper variables

    	const thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );
    	const edge = [ 0, 0 ], edges = {};
    	let edge1, edge2, key;
    	const keys = [ 'a', 'b', 'c' ];

    	// prepare source geometry

    	let geometry2;

    	if ( geometry.isBufferGeometry ) {

    		geometry2 = new Geometry();
    		geometry2.fromBufferGeometry( geometry );

    	} else {

    		geometry2 = geometry.clone();

    	}

    	geometry2.mergeVertices();
    	geometry2.computeFaceNormals();

    	const sourceVertices = geometry2.vertices;
    	const faces = geometry2.faces;

    	// now create a data structure where each entry represents an edge with its adjoining faces

    	for ( let i = 0, l = faces.length; i < l; i ++ ) {

    		const face = faces[ i ];

    		for ( let j = 0; j < 3; j ++ ) {

    			edge1 = face[ keys[ j ] ];
    			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
    			edge[ 0 ] = Math.min( edge1, edge2 );
    			edge[ 1 ] = Math.max( edge1, edge2 );

    			key = edge[ 0 ] + ',' + edge[ 1 ];

    			if ( edges[ key ] === undefined ) {

    				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

    			} else {

    				edges[ key ].face2 = i;

    			}

    		}

    	}

    	// generate vertices

    	for ( key in edges ) {

    		const e = edges[ key ];

    		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

    		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

    			let vertex = sourceVertices[ e.index1 ];
    			vertices.push( vertex.x, vertex.y, vertex.z );

    			vertex = sourceVertices[ e.index2 ];
    			vertices.push( vertex.x, vertex.y, vertex.z );

    		}

    	}

    	// build geometry

    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

    }

    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
    EdgesGeometry.prototype.constructor = EdgesGeometry;

    // CylinderGeometry

    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

    	Geometry.call( this );

    	this.type = 'CylinderGeometry';

    	this.parameters = {
    		radiusTop: radiusTop,
    		radiusBottom: radiusBottom,
    		height: height,
    		radialSegments: radialSegments,
    		heightSegments: heightSegments,
    		openEnded: openEnded,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
    	this.mergeVertices();

    }

    CylinderGeometry.prototype = Object.create( Geometry.prototype );
    CylinderGeometry.prototype.constructor = CylinderGeometry;

    // CylinderBufferGeometry

    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

    	BufferGeometry.call( this );

    	this.type = 'CylinderBufferGeometry';

    	this.parameters = {
    		radiusTop: radiusTop,
    		radiusBottom: radiusBottom,
    		height: height,
    		radialSegments: radialSegments,
    		heightSegments: heightSegments,
    		openEnded: openEnded,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	const scope = this;

    	radiusTop = radiusTop !== undefined ? radiusTop : 1;
    	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
    	height = height || 1;

    	radialSegments = Math.floor( radialSegments ) || 8;
    	heightSegments = Math.floor( heightSegments ) || 1;

    	openEnded = openEnded !== undefined ? openEnded : false;
    	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// helper variables

    	let index = 0;
    	const indexArray = [];
    	const halfHeight = height / 2;
    	let groupStart = 0;

    	// generate geometry

    	generateTorso();

    	if ( openEnded === false ) {

    		if ( radiusTop > 0 ) generateCap( true );
    		if ( radiusBottom > 0 ) generateCap( false );

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	function generateTorso() {

    		const normal = new Vector3();
    		const vertex = new Vector3();

    		let groupCount = 0;

    		// this will be used to calculate the normal
    		const slope = ( radiusBottom - radiusTop ) / height;

    		// generate vertices, normals and uvs

    		for ( let y = 0; y <= heightSegments; y ++ ) {

    			const indexRow = [];

    			const v = y / heightSegments;

    			// calculate the radius of the current row

    			const radius = v * ( radiusBottom - radiusTop ) + radiusTop;

    			for ( let x = 0; x <= radialSegments; x ++ ) {

    				const u = x / radialSegments;

    				const theta = u * thetaLength + thetaStart;

    				const sinTheta = Math.sin( theta );
    				const cosTheta = Math.cos( theta );

    				// vertex

    				vertex.x = radius * sinTheta;
    				vertex.y = - v * height + halfHeight;
    				vertex.z = radius * cosTheta;
    				vertices.push( vertex.x, vertex.y, vertex.z );

    				// normal

    				normal.set( sinTheta, slope, cosTheta ).normalize();
    				normals.push( normal.x, normal.y, normal.z );

    				// uv

    				uvs.push( u, 1 - v );

    				// save index of vertex in respective row

    				indexRow.push( index ++ );

    			}

    			// now save vertices of the row in our index array

    			indexArray.push( indexRow );

    		}

    		// generate indices

    		for ( let x = 0; x < radialSegments; x ++ ) {

    			for ( let y = 0; y < heightSegments; y ++ ) {

    				// we use the index array to access the correct indices

    				const a = indexArray[ y ][ x ];
    				const b = indexArray[ y + 1 ][ x ];
    				const c = indexArray[ y + 1 ][ x + 1 ];
    				const d = indexArray[ y ][ x + 1 ];

    				// faces

    				indices.push( a, b, d );
    				indices.push( b, c, d );

    				// update group counter

    				groupCount += 6;

    			}

    		}

    		// add a group to the geometry. this will ensure multi material support

    		scope.addGroup( groupStart, groupCount, 0 );

    		// calculate new start value for groups

    		groupStart += groupCount;

    	}

    	function generateCap( top ) {

    		let centerIndexStart, centerIndexEnd;

    		const uv = new Vector2();
    		const vertex = new Vector3();

    		let groupCount = 0;

    		const radius = ( top === true ) ? radiusTop : radiusBottom;
    		const sign = ( top === true ) ? 1 : - 1;

    		// save the index of the first center vertex
    		centerIndexStart = index;

    		// first we generate the center vertex data of the cap.
    		// because the geometry needs one set of uvs per face,
    		// we must generate a center vertex per face/segment

    		for ( let x = 1; x <= radialSegments; x ++ ) {

    			// vertex

    			vertices.push( 0, halfHeight * sign, 0 );

    			// normal

    			normals.push( 0, sign, 0 );

    			// uv

    			uvs.push( 0.5, 0.5 );

    			// increase index

    			index ++;

    		}

    		// save the index of the last center vertex

    		centerIndexEnd = index;

    		// now we generate the surrounding vertices, normals and uvs

    		for ( let x = 0; x <= radialSegments; x ++ ) {

    			const u = x / radialSegments;
    			const theta = u * thetaLength + thetaStart;

    			const cosTheta = Math.cos( theta );
    			const sinTheta = Math.sin( theta );

    			// vertex

    			vertex.x = radius * sinTheta;
    			vertex.y = halfHeight * sign;
    			vertex.z = radius * cosTheta;
    			vertices.push( vertex.x, vertex.y, vertex.z );

    			// normal

    			normals.push( 0, sign, 0 );

    			// uv

    			uv.x = ( cosTheta * 0.5 ) + 0.5;
    			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
    			uvs.push( uv.x, uv.y );

    			// increase index

    			index ++;

    		}

    		// generate indices

    		for ( let x = 0; x < radialSegments; x ++ ) {

    			const c = centerIndexStart + x;
    			const i = centerIndexEnd + x;

    			if ( top === true ) {

    				// face top

    				indices.push( i, i + 1, c );

    			} else {

    				// face bottom

    				indices.push( i + 1, i, c );

    			}

    			groupCount += 3;

    		}

    		// add a group to the geometry. this will ensure multi material support

    		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

    		// calculate new start value for groups

    		groupStart += groupCount;

    	}

    }

    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

    // ConeGeometry

    function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

    	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

    	this.type = 'ConeGeometry';

    	this.parameters = {
    		radius: radius,
    		height: height,
    		radialSegments: radialSegments,
    		heightSegments: heightSegments,
    		openEnded: openEnded,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    }

    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
    ConeGeometry.prototype.constructor = ConeGeometry;

    // ConeBufferGeometry

    function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

    	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

    	this.type = 'ConeBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		height: height,
    		radialSegments: radialSegments,
    		heightSegments: heightSegments,
    		openEnded: openEnded,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    }

    ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

    // CircleGeometry

    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

    	Geometry.call( this );

    	this.type = 'CircleGeometry';

    	this.parameters = {
    		radius: radius,
    		segments: segments,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
    	this.mergeVertices();

    }

    CircleGeometry.prototype = Object.create( Geometry.prototype );
    CircleGeometry.prototype.constructor = CircleGeometry;

    // CircleBufferGeometry

    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

    	BufferGeometry.call( this );

    	this.type = 'CircleBufferGeometry';

    	this.parameters = {
    		radius: radius,
    		segments: segments,
    		thetaStart: thetaStart,
    		thetaLength: thetaLength
    	};

    	radius = radius || 1;
    	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

    	// buffers

    	const indices = [];
    	const vertices = [];
    	const normals = [];
    	const uvs = [];

    	// helper variables

    	const vertex = new Vector3();
    	const uv = new Vector2();

    	// center point

    	vertices.push( 0, 0, 0 );
    	normals.push( 0, 0, 1 );
    	uvs.push( 0.5, 0.5 );

    	for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {

    		const segment = thetaStart + s / segments * thetaLength;

    		// vertex

    		vertex.x = radius * Math.cos( segment );
    		vertex.y = radius * Math.sin( segment );

    		vertices.push( vertex.x, vertex.y, vertex.z );

    		// normal

    		normals.push( 0, 0, 1 );

    		// uvs

    		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
    		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

    		uvs.push( uv.x, uv.y );

    	}

    	// indices

    	for ( let i = 1; i <= segments; i ++ ) {

    		indices.push( i, i + 1, 0 );

    	}

    	// build geometry

    	this.setIndex( indices );
    	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    }

    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

    var Geometries = /*#__PURE__*/Object.freeze({
        __proto__: null,
        WireframeGeometry: WireframeGeometry,
        ParametricGeometry: ParametricGeometry,
        ParametricBufferGeometry: ParametricBufferGeometry,
        TetrahedronGeometry: TetrahedronGeometry,
        TetrahedronBufferGeometry: TetrahedronBufferGeometry,
        OctahedronGeometry: OctahedronGeometry,
        OctahedronBufferGeometry: OctahedronBufferGeometry,
        IcosahedronGeometry: IcosahedronGeometry,
        IcosahedronBufferGeometry: IcosahedronBufferGeometry,
        DodecahedronGeometry: DodecahedronGeometry,
        DodecahedronBufferGeometry: DodecahedronBufferGeometry,
        PolyhedronGeometry: PolyhedronGeometry,
        PolyhedronBufferGeometry: PolyhedronBufferGeometry,
        TubeGeometry: TubeGeometry,
        TubeBufferGeometry: TubeBufferGeometry,
        TorusKnotGeometry: TorusKnotGeometry,
        TorusKnotBufferGeometry: TorusKnotBufferGeometry,
        TorusGeometry: TorusGeometry,
        TorusBufferGeometry: TorusBufferGeometry,
        TextGeometry: TextGeometry,
        TextBufferGeometry: TextBufferGeometry,
        SphereGeometry: SphereGeometry,
        SphereBufferGeometry: SphereBufferGeometry,
        RingGeometry: RingGeometry,
        RingBufferGeometry: RingBufferGeometry,
        PlaneGeometry: PlaneGeometry,
        PlaneBufferGeometry: PlaneBufferGeometry,
        LatheGeometry: LatheGeometry,
        LatheBufferGeometry: LatheBufferGeometry,
        ShapeGeometry: ShapeGeometry,
        ShapeBufferGeometry: ShapeBufferGeometry,
        ExtrudeGeometry: ExtrudeGeometry,
        ExtrudeBufferGeometry: ExtrudeBufferGeometry,
        EdgesGeometry: EdgesGeometry,
        ConeGeometry: ConeGeometry,
        ConeBufferGeometry: ConeBufferGeometry,
        CylinderGeometry: CylinderGeometry,
        CylinderBufferGeometry: CylinderBufferGeometry,
        CircleGeometry: CircleGeometry,
        CircleBufferGeometry: CircleBufferGeometry,
        BoxGeometry: BoxGeometry,
        BoxBufferGeometry: BoxBufferGeometry
    });

    /**
     * parameters = {
     *  color: <THREE.Color>
     * }
     */

    function ShadowMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'ShadowMaterial';

    	this.color = new Color( 0x000000 );
    	this.transparent = true;

    	this.setValues( parameters );

    }

    ShadowMaterial.prototype = Object.create( Material.prototype );
    ShadowMaterial.prototype.constructor = ShadowMaterial;

    ShadowMaterial.prototype.isShadowMaterial = true;

    ShadowMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	return this;

    };

    function RawShaderMaterial( parameters ) {

    	ShaderMaterial.call( this, parameters );

    	this.type = 'RawShaderMaterial';

    }

    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
    RawShaderMaterial.prototype.constructor = RawShaderMaterial;

    RawShaderMaterial.prototype.isRawShaderMaterial = true;

    /**
     * parameters = {
     *  color: <hex>,
     *  roughness: <float>,
     *  metalness: <float>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  roughnessMap: new THREE.Texture( <Image> ),
     *
     *  metalnessMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  envMapIntensity: <float>
     *
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshStandardMaterial( parameters ) {

    	Material.call( this );

    	this.defines = { 'STANDARD': '' };

    	this.type = 'MeshStandardMaterial';

    	this.color = new Color( 0xffffff ); // diffuse
    	this.roughness = 1.0;
    	this.metalness = 0.0;

    	this.map = null;

    	this.lightMap = null;
    	this.lightMapIntensity = 1.0;

    	this.aoMap = null;
    	this.aoMapIntensity = 1.0;

    	this.emissive = new Color( 0x000000 );
    	this.emissiveIntensity = 1.0;
    	this.emissiveMap = null;

    	this.bumpMap = null;
    	this.bumpScale = 1;

    	this.normalMap = null;
    	this.normalMapType = TangentSpaceNormalMap;
    	this.normalScale = new Vector2( 1, 1 );

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.roughnessMap = null;

    	this.metalnessMap = null;

    	this.alphaMap = null;

    	this.envMap = null;
    	this.envMapIntensity = 1.0;

    	this.refractionRatio = 0.98;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;
    	this.wireframeLinecap = 'round';
    	this.wireframeLinejoin = 'round';

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.vertexTangents = false;

    	this.setValues( parameters );

    }

    MeshStandardMaterial.prototype = Object.create( Material.prototype );
    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

    MeshStandardMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.defines = { 'STANDARD': '' };

    	this.color.copy( source.color );
    	this.roughness = source.roughness;
    	this.metalness = source.metalness;

    	this.map = source.map;

    	this.lightMap = source.lightMap;
    	this.lightMapIntensity = source.lightMapIntensity;

    	this.aoMap = source.aoMap;
    	this.aoMapIntensity = source.aoMapIntensity;

    	this.emissive.copy( source.emissive );
    	this.emissiveMap = source.emissiveMap;
    	this.emissiveIntensity = source.emissiveIntensity;

    	this.bumpMap = source.bumpMap;
    	this.bumpScale = source.bumpScale;

    	this.normalMap = source.normalMap;
    	this.normalMapType = source.normalMapType;
    	this.normalScale.copy( source.normalScale );

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.roughnessMap = source.roughnessMap;

    	this.metalnessMap = source.metalnessMap;

    	this.alphaMap = source.alphaMap;

    	this.envMap = source.envMap;
    	this.envMapIntensity = source.envMapIntensity;

    	this.refractionRatio = source.refractionRatio;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;
    	this.wireframeLinecap = source.wireframeLinecap;
    	this.wireframeLinejoin = source.wireframeLinejoin;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	this.vertexTangents = source.vertexTangents;

    	return this;

    };

    /**
     * parameters = {
     *  clearcoat: <float>,
     *  clearcoatMap: new THREE.Texture( <Image> ),
     *  clearcoatRoughness: <float>,
     *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
     *  clearcoatNormalScale: <Vector2>,
     *  clearcoatNormalMap: new THREE.Texture( <Image> ),
     *
     *  reflectivity: <float>,
     *
     *  sheen: <Color>,
     *
     *  transmission: <float>,
     *  transmissionMap: new THREE.Texture( <Image> )
     * }
     */

    function MeshPhysicalMaterial( parameters ) {

    	MeshStandardMaterial.call( this );

    	this.defines = {

    		'STANDARD': '',
    		'PHYSICAL': ''

    	};

    	this.type = 'MeshPhysicalMaterial';

    	this.clearcoat = 0.0;
    	this.clearcoatMap = null;
    	this.clearcoatRoughness = 0.0;
    	this.clearcoatRoughnessMap = null;
    	this.clearcoatNormalScale = new Vector2( 1, 1 );
    	this.clearcoatNormalMap = null;

    	this.reflectivity = 0.5; // maps to F0 = 0.04

    	this.sheen = null; // null will disable sheen bsdf

    	this.transmission = 0.0;
    	this.transmissionMap = null;

    	this.setValues( parameters );

    }

    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

    MeshPhysicalMaterial.prototype.copy = function ( source ) {

    	MeshStandardMaterial.prototype.copy.call( this, source );

    	this.defines = {

    		'STANDARD': '',
    		'PHYSICAL': ''

    	};

    	this.clearcoat = source.clearcoat;
    	this.clearcoatMap = source.clearcoatMap;
    	this.clearcoatRoughness = source.clearcoatRoughness;
    	this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    	this.clearcoatNormalMap = source.clearcoatNormalMap;
    	this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

    	this.reflectivity = source.reflectivity;

    	if ( source.sheen ) {

    		this.sheen = ( this.sheen || new Color() ).copy( source.sheen );

    	} else {

    		this.sheen = null;

    	}

    	this.transmission = source.transmission;
    	this.transmissionMap = source.transmissionMap;

    	return this;

    };

    /**
     * parameters = {
     *  color: <hex>,
     *  specular: <hex>,
     *  shininess: <float>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.MultiplyOperation,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshPhongMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshPhongMaterial';

    	this.color = new Color( 0xffffff ); // diffuse
    	this.specular = new Color( 0x111111 );
    	this.shininess = 30;

    	this.map = null;

    	this.lightMap = null;
    	this.lightMapIntensity = 1.0;

    	this.aoMap = null;
    	this.aoMapIntensity = 1.0;

    	this.emissive = new Color( 0x000000 );
    	this.emissiveIntensity = 1.0;
    	this.emissiveMap = null;

    	this.bumpMap = null;
    	this.bumpScale = 1;

    	this.normalMap = null;
    	this.normalMapType = TangentSpaceNormalMap;
    	this.normalScale = new Vector2( 1, 1 );

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.specularMap = null;

    	this.alphaMap = null;

    	this.envMap = null;
    	this.combine = MultiplyOperation;
    	this.reflectivity = 1;
    	this.refractionRatio = 0.98;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;
    	this.wireframeLinecap = 'round';
    	this.wireframeLinejoin = 'round';

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.setValues( parameters );

    }

    MeshPhongMaterial.prototype = Object.create( Material.prototype );
    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

    MeshPhongMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );
    	this.specular.copy( source.specular );
    	this.shininess = source.shininess;

    	this.map = source.map;

    	this.lightMap = source.lightMap;
    	this.lightMapIntensity = source.lightMapIntensity;

    	this.aoMap = source.aoMap;
    	this.aoMapIntensity = source.aoMapIntensity;

    	this.emissive.copy( source.emissive );
    	this.emissiveMap = source.emissiveMap;
    	this.emissiveIntensity = source.emissiveIntensity;

    	this.bumpMap = source.bumpMap;
    	this.bumpScale = source.bumpScale;

    	this.normalMap = source.normalMap;
    	this.normalMapType = source.normalMapType;
    	this.normalScale.copy( source.normalScale );

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.specularMap = source.specularMap;

    	this.alphaMap = source.alphaMap;

    	this.envMap = source.envMap;
    	this.combine = source.combine;
    	this.reflectivity = source.reflectivity;
    	this.refractionRatio = source.refractionRatio;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;
    	this.wireframeLinecap = source.wireframeLinecap;
    	this.wireframeLinejoin = source.wireframeLinejoin;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	return this;

    };

    /**
     * parameters = {
     *  color: <hex>,
     *
     *  map: new THREE.Texture( <Image> ),
     *  gradientMap: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshToonMaterial( parameters ) {

    	Material.call( this );

    	this.defines = { 'TOON': '' };

    	this.type = 'MeshToonMaterial';

    	this.color = new Color( 0xffffff );

    	this.map = null;
    	this.gradientMap = null;

    	this.lightMap = null;
    	this.lightMapIntensity = 1.0;

    	this.aoMap = null;
    	this.aoMapIntensity = 1.0;

    	this.emissive = new Color( 0x000000 );
    	this.emissiveIntensity = 1.0;
    	this.emissiveMap = null;

    	this.bumpMap = null;
    	this.bumpScale = 1;

    	this.normalMap = null;
    	this.normalMapType = TangentSpaceNormalMap;
    	this.normalScale = new Vector2( 1, 1 );

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.alphaMap = null;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;
    	this.wireframeLinecap = 'round';
    	this.wireframeLinejoin = 'round';

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.setValues( parameters );

    }

    MeshToonMaterial.prototype = Object.create( Material.prototype );
    MeshToonMaterial.prototype.constructor = MeshToonMaterial;

    MeshToonMaterial.prototype.isMeshToonMaterial = true;

    MeshToonMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.map = source.map;
    	this.gradientMap = source.gradientMap;

    	this.lightMap = source.lightMap;
    	this.lightMapIntensity = source.lightMapIntensity;

    	this.aoMap = source.aoMap;
    	this.aoMapIntensity = source.aoMapIntensity;

    	this.emissive.copy( source.emissive );
    	this.emissiveMap = source.emissiveMap;
    	this.emissiveIntensity = source.emissiveIntensity;

    	this.bumpMap = source.bumpMap;
    	this.bumpScale = source.bumpScale;

    	this.normalMap = source.normalMap;
    	this.normalMapType = source.normalMapType;
    	this.normalScale.copy( source.normalScale );

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.alphaMap = source.alphaMap;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;
    	this.wireframeLinecap = source.wireframeLinecap;
    	this.wireframeLinejoin = source.wireframeLinejoin;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	return this;

    };

    /**
     * parameters = {
     *  opacity: <float>,
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshNormalMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshNormalMaterial';

    	this.bumpMap = null;
    	this.bumpScale = 1;

    	this.normalMap = null;
    	this.normalMapType = TangentSpaceNormalMap;
    	this.normalScale = new Vector2( 1, 1 );

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;

    	this.fog = false;

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.setValues( parameters );

    }

    MeshNormalMaterial.prototype = Object.create( Material.prototype );
    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

    MeshNormalMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.bumpMap = source.bumpMap;
    	this.bumpScale = source.bumpScale;

    	this.normalMap = source.normalMap;
    	this.normalMapType = source.normalMapType;
    	this.normalScale.copy( source.normalScale );

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	return this;

    };

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshLambertMaterial( parameters ) {

    	Material.call( this );

    	this.type = 'MeshLambertMaterial';

    	this.color = new Color( 0xffffff ); // diffuse

    	this.map = null;

    	this.lightMap = null;
    	this.lightMapIntensity = 1.0;

    	this.aoMap = null;
    	this.aoMapIntensity = 1.0;

    	this.emissive = new Color( 0x000000 );
    	this.emissiveIntensity = 1.0;
    	this.emissiveMap = null;

    	this.specularMap = null;

    	this.alphaMap = null;

    	this.envMap = null;
    	this.combine = MultiplyOperation;
    	this.reflectivity = 1;
    	this.refractionRatio = 0.98;

    	this.wireframe = false;
    	this.wireframeLinewidth = 1;
    	this.wireframeLinecap = 'round';
    	this.wireframeLinejoin = 'round';

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.setValues( parameters );

    }

    MeshLambertMaterial.prototype = Object.create( Material.prototype );
    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

    MeshLambertMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.color.copy( source.color );

    	this.map = source.map;

    	this.lightMap = source.lightMap;
    	this.lightMapIntensity = source.lightMapIntensity;

    	this.aoMap = source.aoMap;
    	this.aoMapIntensity = source.aoMapIntensity;

    	this.emissive.copy( source.emissive );
    	this.emissiveMap = source.emissiveMap;
    	this.emissiveIntensity = source.emissiveIntensity;

    	this.specularMap = source.specularMap;

    	this.alphaMap = source.alphaMap;

    	this.envMap = source.envMap;
    	this.combine = source.combine;
    	this.reflectivity = source.reflectivity;
    	this.refractionRatio = source.refractionRatio;

    	this.wireframe = source.wireframe;
    	this.wireframeLinewidth = source.wireframeLinewidth;
    	this.wireframeLinecap = source.wireframeLinecap;
    	this.wireframeLinejoin = source.wireframeLinejoin;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	return this;

    };

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  matcap: new THREE.Texture( <Image> ),
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>
     * }
     */

    function MeshMatcapMaterial( parameters ) {

    	Material.call( this );

    	this.defines = { 'MATCAP': '' };

    	this.type = 'MeshMatcapMaterial';

    	this.color = new Color( 0xffffff ); // diffuse

    	this.matcap = null;

    	this.map = null;

    	this.bumpMap = null;
    	this.bumpScale = 1;

    	this.normalMap = null;
    	this.normalMapType = TangentSpaceNormalMap;
    	this.normalScale = new Vector2( 1, 1 );

    	this.displacementMap = null;
    	this.displacementScale = 1;
    	this.displacementBias = 0;

    	this.alphaMap = null;

    	this.skinning = false;
    	this.morphTargets = false;
    	this.morphNormals = false;

    	this.setValues( parameters );

    }

    MeshMatcapMaterial.prototype = Object.create( Material.prototype );
    MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

    MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

    MeshMatcapMaterial.prototype.copy = function ( source ) {

    	Material.prototype.copy.call( this, source );

    	this.defines = { 'MATCAP': '' };

    	this.color.copy( source.color );

    	this.matcap = source.matcap;

    	this.map = source.map;

    	this.bumpMap = source.bumpMap;
    	this.bumpScale = source.bumpScale;

    	this.normalMap = source.normalMap;
    	this.normalMapType = source.normalMapType;
    	this.normalScale.copy( source.normalScale );

    	this.displacementMap = source.displacementMap;
    	this.displacementScale = source.displacementScale;
    	this.displacementBias = source.displacementBias;

    	this.alphaMap = source.alphaMap;

    	this.skinning = source.skinning;
    	this.morphTargets = source.morphTargets;
    	this.morphNormals = source.morphNormals;

    	return this;

    };

    /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  linewidth: <float>,
     *
     *  scale: <float>,
     *  dashSize: <float>,
     *  gapSize: <float>
     * }
     */

    function LineDashedMaterial( parameters ) {

    	LineBasicMaterial.call( this );

    	this.type = 'LineDashedMaterial';

    	this.scale = 1;
    	this.dashSize = 3;
    	this.gapSize = 1;

    	this.setValues( parameters );

    }

    LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
    LineDashedMaterial.prototype.constructor = LineDashedMaterial;

    LineDashedMaterial.prototype.isLineDashedMaterial = true;

    LineDashedMaterial.prototype.copy = function ( source ) {

    	LineBasicMaterial.prototype.copy.call( this, source );

    	this.scale = source.scale;
    	this.dashSize = source.dashSize;
    	this.gapSize = source.gapSize;

    	return this;

    };

    var Materials = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ShadowMaterial: ShadowMaterial,
        SpriteMaterial: SpriteMaterial,
        RawShaderMaterial: RawShaderMaterial,
        ShaderMaterial: ShaderMaterial,
        PointsMaterial: PointsMaterial,
        MeshPhysicalMaterial: MeshPhysicalMaterial,
        MeshStandardMaterial: MeshStandardMaterial,
        MeshPhongMaterial: MeshPhongMaterial,
        MeshToonMaterial: MeshToonMaterial,
        MeshNormalMaterial: MeshNormalMaterial,
        MeshLambertMaterial: MeshLambertMaterial,
        MeshDepthMaterial: MeshDepthMaterial,
        MeshDistanceMaterial: MeshDistanceMaterial,
        MeshBasicMaterial: MeshBasicMaterial,
        MeshMatcapMaterial: MeshMatcapMaterial,
        LineDashedMaterial: LineDashedMaterial,
        LineBasicMaterial: LineBasicMaterial,
        Material: Material
    });

    const AnimationUtils = {

    	// same as Array.prototype.slice, but also works on typed arrays
    	arraySlice: function ( array, from, to ) {

    		if ( AnimationUtils.isTypedArray( array ) ) {

    			// in ios9 array.subarray(from, undefined) will return empty array
    			// but array.subarray(from) or array.subarray(from, len) is correct
    			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

    		}

    		return array.slice( from, to );

    	},

    	// converts an array to a specific type
    	convertArray: function ( array, type, forceClone ) {

    		if ( ! array || // let 'undefined' and 'null' pass
    			! forceClone && array.constructor === type ) return array;

    		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

    			return new type( array ); // create typed array

    		}

    		return Array.prototype.slice.call( array ); // create Array

    	},

    	isTypedArray: function ( object ) {

    		return ArrayBuffer.isView( object ) &&
    			! ( object instanceof DataView );

    	},

    	// returns an array by which times and values can be sorted
    	getKeyframeOrder: function ( times ) {

    		function compareTime( i, j ) {

    			return times[ i ] - times[ j ];

    		}

    		const n = times.length;
    		const result = new Array( n );
    		for ( let i = 0; i !== n; ++ i ) result[ i ] = i;

    		result.sort( compareTime );

    		return result;

    	},

    	// uses the array previously returned by 'getKeyframeOrder' to sort data
    	sortedArray: function ( values, stride, order ) {

    		const nValues = values.length;
    		const result = new values.constructor( nValues );

    		for ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

    			const srcOffset = order[ i ] * stride;

    			for ( let j = 0; j !== stride; ++ j ) {

    				result[ dstOffset ++ ] = values[ srcOffset + j ];

    			}

    		}

    		return result;

    	},

    	// function for parsing AOS keyframe formats
    	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

    		let i = 1, key = jsonKeys[ 0 ];

    		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

    			key = jsonKeys[ i ++ ];

    		}

    		if ( key === undefined ) return; // no data

    		let value = key[ valuePropertyName ];
    		if ( value === undefined ) return; // no data

    		if ( Array.isArray( value ) ) {

    			do {

    				value = key[ valuePropertyName ];

    				if ( value !== undefined ) {

    					times.push( key.time );
    					values.push.apply( values, value ); // push all elements

    				}

    				key = jsonKeys[ i ++ ];

    			} while ( key !== undefined );

    		} else if ( value.toArray !== undefined ) {

    			// ...assume THREE.Math-ish

    			do {

    				value = key[ valuePropertyName ];

    				if ( value !== undefined ) {

    					times.push( key.time );
    					value.toArray( values, values.length );

    				}

    				key = jsonKeys[ i ++ ];

    			} while ( key !== undefined );

    		} else {

    			// otherwise push as-is

    			do {

    				value = key[ valuePropertyName ];

    				if ( value !== undefined ) {

    					times.push( key.time );
    					values.push( value );

    				}

    				key = jsonKeys[ i ++ ];

    			} while ( key !== undefined );

    		}

    	},

    	subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {

    		fps = fps || 30;

    		const clip = sourceClip.clone();

    		clip.name = name;

    		const tracks = [];

    		for ( let i = 0; i < clip.tracks.length; ++ i ) {

    			const track = clip.tracks[ i ];
    			const valueSize = track.getValueSize();

    			const times = [];
    			const values = [];

    			for ( let j = 0; j < track.times.length; ++ j ) {

    				const frame = track.times[ j ] * fps;

    				if ( frame < startFrame || frame >= endFrame ) continue;

    				times.push( track.times[ j ] );

    				for ( let k = 0; k < valueSize; ++ k ) {

    					values.push( track.values[ j * valueSize + k ] );

    				}

    			}

    			if ( times.length === 0 ) continue;

    			track.times = AnimationUtils.convertArray( times, track.times.constructor );
    			track.values = AnimationUtils.convertArray( values, track.values.constructor );

    			tracks.push( track );

    		}

    		clip.tracks = tracks;

    		// find minimum .times value across all tracks in the trimmed clip

    		let minStartTime = Infinity;

    		for ( let i = 0; i < clip.tracks.length; ++ i ) {

    			if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {

    				minStartTime = clip.tracks[ i ].times[ 0 ];

    			}

    		}

    		// shift all tracks such that clip begins at t=0

    		for ( let i = 0; i < clip.tracks.length; ++ i ) {

    			clip.tracks[ i ].shift( - 1 * minStartTime );

    		}

    		clip.resetDuration();

    		return clip;

    	},

    	makeClipAdditive: function ( targetClip, referenceFrame, referenceClip, fps ) {

    		if ( referenceFrame === undefined ) referenceFrame = 0;
    		if ( referenceClip === undefined ) referenceClip = targetClip;
    		if ( fps === undefined || fps <= 0 ) fps = 30;

    		const numTracks = targetClip.tracks.length;
    		const referenceTime = referenceFrame / fps;

    		// Make each track's values relative to the values at the reference frame
    		for ( let i = 0; i < numTracks; ++ i ) {

    			const referenceTrack = referenceClip.tracks[ i ];
    			const referenceTrackType = referenceTrack.ValueTypeName;

    			// Skip this track if it's non-numeric
    			if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;

    			// Find the track in the target clip whose name and type matches the reference track
    			const targetTrack = targetClip.tracks.find( function ( track ) {

    				return track.name === referenceTrack.name
    				&& track.ValueTypeName === referenceTrackType;

    			} );

    			if ( targetTrack === undefined ) continue;

    			const valueSize = referenceTrack.getValueSize();
    			const lastIndex = referenceTrack.times.length - 1;
    			let referenceValue;

    			// Find the value to subtract out of the track
    			if ( referenceTime <= referenceTrack.times[ 0 ] ) {

    				// Reference frame is earlier than the first keyframe, so just use the first keyframe
    				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, 0, referenceTrack.valueSize );

    			} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {

    				// Reference frame is after the last keyframe, so just use the last keyframe
    				const startIndex = lastIndex * valueSize;
    				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex );

    			} else {

    				// Interpolate to the reference value
    				const interpolant = referenceTrack.createInterpolant();
    				interpolant.evaluate( referenceTime );
    				referenceValue = interpolant.resultBuffer;

    			}

    			// Conjugate the quaternion
    			if ( referenceTrackType === 'quaternion' ) {

    				const referenceQuat = new Quaternion(
    					referenceValue[ 0 ],
    					referenceValue[ 1 ],
    					referenceValue[ 2 ],
    					referenceValue[ 3 ]
    				).normalize().conjugate();
    				referenceQuat.toArray( referenceValue );

    			}

    			// Subtract the reference value from all of the track values

    			const numTimes = targetTrack.times.length;
    			for ( let j = 0; j < numTimes; ++ j ) {

    				const valueStart = j * valueSize;

    				if ( referenceTrackType === 'quaternion' ) {

    					// Multiply the conjugate for quaternion track types
    					Quaternion.multiplyQuaternionsFlat(
    						targetTrack.values,
    						valueStart,
    						referenceValue,
    						0,
    						targetTrack.values,
    						valueStart
    					);

    				} else {

    					// Subtract each value for all other numeric track types
    					for ( let k = 0; k < valueSize; ++ k ) {

    						targetTrack.values[ valueStart + k ] -= referenceValue[ k ];

    					}

    				}

    			}

    		}

    		targetClip.blendMode = AdditiveAnimationBlendMode;

    		return targetClip;

    	}

    };

    /**
     * Abstract base class of interpolants over parametric samples.
     *
     * The parameter domain is one dimensional, typically the time or a path
     * along a curve defined by the data.
     *
     * The sample values can have any dimensionality and derived classes may
     * apply special interpretations to the data.
     *
     * This class provides the interval seek in a Template Method, deferring
     * the actual interpolation to derived classes.
     *
     * Time complexity is O(1) for linear access crossing at most two points
     * and O(log N) for random access, where N is the number of positions.
     *
     * References:
     *
     * 		http://www.oodesign.com/template-method-pattern.html
     *
     */

    function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    	this.parameterPositions = parameterPositions;
    	this._cachedIndex = 0;

    	this.resultBuffer = resultBuffer !== undefined ?
    		resultBuffer : new sampleValues.constructor( sampleSize );
    	this.sampleValues = sampleValues;
    	this.valueSize = sampleSize;

    }

    Object.assign( Interpolant.prototype, {

    	evaluate: function ( t ) {

    		let pp = this.parameterPositions,
    			i1 = this._cachedIndex,

    			t1 = pp[ i1 ],
    			t0 = pp[ i1 - 1 ];

    		validate_interval: {

    			seek: {

    				let right;

    				linear_scan: {

    					//- See http://jsperf.com/comparison-to-undefined/3
    					//- slower code:
    					//-
    					//- 				if ( t >= t1 || t1 === undefined ) {
    					forward_scan: if ( ! ( t < t1 ) ) {

    						for ( let giveUpAt = i1 + 2; ; ) {

    							if ( t1 === undefined ) {

    								if ( t < t0 ) break forward_scan;

    								// after end

    								i1 = pp.length;
    								this._cachedIndex = i1;
    								return this.afterEnd_( i1 - 1, t, t0 );

    							}

    							if ( i1 === giveUpAt ) break; // this loop

    							t0 = t1;
    							t1 = pp[ ++ i1 ];

    							if ( t < t1 ) {

    								// we have arrived at the sought interval
    								break seek;

    							}

    						}

    						// prepare binary search on the right side of the index
    						right = pp.length;
    						break linear_scan;

    					}

    					//- slower code:
    					//-					if ( t < t0 || t0 === undefined ) {
    					if ( ! ( t >= t0 ) ) {

    						// looping?

    						const t1global = pp[ 1 ];

    						if ( t < t1global ) {

    							i1 = 2; // + 1, using the scan for the details
    							t0 = t1global;

    						}

    						// linear reverse scan

    						for ( let giveUpAt = i1 - 2; ; ) {

    							if ( t0 === undefined ) {

    								// before start

    								this._cachedIndex = 0;
    								return this.beforeStart_( 0, t, t1 );

    							}

    							if ( i1 === giveUpAt ) break; // this loop

    							t1 = t0;
    							t0 = pp[ -- i1 - 1 ];

    							if ( t >= t0 ) {

    								// we have arrived at the sought interval
    								break seek;

    							}

    						}

    						// prepare binary search on the left side of the index
    						right = i1;
    						i1 = 0;
    						break linear_scan;

    					}

    					// the interval is valid

    					break validate_interval;

    				} // linear scan

    				// binary search

    				while ( i1 < right ) {

    					const mid = ( i1 + right ) >>> 1;

    					if ( t < pp[ mid ] ) {

    						right = mid;

    					} else {

    						i1 = mid + 1;

    					}

    				}

    				t1 = pp[ i1 ];
    				t0 = pp[ i1 - 1 ];

    				// check boundary cases, again

    				if ( t0 === undefined ) {

    					this._cachedIndex = 0;
    					return this.beforeStart_( 0, t, t1 );

    				}

    				if ( t1 === undefined ) {

    					i1 = pp.length;
    					this._cachedIndex = i1;
    					return this.afterEnd_( i1 - 1, t0, t );

    				}

    			} // seek

    			this._cachedIndex = i1;

    			this.intervalChanged_( i1, t0, t1 );

    		} // validate_interval

    		return this.interpolate_( i1, t0, t, t1 );

    	},

    	settings: null, // optional, subclass-specific settings structure
    	// Note: The indirection allows central control of many interpolants.

    	// --- Protected interface

    	DefaultSettings_: {},

    	getSettings_: function () {

    		return this.settings || this.DefaultSettings_;

    	},

    	copySampleValue_: function ( index ) {

    		// copies a sample value to the result buffer

    		const result = this.resultBuffer,
    			values = this.sampleValues,
    			stride = this.valueSize,
    			offset = index * stride;

    		for ( let i = 0; i !== stride; ++ i ) {

    			result[ i ] = values[ offset + i ];

    		}

    		return result;

    	},

    	// Template methods for derived classes:

    	interpolate_: function ( /* i1, t0, t, t1 */ ) {

    		throw new Error( 'call to abstract method' );
    		// implementations shall return this.resultBuffer

    	},

    	intervalChanged_: function ( /* i1, t0, t1 */ ) {

    		// empty

    	}

    } );

    // DECLARE ALIAS AFTER assign prototype
    Object.assign( Interpolant.prototype, {

    	//( 0, t, t0 ), returns this.resultBuffer
    	beforeStart_: Interpolant.prototype.copySampleValue_,

    	//( N-1, tN-1, t ), returns this.resultBuffer
    	afterEnd_: Interpolant.prototype.copySampleValue_,

    } );

    /**
     * Fast and simple cubic spline interpolant.
     *
     * It was derived from a Hermitian construction setting the first derivative
     * at each sample position to the linear slope between neighboring positions
     * over their parameter interval.
     */

    function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

    	this._weightPrev = - 0;
    	this._offsetPrev = - 0;
    	this._weightNext = - 0;
    	this._offsetNext = - 0;

    }

    CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

    	constructor: CubicInterpolant,

    	DefaultSettings_: {

    		endingStart: ZeroCurvatureEnding,
    		endingEnd: ZeroCurvatureEnding

    	},

    	intervalChanged_: function ( i1, t0, t1 ) {

    		let pp = this.parameterPositions,
    			iPrev = i1 - 2,
    			iNext = i1 + 1,

    			tPrev = pp[ iPrev ],
    			tNext = pp[ iNext ];

    		if ( tPrev === undefined ) {

    			switch ( this.getSettings_().endingStart ) {

    				case ZeroSlopeEnding:

    					// f'(t0) = 0
    					iPrev = i1;
    					tPrev = 2 * t0 - t1;

    					break;

    				case WrapAroundEnding:

    					// use the other end of the curve
    					iPrev = pp.length - 2;
    					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

    					break;

    				default: // ZeroCurvatureEnding

    					// f''(t0) = 0 a.k.a. Natural Spline
    					iPrev = i1;
    					tPrev = t1;

    			}

    		}

    		if ( tNext === undefined ) {

    			switch ( this.getSettings_().endingEnd ) {

    				case ZeroSlopeEnding:

    					// f'(tN) = 0
    					iNext = i1;
    					tNext = 2 * t1 - t0;

    					break;

    				case WrapAroundEnding:

    					// use the other end of the curve
    					iNext = 1;
    					tNext = t1 + pp[ 1 ] - pp[ 0 ];

    					break;

    				default: // ZeroCurvatureEnding

    					// f''(tN) = 0, a.k.a. Natural Spline
    					iNext = i1 - 1;
    					tNext = t0;

    			}

    		}

    		const halfDt = ( t1 - t0 ) * 0.5,
    			stride = this.valueSize;

    		this._weightPrev = halfDt / ( t0 - tPrev );
    		this._weightNext = halfDt / ( tNext - t1 );
    		this._offsetPrev = iPrev * stride;
    		this._offsetNext = iNext * stride;

    	},

    	interpolate_: function ( i1, t0, t, t1 ) {

    		const result = this.resultBuffer,
    			values = this.sampleValues,
    			stride = this.valueSize,

    			o1 = i1 * stride,		o0 = o1 - stride,
    			oP = this._offsetPrev, 	oN = this._offsetNext,
    			wP = this._weightPrev,	wN = this._weightNext,

    			p = ( t - t0 ) / ( t1 - t0 ),
    			pp = p * p,
    			ppp = pp * p;

    		// evaluate polynomials

    		const sP = - wP * ppp + 2 * wP * pp - wP * p;
    		const s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
    		const s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
    		const sN = wN * ppp - wN * pp;

    		// combine data linearly

    		for ( let i = 0; i !== stride; ++ i ) {

    			result[ i ] =
    					sP * values[ oP + i ] +
    					s0 * values[ o0 + i ] +
    					s1 * values[ o1 + i ] +
    					sN * values[ oN + i ];

    		}

    		return result;

    	}

    } );

    function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

    }

    LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

    	constructor: LinearInterpolant,

    	interpolate_: function ( i1, t0, t, t1 ) {

    		const result = this.resultBuffer,
    			values = this.sampleValues,
    			stride = this.valueSize,

    			offset1 = i1 * stride,
    			offset0 = offset1 - stride,

    			weight1 = ( t - t0 ) / ( t1 - t0 ),
    			weight0 = 1 - weight1;

    		for ( let i = 0; i !== stride; ++ i ) {

    			result[ i ] =
    					values[ offset0 + i ] * weight0 +
    					values[ offset1 + i ] * weight1;

    		}

    		return result;

    	}

    } );

    /**
     *
     * Interpolant that evaluates to the sample value at the position preceeding
     * the parameter.
     */

    function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

    }

    DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

    	constructor: DiscreteInterpolant,

    	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

    		return this.copySampleValue_( i1 - 1 );

    	}

    } );

    function KeyframeTrack( name, times, values, interpolation ) {

    	if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
    	if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

    	this.name = name;

    	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
    	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

    	this.setInterpolation( interpolation || this.DefaultInterpolation );

    }

    // Static methods

    Object.assign( KeyframeTrack, {

    	// Serialization (in static context, because of constructor invocation
    	// and automatic invocation of .toJSON):

    	toJSON: function ( track ) {

    		const trackType = track.constructor;

    		let json;

    		// derived classes can define a static toJSON method
    		if ( trackType.toJSON !== undefined ) {

    			json = trackType.toJSON( track );

    		} else {

    			// by default, we assume the data can be serialized as-is
    			json = {

    				'name': track.name,
    				'times': AnimationUtils.convertArray( track.times, Array ),
    				'values': AnimationUtils.convertArray( track.values, Array )

    			};

    			const interpolation = track.getInterpolation();

    			if ( interpolation !== track.DefaultInterpolation ) {

    				json.interpolation = interpolation;

    			}

    		}

    		json.type = track.ValueTypeName; // mandatory

    		return json;

    	}

    } );

    Object.assign( KeyframeTrack.prototype, {

    	constructor: KeyframeTrack,

    	TimeBufferType: Float32Array,

    	ValueBufferType: Float32Array,

    	DefaultInterpolation: InterpolateLinear,

    	InterpolantFactoryMethodDiscrete: function ( result ) {

    		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

    	},

    	InterpolantFactoryMethodLinear: function ( result ) {

    		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

    	},

    	InterpolantFactoryMethodSmooth: function ( result ) {

    		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

    	},

    	setInterpolation: function ( interpolation ) {

    		let factoryMethod;

    		switch ( interpolation ) {

    			case InterpolateDiscrete:

    				factoryMethod = this.InterpolantFactoryMethodDiscrete;

    				break;

    			case InterpolateLinear:

    				factoryMethod = this.InterpolantFactoryMethodLinear;

    				break;

    			case InterpolateSmooth:

    				factoryMethod = this.InterpolantFactoryMethodSmooth;

    				break;

    		}

    		if ( factoryMethod === undefined ) {

    			const message = "unsupported interpolation for " +
    				this.ValueTypeName + " keyframe track named " + this.name;

    			if ( this.createInterpolant === undefined ) {

    				// fall back to default, unless the default itself is messed up
    				if ( interpolation !== this.DefaultInterpolation ) {

    					this.setInterpolation( this.DefaultInterpolation );

    				} else {

    					throw new Error( message ); // fatal, in this case

    				}

    			}

    			console.warn( 'THREE.KeyframeTrack:', message );
    			return this;

    		}

    		this.createInterpolant = factoryMethod;

    		return this;

    	},

    	getInterpolation: function () {

    		switch ( this.createInterpolant ) {

    			case this.InterpolantFactoryMethodDiscrete:

    				return InterpolateDiscrete;

    			case this.InterpolantFactoryMethodLinear:

    				return InterpolateLinear;

    			case this.InterpolantFactoryMethodSmooth:

    				return InterpolateSmooth;

    		}

    	},

    	getValueSize: function () {

    		return this.values.length / this.times.length;

    	},

    	// move all keyframes either forwards or backwards in time
    	shift: function ( timeOffset ) {

    		if ( timeOffset !== 0.0 ) {

    			const times = this.times;

    			for ( let i = 0, n = times.length; i !== n; ++ i ) {

    				times[ i ] += timeOffset;

    			}

    		}

    		return this;

    	},

    	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    	scale: function ( timeScale ) {

    		if ( timeScale !== 1.0 ) {

    			const times = this.times;

    			for ( let i = 0, n = times.length; i !== n; ++ i ) {

    				times[ i ] *= timeScale;

    			}

    		}

    		return this;

    	},

    	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    	trim: function ( startTime, endTime ) {

    		const times = this.times,
    			nKeys = times.length;

    		let from = 0,
    			to = nKeys - 1;

    		while ( from !== nKeys && times[ from ] < startTime ) {

    			++ from;

    		}

    		while ( to !== - 1 && times[ to ] > endTime ) {

    			-- to;

    		}

    		++ to; // inclusive -> exclusive bound

    		if ( from !== 0 || to !== nKeys ) {

    			// empty tracks are forbidden, so keep at least one keyframe
    			if ( from >= to ) {

    				to = Math.max( to, 1 );
    				from = to - 1;

    			}

    			const stride = this.getValueSize();
    			this.times = AnimationUtils.arraySlice( times, from, to );
    			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

    		}

    		return this;

    	},

    	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    	validate: function () {

    		let valid = true;

    		const valueSize = this.getValueSize();
    		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

    			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
    			valid = false;

    		}

    		const times = this.times,
    			values = this.values,

    			nKeys = times.length;

    		if ( nKeys === 0 ) {

    			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
    			valid = false;

    		}

    		let prevTime = null;

    		for ( let i = 0; i !== nKeys; i ++ ) {

    			const currTime = times[ i ];

    			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

    				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
    				valid = false;
    				break;

    			}

    			if ( prevTime !== null && prevTime > currTime ) {

    				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
    				valid = false;
    				break;

    			}

    			prevTime = currTime;

    		}

    		if ( values !== undefined ) {

    			if ( AnimationUtils.isTypedArray( values ) ) {

    				for ( let i = 0, n = values.length; i !== n; ++ i ) {

    					const value = values[ i ];

    					if ( isNaN( value ) ) {

    						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
    						valid = false;
    						break;

    					}

    				}

    			}

    		}

    		return valid;

    	},

    	// removes equivalent sequential keys as common in morph target sequences
    	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    	optimize: function () {

    		// times or values may be shared with other tracks, so overwriting is unsafe
    		const times = AnimationUtils.arraySlice( this.times ),
    			values = AnimationUtils.arraySlice( this.values ),
    			stride = this.getValueSize(),

    			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

    			lastIndex = times.length - 1;

    		let writeIndex = 1;

    		for ( let i = 1; i < lastIndex; ++ i ) {

    			let keep = false;

    			const time = times[ i ];
    			const timeNext = times[ i + 1 ];

    			// remove adjacent keyframes scheduled at the same time

    			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

    				if ( ! smoothInterpolation ) {

    					// remove unnecessary keyframes same as their neighbors

    					const offset = i * stride,
    						offsetP = offset - stride,
    						offsetN = offset + stride;

    					for ( let j = 0; j !== stride; ++ j ) {

    						const value = values[ offset + j ];

    						if ( value !== values[ offsetP + j ] ||
    							value !== values[ offsetN + j ] ) {

    							keep = true;
    							break;

    						}

    					}

    				} else {

    					keep = true;

    				}

    			}

    			// in-place compaction

    			if ( keep ) {

    				if ( i !== writeIndex ) {

    					times[ writeIndex ] = times[ i ];

    					const readOffset = i * stride,
    						writeOffset = writeIndex * stride;

    					for ( let j = 0; j !== stride; ++ j ) {

    						values[ writeOffset + j ] = values[ readOffset + j ];

    					}

    				}

    				++ writeIndex;

    			}

    		}

    		// flush last keyframe (compaction looks ahead)

    		if ( lastIndex > 0 ) {

    			times[ writeIndex ] = times[ lastIndex ];

    			for ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

    				values[ writeOffset + j ] = values[ readOffset + j ];

    			}

    			++ writeIndex;

    		}

    		if ( writeIndex !== times.length ) {

    			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
    			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

    		} else {

    			this.times = times;
    			this.values = values;

    		}

    		return this;

    	},

    	clone: function () {

    		const times = AnimationUtils.arraySlice( this.times, 0 );
    		const values = AnimationUtils.arraySlice( this.values, 0 );

    		const TypedKeyframeTrack = this.constructor;
    		const track = new TypedKeyframeTrack( this.name, times, values );

    		// Interpolant argument to constructor is not saved, so copy the factory method directly.
    		track.createInterpolant = this.createInterpolant;

    		return track;

    	}

    } );

    /**
     * A Track of Boolean keyframe values.
     */

    function BooleanKeyframeTrack( name, times, values ) {

    	KeyframeTrack.call( this, name, times, values );

    }

    BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: BooleanKeyframeTrack,

    	ValueTypeName: 'bool',
    	ValueBufferType: Array,

    	DefaultInterpolation: InterpolateDiscrete,

    	InterpolantFactoryMethodLinear: undefined,
    	InterpolantFactoryMethodSmooth: undefined

    	// Note: Actually this track could have a optimized / compressed
    	// representation of a single value and a custom interpolant that
    	// computes "firstValue ^ isOdd( index )".

    } );

    /**
     * A Track of keyframe values that represent color.
     */

    function ColorKeyframeTrack( name, times, values, interpolation ) {

    	KeyframeTrack.call( this, name, times, values, interpolation );

    }

    ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: ColorKeyframeTrack,

    	ValueTypeName: 'color'

    	// ValueBufferType is inherited

    	// DefaultInterpolation is inherited

    	// Note: Very basic implementation and nothing special yet.
    	// However, this is the place for color space parameterization.

    } );

    /**
     * A Track of numeric keyframe values.
     */

    function NumberKeyframeTrack( name, times, values, interpolation ) {

    	KeyframeTrack.call( this, name, times, values, interpolation );

    }

    NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: NumberKeyframeTrack,

    	ValueTypeName: 'number'

    	// ValueBufferType is inherited

    	// DefaultInterpolation is inherited

    } );

    /**
     * Spherical linear unit quaternion interpolant.
     */

    function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

    }

    QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

    	constructor: QuaternionLinearInterpolant,

    	interpolate_: function ( i1, t0, t, t1 ) {

    		const result = this.resultBuffer,
    			values = this.sampleValues,
    			stride = this.valueSize,

    			alpha = ( t - t0 ) / ( t1 - t0 );

    		let offset = i1 * stride;

    		for ( let end = offset + stride; offset !== end; offset += 4 ) {

    			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

    		}

    		return result;

    	}

    } );

    /**
     * A Track of quaternion keyframe values.
     */

    function QuaternionKeyframeTrack( name, times, values, interpolation ) {

    	KeyframeTrack.call( this, name, times, values, interpolation );

    }

    QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: QuaternionKeyframeTrack,

    	ValueTypeName: 'quaternion',

    	// ValueBufferType is inherited

    	DefaultInterpolation: InterpolateLinear,

    	InterpolantFactoryMethodLinear: function ( result ) {

    		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

    	},

    	InterpolantFactoryMethodSmooth: undefined // not yet implemented

    } );

    /**
     * A Track that interpolates Strings
     */

    function StringKeyframeTrack( name, times, values, interpolation ) {

    	KeyframeTrack.call( this, name, times, values, interpolation );

    }

    StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: StringKeyframeTrack,

    	ValueTypeName: 'string',
    	ValueBufferType: Array,

    	DefaultInterpolation: InterpolateDiscrete,

    	InterpolantFactoryMethodLinear: undefined,

    	InterpolantFactoryMethodSmooth: undefined

    } );

    /**
     * A Track of vectored keyframe values.
     */

    function VectorKeyframeTrack( name, times, values, interpolation ) {

    	KeyframeTrack.call( this, name, times, values, interpolation );

    }

    VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

    	constructor: VectorKeyframeTrack,

    	ValueTypeName: 'vector'

    	// ValueBufferType is inherited

    	// DefaultInterpolation is inherited

    } );

    function AnimationClip( name, duration, tracks, blendMode ) {

    	this.name = name;
    	this.tracks = tracks;
    	this.duration = ( duration !== undefined ) ? duration : - 1;
    	this.blendMode = ( blendMode !== undefined ) ? blendMode : NormalAnimationBlendMode;

    	this.uuid = MathUtils.generateUUID();

    	// this means it should figure out its duration by scanning the tracks
    	if ( this.duration < 0 ) {

    		this.resetDuration();

    	}

    }

    function getTrackTypeForValueTypeName( typeName ) {

    	switch ( typeName.toLowerCase() ) {

    		case 'scalar':
    		case 'double':
    		case 'float':
    		case 'number':
    		case 'integer':

    			return NumberKeyframeTrack;

    		case 'vector':
    		case 'vector2':
    		case 'vector3':
    		case 'vector4':

    			return VectorKeyframeTrack;

    		case 'color':

    			return ColorKeyframeTrack;

    		case 'quaternion':

    			return QuaternionKeyframeTrack;

    		case 'bool':
    		case 'boolean':

    			return BooleanKeyframeTrack;

    		case 'string':

    			return StringKeyframeTrack;

    	}

    	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

    }

    function parseKeyframeTrack( json ) {

    	if ( json.type === undefined ) {

    		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

    	}

    	const trackType = getTrackTypeForValueTypeName( json.type );

    	if ( json.times === undefined ) {

    		const times = [], values = [];

    		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

    		json.times = times;
    		json.values = values;

    	}

    	// derived classes can define a static parse method
    	if ( trackType.parse !== undefined ) {

    		return trackType.parse( json );

    	} else {

    		// by default, we assume a constructor compatible with the base
    		return new trackType( json.name, json.times, json.values, json.interpolation );

    	}

    }

    Object.assign( AnimationClip, {

    	parse: function ( json ) {

    		const tracks = [],
    			jsonTracks = json.tracks,
    			frameTime = 1.0 / ( json.fps || 1.0 );

    		for ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {

    			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

    		}

    		return new AnimationClip( json.name, json.duration, tracks, json.blendMode );

    	},

    	toJSON: function ( clip ) {

    		const tracks = [],
    			clipTracks = clip.tracks;

    		const json = {

    			'name': clip.name,
    			'duration': clip.duration,
    			'tracks': tracks,
    			'uuid': clip.uuid,
    			'blendMode': clip.blendMode

    		};

    		for ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {

    			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

    		}

    		return json;

    	},

    	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

    		const numMorphTargets = morphTargetSequence.length;
    		const tracks = [];

    		for ( let i = 0; i < numMorphTargets; i ++ ) {

    			let times = [];
    			let values = [];

    			times.push(
    				( i + numMorphTargets - 1 ) % numMorphTargets,
    				i,
    				( i + 1 ) % numMorphTargets );

    			values.push( 0, 1, 0 );

    			const order = AnimationUtils.getKeyframeOrder( times );
    			times = AnimationUtils.sortedArray( times, 1, order );
    			values = AnimationUtils.sortedArray( values, 1, order );

    			// if there is a key at the first frame, duplicate it as the
    			// last frame as well for perfect loop.
    			if ( ! noLoop && times[ 0 ] === 0 ) {

    				times.push( numMorphTargets );
    				values.push( values[ 0 ] );

    			}

    			tracks.push(
    				new NumberKeyframeTrack(
    					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
    					times, values
    				).scale( 1.0 / fps ) );

    		}

    		return new AnimationClip( name, - 1, tracks );

    	},

    	findByName: function ( objectOrClipArray, name ) {

    		let clipArray = objectOrClipArray;

    		if ( ! Array.isArray( objectOrClipArray ) ) {

    			const o = objectOrClipArray;
    			clipArray = o.geometry && o.geometry.animations || o.animations;

    		}

    		for ( let i = 0; i < clipArray.length; i ++ ) {

    			if ( clipArray[ i ].name === name ) {

    				return clipArray[ i ];

    			}

    		}

    		return null;

    	},

    	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

    		const animationToMorphTargets = {};

    		// tested with https://regex101.com/ on trick sequences
    		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
    		const pattern = /^([\w-]*?)([\d]+)$/;

    		// sort morph target names into animation groups based
    		// patterns like Walk_001, Walk_002, Run_001, Run_002
    		for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {

    			const morphTarget = morphTargets[ i ];
    			const parts = morphTarget.name.match( pattern );

    			if ( parts && parts.length > 1 ) {

    				const name = parts[ 1 ];

    				let animationMorphTargets = animationToMorphTargets[ name ];

    				if ( ! animationMorphTargets ) {

    					animationToMorphTargets[ name ] = animationMorphTargets = [];

    				}

    				animationMorphTargets.push( morphTarget );

    			}

    		}

    		const clips = [];

    		for ( const name in animationToMorphTargets ) {

    			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

    		}

    		return clips;

    	},

    	// parse the animation.hierarchy format
    	parseAnimation: function ( animation, bones ) {

    		if ( ! animation ) {

    			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
    			return null;

    		}

    		const addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

    			// only return track if there are actually keys.
    			if ( animationKeys.length !== 0 ) {

    				const times = [];
    				const values = [];

    				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

    				// empty keys are filtered out, so check again
    				if ( times.length !== 0 ) {

    					destTracks.push( new trackType( trackName, times, values ) );

    				}

    			}

    		};

    		const tracks = [];

    		const clipName = animation.name || 'default';
    		const fps = animation.fps || 30;
    		const blendMode = animation.blendMode;

    		// automatic length determination in AnimationClip.
    		let duration = animation.length || - 1;

    		const hierarchyTracks = animation.hierarchy || [];

    		for ( let h = 0; h < hierarchyTracks.length; h ++ ) {

    			const animationKeys = hierarchyTracks[ h ].keys;

    			// skip empty tracks
    			if ( ! animationKeys || animationKeys.length === 0 ) continue;

    			// process morph targets
    			if ( animationKeys[ 0 ].morphTargets ) {

    				// figure out all morph targets used in this track
    				const morphTargetNames = {};

    				let k;

    				for ( k = 0; k < animationKeys.length; k ++ ) {

    					if ( animationKeys[ k ].morphTargets ) {

    						for ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

    							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

    						}

    					}

    				}

    				// create a track for each morph target with all zero
    				// morphTargetInfluences except for the keys in which
    				// the morphTarget is named.
    				for ( const morphTargetName in morphTargetNames ) {

    					const times = [];
    					const values = [];

    					for ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

    						const animationKey = animationKeys[ k ];

    						times.push( animationKey.time );
    						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

    					}

    					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

    				}

    				duration = morphTargetNames.length * ( fps || 1.0 );

    			} else {

    				// ...assume skeletal animation

    				const boneName = '.bones[' + bones[ h ].name + ']';

    				addNonemptyTrack(
    					VectorKeyframeTrack, boneName + '.position',
    					animationKeys, 'pos', tracks );

    				addNonemptyTrack(
    					QuaternionKeyframeTrack, boneName + '.quaternion',
    					animationKeys, 'rot', tracks );

    				addNonemptyTrack(
    					VectorKeyframeTrack, boneName + '.scale',
    					animationKeys, 'scl', tracks );

    			}

    		}

    		if ( tracks.length === 0 ) {

    			return null;

    		}

    		const clip = new AnimationClip( clipName, duration, tracks, blendMode );

    		return clip;

    	}

    } );

    Object.assign( AnimationClip.prototype, {

    	resetDuration: function () {

    		const tracks = this.tracks;
    		let duration = 0;

    		for ( let i = 0, n = tracks.length; i !== n; ++ i ) {

    			const track = this.tracks[ i ];

    			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

    		}

    		this.duration = duration;

    		return this;

    	},

    	trim: function () {

    		for ( let i = 0; i < this.tracks.length; i ++ ) {

    			this.tracks[ i ].trim( 0, this.duration );

    		}

    		return this;

    	},

    	validate: function () {

    		let valid = true;

    		for ( let i = 0; i < this.tracks.length; i ++ ) {

    			valid = valid && this.tracks[ i ].validate();

    		}

    		return valid;

    	},

    	optimize: function () {

    		for ( let i = 0; i < this.tracks.length; i ++ ) {

    			this.tracks[ i ].optimize();

    		}

    		return this;

    	},

    	clone: function () {

    		const tracks = [];

    		for ( let i = 0; i < this.tracks.length; i ++ ) {

    			tracks.push( this.tracks[ i ].clone() );

    		}

    		return new AnimationClip( this.name, this.duration, tracks, this.blendMode );

    	}

    } );

    const Cache = {

    	enabled: false,

    	files: {},

    	add: function ( key, file ) {

    		if ( this.enabled === false ) return;

    		// console.log( 'THREE.Cache', 'Adding key:', key );

    		this.files[ key ] = file;

    	},

    	get: function ( key ) {

    		if ( this.enabled === false ) return;

    		// console.log( 'THREE.Cache', 'Checking key:', key );

    		return this.files[ key ];

    	},

    	remove: function ( key ) {

    		delete this.files[ key ];

    	},

    	clear: function () {

    		this.files = {};

    	}

    };

    function LoadingManager( onLoad, onProgress, onError ) {

    	const scope = this;

    	let isLoading = false;
    	let itemsLoaded = 0;
    	let itemsTotal = 0;
    	let urlModifier = undefined;
    	const handlers = [];

    	// Refer to #5689 for the reason why we don't set .onStart
    	// in the constructor

    	this.onStart = undefined;
    	this.onLoad = onLoad;
    	this.onProgress = onProgress;
    	this.onError = onError;

    	this.itemStart = function ( url ) {

    		itemsTotal ++;

    		if ( isLoading === false ) {

    			if ( scope.onStart !== undefined ) {

    				scope.onStart( url, itemsLoaded, itemsTotal );

    			}

    		}

    		isLoading = true;

    	};

    	this.itemEnd = function ( url ) {

    		itemsLoaded ++;

    		if ( scope.onProgress !== undefined ) {

    			scope.onProgress( url, itemsLoaded, itemsTotal );

    		}

    		if ( itemsLoaded === itemsTotal ) {

    			isLoading = false;

    			if ( scope.onLoad !== undefined ) {

    				scope.onLoad();

    			}

    		}

    	};

    	this.itemError = function ( url ) {

    		if ( scope.onError !== undefined ) {

    			scope.onError( url );

    		}

    	};

    	this.resolveURL = function ( url ) {

    		if ( urlModifier ) {

    			return urlModifier( url );

    		}

    		return url;

    	};

    	this.setURLModifier = function ( transform ) {

    		urlModifier = transform;

    		return this;

    	};

    	this.addHandler = function ( regex, loader ) {

    		handlers.push( regex, loader );

    		return this;

    	};

    	this.removeHandler = function ( regex ) {

    		const index = handlers.indexOf( regex );

    		if ( index !== - 1 ) {

    			handlers.splice( index, 2 );

    		}

    		return this;

    	};

    	this.getHandler = function ( file ) {

    		for ( let i = 0, l = handlers.length; i < l; i += 2 ) {

    			const regex = handlers[ i ];
    			const loader = handlers[ i + 1 ];

    			if ( regex.global ) regex.lastIndex = 0; // see #17920

    			if ( regex.test( file ) ) {

    				return loader;

    			}

    		}

    		return null;

    	};

    }

    const DefaultLoadingManager = new LoadingManager();

    function Loader( manager ) {

    	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

    	this.crossOrigin = 'anonymous';
    	this.path = '';
    	this.resourcePath = '';
    	this.requestHeader = {};

    }

    Object.assign( Loader.prototype, {

    	load: function ( /* url, onLoad, onProgress, onError */ ) {},

    	loadAsync: function ( url, onProgress ) {

    		const scope = this;

    		return new Promise( function ( resolve, reject ) {

    			scope.load( url, resolve, onProgress, reject );

    		} );

    	},

    	parse: function ( /* data */ ) {},

    	setCrossOrigin: function ( crossOrigin ) {

    		this.crossOrigin = crossOrigin;
    		return this;

    	},

    	setPath: function ( path ) {

    		this.path = path;
    		return this;

    	},

    	setResourcePath: function ( resourcePath ) {

    		this.resourcePath = resourcePath;
    		return this;

    	},

    	setRequestHeader: function ( requestHeader ) {

    		this.requestHeader = requestHeader;
    		return this;

    	}

    } );

    const loading = {};

    function FileLoader( manager ) {

    	Loader.call( this, manager );

    }

    FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: FileLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		if ( url === undefined ) url = '';

    		if ( this.path !== undefined ) url = this.path + url;

    		url = this.manager.resolveURL( url );

    		const scope = this;

    		const cached = Cache.get( url );

    		if ( cached !== undefined ) {

    			scope.manager.itemStart( url );

    			setTimeout( function () {

    				if ( onLoad ) onLoad( cached );

    				scope.manager.itemEnd( url );

    			}, 0 );

    			return cached;

    		}

    		// Check if request is duplicate

    		if ( loading[ url ] !== undefined ) {

    			loading[ url ].push( {

    				onLoad: onLoad,
    				onProgress: onProgress,
    				onError: onError

    			} );

    			return;

    		}

    		// Check for data: URI
    		const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
    		const dataUriRegexResult = url.match( dataUriRegex );
    		let request;

    		// Safari can not handle Data URIs through XMLHttpRequest so process manually
    		if ( dataUriRegexResult ) {

    			const mimeType = dataUriRegexResult[ 1 ];
    			const isBase64 = !! dataUriRegexResult[ 2 ];

    			let data = dataUriRegexResult[ 3 ];
    			data = decodeURIComponent( data );

    			if ( isBase64 ) data = atob( data );

    			try {

    				let response;
    				const responseType = ( this.responseType || '' ).toLowerCase();

    				switch ( responseType ) {

    					case 'arraybuffer':
    					case 'blob':

    						const view = new Uint8Array( data.length );

    						for ( let i = 0; i < data.length; i ++ ) {

    							view[ i ] = data.charCodeAt( i );

    						}

    						if ( responseType === 'blob' ) {

    							response = new Blob( [ view.buffer ], { type: mimeType } );

    						} else {

    							response = view.buffer;

    						}

    						break;

    					case 'document':

    						const parser = new DOMParser();
    						response = parser.parseFromString( data, mimeType );

    						break;

    					case 'json':

    						response = JSON.parse( data );

    						break;

    					default: // 'text' or other

    						response = data;

    						break;

    				}

    				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
    				setTimeout( function () {

    					if ( onLoad ) onLoad( response );

    					scope.manager.itemEnd( url );

    				}, 0 );

    			} catch ( error ) {

    				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
    				setTimeout( function () {

    					if ( onError ) onError( error );

    					scope.manager.itemError( url );
    					scope.manager.itemEnd( url );

    				}, 0 );

    			}

    		} else {

    			// Initialise array for duplicate requests

    			loading[ url ] = [];

    			loading[ url ].push( {

    				onLoad: onLoad,
    				onProgress: onProgress,
    				onError: onError

    			} );

    			request = new XMLHttpRequest();

    			request.open( 'GET', url, true );

    			request.addEventListener( 'load', function ( event ) {

    				const response = this.response;

    				const callbacks = loading[ url ];

    				delete loading[ url ];

    				if ( this.status === 200 || this.status === 0 ) {

    					// Some browsers return HTTP Status 0 when using non-http protocol
    					// e.g. 'file://' or 'data://'. Handle as success.

    					if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

    					// Add to cache only on HTTP success, so that we do not cache
    					// error response bodies as proper responses to requests.
    					Cache.add( url, response );

    					for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

    						const callback = callbacks[ i ];
    						if ( callback.onLoad ) callback.onLoad( response );

    					}

    					scope.manager.itemEnd( url );

    				} else {

    					for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

    						const callback = callbacks[ i ];
    						if ( callback.onError ) callback.onError( event );

    					}

    					scope.manager.itemError( url );
    					scope.manager.itemEnd( url );

    				}

    			}, false );

    			request.addEventListener( 'progress', function ( event ) {

    				const callbacks = loading[ url ];

    				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

    					const callback = callbacks[ i ];
    					if ( callback.onProgress ) callback.onProgress( event );

    				}

    			}, false );

    			request.addEventListener( 'error', function ( event ) {

    				const callbacks = loading[ url ];

    				delete loading[ url ];

    				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

    					const callback = callbacks[ i ];
    					if ( callback.onError ) callback.onError( event );

    				}

    				scope.manager.itemError( url );
    				scope.manager.itemEnd( url );

    			}, false );

    			request.addEventListener( 'abort', function ( event ) {

    				const callbacks = loading[ url ];

    				delete loading[ url ];

    				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

    					const callback = callbacks[ i ];
    					if ( callback.onError ) callback.onError( event );

    				}

    				scope.manager.itemError( url );
    				scope.manager.itemEnd( url );

    			}, false );

    			if ( this.responseType !== undefined ) request.responseType = this.responseType;
    			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

    			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

    			for ( const header in this.requestHeader ) {

    				request.setRequestHeader( header, this.requestHeader[ header ] );

    			}

    			request.send( null );

    		}

    		scope.manager.itemStart( url );

    		return request;

    	},

    	setResponseType: function ( value ) {

    		this.responseType = value;
    		return this;

    	},

    	setWithCredentials: function ( value ) {

    		this.withCredentials = value;
    		return this;

    	},

    	setMimeType: function ( value ) {

    		this.mimeType = value;
    		return this;

    	}

    } );

    function AnimationLoader( manager ) {

    	Loader.call( this, manager );

    }

    AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: AnimationLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const loader = new FileLoader( scope.manager );
    		loader.setPath( scope.path );
    		loader.setRequestHeader( scope.requestHeader );
    		loader.load( url, function ( text ) {

    			try {

    				onLoad( scope.parse( JSON.parse( text ) ) );

    			} catch ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );

    			}

    		}, onProgress, onError );

    	},

    	parse: function ( json ) {

    		const animations = [];

    		for ( let i = 0; i < json.length; i ++ ) {

    			const clip = AnimationClip.parse( json[ i ] );

    			animations.push( clip );

    		}

    		return animations;

    	}

    } );

    /**
     * Abstract Base class to block based textures loader (dds, pvr, ...)
     *
     * Sub classes have to implement the parse() method which will be used in load().
     */

    function CompressedTextureLoader( manager ) {

    	Loader.call( this, manager );

    }

    CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: CompressedTextureLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const images = [];

    		const texture = new CompressedTexture();
    		texture.image = images;

    		const loader = new FileLoader( this.manager );
    		loader.setPath( this.path );
    		loader.setResponseType( 'arraybuffer' );
    		loader.setRequestHeader( this.requestHeader );

    		let loaded = 0;

    		function loadTexture( i ) {

    			loader.load( url[ i ], function ( buffer ) {

    				const texDatas = scope.parse( buffer, true );

    				images[ i ] = {
    					width: texDatas.width,
    					height: texDatas.height,
    					format: texDatas.format,
    					mipmaps: texDatas.mipmaps
    				};

    				loaded += 1;

    				if ( loaded === 6 ) {

    					if ( texDatas.mipmapCount === 1 )
    						texture.minFilter = LinearFilter;

    					texture.format = texDatas.format;
    					texture.needsUpdate = true;

    					if ( onLoad ) onLoad( texture );

    				}

    			}, onProgress, onError );

    		}

    		if ( Array.isArray( url ) ) {

    			for ( let i = 0, il = url.length; i < il; ++ i ) {

    				loadTexture( i );

    			}

    		} else {

    			// compressed cubemap texture stored in a single DDS file

    			loader.load( url, function ( buffer ) {

    				const texDatas = scope.parse( buffer, true );

    				if ( texDatas.isCubemap ) {

    					const faces = texDatas.mipmaps.length / texDatas.mipmapCount;

    					for ( let f = 0; f < faces; f ++ ) {

    						images[ f ] = { mipmaps: [] };

    						for ( let i = 0; i < texDatas.mipmapCount; i ++ ) {

    							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
    							images[ f ].format = texDatas.format;
    							images[ f ].width = texDatas.width;
    							images[ f ].height = texDatas.height;

    						}

    					}

    				} else {

    					texture.image.width = texDatas.width;
    					texture.image.height = texDatas.height;
    					texture.mipmaps = texDatas.mipmaps;

    				}

    				if ( texDatas.mipmapCount === 1 ) {

    					texture.minFilter = LinearFilter;

    				}

    				texture.format = texDatas.format;
    				texture.needsUpdate = true;

    				if ( onLoad ) onLoad( texture );

    			}, onProgress, onError );

    		}

    		return texture;

    	}

    } );

    /**
     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
     *
     * Sub classes have to implement the parse() method which will be used in load().
     */

    function DataTextureLoader( manager ) {

    	Loader.call( this, manager );

    }

    DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: DataTextureLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const texture = new DataTexture();

    		const loader = new FileLoader( this.manager );
    		loader.setResponseType( 'arraybuffer' );
    		loader.setRequestHeader( this.requestHeader );
    		loader.setPath( this.path );
    		loader.load( url, function ( buffer ) {

    			const texData = scope.parse( buffer );

    			if ( ! texData ) return;

    			if ( texData.image !== undefined ) {

    				texture.image = texData.image;

    			} else if ( texData.data !== undefined ) {

    				texture.image.width = texData.width;
    				texture.image.height = texData.height;
    				texture.image.data = texData.data;

    			}

    			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
    			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

    			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
    			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

    			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

    			if ( texData.format !== undefined ) {

    				texture.format = texData.format;

    			}

    			if ( texData.type !== undefined ) {

    				texture.type = texData.type;

    			}

    			if ( texData.mipmaps !== undefined ) {

    				texture.mipmaps = texData.mipmaps;
    				texture.minFilter = LinearMipmapLinearFilter; // presumably...

    			}

    			if ( texData.mipmapCount === 1 ) {

    				texture.minFilter = LinearFilter;

    			}

    			texture.needsUpdate = true;

    			if ( onLoad ) onLoad( texture, texData );

    		}, onProgress, onError );


    		return texture;

    	}

    } );

    function ImageLoader( manager ) {

    	Loader.call( this, manager );

    }

    ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: ImageLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		if ( this.path !== undefined ) url = this.path + url;

    		url = this.manager.resolveURL( url );

    		const scope = this;

    		const cached = Cache.get( url );

    		if ( cached !== undefined ) {

    			scope.manager.itemStart( url );

    			setTimeout( function () {

    				if ( onLoad ) onLoad( cached );

    				scope.manager.itemEnd( url );

    			}, 0 );

    			return cached;

    		}

    		const image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

    		function onImageLoad() {

    			image.removeEventListener( 'load', onImageLoad, false );
    			image.removeEventListener( 'error', onImageError, false );

    			Cache.add( url, this );

    			if ( onLoad ) onLoad( this );

    			scope.manager.itemEnd( url );

    		}

    		function onImageError( event ) {

    			image.removeEventListener( 'load', onImageLoad, false );
    			image.removeEventListener( 'error', onImageError, false );

    			if ( onError ) onError( event );

    			scope.manager.itemError( url );
    			scope.manager.itemEnd( url );

    		}

    		image.addEventListener( 'load', onImageLoad, false );
    		image.addEventListener( 'error', onImageError, false );

    		if ( url.substr( 0, 5 ) !== 'data:' ) {

    			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

    		}

    		scope.manager.itemStart( url );

    		image.src = url;

    		return image;

    	}

    } );

    function CubeTextureLoader( manager ) {

    	Loader.call( this, manager );

    }

    CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: CubeTextureLoader,

    	load: function ( urls, onLoad, onProgress, onError ) {

    		const texture = new CubeTexture();

    		const loader = new ImageLoader( this.manager );
    		loader.setCrossOrigin( this.crossOrigin );
    		loader.setPath( this.path );

    		let loaded = 0;

    		function loadTexture( i ) {

    			loader.load( urls[ i ], function ( image ) {

    				texture.images[ i ] = image;

    				loaded ++;

    				if ( loaded === 6 ) {

    					texture.needsUpdate = true;

    					if ( onLoad ) onLoad( texture );

    				}

    			}, undefined, onError );

    		}

    		for ( let i = 0; i < urls.length; ++ i ) {

    			loadTexture( i );

    		}

    		return texture;

    	}

    } );

    function TextureLoader( manager ) {

    	Loader.call( this, manager );

    }

    TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: TextureLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const texture = new Texture();

    		const loader = new ImageLoader( this.manager );
    		loader.setCrossOrigin( this.crossOrigin );
    		loader.setPath( this.path );

    		loader.load( url, function ( image ) {

    			texture.image = image;

    			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
    			const isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

    			texture.format = isJPEG ? RGBFormat : RGBAFormat;
    			texture.needsUpdate = true;

    			if ( onLoad !== undefined ) {

    				onLoad( texture );

    			}

    		}, onProgress, onError );

    		return texture;

    	}

    } );

    /**
     * Extensible curve object.
     *
     * Some common of curve methods:
     * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
     * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
     * .getPoints(), .getSpacedPoints()
     * .getLength()
     * .updateArcLengths()
     *
     * This following curves inherit from THREE.Curve:
     *
     * -- 2D curves --
     * THREE.ArcCurve
     * THREE.CubicBezierCurve
     * THREE.EllipseCurve
     * THREE.LineCurve
     * THREE.QuadraticBezierCurve
     * THREE.SplineCurve
     *
     * -- 3D curves --
     * THREE.CatmullRomCurve3
     * THREE.CubicBezierCurve3
     * THREE.LineCurve3
     * THREE.QuadraticBezierCurve3
     *
     * A series of curves can be represented as a THREE.CurvePath.
     *
     **/

    function Curve() {

    	this.type = 'Curve';

    	this.arcLengthDivisions = 200;

    }

    Object.assign( Curve.prototype, {

    	// Virtual base class method to overwrite and implement in subclasses
    	//	- t [0 .. 1]

    	getPoint: function ( /* t, optionalTarget */ ) {

    		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
    		return null;

    	},

    	// Get point at relative position in curve according to arc length
    	// - u [0 .. 1]

    	getPointAt: function ( u, optionalTarget ) {

    		const t = this.getUtoTmapping( u );
    		return this.getPoint( t, optionalTarget );

    	},

    	// Get sequence of points using getPoint( t )

    	getPoints: function ( divisions ) {

    		if ( divisions === undefined ) divisions = 5;

    		const points = [];

    		for ( let d = 0; d <= divisions; d ++ ) {

    			points.push( this.getPoint( d / divisions ) );

    		}

    		return points;

    	},

    	// Get sequence of points using getPointAt( u )

    	getSpacedPoints: function ( divisions ) {

    		if ( divisions === undefined ) divisions = 5;

    		const points = [];

    		for ( let d = 0; d <= divisions; d ++ ) {

    			points.push( this.getPointAt( d / divisions ) );

    		}

    		return points;

    	},

    	// Get total curve arc length

    	getLength: function () {

    		const lengths = this.getLengths();
    		return lengths[ lengths.length - 1 ];

    	},

    	// Get list of cumulative segment lengths

    	getLengths: function ( divisions ) {

    		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

    		if ( this.cacheArcLengths &&
    			( this.cacheArcLengths.length === divisions + 1 ) &&
    			! this.needsUpdate ) {

    			return this.cacheArcLengths;

    		}

    		this.needsUpdate = false;

    		const cache = [];
    		let current, last = this.getPoint( 0 );
    		let sum = 0;

    		cache.push( 0 );

    		for ( let p = 1; p <= divisions; p ++ ) {

    			current = this.getPoint( p / divisions );
    			sum += current.distanceTo( last );
    			cache.push( sum );
    			last = current;

    		}

    		this.cacheArcLengths = cache;

    		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

    	},

    	updateArcLengths: function () {

    		this.needsUpdate = true;
    		this.getLengths();

    	},

    	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

    	getUtoTmapping: function ( u, distance ) {

    		const arcLengths = this.getLengths();

    		let i = 0, il = arcLengths.length;

    		let targetArcLength; // The targeted u distance value to get

    		if ( distance ) {

    			targetArcLength = distance;

    		} else {

    			targetArcLength = u * arcLengths[ il - 1 ];

    		}

    		// binary search for the index with largest value smaller than target u distance

    		let low = 0, high = il - 1, comparison;

    		while ( low <= high ) {

    			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

    			comparison = arcLengths[ i ] - targetArcLength;

    			if ( comparison < 0 ) {

    				low = i + 1;

    			} else if ( comparison > 0 ) {

    				high = i - 1;

    			} else {

    				high = i;
    				break;

    				// DONE

    			}

    		}

    		i = high;

    		if ( arcLengths[ i ] === targetArcLength ) {

    			return i / ( il - 1 );

    		}

    		// we could get finer grain at lengths, or use simple interpolation between two points

    		const lengthBefore = arcLengths[ i ];
    		const lengthAfter = arcLengths[ i + 1 ];

    		const segmentLength = lengthAfter - lengthBefore;

    		// determine where we are between the 'before' and 'after' points

    		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

    		// add that fractional amount to t

    		const t = ( i + segmentFraction ) / ( il - 1 );

    		return t;

    	},

    	// Returns a unit vector tangent at t
    	// In case any sub curve does not implement its tangent derivation,
    	// 2 points a small delta apart will be used to find its gradient
    	// which seems to give a reasonable approximation

    	getTangent: function ( t, optionalTarget ) {

    		const delta = 0.0001;
    		let t1 = t - delta;
    		let t2 = t + delta;

    		// Capping in case of danger

    		if ( t1 < 0 ) t1 = 0;
    		if ( t2 > 1 ) t2 = 1;

    		const pt1 = this.getPoint( t1 );
    		const pt2 = this.getPoint( t2 );

    		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );

    		tangent.copy( pt2 ).sub( pt1 ).normalize();

    		return tangent;

    	},

    	getTangentAt: function ( u, optionalTarget ) {

    		const t = this.getUtoTmapping( u );
    		return this.getTangent( t, optionalTarget );

    	},

    	computeFrenetFrames: function ( segments, closed ) {

    		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

    		const normal = new Vector3();

    		const tangents = [];
    		const normals = [];
    		const binormals = [];

    		const vec = new Vector3();
    		const mat = new Matrix4();

    		// compute the tangent vectors for each segment on the curve

    		for ( let i = 0; i <= segments; i ++ ) {

    			const u = i / segments;

    			tangents[ i ] = this.getTangentAt( u, new Vector3() );
    			tangents[ i ].normalize();

    		}

    		// select an initial normal vector perpendicular to the first tangent vector,
    		// and in the direction of the minimum tangent xyz component

    		normals[ 0 ] = new Vector3();
    		binormals[ 0 ] = new Vector3();
    		let min = Number.MAX_VALUE;
    		const tx = Math.abs( tangents[ 0 ].x );
    		const ty = Math.abs( tangents[ 0 ].y );
    		const tz = Math.abs( tangents[ 0 ].z );

    		if ( tx <= min ) {

    			min = tx;
    			normal.set( 1, 0, 0 );

    		}

    		if ( ty <= min ) {

    			min = ty;
    			normal.set( 0, 1, 0 );

    		}

    		if ( tz <= min ) {

    			normal.set( 0, 0, 1 );

    		}

    		vec.crossVectors( tangents[ 0 ], normal ).normalize();

    		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
    		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


    		// compute the slowly-varying normal and binormal vectors for each segment on the curve

    		for ( let i = 1; i <= segments; i ++ ) {

    			normals[ i ] = normals[ i - 1 ].clone();

    			binormals[ i ] = binormals[ i - 1 ].clone();

    			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

    			if ( vec.length() > Number.EPSILON ) {

    				vec.normalize();

    				const theta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

    				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

    			}

    			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

    		}

    		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

    		if ( closed === true ) {

    			let theta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
    			theta /= segments;

    			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

    				theta = - theta;

    			}

    			for ( let i = 1; i <= segments; i ++ ) {

    				// twist a little...
    				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
    				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

    			}

    		}

    		return {
    			tangents: tangents,
    			normals: normals,
    			binormals: binormals
    		};

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( source ) {

    		this.arcLengthDivisions = source.arcLengthDivisions;

    		return this;

    	},

    	toJSON: function () {

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'Curve',
    				generator: 'Curve.toJSON'
    			}
    		};

    		data.arcLengthDivisions = this.arcLengthDivisions;
    		data.type = this.type;

    		return data;

    	},

    	fromJSON: function ( json ) {

    		this.arcLengthDivisions = json.arcLengthDivisions;

    		return this;

    	}

    } );

    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

    	Curve.call( this );

    	this.type = 'EllipseCurve';

    	this.aX = aX || 0;
    	this.aY = aY || 0;

    	this.xRadius = xRadius || 1;
    	this.yRadius = yRadius || 1;

    	this.aStartAngle = aStartAngle || 0;
    	this.aEndAngle = aEndAngle || 2 * Math.PI;

    	this.aClockwise = aClockwise || false;

    	this.aRotation = aRotation || 0;

    }

    EllipseCurve.prototype = Object.create( Curve.prototype );
    EllipseCurve.prototype.constructor = EllipseCurve;

    EllipseCurve.prototype.isEllipseCurve = true;

    EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector2();

    	const twoPi = Math.PI * 2;
    	let deltaAngle = this.aEndAngle - this.aStartAngle;
    	const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

    	// ensures that deltaAngle is 0 .. 2 PI
    	while ( deltaAngle < 0 ) deltaAngle += twoPi;
    	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

    	if ( deltaAngle < Number.EPSILON ) {

    		if ( samePoints ) {

    			deltaAngle = 0;

    		} else {

    			deltaAngle = twoPi;

    		}

    	}

    	if ( this.aClockwise === true && ! samePoints ) {

    		if ( deltaAngle === twoPi ) {

    			deltaAngle = - twoPi;

    		} else {

    			deltaAngle = deltaAngle - twoPi;

    		}

    	}

    	const angle = this.aStartAngle + t * deltaAngle;
    	let x = this.aX + this.xRadius * Math.cos( angle );
    	let y = this.aY + this.yRadius * Math.sin( angle );

    	if ( this.aRotation !== 0 ) {

    		const cos = Math.cos( this.aRotation );
    		const sin = Math.sin( this.aRotation );

    		const tx = x - this.aX;
    		const ty = y - this.aY;

    		// Rotate the point about the center of the ellipse.
    		x = tx * cos - ty * sin + this.aX;
    		y = tx * sin + ty * cos + this.aY;

    	}

    	return point.set( x, y );

    };

    EllipseCurve.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.aX = source.aX;
    	this.aY = source.aY;

    	this.xRadius = source.xRadius;
    	this.yRadius = source.yRadius;

    	this.aStartAngle = source.aStartAngle;
    	this.aEndAngle = source.aEndAngle;

    	this.aClockwise = source.aClockwise;

    	this.aRotation = source.aRotation;

    	return this;

    };


    EllipseCurve.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.aX = this.aX;
    	data.aY = this.aY;

    	data.xRadius = this.xRadius;
    	data.yRadius = this.yRadius;

    	data.aStartAngle = this.aStartAngle;
    	data.aEndAngle = this.aEndAngle;

    	data.aClockwise = this.aClockwise;

    	data.aRotation = this.aRotation;

    	return data;

    };

    EllipseCurve.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.aX = json.aX;
    	this.aY = json.aY;

    	this.xRadius = json.xRadius;
    	this.yRadius = json.yRadius;

    	this.aStartAngle = json.aStartAngle;
    	this.aEndAngle = json.aEndAngle;

    	this.aClockwise = json.aClockwise;

    	this.aRotation = json.aRotation;

    	return this;

    };

    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

    	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

    	this.type = 'ArcCurve';

    }

    ArcCurve.prototype = Object.create( EllipseCurve.prototype );
    ArcCurve.prototype.constructor = ArcCurve;

    ArcCurve.prototype.isArcCurve = true;

    /**
     * Centripetal CatmullRom Curve - which is useful for avoiding
     * cusps and self-intersections in non-uniform catmull rom curves.
     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
     *
     * curve.type accepts centripetal(default), chordal and catmullrom
     * curve.tension is used for catmullrom which defaults to 0.5
     */


    /*
    Based on an optimized c++ solution in
     - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
     - http://ideone.com/NoEbVM

    This CubicPoly class could be used for reusing some variables and calculations,
    but for three.js curve use, it could be possible inlined and flatten into a single function call
    which can be placed in CurveUtils.
    */

    function CubicPoly() {

    	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

    	/*
    	 * Compute coefficients for a cubic polynomial
    	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
    	 * such that
    	 *   p(0) = x0, p(1) = x1
    	 *  and
    	 *   p'(0) = t0, p'(1) = t1.
    	 */
    	function init( x0, x1, t0, t1 ) {

    		c0 = x0;
    		c1 = t0;
    		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
    		c3 = 2 * x0 - 2 * x1 + t0 + t1;

    	}

    	return {

    		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

    			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

    		},

    		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

    			// compute tangents when parameterized in [t1,t2]
    			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
    			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

    			// rescale tangents for parametrization in [0,1]
    			t1 *= dt1;
    			t2 *= dt1;

    			init( x1, x2, t1, t2 );

    		},

    		calc: function ( t ) {

    			const t2 = t * t;
    			const t3 = t2 * t;
    			return c0 + c1 * t + c2 * t2 + c3 * t3;

    		}

    	};

    }

    //

    const tmp = new Vector3();
    const px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

    function CatmullRomCurve3( points, closed, curveType, tension ) {

    	Curve.call( this );

    	this.type = 'CatmullRomCurve3';

    	this.points = points || [];
    	this.closed = closed || false;
    	this.curveType = curveType || 'centripetal';
    	this.tension = ( tension !== undefined ) ? tension : 0.5;

    }

    CatmullRomCurve3.prototype = Object.create( Curve.prototype );
    CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

    CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

    CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector3();

    	const points = this.points;
    	const l = points.length;

    	const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
    	let intPoint = Math.floor( p );
    	let weight = p - intPoint;

    	if ( this.closed ) {

    		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

    	} else if ( weight === 0 && intPoint === l - 1 ) {

    		intPoint = l - 2;
    		weight = 1;

    	}

    	let p0, p1, p2, p3; // 4 points

    	if ( this.closed || intPoint > 0 ) {

    		p0 = points[ ( intPoint - 1 ) % l ];

    	} else {

    		// extrapolate first point
    		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
    		p0 = tmp;

    	}

    	p1 = points[ intPoint % l ];
    	p2 = points[ ( intPoint + 1 ) % l ];

    	if ( this.closed || intPoint + 2 < l ) {

    		p3 = points[ ( intPoint + 2 ) % l ];

    	} else {

    		// extrapolate last point
    		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
    		p3 = tmp;

    	}

    	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

    		// init Centripetal / Chordal Catmull-Rom
    		const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
    		let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
    		let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
    		let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

    		// safety check for repeated points
    		if ( dt1 < 1e-4 ) dt1 = 1.0;
    		if ( dt0 < 1e-4 ) dt0 = dt1;
    		if ( dt2 < 1e-4 ) dt2 = dt1;

    		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
    		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
    		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

    	} else if ( this.curveType === 'catmullrom' ) {

    		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
    		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
    		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

    	}

    	point.set(
    		px.calc( weight ),
    		py.calc( weight ),
    		pz.calc( weight )
    	);

    	return point;

    };

    CatmullRomCurve3.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.points = [];

    	for ( let i = 0, l = source.points.length; i < l; i ++ ) {

    		const point = source.points[ i ];

    		this.points.push( point.clone() );

    	}

    	this.closed = source.closed;
    	this.curveType = source.curveType;
    	this.tension = source.tension;

    	return this;

    };

    CatmullRomCurve3.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.points = [];

    	for ( let i = 0, l = this.points.length; i < l; i ++ ) {

    		const point = this.points[ i ];
    		data.points.push( point.toArray() );

    	}

    	data.closed = this.closed;
    	data.curveType = this.curveType;
    	data.tension = this.tension;

    	return data;

    };

    CatmullRomCurve3.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.points = [];

    	for ( let i = 0, l = json.points.length; i < l; i ++ ) {

    		const point = json.points[ i ];
    		this.points.push( new Vector3().fromArray( point ) );

    	}

    	this.closed = json.closed;
    	this.curveType = json.curveType;
    	this.tension = json.tension;

    	return this;

    };

    /**
     * Bezier Curves formulas obtained from
     * http://en.wikipedia.org/wiki/Bézier_curve
     */

    function CatmullRom( t, p0, p1, p2, p3 ) {

    	const v0 = ( p2 - p0 ) * 0.5;
    	const v1 = ( p3 - p1 ) * 0.5;
    	const t2 = t * t;
    	const t3 = t * t2;
    	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

    }

    //

    function QuadraticBezierP0( t, p ) {

    	const k = 1 - t;
    	return k * k * p;

    }

    function QuadraticBezierP1( t, p ) {

    	return 2 * ( 1 - t ) * t * p;

    }

    function QuadraticBezierP2( t, p ) {

    	return t * t * p;

    }

    function QuadraticBezier( t, p0, p1, p2 ) {

    	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
    		QuadraticBezierP2( t, p2 );

    }

    //

    function CubicBezierP0( t, p ) {

    	const k = 1 - t;
    	return k * k * k * p;

    }

    function CubicBezierP1( t, p ) {

    	const k = 1 - t;
    	return 3 * k * k * t * p;

    }

    function CubicBezierP2( t, p ) {

    	return 3 * ( 1 - t ) * t * t * p;

    }

    function CubicBezierP3( t, p ) {

    	return t * t * t * p;

    }

    function CubicBezier( t, p0, p1, p2, p3 ) {

    	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
    		CubicBezierP3( t, p3 );

    }

    function CubicBezierCurve( v0, v1, v2, v3 ) {

    	Curve.call( this );

    	this.type = 'CubicBezierCurve';

    	this.v0 = v0 || new Vector2();
    	this.v1 = v1 || new Vector2();
    	this.v2 = v2 || new Vector2();
    	this.v3 = v3 || new Vector2();

    }

    CubicBezierCurve.prototype = Object.create( Curve.prototype );
    CubicBezierCurve.prototype.constructor = CubicBezierCurve;

    CubicBezierCurve.prototype.isCubicBezierCurve = true;

    CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector2();

    	const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

    	point.set(
    		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
    		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
    	);

    	return point;

    };

    CubicBezierCurve.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v0.copy( source.v0 );
    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );
    	this.v3.copy( source.v3 );

    	return this;

    };

    CubicBezierCurve.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v0 = this.v0.toArray();
    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();
    	data.v3 = this.v3.toArray();

    	return data;

    };

    CubicBezierCurve.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v0.fromArray( json.v0 );
    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );
    	this.v3.fromArray( json.v3 );

    	return this;

    };

    function CubicBezierCurve3( v0, v1, v2, v3 ) {

    	Curve.call( this );

    	this.type = 'CubicBezierCurve3';

    	this.v0 = v0 || new Vector3();
    	this.v1 = v1 || new Vector3();
    	this.v2 = v2 || new Vector3();
    	this.v3 = v3 || new Vector3();

    }

    CubicBezierCurve3.prototype = Object.create( Curve.prototype );
    CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

    CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

    CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector3();

    	const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

    	point.set(
    		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
    		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
    		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
    	);

    	return point;

    };

    CubicBezierCurve3.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v0.copy( source.v0 );
    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );
    	this.v3.copy( source.v3 );

    	return this;

    };

    CubicBezierCurve3.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v0 = this.v0.toArray();
    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();
    	data.v3 = this.v3.toArray();

    	return data;

    };

    CubicBezierCurve3.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v0.fromArray( json.v0 );
    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );
    	this.v3.fromArray( json.v3 );

    	return this;

    };

    function LineCurve( v1, v2 ) {

    	Curve.call( this );

    	this.type = 'LineCurve';

    	this.v1 = v1 || new Vector2();
    	this.v2 = v2 || new Vector2();

    }

    LineCurve.prototype = Object.create( Curve.prototype );
    LineCurve.prototype.constructor = LineCurve;

    LineCurve.prototype.isLineCurve = true;

    LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector2();

    	if ( t === 1 ) {

    		point.copy( this.v2 );

    	} else {

    		point.copy( this.v2 ).sub( this.v1 );
    		point.multiplyScalar( t ).add( this.v1 );

    	}

    	return point;

    };

    // Line curve is linear, so we can overwrite default getPointAt

    LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

    	return this.getPoint( u, optionalTarget );

    };

    LineCurve.prototype.getTangent = function ( t, optionalTarget ) {

    	const tangent = optionalTarget || new Vector2();

    	tangent.copy( this.v2 ).sub( this.v1 ).normalize();

    	return tangent;

    };

    LineCurve.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );

    	return this;

    };

    LineCurve.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();

    	return data;

    };

    LineCurve.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );

    	return this;

    };

    function LineCurve3( v1, v2 ) {

    	Curve.call( this );

    	this.type = 'LineCurve3';

    	this.v1 = v1 || new Vector3();
    	this.v2 = v2 || new Vector3();

    }

    LineCurve3.prototype = Object.create( Curve.prototype );
    LineCurve3.prototype.constructor = LineCurve3;

    LineCurve3.prototype.isLineCurve3 = true;

    LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector3();

    	if ( t === 1 ) {

    		point.copy( this.v2 );

    	} else {

    		point.copy( this.v2 ).sub( this.v1 );
    		point.multiplyScalar( t ).add( this.v1 );

    	}

    	return point;

    };

    // Line curve is linear, so we can overwrite default getPointAt

    LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

    	return this.getPoint( u, optionalTarget );

    };

    LineCurve3.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );

    	return this;

    };

    LineCurve3.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();

    	return data;

    };

    LineCurve3.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );

    	return this;

    };

    function QuadraticBezierCurve( v0, v1, v2 ) {

    	Curve.call( this );

    	this.type = 'QuadraticBezierCurve';

    	this.v0 = v0 || new Vector2();
    	this.v1 = v1 || new Vector2();
    	this.v2 = v2 || new Vector2();

    }

    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

    QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

    QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector2();

    	const v0 = this.v0, v1 = this.v1, v2 = this.v2;

    	point.set(
    		QuadraticBezier( t, v0.x, v1.x, v2.x ),
    		QuadraticBezier( t, v0.y, v1.y, v2.y )
    	);

    	return point;

    };

    QuadraticBezierCurve.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v0.copy( source.v0 );
    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );

    	return this;

    };

    QuadraticBezierCurve.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v0 = this.v0.toArray();
    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();

    	return data;

    };

    QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v0.fromArray( json.v0 );
    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );

    	return this;

    };

    function QuadraticBezierCurve3( v0, v1, v2 ) {

    	Curve.call( this );

    	this.type = 'QuadraticBezierCurve3';

    	this.v0 = v0 || new Vector3();
    	this.v1 = v1 || new Vector3();
    	this.v2 = v2 || new Vector3();

    }

    QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
    QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

    QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

    QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector3();

    	const v0 = this.v0, v1 = this.v1, v2 = this.v2;

    	point.set(
    		QuadraticBezier( t, v0.x, v1.x, v2.x ),
    		QuadraticBezier( t, v0.y, v1.y, v2.y ),
    		QuadraticBezier( t, v0.z, v1.z, v2.z )
    	);

    	return point;

    };

    QuadraticBezierCurve3.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.v0.copy( source.v0 );
    	this.v1.copy( source.v1 );
    	this.v2.copy( source.v2 );

    	return this;

    };

    QuadraticBezierCurve3.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.v0 = this.v0.toArray();
    	data.v1 = this.v1.toArray();
    	data.v2 = this.v2.toArray();

    	return data;

    };

    QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.v0.fromArray( json.v0 );
    	this.v1.fromArray( json.v1 );
    	this.v2.fromArray( json.v2 );

    	return this;

    };

    function SplineCurve( points ) {

    	Curve.call( this );

    	this.type = 'SplineCurve';

    	this.points = points || [];

    }

    SplineCurve.prototype = Object.create( Curve.prototype );
    SplineCurve.prototype.constructor = SplineCurve;

    SplineCurve.prototype.isSplineCurve = true;

    SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

    	const point = optionalTarget || new Vector2();

    	const points = this.points;
    	const p = ( points.length - 1 ) * t;

    	const intPoint = Math.floor( p );
    	const weight = p - intPoint;

    	const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
    	const p1 = points[ intPoint ];
    	const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
    	const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

    	point.set(
    		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
    		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
    	);

    	return point;

    };

    SplineCurve.prototype.copy = function ( source ) {

    	Curve.prototype.copy.call( this, source );

    	this.points = [];

    	for ( let i = 0, l = source.points.length; i < l; i ++ ) {

    		const point = source.points[ i ];

    		this.points.push( point.clone() );

    	}

    	return this;

    };

    SplineCurve.prototype.toJSON = function () {

    	const data = Curve.prototype.toJSON.call( this );

    	data.points = [];

    	for ( let i = 0, l = this.points.length; i < l; i ++ ) {

    		const point = this.points[ i ];
    		data.points.push( point.toArray() );

    	}

    	return data;

    };

    SplineCurve.prototype.fromJSON = function ( json ) {

    	Curve.prototype.fromJSON.call( this, json );

    	this.points = [];

    	for ( let i = 0, l = json.points.length; i < l; i ++ ) {

    		const point = json.points[ i ];
    		this.points.push( new Vector2().fromArray( point ) );

    	}

    	return this;

    };

    var Curves = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ArcCurve: ArcCurve,
        CatmullRomCurve3: CatmullRomCurve3,
        CubicBezierCurve: CubicBezierCurve,
        CubicBezierCurve3: CubicBezierCurve3,
        EllipseCurve: EllipseCurve,
        LineCurve: LineCurve,
        LineCurve3: LineCurve3,
        QuadraticBezierCurve: QuadraticBezierCurve,
        QuadraticBezierCurve3: QuadraticBezierCurve3,
        SplineCurve: SplineCurve
    });

    /**************************************************************
     *	Curved Path - a curve path is simply a array of connected
     *  curves, but retains the api of a curve
     **************************************************************/

    function CurvePath() {

    	Curve.call( this );

    	this.type = 'CurvePath';

    	this.curves = [];
    	this.autoClose = false; // Automatically closes the path

    }

    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

    	constructor: CurvePath,

    	add: function ( curve ) {

    		this.curves.push( curve );

    	},

    	closePath: function () {

    		// Add a line curve if start and end of lines are not connected
    		const startPoint = this.curves[ 0 ].getPoint( 0 );
    		const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

    		if ( ! startPoint.equals( endPoint ) ) {

    			this.curves.push( new LineCurve( endPoint, startPoint ) );

    		}

    	},

    	// To get accurate point with reference to
    	// entire path distance at time t,
    	// following has to be done:

    	// 1. Length of each sub path have to be known
    	// 2. Locate and identify type of curve
    	// 3. Get t for the curve
    	// 4. Return curve.getPointAt(t')

    	getPoint: function ( t ) {

    		const d = t * this.getLength();
    		const curveLengths = this.getCurveLengths();
    		let i = 0;

    		// To think about boundaries points.

    		while ( i < curveLengths.length ) {

    			if ( curveLengths[ i ] >= d ) {

    				const diff = curveLengths[ i ] - d;
    				const curve = this.curves[ i ];

    				const segmentLength = curve.getLength();
    				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

    				return curve.getPointAt( u );

    			}

    			i ++;

    		}

    		return null;

    		// loop where sum != 0, sum > d , sum+1 <d

    	},

    	// We cannot use the default THREE.Curve getPoint() with getLength() because in
    	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    	// getPoint() depends on getLength

    	getLength: function () {

    		const lens = this.getCurveLengths();
    		return lens[ lens.length - 1 ];

    	},

    	// cacheLengths must be recalculated.
    	updateArcLengths: function () {

    		this.needsUpdate = true;
    		this.cacheLengths = null;
    		this.getCurveLengths();

    	},

    	// Compute lengths and cache them
    	// We cannot overwrite getLengths() because UtoT mapping uses it.

    	getCurveLengths: function () {

    		// We use cache values if curves and cache array are same length

    		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

    			return this.cacheLengths;

    		}

    		// Get length of sub-curve
    		// Push sums into cached array

    		const lengths = [];
    		let sums = 0;

    		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

    			sums += this.curves[ i ].getLength();
    			lengths.push( sums );

    		}

    		this.cacheLengths = lengths;

    		return lengths;

    	},

    	getSpacedPoints: function ( divisions ) {

    		if ( divisions === undefined ) divisions = 40;

    		const points = [];

    		for ( let i = 0; i <= divisions; i ++ ) {

    			points.push( this.getPoint( i / divisions ) );

    		}

    		if ( this.autoClose ) {

    			points.push( points[ 0 ] );

    		}

    		return points;

    	},

    	getPoints: function ( divisions ) {

    		divisions = divisions || 12;

    		const points = [];
    		let last;

    		for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {

    			const curve = curves[ i ];
    			const resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
    				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
    					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
    						: divisions;

    			const pts = curve.getPoints( resolution );

    			for ( let j = 0; j < pts.length; j ++ ) {

    				const point = pts[ j ];

    				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

    				points.push( point );
    				last = point;

    			}

    		}

    		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

    			points.push( points[ 0 ] );

    		}

    		return points;

    	},

    	copy: function ( source ) {

    		Curve.prototype.copy.call( this, source );

    		this.curves = [];

    		for ( let i = 0, l = source.curves.length; i < l; i ++ ) {

    			const curve = source.curves[ i ];

    			this.curves.push( curve.clone() );

    		}

    		this.autoClose = source.autoClose;

    		return this;

    	},

    	toJSON: function () {

    		const data = Curve.prototype.toJSON.call( this );

    		data.autoClose = this.autoClose;
    		data.curves = [];

    		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

    			const curve = this.curves[ i ];
    			data.curves.push( curve.toJSON() );

    		}

    		return data;

    	},

    	fromJSON: function ( json ) {

    		Curve.prototype.fromJSON.call( this, json );

    		this.autoClose = json.autoClose;
    		this.curves = [];

    		for ( let i = 0, l = json.curves.length; i < l; i ++ ) {

    			const curve = json.curves[ i ];
    			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

    		}

    		return this;

    	}

    } );

    function Path( points ) {

    	CurvePath.call( this );

    	this.type = 'Path';

    	this.currentPoint = new Vector2();

    	if ( points ) {

    		this.setFromPoints( points );

    	}

    }

    Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

    	constructor: Path,

    	setFromPoints: function ( points ) {

    		this.moveTo( points[ 0 ].x, points[ 0 ].y );

    		for ( let i = 1, l = points.length; i < l; i ++ ) {

    			this.lineTo( points[ i ].x, points[ i ].y );

    		}

    		return this;

    	},

    	moveTo: function ( x, y ) {

    		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

    		return this;

    	},

    	lineTo: function ( x, y ) {

    		const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
    		this.curves.push( curve );

    		this.currentPoint.set( x, y );

    		return this;

    	},

    	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

    		const curve = new QuadraticBezierCurve(
    			this.currentPoint.clone(),
    			new Vector2( aCPx, aCPy ),
    			new Vector2( aX, aY )
    		);

    		this.curves.push( curve );

    		this.currentPoint.set( aX, aY );

    		return this;

    	},

    	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

    		const curve = new CubicBezierCurve(
    			this.currentPoint.clone(),
    			new Vector2( aCP1x, aCP1y ),
    			new Vector2( aCP2x, aCP2y ),
    			new Vector2( aX, aY )
    		);

    		this.curves.push( curve );

    		this.currentPoint.set( aX, aY );

    		return this;

    	},

    	splineThru: function ( pts /*Array of Vector*/ ) {

    		const npts = [ this.currentPoint.clone() ].concat( pts );

    		const curve = new SplineCurve( npts );
    		this.curves.push( curve );

    		this.currentPoint.copy( pts[ pts.length - 1 ] );

    		return this;

    	},

    	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

    		const x0 = this.currentPoint.x;
    		const y0 = this.currentPoint.y;

    		this.absarc( aX + x0, aY + y0, aRadius,
    			aStartAngle, aEndAngle, aClockwise );

    		return this;

    	},

    	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

    		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

    		return this;

    	},

    	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

    		const x0 = this.currentPoint.x;
    		const y0 = this.currentPoint.y;

    		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

    		return this;

    	},

    	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

    		const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

    		if ( this.curves.length > 0 ) {

    			// if a previous curve is present, attempt to join
    			const firstPoint = curve.getPoint( 0 );

    			if ( ! firstPoint.equals( this.currentPoint ) ) {

    				this.lineTo( firstPoint.x, firstPoint.y );

    			}

    		}

    		this.curves.push( curve );

    		const lastPoint = curve.getPoint( 1 );
    		this.currentPoint.copy( lastPoint );

    		return this;

    	},

    	copy: function ( source ) {

    		CurvePath.prototype.copy.call( this, source );

    		this.currentPoint.copy( source.currentPoint );

    		return this;

    	},

    	toJSON: function () {

    		const data = CurvePath.prototype.toJSON.call( this );

    		data.currentPoint = this.currentPoint.toArray();

    		return data;

    	},

    	fromJSON: function ( json ) {

    		CurvePath.prototype.fromJSON.call( this, json );

    		this.currentPoint.fromArray( json.currentPoint );

    		return this;

    	}

    } );

    function Shape( points ) {

    	Path.call( this, points );

    	this.uuid = MathUtils.generateUUID();

    	this.type = 'Shape';

    	this.holes = [];

    }

    Shape.prototype = Object.assign( Object.create( Path.prototype ), {

    	constructor: Shape,

    	getPointsHoles: function ( divisions ) {

    		const holesPts = [];

    		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

    			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

    		}

    		return holesPts;

    	},

    	// get points of shape and holes (keypoints based on segments parameter)

    	extractPoints: function ( divisions ) {

    		return {

    			shape: this.getPoints( divisions ),
    			holes: this.getPointsHoles( divisions )

    		};

    	},

    	copy: function ( source ) {

    		Path.prototype.copy.call( this, source );

    		this.holes = [];

    		for ( let i = 0, l = source.holes.length; i < l; i ++ ) {

    			const hole = source.holes[ i ];

    			this.holes.push( hole.clone() );

    		}

    		return this;

    	},

    	toJSON: function () {

    		const data = Path.prototype.toJSON.call( this );

    		data.uuid = this.uuid;
    		data.holes = [];

    		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

    			const hole = this.holes[ i ];
    			data.holes.push( hole.toJSON() );

    		}

    		return data;

    	},

    	fromJSON: function ( json ) {

    		Path.prototype.fromJSON.call( this, json );

    		this.uuid = json.uuid;
    		this.holes = [];

    		for ( let i = 0, l = json.holes.length; i < l; i ++ ) {

    			const hole = json.holes[ i ];
    			this.holes.push( new Path().fromJSON( hole ) );

    		}

    		return this;

    	}

    } );

    function Light$1( color, intensity ) {

    	Object3D.call( this );

    	this.type = 'Light';

    	this.color = new Color( color );
    	this.intensity = intensity !== undefined ? intensity : 1;

    	this.receiveShadow = undefined;

    }

    Light$1.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Light$1,

    	isLight: true,

    	copy: function ( source ) {

    		Object3D.prototype.copy.call( this, source );

    		this.color.copy( source.color );
    		this.intensity = source.intensity;

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = Object3D.prototype.toJSON.call( this, meta );

    		data.object.color = this.color.getHex();
    		data.object.intensity = this.intensity;

    		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

    		if ( this.distance !== undefined ) data.object.distance = this.distance;
    		if ( this.angle !== undefined ) data.object.angle = this.angle;
    		if ( this.decay !== undefined ) data.object.decay = this.decay;
    		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

    		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

    		return data;

    	}

    } );

    function HemisphereLight( skyColor, groundColor, intensity ) {

    	Light$1.call( this, skyColor, intensity );

    	this.type = 'HemisphereLight';

    	this.castShadow = undefined;

    	this.position.copy( Object3D.DefaultUp );
    	this.updateMatrix();

    	this.groundColor = new Color( groundColor );

    }

    HemisphereLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: HemisphereLight,

    	isHemisphereLight: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.groundColor.copy( source.groundColor );

    		return this;

    	}

    } );

    function LightShadow( camera ) {

    	this.camera = camera;

    	this.bias = 0;
    	this.normalBias = 0;
    	this.radius = 1;

    	this.mapSize = new Vector2( 512, 512 );

    	this.map = null;
    	this.mapPass = null;
    	this.matrix = new Matrix4();

    	this.autoUpdate = true;
    	this.needsUpdate = false;

    	this._frustum = new Frustum();
    	this._frameExtents = new Vector2( 1, 1 );

    	this._viewportCount = 1;

    	this._viewports = [

    		new Vector4( 0, 0, 1, 1 )

    	];

    }

    Object.assign( LightShadow.prototype, {

    	_projScreenMatrix: new Matrix4(),

    	_lightPositionWorld: new Vector3(),

    	_lookTarget: new Vector3(),

    	getViewportCount: function () {

    		return this._viewportCount;

    	},

    	getFrustum: function () {

    		return this._frustum;

    	},

    	updateMatrices: function ( light ) {

    		const shadowCamera = this.camera,
    			shadowMatrix = this.matrix,
    			projScreenMatrix = this._projScreenMatrix,
    			lookTarget = this._lookTarget,
    			lightPositionWorld = this._lightPositionWorld;

    		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
    		shadowCamera.position.copy( lightPositionWorld );

    		lookTarget.setFromMatrixPosition( light.target.matrixWorld );
    		shadowCamera.lookAt( lookTarget );
    		shadowCamera.updateMatrixWorld();

    		projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
    		this._frustum.setFromProjectionMatrix( projScreenMatrix );

    		shadowMatrix.set(
    			0.5, 0.0, 0.0, 0.5,
    			0.0, 0.5, 0.0, 0.5,
    			0.0, 0.0, 0.5, 0.5,
    			0.0, 0.0, 0.0, 1.0
    		);

    		shadowMatrix.multiply( shadowCamera.projectionMatrix );
    		shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

    	},

    	getViewport: function ( viewportIndex ) {

    		return this._viewports[ viewportIndex ];

    	},

    	getFrameExtents: function () {

    		return this._frameExtents;

    	},

    	copy: function ( source ) {

    		this.camera = source.camera.clone();

    		this.bias = source.bias;
    		this.radius = source.radius;

    		this.mapSize.copy( source.mapSize );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	toJSON: function () {

    		const object = {};

    		if ( this.bias !== 0 ) object.bias = this.bias;
    		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
    		if ( this.radius !== 1 ) object.radius = this.radius;
    		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

    		object.camera = this.camera.toJSON( false ).object;
    		delete object.camera.matrix;

    		return object;

    	}

    } );

    function SpotLightShadow() {

    	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

    }

    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

    	constructor: SpotLightShadow,

    	isSpotLightShadow: true,

    	updateMatrices: function ( light ) {

    		const camera = this.camera;

    		const fov = MathUtils.RAD2DEG * 2 * light.angle;
    		const aspect = this.mapSize.width / this.mapSize.height;
    		const far = light.distance || camera.far;

    		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

    			camera.fov = fov;
    			camera.aspect = aspect;
    			camera.far = far;
    			camera.updateProjectionMatrix();

    		}

    		LightShadow.prototype.updateMatrices.call( this, light );

    	}

    } );

    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

    	Light$1.call( this, color, intensity );

    	this.type = 'SpotLight';

    	this.position.copy( Object3D.DefaultUp );
    	this.updateMatrix();

    	this.target = new Object3D();

    	Object.defineProperty( this, 'power', {
    		get: function () {

    			// intensity = power per solid angle.
    			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    			return this.intensity * Math.PI;

    		},
    		set: function ( power ) {

    			// intensity = power per solid angle.
    			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    			this.intensity = power / Math.PI;

    		}
    	} );

    	this.distance = ( distance !== undefined ) ? distance : 0;
    	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
    	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
    	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

    	this.shadow = new SpotLightShadow();

    }

    SpotLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: SpotLight,

    	isSpotLight: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.distance = source.distance;
    		this.angle = source.angle;
    		this.penumbra = source.penumbra;
    		this.decay = source.decay;

    		this.target = source.target.clone();

    		this.shadow = source.shadow.clone();

    		return this;

    	}

    } );

    function PointLightShadow() {

    	LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );

    	this._frameExtents = new Vector2( 4, 2 );

    	this._viewportCount = 6;

    	this._viewports = [
    		// These viewports map a cube-map onto a 2D texture with the
    		// following orientation:
    		//
    		//  xzXZ
    		//   y Y
    		//
    		// X - Positive x direction
    		// x - Negative x direction
    		// Y - Positive y direction
    		// y - Negative y direction
    		// Z - Positive z direction
    		// z - Negative z direction

    		// positive X
    		new Vector4( 2, 1, 1, 1 ),
    		// negative X
    		new Vector4( 0, 1, 1, 1 ),
    		// positive Z
    		new Vector4( 3, 1, 1, 1 ),
    		// negative Z
    		new Vector4( 1, 1, 1, 1 ),
    		// positive Y
    		new Vector4( 3, 0, 1, 1 ),
    		// negative Y
    		new Vector4( 1, 0, 1, 1 )
    	];

    	this._cubeDirections = [
    		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
    		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
    	];

    	this._cubeUps = [
    		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
    		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
    	];

    }

    PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

    	constructor: PointLightShadow,

    	isPointLightShadow: true,

    	updateMatrices: function ( light, viewportIndex ) {

    		if ( viewportIndex === undefined ) viewportIndex = 0;

    		const camera = this.camera,
    			shadowMatrix = this.matrix,
    			lightPositionWorld = this._lightPositionWorld,
    			lookTarget = this._lookTarget,
    			projScreenMatrix = this._projScreenMatrix;

    		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
    		camera.position.copy( lightPositionWorld );

    		lookTarget.copy( camera.position );
    		lookTarget.add( this._cubeDirections[ viewportIndex ] );
    		camera.up.copy( this._cubeUps[ viewportIndex ] );
    		camera.lookAt( lookTarget );
    		camera.updateMatrixWorld();

    		shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );

    		projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    		this._frustum.setFromProjectionMatrix( projScreenMatrix );

    	}

    } );

    function PointLight( color, intensity, distance, decay ) {

    	Light$1.call( this, color, intensity );

    	this.type = 'PointLight';

    	Object.defineProperty( this, 'power', {
    		get: function () {

    			// intensity = power per solid angle.
    			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    			return this.intensity * 4 * Math.PI;

    		},
    		set: function ( power ) {

    			// intensity = power per solid angle.
    			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    			this.intensity = power / ( 4 * Math.PI );

    		}
    	} );

    	this.distance = ( distance !== undefined ) ? distance : 0;
    	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

    	this.shadow = new PointLightShadow();

    }

    PointLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: PointLight,

    	isPointLight: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.distance = source.distance;
    		this.decay = source.decay;

    		this.shadow = source.shadow.clone();

    		return this;

    	}

    } );

    function OrthographicCamera( left, right, top, bottom, near, far ) {

    	Camera$1.call( this );

    	this.type = 'OrthographicCamera';

    	this.zoom = 1;
    	this.view = null;

    	this.left = ( left !== undefined ) ? left : - 1;
    	this.right = ( right !== undefined ) ? right : 1;
    	this.top = ( top !== undefined ) ? top : 1;
    	this.bottom = ( bottom !== undefined ) ? bottom : - 1;

    	this.near = ( near !== undefined ) ? near : 0.1;
    	this.far = ( far !== undefined ) ? far : 2000;

    	this.updateProjectionMatrix();

    }

    OrthographicCamera.prototype = Object.assign( Object.create( Camera$1.prototype ), {

    	constructor: OrthographicCamera,

    	isOrthographicCamera: true,

    	copy: function ( source, recursive ) {

    		Camera$1.prototype.copy.call( this, source, recursive );

    		this.left = source.left;
    		this.right = source.right;
    		this.top = source.top;
    		this.bottom = source.bottom;
    		this.near = source.near;
    		this.far = source.far;

    		this.zoom = source.zoom;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		return this;

    	},

    	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	},

    	clearViewOffset: function () {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	},

    	updateProjectionMatrix: function () {

    		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
    		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
    		const cx = ( this.right + this.left ) / 2;
    		const cy = ( this.top + this.bottom ) / 2;

    		let left = cx - dx;
    		let right = cx + dx;
    		let top = cy + dy;
    		let bottom = cy - dy;

    		if ( this.view !== null && this.view.enabled ) {

    			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
    			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

    			left += scaleW * this.view.offsetX;
    			right = left + scaleW * this.view.width;
    			top -= scaleH * this.view.offsetY;
    			bottom = top - scaleH * this.view.height;

    		}

    		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

    		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

    	},

    	toJSON: function ( meta ) {

    		const data = Object3D.prototype.toJSON.call( this, meta );

    		data.object.zoom = this.zoom;
    		data.object.left = this.left;
    		data.object.right = this.right;
    		data.object.top = this.top;
    		data.object.bottom = this.bottom;
    		data.object.near = this.near;
    		data.object.far = this.far;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		return data;

    	}

    } );

    function DirectionalLightShadow() {

    	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

    }

    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

    	constructor: DirectionalLightShadow,

    	isDirectionalLightShadow: true,

    	updateMatrices: function ( light ) {

    		LightShadow.prototype.updateMatrices.call( this, light );

    	}

    } );

    function DirectionalLight( color, intensity ) {

    	Light$1.call( this, color, intensity );

    	this.type = 'DirectionalLight';

    	this.position.copy( Object3D.DefaultUp );
    	this.updateMatrix();

    	this.target = new Object3D();

    	this.shadow = new DirectionalLightShadow();

    }

    DirectionalLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: DirectionalLight,

    	isDirectionalLight: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.target = source.target.clone();

    		this.shadow = source.shadow.clone();

    		return this;

    	}

    } );

    function AmbientLight( color, intensity ) {

    	Light$1.call( this, color, intensity );

    	this.type = 'AmbientLight';

    	this.castShadow = undefined;

    }

    AmbientLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: AmbientLight,

    	isAmbientLight: true

    } );

    function RectAreaLight( color, intensity, width, height ) {

    	Light$1.call( this, color, intensity );

    	this.type = 'RectAreaLight';

    	this.width = ( width !== undefined ) ? width : 10;
    	this.height = ( height !== undefined ) ? height : 10;

    }

    RectAreaLight.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: RectAreaLight,

    	isRectAreaLight: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.width = source.width;
    		this.height = source.height;

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = Light$1.prototype.toJSON.call( this, meta );

    		data.object.width = this.width;
    		data.object.height = this.height;

    		return data;

    	}

    } );

    /**
     * Primary reference:
     *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
     *
     * Secondary reference:
     *   https://www.ppsloan.org/publications/StupidSH36.pdf
     */

    // 3-band SH defined by 9 coefficients

    function SphericalHarmonics3() {

    	this.coefficients = [];

    	for ( let i = 0; i < 9; i ++ ) {

    		this.coefficients.push( new Vector3() );

    	}

    }

    Object.assign( SphericalHarmonics3.prototype, {

    	isSphericalHarmonics3: true,

    	set: function ( coefficients ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].copy( coefficients[ i ] );

    		}

    		return this;

    	},

    	zero: function () {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].set( 0, 0, 0 );

    		}

    		return this;

    	},

    	// get the radiance in the direction of the normal
    	// target is a Vector3
    	getAt: function ( normal, target ) {

    		// normal is assumed to be unit length

    		const x = normal.x, y = normal.y, z = normal.z;

    		const coeff = this.coefficients;

    		// band 0
    		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

    		// band 1
    		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
    		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
    		target.addScaledVector( coeff[ 3 ], 0.488603 * x );

    		// band 2
    		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
    		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
    		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
    		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
    		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

    		return target;

    	},

    	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    	// target is a Vector3
    	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
    	getIrradianceAt: function ( normal, target ) {

    		// normal is assumed to be unit length

    		const x = normal.x, y = normal.y, z = normal.z;

    		const coeff = this.coefficients;

    		// band 0
    		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

    		// band 1
    		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
    		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
    		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );

    		// band 2
    		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
    		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
    		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
    		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
    		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

    		return target;

    	},

    	add: function ( sh ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].add( sh.coefficients[ i ] );

    		}

    		return this;

    	},

    	addScaledSH: function ( sh, s ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );

    		}

    		return this;

    	},

    	scale: function ( s ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].multiplyScalar( s );

    		}

    		return this;

    	},

    	lerp: function ( sh, alpha ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

    		}

    		return this;

    	},

    	equals: function ( sh ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

    				return false;

    			}

    		}

    		return true;

    	},

    	copy: function ( sh ) {

    		return this.set( sh.coefficients );

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	fromArray: function ( array, offset ) {

    		if ( offset === undefined ) offset = 0;

    		const coefficients = this.coefficients;

    		for ( let i = 0; i < 9; i ++ ) {

    			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

    		}

    		return this;

    	},

    	toArray: function ( array, offset ) {

    		if ( array === undefined ) array = [];
    		if ( offset === undefined ) offset = 0;

    		const coefficients = this.coefficients;

    		for ( let i = 0; i < 9; i ++ ) {

    			coefficients[ i ].toArray( array, offset + ( i * 3 ) );

    		}

    		return array;

    	}

    } );

    Object.assign( SphericalHarmonics3, {

    	// evaluate the basis functions
    	// shBasis is an Array[ 9 ]
    	getBasisAt: function ( normal, shBasis ) {

    		// normal is assumed to be unit length

    		const x = normal.x, y = normal.y, z = normal.z;

    		// band 0
    		shBasis[ 0 ] = 0.282095;

    		// band 1
    		shBasis[ 1 ] = 0.488603 * y;
    		shBasis[ 2 ] = 0.488603 * z;
    		shBasis[ 3 ] = 0.488603 * x;

    		// band 2
    		shBasis[ 4 ] = 1.092548 * x * y;
    		shBasis[ 5 ] = 1.092548 * y * z;
    		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
    		shBasis[ 7 ] = 1.092548 * x * z;
    		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

    	}

    } );

    function LightProbe( sh, intensity ) {

    	Light$1.call( this, undefined, intensity );

    	this.type = 'LightProbe';

    	this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

    }

    LightProbe.prototype = Object.assign( Object.create( Light$1.prototype ), {

    	constructor: LightProbe,

    	isLightProbe: true,

    	copy: function ( source ) {

    		Light$1.prototype.copy.call( this, source );

    		this.sh.copy( source.sh );

    		return this;

    	},

    	fromJSON: function ( json ) {

    		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
    		this.sh.fromArray( json.sh );

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = Light$1.prototype.toJSON.call( this, meta );

    		data.object.sh = this.sh.toArray();

    		return data;

    	}

    } );

    function MaterialLoader( manager ) {

    	Loader.call( this, manager );

    	this.textures = {};

    }

    MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: MaterialLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const loader = new FileLoader( scope.manager );
    		loader.setPath( scope.path );
    		loader.setRequestHeader( scope.requestHeader );
    		loader.load( url, function ( text ) {

    			try {

    				onLoad( scope.parse( JSON.parse( text ) ) );

    			} catch ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );

    			}

    		}, onProgress, onError );

    	},

    	parse: function ( json ) {

    		const textures = this.textures;

    		function getTexture( name ) {

    			if ( textures[ name ] === undefined ) {

    				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

    			}

    			return textures[ name ];

    		}

    		const material = new Materials[ json.type ]();

    		if ( json.uuid !== undefined ) material.uuid = json.uuid;
    		if ( json.name !== undefined ) material.name = json.name;
    		if ( json.color !== undefined ) material.color.setHex( json.color );
    		if ( json.roughness !== undefined ) material.roughness = json.roughness;
    		if ( json.metalness !== undefined ) material.metalness = json.metalness;
    		if ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );
    		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
    		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
    		if ( json.shininess !== undefined ) material.shininess = json.shininess;
    		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
    		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
    		if ( json.fog !== undefined ) material.fog = json.fog;
    		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
    		if ( json.blending !== undefined ) material.blending = json.blending;
    		if ( json.combine !== undefined ) material.combine = json.combine;
    		if ( json.side !== undefined ) material.side = json.side;
    		if ( json.opacity !== undefined ) material.opacity = json.opacity;
    		if ( json.transparent !== undefined ) material.transparent = json.transparent;
    		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
    		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
    		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
    		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;

    		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
    		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
    		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
    		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
    		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
    		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
    		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
    		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;

    		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
    		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
    		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
    		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

    		if ( json.rotation !== undefined ) material.rotation = json.rotation;

    		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
    		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
    		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
    		if ( json.scale !== undefined ) material.scale = json.scale;

    		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
    		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
    		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;

    		if ( json.skinning !== undefined ) material.skinning = json.skinning;
    		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
    		if ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;
    		if ( json.dithering !== undefined ) material.dithering = json.dithering;

    		if ( json.vertexTangents !== undefined ) material.vertexTangents = json.vertexTangents;

    		if ( json.visible !== undefined ) material.visible = json.visible;

    		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;

    		if ( json.userData !== undefined ) material.userData = json.userData;

    		if ( json.vertexColors !== undefined ) {

    			if ( typeof json.vertexColors === 'number' ) {

    				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;

    			} else {

    				material.vertexColors = json.vertexColors;

    			}

    		}

    		// Shader Material

    		if ( json.uniforms !== undefined ) {

    			for ( const name in json.uniforms ) {

    				const uniform = json.uniforms[ name ];

    				material.uniforms[ name ] = {};

    				switch ( uniform.type ) {

    					case 't':
    						material.uniforms[ name ].value = getTexture( uniform.value );
    						break;

    					case 'c':
    						material.uniforms[ name ].value = new Color().setHex( uniform.value );
    						break;

    					case 'v2':
    						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
    						break;

    					case 'v3':
    						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
    						break;

    					case 'v4':
    						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
    						break;

    					case 'm3':
    						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

    					case 'm4':
    						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
    						break;

    					default:
    						material.uniforms[ name ].value = uniform.value;

    				}

    			}

    		}

    		if ( json.defines !== undefined ) material.defines = json.defines;
    		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
    		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;

    		if ( json.extensions !== undefined ) {

    			for ( const key in json.extensions ) {

    				material.extensions[ key ] = json.extensions[ key ];

    			}

    		}

    		// Deprecated

    		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

    		// for PointsMaterial

    		if ( json.size !== undefined ) material.size = json.size;
    		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

    		// maps

    		if ( json.map !== undefined ) material.map = getTexture( json.map );
    		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );

    		if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );

    		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
    		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

    		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
    		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
    		if ( json.normalScale !== undefined ) {

    			let normalScale = json.normalScale;

    			if ( Array.isArray( normalScale ) === false ) {

    				// Blender exporter used to export a scalar. See #7459

    				normalScale = [ normalScale, normalScale ];

    			}

    			material.normalScale = new Vector2().fromArray( normalScale );

    		}

    		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
    		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
    		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

    		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
    		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

    		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
    		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

    		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

    		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
    		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;

    		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
    		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;

    		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
    		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

    		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
    		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

    		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

    		if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );
    		if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );
    		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
    		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );

    		if ( json.transmission !== undefined ) material.transmission = json.transmission;
    		if ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );

    		return material;

    	},

    	setTextures: function ( value ) {

    		this.textures = value;
    		return this;

    	}

    } );

    const LoaderUtils = {

    	decodeText: function ( array ) {

    		if ( typeof TextDecoder !== 'undefined' ) {

    			return new TextDecoder().decode( array );

    		}

    		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
    		// throws a "maximum call stack size exceeded" error for large arrays.

    		let s = '';

    		for ( let i = 0, il = array.length; i < il; i ++ ) {

    			// Implicitly assumes little-endian.
    			s += String.fromCharCode( array[ i ] );

    		}

    		try {

    			// merges multi-byte utf-8 characters.

    			return decodeURIComponent( escape( s ) );

    		} catch ( e ) { // see #16358

    			return s;

    		}

    	},

    	extractUrlBase: function ( url ) {

    		const index = url.lastIndexOf( '/' );

    		if ( index === - 1 ) return './';

    		return url.substr( 0, index + 1 );

    	}

    };

    function InstancedBufferGeometry() {

    	BufferGeometry.call( this );

    	this.type = 'InstancedBufferGeometry';
    	this.instanceCount = Infinity;

    }

    InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

    	constructor: InstancedBufferGeometry,

    	isInstancedBufferGeometry: true,

    	copy: function ( source ) {

    		BufferGeometry.prototype.copy.call( this, source );

    		this.instanceCount = source.instanceCount;

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	toJSON: function () {

    		const data = BufferGeometry.prototype.toJSON.call( this );

    		data.instanceCount = this.instanceCount;

    		data.isInstancedBufferGeometry = true;

    		return data;

    	}

    } );

    function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

    	if ( typeof ( normalized ) === 'number' ) {

    		meshPerAttribute = normalized;

    		normalized = false;

    		console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

    	}

    	BufferAttribute.call( this, array, itemSize, normalized );

    	this.meshPerAttribute = meshPerAttribute || 1;

    }

    InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

    	constructor: InstancedBufferAttribute,

    	isInstancedBufferAttribute: true,

    	copy: function ( source ) {

    		BufferAttribute.prototype.copy.call( this, source );

    		this.meshPerAttribute = source.meshPerAttribute;

    		return this;

    	},

    	toJSON: function ()	{

    		const data = BufferAttribute.prototype.toJSON.call( this );

    		data.meshPerAttribute = this.meshPerAttribute;

    		data.isInstancedBufferAttribute = true;

    		return data;

    	}

    } );

    function BufferGeometryLoader( manager ) {

    	Loader.call( this, manager );

    }

    BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: BufferGeometryLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const loader = new FileLoader( scope.manager );
    		loader.setPath( scope.path );
    		loader.setRequestHeader( scope.requestHeader );
    		loader.load( url, function ( text ) {

    			try {

    				onLoad( scope.parse( JSON.parse( text ) ) );

    			} catch ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );

    			}

    		}, onProgress, onError );

    	},

    	parse: function ( json ) {

    		const interleavedBufferMap = {};
    		const arrayBufferMap = {};

    		function getInterleavedBuffer( json, uuid ) {

    			if ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];

    			const interleavedBuffers = json.interleavedBuffers;
    			const interleavedBuffer = interleavedBuffers[ uuid ];

    			const buffer = getArrayBuffer( json, interleavedBuffer.buffer );

    			const array = new TYPED_ARRAYS[ interleavedBuffer.type ]( buffer );
    			const ib = new InterleavedBuffer( array, interleavedBuffer.stride );
    			ib.uuid = interleavedBuffer.uuid;

    			interleavedBufferMap[ uuid ] = ib;

    			return ib;

    		}

    		function getArrayBuffer( json, uuid ) {

    			if ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];

    			const arrayBuffers = json.arrayBuffers;
    			const arrayBuffer = arrayBuffers[ uuid ];

    			const ab = new Uint32Array( arrayBuffer ).buffer;

    			arrayBufferMap[ uuid ] = ab;

    			return ab;

    		}

    		const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

    		const index = json.data.index;

    		if ( index !== undefined ) {

    			const typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
    			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

    		}

    		const attributes = json.data.attributes;

    		for ( const key in attributes ) {

    			const attribute = attributes[ key ];
    			let bufferAttribute;

    			if ( attribute.isInterleavedBufferAttribute ) {

    				const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
    				bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );

    			} else {

    				const typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
    				const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
    				bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );

    			}

    			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
    			geometry.setAttribute( key, bufferAttribute );

    		}

    		const morphAttributes = json.data.morphAttributes;

    		if ( morphAttributes ) {

    			for ( const key in morphAttributes ) {

    				const attributeArray = morphAttributes[ key ];

    				const array = [];

    				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

    					const attribute = attributeArray[ i ];
    					let bufferAttribute;

    					if ( attribute.isInterleavedBufferAttribute ) {

    						const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
    						bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );

    					} else {

    						const typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
    						bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );

    					}

    					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
    					array.push( bufferAttribute );

    				}

    				geometry.morphAttributes[ key ] = array;

    			}

    		}

    		const morphTargetsRelative = json.data.morphTargetsRelative;

    		if ( morphTargetsRelative ) {

    			geometry.morphTargetsRelative = true;

    		}

    		const groups = json.data.groups || json.data.drawcalls || json.data.offsets;

    		if ( groups !== undefined ) {

    			for ( let i = 0, n = groups.length; i !== n; ++ i ) {

    				const group = groups[ i ];

    				geometry.addGroup( group.start, group.count, group.materialIndex );

    			}

    		}

    		const boundingSphere = json.data.boundingSphere;

    		if ( boundingSphere !== undefined ) {

    			const center = new Vector3();

    			if ( boundingSphere.center !== undefined ) {

    				center.fromArray( boundingSphere.center );

    			}

    			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

    		}

    		if ( json.name ) geometry.name = json.name;
    		if ( json.userData ) geometry.userData = json.userData;

    		return geometry;

    	}

    } );

    const TYPED_ARRAYS = {
    	Int8Array: Int8Array,
    	Uint8Array: Uint8Array,
    	// Workaround for IE11 pre KB2929437. See #11440
    	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
    	Int16Array: Int16Array,
    	Uint16Array: Uint16Array,
    	Int32Array: Int32Array,
    	Uint32Array: Uint32Array,
    	Float32Array: Float32Array,
    	Float64Array: Float64Array
    };

    function ObjectLoader( manager ) {

    	Loader.call( this, manager );

    }

    ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: ObjectLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
    		this.resourcePath = this.resourcePath || path;

    		const loader = new FileLoader( scope.manager );
    		loader.setPath( this.path );
    		loader.setRequestHeader( this.requestHeader );
    		loader.load( url, function ( text ) {

    			let json = null;

    			try {

    				json = JSON.parse( text );

    			} catch ( error ) {

    				if ( onError !== undefined ) onError( error );

    				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

    				return;

    			}

    			const metadata = json.metadata;

    			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

    				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
    				return;

    			}

    			scope.parse( json, onLoad );

    		}, onProgress, onError );

    	},

    	parse: function ( json, onLoad ) {

    		const shapes = this.parseShape( json.shapes );
    		const geometries = this.parseGeometries( json.geometries, shapes );

    		const images = this.parseImages( json.images, function () {

    			if ( onLoad !== undefined ) onLoad( object );

    		} );

    		const textures = this.parseTextures( json.textures, images );
    		const materials = this.parseMaterials( json.materials, textures );

    		const object = this.parseObject( json.object, geometries, materials );

    		if ( json.animations ) {

    			object.animations = this.parseAnimations( json.animations );

    		}

    		if ( json.images === undefined || json.images.length === 0 ) {

    			if ( onLoad !== undefined ) onLoad( object );

    		}

    		return object;

    	},

    	parseShape: function ( json ) {

    		const shapes = {};

    		if ( json !== undefined ) {

    			for ( let i = 0, l = json.length; i < l; i ++ ) {

    				const shape = new Shape().fromJSON( json[ i ] );

    				shapes[ shape.uuid ] = shape;

    			}

    		}

    		return shapes;

    	},

    	parseGeometries: function ( json, shapes ) {

    		const geometries = {};
    		let geometryShapes;

    		if ( json !== undefined ) {

    			const bufferGeometryLoader = new BufferGeometryLoader();

    			for ( let i = 0, l = json.length; i < l; i ++ ) {

    				let geometry;
    				const data = json[ i ];

    				switch ( data.type ) {

    					case 'PlaneGeometry':
    					case 'PlaneBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.width,
    							data.height,
    							data.widthSegments,
    							data.heightSegments
    						);

    						break;

    					case 'BoxGeometry':
    					case 'BoxBufferGeometry':
    					case 'CubeGeometry': // backwards compatible

    						geometry = new Geometries[ data.type ](
    							data.width,
    							data.height,
    							data.depth,
    							data.widthSegments,
    							data.heightSegments,
    							data.depthSegments
    						);

    						break;

    					case 'CircleGeometry':
    					case 'CircleBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.segments,
    							data.thetaStart,
    							data.thetaLength
    						);

    						break;

    					case 'CylinderGeometry':
    					case 'CylinderBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radiusTop,
    							data.radiusBottom,
    							data.height,
    							data.radialSegments,
    							data.heightSegments,
    							data.openEnded,
    							data.thetaStart,
    							data.thetaLength
    						);

    						break;

    					case 'ConeGeometry':
    					case 'ConeBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.height,
    							data.radialSegments,
    							data.heightSegments,
    							data.openEnded,
    							data.thetaStart,
    							data.thetaLength
    						);

    						break;

    					case 'SphereGeometry':
    					case 'SphereBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.widthSegments,
    							data.heightSegments,
    							data.phiStart,
    							data.phiLength,
    							data.thetaStart,
    							data.thetaLength
    						);

    						break;

    					case 'DodecahedronGeometry':
    					case 'DodecahedronBufferGeometry':
    					case 'IcosahedronGeometry':
    					case 'IcosahedronBufferGeometry':
    					case 'OctahedronGeometry':
    					case 'OctahedronBufferGeometry':
    					case 'TetrahedronGeometry':
    					case 'TetrahedronBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.detail
    						);

    						break;

    					case 'RingGeometry':
    					case 'RingBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.innerRadius,
    							data.outerRadius,
    							data.thetaSegments,
    							data.phiSegments,
    							data.thetaStart,
    							data.thetaLength
    						);

    						break;

    					case 'TorusGeometry':
    					case 'TorusBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.tube,
    							data.radialSegments,
    							data.tubularSegments,
    							data.arc
    						);

    						break;

    					case 'TorusKnotGeometry':
    					case 'TorusKnotBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.radius,
    							data.tube,
    							data.tubularSegments,
    							data.radialSegments,
    							data.p,
    							data.q
    						);

    						break;

    					case 'TubeGeometry':
    					case 'TubeBufferGeometry':

    						// This only works for built-in curves (e.g. CatmullRomCurve3).
    						// User defined curves or instances of CurvePath will not be deserialized.
    						geometry = new Geometries[ data.type ](
    							new Curves[ data.path.type ]().fromJSON( data.path ),
    							data.tubularSegments,
    							data.radius,
    							data.radialSegments,
    							data.closed
    						);

    						break;

    					case 'LatheGeometry':
    					case 'LatheBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.points,
    							data.segments,
    							data.phiStart,
    							data.phiLength
    						);

    						break;

    					case 'PolyhedronGeometry':
    					case 'PolyhedronBufferGeometry':

    						geometry = new Geometries[ data.type ](
    							data.vertices,
    							data.indices,
    							data.radius,
    							data.details
    						);

    						break;

    					case 'ShapeGeometry':
    					case 'ShapeBufferGeometry':

    						geometryShapes = [];

    						for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

    							const shape = shapes[ data.shapes[ j ] ];

    							geometryShapes.push( shape );

    						}

    						geometry = new Geometries[ data.type ](
    							geometryShapes,
    							data.curveSegments
    						);

    						break;


    					case 'ExtrudeGeometry':
    					case 'ExtrudeBufferGeometry':

    						geometryShapes = [];

    						for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

    							const shape = shapes[ data.shapes[ j ] ];

    							geometryShapes.push( shape );

    						}

    						const extrudePath = data.options.extrudePath;

    						if ( extrudePath !== undefined ) {

    							data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

    						}

    						geometry = new Geometries[ data.type ](
    							geometryShapes,
    							data.options
    						);

    						break;

    					case 'BufferGeometry':
    					case 'InstancedBufferGeometry':

    						geometry = bufferGeometryLoader.parse( data );

    						break;

    					case 'Geometry':

    						console.error( 'THREE.ObjectLoader: Loading "Geometry" is not supported anymore.' );

    						break;

    					default:

    						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

    						continue;

    				}

    				geometry.uuid = data.uuid;

    				if ( data.name !== undefined ) geometry.name = data.name;
    				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;

    				geometries[ data.uuid ] = geometry;

    			}

    		}

    		return geometries;

    	},

    	parseMaterials: function ( json, textures ) {

    		const cache = {}; // MultiMaterial
    		const materials = {};

    		if ( json !== undefined ) {

    			const loader = new MaterialLoader();
    			loader.setTextures( textures );

    			for ( let i = 0, l = json.length; i < l; i ++ ) {

    				const data = json[ i ];

    				if ( data.type === 'MultiMaterial' ) {

    					// Deprecated

    					const array = [];

    					for ( let j = 0; j < data.materials.length; j ++ ) {

    						const material = data.materials[ j ];

    						if ( cache[ material.uuid ] === undefined ) {

    							cache[ material.uuid ] = loader.parse( material );

    						}

    						array.push( cache[ material.uuid ] );

    					}

    					materials[ data.uuid ] = array;

    				} else {

    					if ( cache[ data.uuid ] === undefined ) {

    						cache[ data.uuid ] = loader.parse( data );

    					}

    					materials[ data.uuid ] = cache[ data.uuid ];

    				}

    			}

    		}

    		return materials;

    	},

    	parseAnimations: function ( json ) {

    		const animations = [];

    		for ( let i = 0; i < json.length; i ++ ) {

    			const data = json[ i ];

    			const clip = AnimationClip.parse( data );

    			if ( data.uuid !== undefined ) clip.uuid = data.uuid;

    			animations.push( clip );

    		}

    		return animations;

    	},

    	parseImages: function ( json, onLoad ) {

    		const scope = this;
    		const images = {};

    		let loader;

    		function loadImage( url ) {

    			scope.manager.itemStart( url );

    			return loader.load( url, function () {

    				scope.manager.itemEnd( url );

    			}, undefined, function () {

    				scope.manager.itemError( url );
    				scope.manager.itemEnd( url );

    			} );

    		}

    		if ( json !== undefined && json.length > 0 ) {

    			const manager = new LoadingManager( onLoad );

    			loader = new ImageLoader( manager );
    			loader.setCrossOrigin( this.crossOrigin );

    			for ( let i = 0, il = json.length; i < il; i ++ ) {

    				const image = json[ i ];
    				const url = image.url;

    				if ( Array.isArray( url ) ) {

    					// load array of images e.g CubeTexture

    					images[ image.uuid ] = [];

    					for ( let j = 0, jl = url.length; j < jl; j ++ ) {

    						const currentUrl = url[ j ];

    						const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

    						images[ image.uuid ].push( loadImage( path ) );

    					}

    				} else {

    					// load single image

    					const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

    					images[ image.uuid ] = loadImage( path );

    				}

    			}

    		}

    		return images;

    	},

    	parseTextures: function ( json, images ) {

    		function parseConstant( value, type ) {

    			if ( typeof value === 'number' ) return value;

    			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

    			return type[ value ];

    		}

    		const textures = {};

    		if ( json !== undefined ) {

    			for ( let i = 0, l = json.length; i < l; i ++ ) {

    				const data = json[ i ];

    				if ( data.image === undefined ) {

    					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

    				}

    				if ( images[ data.image ] === undefined ) {

    					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

    				}

    				let texture;

    				if ( Array.isArray( images[ data.image ] ) ) {

    					texture = new CubeTexture( images[ data.image ] );

    				} else {

    					texture = new Texture( images[ data.image ] );

    				}

    				texture.needsUpdate = true;

    				texture.uuid = data.uuid;

    				if ( data.name !== undefined ) texture.name = data.name;

    				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

    				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
    				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
    				if ( data.center !== undefined ) texture.center.fromArray( data.center );
    				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

    				if ( data.wrap !== undefined ) {

    					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
    					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

    				}

    				if ( data.format !== undefined ) texture.format = data.format;
    				if ( data.type !== undefined ) texture.type = data.type;
    				if ( data.encoding !== undefined ) texture.encoding = data.encoding;

    				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
    				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
    				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

    				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

    				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
    				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;

    				textures[ data.uuid ] = texture;

    			}

    		}

    		return textures;

    	},

    	parseObject: function ( data, geometries, materials ) {

    		let object;

    		function getGeometry( name ) {

    			if ( geometries[ name ] === undefined ) {

    				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

    			}

    			return geometries[ name ];

    		}

    		function getMaterial( name ) {

    			if ( name === undefined ) return undefined;

    			if ( Array.isArray( name ) ) {

    				const array = [];

    				for ( let i = 0, l = name.length; i < l; i ++ ) {

    					const uuid = name[ i ];

    					if ( materials[ uuid ] === undefined ) {

    						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

    					}

    					array.push( materials[ uuid ] );

    				}

    				return array;

    			}

    			if ( materials[ name ] === undefined ) {

    				console.warn( 'THREE.ObjectLoader: Undefined material', name );

    			}

    			return materials[ name ];

    		}

    		let geometry, material;

    		switch ( data.type ) {

    			case 'Scene':

    				object = new Scene();

    				if ( data.background !== undefined ) {

    					if ( Number.isInteger( data.background ) ) {

    						object.background = new Color( data.background );

    					}

    				}

    				if ( data.fog !== undefined ) {

    					if ( data.fog.type === 'Fog' ) {

    						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

    					} else if ( data.fog.type === 'FogExp2' ) {

    						object.fog = new FogExp2( data.fog.color, data.fog.density );

    					}

    				}

    				break;

    			case 'PerspectiveCamera':

    				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

    				if ( data.focus !== undefined ) object.focus = data.focus;
    				if ( data.zoom !== undefined ) object.zoom = data.zoom;
    				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
    				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
    				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

    				break;

    			case 'OrthographicCamera':

    				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

    				if ( data.zoom !== undefined ) object.zoom = data.zoom;
    				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

    				break;

    			case 'AmbientLight':

    				object = new AmbientLight( data.color, data.intensity );

    				break;

    			case 'DirectionalLight':

    				object = new DirectionalLight( data.color, data.intensity );

    				break;

    			case 'PointLight':

    				object = new PointLight( data.color, data.intensity, data.distance, data.decay );

    				break;

    			case 'RectAreaLight':

    				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

    				break;

    			case 'SpotLight':

    				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

    				break;

    			case 'HemisphereLight':

    				object = new HemisphereLight( data.color, data.groundColor, data.intensity );

    				break;

    			case 'LightProbe':

    				object = new LightProbe().fromJSON( data );

    				break;

    			case 'SkinnedMesh':

    				console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

    			case 'Mesh':

    				geometry = getGeometry( data.geometry );
    				material = getMaterial( data.material );

    				object = new Mesh( geometry, material );

    				break;

    			case 'InstancedMesh':

    				geometry = getGeometry( data.geometry );
    				material = getMaterial( data.material );
    				const count = data.count;
    				const instanceMatrix = data.instanceMatrix;

    				object = new InstancedMesh( geometry, material, count );
    				object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );

    				break;

    			case 'LOD':

    				object = new LOD();

    				break;

    			case 'Line':

    				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

    				break;

    			case 'LineLoop':

    				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

    				break;

    			case 'LineSegments':

    				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

    				break;

    			case 'PointCloud':
    			case 'Points':

    				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

    				break;

    			case 'Sprite':

    				object = new Sprite( getMaterial( data.material ) );

    				break;

    			case 'Group':

    				object = new Group();

    				break;

    			default:

    				object = new Object3D();

    		}

    		object.uuid = data.uuid;

    		if ( data.name !== undefined ) object.name = data.name;

    		if ( data.matrix !== undefined ) {

    			object.matrix.fromArray( data.matrix );

    			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
    			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );

    		} else {

    			if ( data.position !== undefined ) object.position.fromArray( data.position );
    			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
    			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
    			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

    		}

    		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
    		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

    		if ( data.shadow ) {

    			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
    			if ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;
    			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
    			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
    			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

    		}

    		if ( data.visible !== undefined ) object.visible = data.visible;
    		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
    		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
    		if ( data.userData !== undefined ) object.userData = data.userData;
    		if ( data.layers !== undefined ) object.layers.mask = data.layers;

    		if ( data.children !== undefined ) {

    			const children = data.children;

    			for ( let i = 0; i < children.length; i ++ ) {

    				object.add( this.parseObject( children[ i ], geometries, materials ) );

    			}

    		}

    		if ( data.type === 'LOD' ) {

    			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;

    			const levels = data.levels;

    			for ( let l = 0; l < levels.length; l ++ ) {

    				const level = levels[ l ];
    				const child = object.getObjectByProperty( 'uuid', level.object );

    				if ( child !== undefined ) {

    					object.addLevel( child, level.distance );

    				}

    			}

    		}

    		return object;

    	}

    } );

    const TEXTURE_MAPPING = {
    	UVMapping: UVMapping,
    	CubeReflectionMapping: CubeReflectionMapping,
    	CubeRefractionMapping: CubeRefractionMapping,
    	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
    	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
    	CubeUVReflectionMapping: CubeUVReflectionMapping,
    	CubeUVRefractionMapping: CubeUVRefractionMapping
    };

    const TEXTURE_WRAPPING = {
    	RepeatWrapping: RepeatWrapping,
    	ClampToEdgeWrapping: ClampToEdgeWrapping,
    	MirroredRepeatWrapping: MirroredRepeatWrapping
    };

    const TEXTURE_FILTER = {
    	NearestFilter: NearestFilter,
    	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
    	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
    	LinearFilter: LinearFilter,
    	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
    	LinearMipmapLinearFilter: LinearMipmapLinearFilter
    };

    function ImageBitmapLoader( manager ) {

    	if ( typeof createImageBitmap === 'undefined' ) {

    		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

    	}

    	if ( typeof fetch === 'undefined' ) {

    		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

    	}

    	Loader.call( this, manager );

    	this.options = { premultiplyAlpha: 'none' };

    }

    ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: ImageBitmapLoader,

    	isImageBitmapLoader: true,

    	setOptions: function setOptions( options ) {

    		this.options = options;

    		return this;

    	},

    	load: function ( url, onLoad, onProgress, onError ) {

    		if ( url === undefined ) url = '';

    		if ( this.path !== undefined ) url = this.path + url;

    		url = this.manager.resolveURL( url );

    		const scope = this;

    		const cached = Cache.get( url );

    		if ( cached !== undefined ) {

    			scope.manager.itemStart( url );

    			setTimeout( function () {

    				if ( onLoad ) onLoad( cached );

    				scope.manager.itemEnd( url );

    			}, 0 );

    			return cached;

    		}

    		fetch( url ).then( function ( res ) {

    			return res.blob();

    		} ).then( function ( blob ) {

    			return createImageBitmap( blob, scope.options );

    		} ).then( function ( imageBitmap ) {

    			Cache.add( url, imageBitmap );

    			if ( onLoad ) onLoad( imageBitmap );

    			scope.manager.itemEnd( url );

    		} ).catch( function ( e ) {

    			if ( onError ) onError( e );

    			scope.manager.itemError( url );
    			scope.manager.itemEnd( url );

    		} );

    		scope.manager.itemStart( url );

    	}

    } );

    function ShapePath() {

    	this.type = 'ShapePath';

    	this.color = new Color();

    	this.subPaths = [];
    	this.currentPath = null;

    }

    Object.assign( ShapePath.prototype, {

    	moveTo: function ( x, y ) {

    		this.currentPath = new Path();
    		this.subPaths.push( this.currentPath );
    		this.currentPath.moveTo( x, y );

    		return this;

    	},

    	lineTo: function ( x, y ) {

    		this.currentPath.lineTo( x, y );

    		return this;

    	},

    	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

    		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

    		return this;

    	},

    	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

    		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

    		return this;

    	},

    	splineThru: function ( pts ) {

    		this.currentPath.splineThru( pts );

    		return this;

    	},

    	toShapes: function ( isCCW, noHoles ) {

    		function toShapesNoHoles( inSubpaths ) {

    			const shapes = [];

    			for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {

    				const tmpPath = inSubpaths[ i ];

    				const tmpShape = new Shape();
    				tmpShape.curves = tmpPath.curves;

    				shapes.push( tmpShape );

    			}

    			return shapes;

    		}

    		function isPointInsidePolygon( inPt, inPolygon ) {

    			const polyLen = inPolygon.length;

    			// inPt on polygon contour => immediate success    or
    			// toggling of inside/outside at every single! intersection point of an edge
    			//  with the horizontal line through inPt, left of inPt
    			//  not counting lowerY endpoints of edges and whole edges on that line
    			let inside = false;
    			for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

    				let edgeLowPt = inPolygon[ p ];
    				let edgeHighPt = inPolygon[ q ];

    				let edgeDx = edgeHighPt.x - edgeLowPt.x;
    				let edgeDy = edgeHighPt.y - edgeLowPt.y;

    				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

    					// not parallel
    					if ( edgeDy < 0 ) {

    						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
    						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

    					}

    					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

    					if ( inPt.y === edgeLowPt.y ) {

    						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
    						// continue;				// no intersection or edgeLowPt => doesn't count !!!

    					} else {

    						const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
    						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
    						if ( perpEdge < 0 ) 				continue;
    						inside = ! inside;		// true intersection left of inPt

    					}

    				} else {

    					// parallel or collinear
    					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
    					// edge lies on the same horizontal line as inPt
    					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
    						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
    					// continue;

    				}

    			}

    			return	inside;

    		}

    		const isClockWise = ShapeUtils.isClockWise;

    		const subPaths = this.subPaths;
    		if ( subPaths.length === 0 ) return [];

    		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


    		let solid, tmpPath, tmpShape, shapes = [];

    		if ( subPaths.length === 1 ) {

    			tmpPath = subPaths[ 0 ];
    			tmpShape = new Shape();
    			tmpShape.curves = tmpPath.curves;
    			shapes.push( tmpShape );
    			return shapes;

    		}

    		let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
    		holesFirst = isCCW ? ! holesFirst : holesFirst;

    		// console.log("Holes first", holesFirst);

    		const betterShapeHoles = [];
    		const newShapes = [];
    		let newShapeHoles = [];
    		let mainIdx = 0;
    		let tmpPoints;

    		newShapes[ mainIdx ] = undefined;
    		newShapeHoles[ mainIdx ] = [];

    		for ( let i = 0, l = subPaths.length; i < l; i ++ ) {

    			tmpPath = subPaths[ i ];
    			tmpPoints = tmpPath.getPoints();
    			solid = isClockWise( tmpPoints );
    			solid = isCCW ? ! solid : solid;

    			if ( solid ) {

    				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

    				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
    				newShapes[ mainIdx ].s.curves = tmpPath.curves;

    				if ( holesFirst )	mainIdx ++;
    				newShapeHoles[ mainIdx ] = [];

    				//console.log('cw', i);

    			} else {

    				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

    				//console.log('ccw', i);

    			}

    		}

    		// only Holes? -> probably all Shapes with wrong orientation
    		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


    		if ( newShapes.length > 1 ) {

    			let ambiguous = false;
    			const toChange = [];

    			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

    				betterShapeHoles[ sIdx ] = [];

    			}

    			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

    				const sho = newShapeHoles[ sIdx ];

    				for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {

    					const ho = sho[ hIdx ];
    					let hole_unassigned = true;

    					for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

    						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

    							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
    							if ( hole_unassigned ) {

    								hole_unassigned = false;
    								betterShapeHoles[ s2Idx ].push( ho );

    							} else {

    								ambiguous = true;

    							}

    						}

    					}

    					if ( hole_unassigned ) {

    						betterShapeHoles[ sIdx ].push( ho );

    					}

    				}

    			}
    			// console.log("ambiguous: ", ambiguous);

    			if ( toChange.length > 0 ) {

    				// console.log("to change: ", toChange);
    				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

    			}

    		}

    		let tmpHoles;

    		for ( let i = 0, il = newShapes.length; i < il; i ++ ) {

    			tmpShape = newShapes[ i ].s;
    			shapes.push( tmpShape );
    			tmpHoles = newShapeHoles[ i ];

    			for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

    				tmpShape.holes.push( tmpHoles[ j ].h );

    			}

    		}

    		//console.log("shape", shapes);

    		return shapes;

    	}

    } );

    function Font( data ) {

    	this.type = 'Font';

    	this.data = data;

    }

    Object.assign( Font.prototype, {

    	isFont: true,

    	generateShapes: function ( text, size ) {

    		if ( size === undefined ) size = 100;

    		const shapes = [];
    		const paths = createPaths( text, size, this.data );

    		for ( let p = 0, pl = paths.length; p < pl; p ++ ) {

    			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

    		}

    		return shapes;

    	}

    } );

    function createPaths( text, size, data ) {

    	const chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988
    	const scale = size / data.resolution;
    	const line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

    	const paths = [];

    	let offsetX = 0, offsetY = 0;

    	for ( let i = 0; i < chars.length; i ++ ) {

    		const char = chars[ i ];

    		if ( char === '\n' ) {

    			offsetX = 0;
    			offsetY -= line_height;

    		} else {

    			const ret = createPath( char, scale, offsetX, offsetY, data );
    			offsetX += ret.offsetX;
    			paths.push( ret.path );

    		}

    	}

    	return paths;

    }

    function createPath( char, scale, offsetX, offsetY, data ) {

    	const glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

    	if ( ! glyph ) {

    		console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

    		return;

    	}

    	const path = new ShapePath();

    	let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

    	if ( glyph.o ) {

    		const outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

    		for ( let i = 0, l = outline.length; i < l; ) {

    			const action = outline[ i ++ ];

    			switch ( action ) {

    				case 'm': // moveTo

    					x = outline[ i ++ ] * scale + offsetX;
    					y = outline[ i ++ ] * scale + offsetY;

    					path.moveTo( x, y );

    					break;

    				case 'l': // lineTo

    					x = outline[ i ++ ] * scale + offsetX;
    					y = outline[ i ++ ] * scale + offsetY;

    					path.lineTo( x, y );

    					break;

    				case 'q': // quadraticCurveTo

    					cpx = outline[ i ++ ] * scale + offsetX;
    					cpy = outline[ i ++ ] * scale + offsetY;
    					cpx1 = outline[ i ++ ] * scale + offsetX;
    					cpy1 = outline[ i ++ ] * scale + offsetY;

    					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

    					break;

    				case 'b': // bezierCurveTo

    					cpx = outline[ i ++ ] * scale + offsetX;
    					cpy = outline[ i ++ ] * scale + offsetY;
    					cpx1 = outline[ i ++ ] * scale + offsetX;
    					cpy1 = outline[ i ++ ] * scale + offsetY;
    					cpx2 = outline[ i ++ ] * scale + offsetX;
    					cpy2 = outline[ i ++ ] * scale + offsetY;

    					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

    					break;

    			}

    		}

    	}

    	return { offsetX: glyph.ha * scale, path: path };

    }

    function FontLoader( manager ) {

    	Loader.call( this, manager );

    }

    FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: FontLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const loader = new FileLoader( this.manager );
    		loader.setPath( this.path );
    		loader.setRequestHeader( this.requestHeader );
    		loader.load( url, function ( text ) {

    			let json;

    			try {

    				json = JSON.parse( text );

    			} catch ( e ) {

    				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
    				json = JSON.parse( text.substring( 65, text.length - 2 ) );

    			}

    			const font = scope.parse( json );

    			if ( onLoad ) onLoad( font );

    		}, onProgress, onError );

    	},

    	parse: function ( json ) {

    		return new Font( json );

    	}

    } );

    let _context;

    const AudioContext = {

    	getContext: function () {

    		if ( _context === undefined ) {

    			_context = new ( window.AudioContext || window.webkitAudioContext )();

    		}

    		return _context;

    	},

    	setContext: function ( value ) {

    		_context = value;

    	}

    };

    function AudioLoader( manager ) {

    	Loader.call( this, manager );

    }

    AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: AudioLoader,

    	load: function ( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const loader = new FileLoader( scope.manager );
    		loader.setResponseType( 'arraybuffer' );
    		loader.setPath( scope.path );
    		loader.setRequestHeader( scope.requestHeader );
    		loader.load( url, function ( buffer ) {

    			try {

    				// Create a copy of the buffer. The `decodeAudioData` method
    				// detaches the buffer when complete, preventing reuse.
    				const bufferCopy = buffer.slice( 0 );

    				const context = AudioContext.getContext();
    				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

    					onLoad( audioBuffer );

    				} );

    			} catch ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );

    			}

    		}, onProgress, onError );

    	}

    } );

    function HemisphereLightProbe( skyColor, groundColor, intensity ) {

    	LightProbe.call( this, undefined, intensity );

    	const color1 = new Color().set( skyColor );
    	const color2 = new Color().set( groundColor );

    	const sky = new Vector3( color1.r, color1.g, color1.b );
    	const ground = new Vector3( color2.r, color2.g, color2.b );

    	// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
    	const c0 = Math.sqrt( Math.PI );
    	const c1 = c0 * Math.sqrt( 0.75 );

    	this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
    	this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

    }

    HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

    	constructor: HemisphereLightProbe,

    	isHemisphereLightProbe: true,

    	copy: function ( source ) { // modifying colors not currently supported

    		LightProbe.prototype.copy.call( this, source );

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = LightProbe.prototype.toJSON.call( this, meta );

    		// data.sh = this.sh.toArray(); // todo

    		return data;

    	}

    } );

    function AmbientLightProbe( color, intensity ) {

    	LightProbe.call( this, undefined, intensity );

    	const color1 = new Color().set( color );

    	// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
    	this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

    }

    AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

    	constructor: AmbientLightProbe,

    	isAmbientLightProbe: true,

    	copy: function ( source ) { // modifying color not currently supported

    		LightProbe.prototype.copy.call( this, source );

    		return this;

    	},

    	toJSON: function ( meta ) {

    		const data = LightProbe.prototype.toJSON.call( this, meta );

    		// data.sh = this.sh.toArray(); // todo

    		return data;

    	}

    } );

    const _eyeRight = new Matrix4();
    const _eyeLeft = new Matrix4();

    function StereoCamera() {

    	this.type = 'StereoCamera';

    	this.aspect = 1;

    	this.eyeSep = 0.064;

    	this.cameraL = new PerspectiveCamera();
    	this.cameraL.layers.enable( 1 );
    	this.cameraL.matrixAutoUpdate = false;

    	this.cameraR = new PerspectiveCamera();
    	this.cameraR.layers.enable( 2 );
    	this.cameraR.matrixAutoUpdate = false;

    	this._cache = {
    		focus: null,
    		fov: null,
    		aspect: null,
    		near: null,
    		far: null,
    		zoom: null,
    		eyeSep: null
    	};

    }

    Object.assign( StereoCamera.prototype, {

    	update: function ( camera ) {

    		const cache = this._cache;

    		const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
    			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
    			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

    		if ( needsUpdate ) {

    			cache.focus = camera.focus;
    			cache.fov = camera.fov;
    			cache.aspect = camera.aspect * this.aspect;
    			cache.near = camera.near;
    			cache.far = camera.far;
    			cache.zoom = camera.zoom;
    			cache.eyeSep = this.eyeSep;

    			// Off-axis stereoscopic effect based on
    			// http://paulbourke.net/stereographics/stereorender/

    			const projectionMatrix = camera.projectionMatrix.clone();
    			const eyeSepHalf = cache.eyeSep / 2;
    			const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
    			const ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
    			let xmin, xmax;

    			// translate xOffset

    			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
    			_eyeRight.elements[ 12 ] = eyeSepHalf;

    			// for left eye

    			xmin = - ymax * cache.aspect + eyeSepOnProjection;
    			xmax = ymax * cache.aspect + eyeSepOnProjection;

    			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
    			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

    			this.cameraL.projectionMatrix.copy( projectionMatrix );

    			// for right eye

    			xmin = - ymax * cache.aspect - eyeSepOnProjection;
    			xmax = ymax * cache.aspect - eyeSepOnProjection;

    			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
    			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

    			this.cameraR.projectionMatrix.copy( projectionMatrix );

    		}

    		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
    		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

    	}

    } );

    function Clock( autoStart ) {

    	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

    	this.startTime = 0;
    	this.oldTime = 0;
    	this.elapsedTime = 0;

    	this.running = false;

    }

    Object.assign( Clock.prototype, {

    	start: function () {

    		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

    		this.oldTime = this.startTime;
    		this.elapsedTime = 0;
    		this.running = true;

    	},

    	stop: function () {

    		this.getElapsedTime();
    		this.running = false;
    		this.autoStart = false;

    	},

    	getElapsedTime: function () {

    		this.getDelta();
    		return this.elapsedTime;

    	},

    	getDelta: function () {

    		let diff = 0;

    		if ( this.autoStart && ! this.running ) {

    			this.start();
    			return 0;

    		}

    		if ( this.running ) {

    			const newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

    			diff = ( newTime - this.oldTime ) / 1000;
    			this.oldTime = newTime;

    			this.elapsedTime += diff;

    		}

    		return diff;

    	}

    } );

    const _position$1 = new Vector3();
    const _quaternion$1 = new Quaternion();
    const _scale$1 = new Vector3();
    const _orientation$1 = new Vector3();

    function AudioListener() {

    	Object3D.call( this );

    	this.type = 'AudioListener';

    	this.context = AudioContext.getContext();

    	this.gain = this.context.createGain();
    	this.gain.connect( this.context.destination );

    	this.filter = null;

    	this.timeDelta = 0;

    	// private

    	this._clock = new Clock();

    }

    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: AudioListener,

    	getInput: function () {

    		return this.gain;

    	},

    	removeFilter: function ( ) {

    		if ( this.filter !== null ) {

    			this.gain.disconnect( this.filter );
    			this.filter.disconnect( this.context.destination );
    			this.gain.connect( this.context.destination );
    			this.filter = null;

    		}

    		return this;

    	},

    	getFilter: function () {

    		return this.filter;

    	},

    	setFilter: function ( value ) {

    		if ( this.filter !== null ) {

    			this.gain.disconnect( this.filter );
    			this.filter.disconnect( this.context.destination );

    		} else {

    			this.gain.disconnect( this.context.destination );

    		}

    		this.filter = value;
    		this.gain.connect( this.filter );
    		this.filter.connect( this.context.destination );

    		return this;

    	},

    	getMasterVolume: function () {

    		return this.gain.gain.value;

    	},

    	setMasterVolume: function ( value ) {

    		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

    		return this;

    	},

    	updateMatrixWorld: function ( force ) {

    		Object3D.prototype.updateMatrixWorld.call( this, force );

    		const listener = this.context.listener;
    		const up = this.up;

    		this.timeDelta = this._clock.getDelta();

    		this.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );

    		_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );

    		if ( listener.positionX ) {

    			// code path for Chrome (see #14393)

    			const endTime = this.context.currentTime + this.timeDelta;

    			listener.positionX.linearRampToValueAtTime( _position$1.x, endTime );
    			listener.positionY.linearRampToValueAtTime( _position$1.y, endTime );
    			listener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );
    			listener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );
    			listener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );
    			listener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );
    			listener.upX.linearRampToValueAtTime( up.x, endTime );
    			listener.upY.linearRampToValueAtTime( up.y, endTime );
    			listener.upZ.linearRampToValueAtTime( up.z, endTime );

    		} else {

    			listener.setPosition( _position$1.x, _position$1.y, _position$1.z );
    			listener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );

    		}

    	}

    } );

    function Audio( listener ) {

    	Object3D.call( this );

    	this.type = 'Audio';

    	this.listener = listener;
    	this.context = listener.context;

    	this.gain = this.context.createGain();
    	this.gain.connect( listener.getInput() );

    	this.autoplay = false;

    	this.buffer = null;
    	this.detune = 0;
    	this.loop = false;
    	this.loopStart = 0;
    	this.loopEnd = 0;
    	this.offset = 0;
    	this.duration = undefined;
    	this.playbackRate = 1;
    	this.isPlaying = false;
    	this.hasPlaybackControl = true;
    	this.sourceType = 'empty';

    	this._startedAt = 0;
    	this._progress = 0;

    	this.filters = [];

    }

    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

    	constructor: Audio,

    	getOutput: function () {

    		return this.gain;

    	},

    	setNodeSource: function ( audioNode ) {

    		this.hasPlaybackControl = false;
    		this.sourceType = 'audioNode';
    		this.source = audioNode;
    		this.connect();

    		return this;

    	},

    	setMediaElementSource: function ( mediaElement ) {

    		this.hasPlaybackControl = false;
    		this.sourceType = 'mediaNode';
    		this.source = this.context.createMediaElementSource( mediaElement );
    		this.connect();

    		return this;

    	},

    	setMediaStreamSource: function ( mediaStream ) {

    		this.hasPlaybackControl = false;
    		this.sourceType = 'mediaStreamNode';
    		this.source = this.context.createMediaStreamSource( mediaStream );
    		this.connect();

    		return this;

    	},

    	setBuffer: function ( audioBuffer ) {

    		this.buffer = audioBuffer;
    		this.sourceType = 'buffer';

    		if ( this.autoplay ) this.play();

    		return this;

    	},

    	play: function ( delay ) {

    		if ( delay === undefined ) delay = 0;

    		if ( this.isPlaying === true ) {

    			console.warn( 'THREE.Audio: Audio is already playing.' );
    			return;

    		}

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return;

    		}

    		this._startedAt = this.context.currentTime + delay;

    		const source = this.context.createBufferSource();
    		source.buffer = this.buffer;
    		source.loop = this.loop;
    		source.loopStart = this.loopStart;
    		source.loopEnd = this.loopEnd;
    		source.onended = this.onEnded.bind( this );
    		source.start( this._startedAt, this._progress + this.offset, this.duration );

    		this.isPlaying = true;

    		this.source = source;

    		this.setDetune( this.detune );
    		this.setPlaybackRate( this.playbackRate );

    		return this.connect();

    	},

    	pause: function () {

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return;

    		}

    		if ( this.isPlaying === true ) {

    			// update current progress

    			this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;

    			if ( this.loop === true ) {

    				// ensure _progress does not exceed duration with looped audios

    				this._progress = this._progress % ( this.duration || this.buffer.duration );

    			}

    			this.source.stop();
    			this.source.onended = null;

    			this.isPlaying = false;

    		}

    		return this;

    	},

    	stop: function () {

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return;

    		}

    		this._progress = 0;

    		this.source.stop();
    		this.source.onended = null;
    		this.isPlaying = false;

    		return this;

    	},

    	connect: function () {

    		if ( this.filters.length > 0 ) {

    			this.source.connect( this.filters[ 0 ] );

    			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {

    				this.filters[ i - 1 ].connect( this.filters[ i ] );

    			}

    			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

    		} else {

    			this.source.connect( this.getOutput() );

    		}

    		return this;

    	},

    	disconnect: function () {

    		if ( this.filters.length > 0 ) {

    			this.source.disconnect( this.filters[ 0 ] );

    			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {

    				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

    			}

    			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

    		} else {

    			this.source.disconnect( this.getOutput() );

    		}

    		return this;

    	},

    	getFilters: function () {

    		return this.filters;

    	},

    	setFilters: function ( value ) {

    		if ( ! value ) value = [];

    		if ( this.isPlaying === true ) {

    			this.disconnect();
    			this.filters = value;
    			this.connect();

    		} else {

    			this.filters = value;

    		}

    		return this;

    	},

    	setDetune: function ( value ) {

    		this.detune = value;

    		if ( this.source.detune === undefined ) return; // only set detune when available

    		if ( this.isPlaying === true ) {

    			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

    		}

    		return this;

    	},

    	getDetune: function () {

    		return this.detune;

    	},

    	getFilter: function () {

    		return this.getFilters()[ 0 ];

    	},

    	setFilter: function ( filter ) {

    		return this.setFilters( filter ? [ filter ] : [] );

    	},

    	setPlaybackRate: function ( value ) {

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return;

    		}

    		this.playbackRate = value;

    		if ( this.isPlaying === true ) {

    			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

    		}

    		return this;

    	},

    	getPlaybackRate: function () {

    		return this.playbackRate;

    	},

    	onEnded: function () {

    		this.isPlaying = false;

    	},

    	getLoop: function () {

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return false;

    		}

    		return this.loop;

    	},

    	setLoop: function ( value ) {

    		if ( this.hasPlaybackControl === false ) {

    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
    			return;

    		}

    		this.loop = value;

    		if ( this.isPlaying === true ) {

    			this.source.loop = this.loop;

    		}

    		return this;

    	},

    	setLoopStart: function ( value ) {

    		this.loopStart = value;

    		return this;

    	},

    	setLoopEnd: function ( value ) {

    		this.loopEnd = value;

    		return this;

    	},

    	getVolume: function () {

    		return this.gain.gain.value;

    	},

    	setVolume: function ( value ) {

    		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

    		return this;

    	}

    } );

    const _position = new Vector3();
    const _quaternion = new Quaternion();
    const _scale = new Vector3();
    const _orientation = new Vector3();

    function PositionalAudio( listener ) {

    	Audio.call( this, listener );

    	this.panner = this.context.createPanner();
    	this.panner.panningModel = 'HRTF';
    	this.panner.connect( this.gain );

    }

    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

    	constructor: PositionalAudio,

    	getOutput: function () {

    		return this.panner;

    	},

    	getRefDistance: function () {

    		return this.panner.refDistance;

    	},

    	setRefDistance: function ( value ) {

    		this.panner.refDistance = value;

    		return this;

    	},

    	getRolloffFactor: function () {

    		return this.panner.rolloffFactor;

    	},

    	setRolloffFactor: function ( value ) {

    		this.panner.rolloffFactor = value;

    		return this;

    	},

    	getDistanceModel: function () {

    		return this.panner.distanceModel;

    	},

    	setDistanceModel: function ( value ) {

    		this.panner.distanceModel = value;

    		return this;

    	},

    	getMaxDistance: function () {

    		return this.panner.maxDistance;

    	},

    	setMaxDistance: function ( value ) {

    		this.panner.maxDistance = value;

    		return this;

    	},

    	setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

    		this.panner.coneInnerAngle = coneInnerAngle;
    		this.panner.coneOuterAngle = coneOuterAngle;
    		this.panner.coneOuterGain = coneOuterGain;

    		return this;

    	},

    	updateMatrixWorld: function ( force ) {

    		Object3D.prototype.updateMatrixWorld.call( this, force );

    		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;

    		this.matrixWorld.decompose( _position, _quaternion, _scale );

    		_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );

    		const panner = this.panner;

    		if ( panner.positionX ) {

    			// code path for Chrome and Firefox (see #14393)

    			const endTime = this.context.currentTime + this.listener.timeDelta;

    			panner.positionX.linearRampToValueAtTime( _position.x, endTime );
    			panner.positionY.linearRampToValueAtTime( _position.y, endTime );
    			panner.positionZ.linearRampToValueAtTime( _position.z, endTime );
    			panner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );
    			panner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );
    			panner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );

    		} else {

    			panner.setPosition( _position.x, _position.y, _position.z );
    			panner.setOrientation( _orientation.x, _orientation.y, _orientation.z );

    		}

    	}

    } );

    function AudioAnalyser( audio, fftSize ) {

    	this.analyser = audio.context.createAnalyser();
    	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

    	this.data = new Uint8Array( this.analyser.frequencyBinCount );

    	audio.getOutput().connect( this.analyser );

    }

    Object.assign( AudioAnalyser.prototype, {

    	getFrequencyData: function () {

    		this.analyser.getByteFrequencyData( this.data );

    		return this.data;

    	},

    	getAverageFrequency: function () {

    		let value = 0;
    		const data = this.getFrequencyData();

    		for ( let i = 0; i < data.length; i ++ ) {

    			value += data[ i ];

    		}

    		return value / data.length;

    	}

    } );

    function PropertyMixer( binding, typeName, valueSize ) {

    	this.binding = binding;
    	this.valueSize = valueSize;

    	let mixFunction,
    		mixFunctionAdditive,
    		setIdentity;

    	// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
    	//
    	// interpolators can use .buffer as their .result
    	// the data then goes to 'incoming'
    	//
    	// 'accu0' and 'accu1' are used frame-interleaved for
    	// the cumulative result and are compared to detect
    	// changes
    	//
    	// 'orig' stores the original state of the property
    	//
    	// 'add' is used for additive cumulative results
    	//
    	// 'work' is optional and is only present for quaternion types. It is used
    	// to store intermediate quaternion multiplication results

    	switch ( typeName ) {

    		case 'quaternion':
    			mixFunction = this._slerp;
    			mixFunctionAdditive = this._slerpAdditive;
    			setIdentity = this._setAdditiveIdentityQuaternion;

    			this.buffer = new Float64Array( valueSize * 6 );
    			this._workIndex = 5;
    			break;

    		case 'string':
    		case 'bool':
    			mixFunction = this._select;

    			// Use the regular mix function and for additive on these types,
    			// additive is not relevant for non-numeric types
    			mixFunctionAdditive = this._select;

    			setIdentity = this._setAdditiveIdentityOther;

    			this.buffer = new Array( valueSize * 5 );
    			break;

    		default:
    			mixFunction = this._lerp;
    			mixFunctionAdditive = this._lerpAdditive;
    			setIdentity = this._setAdditiveIdentityNumeric;

    			this.buffer = new Float64Array( valueSize * 5 );

    	}

    	this._mixBufferRegion = mixFunction;
    	this._mixBufferRegionAdditive = mixFunctionAdditive;
    	this._setIdentity = setIdentity;
    	this._origIndex = 3;
    	this._addIndex = 4;

    	this.cumulativeWeight = 0;
    	this.cumulativeWeightAdditive = 0;

    	this.useCount = 0;
    	this.referenceCount = 0;

    }

    Object.assign( PropertyMixer.prototype, {

    	// accumulate data in the 'incoming' region into 'accu<i>'
    	accumulate: function ( accuIndex, weight ) {

    		// note: happily accumulating nothing when weight = 0, the caller knows
    		// the weight and shouldn't have made the call in the first place

    		const buffer = this.buffer,
    			stride = this.valueSize,
    			offset = accuIndex * stride + stride;

    		let currentWeight = this.cumulativeWeight;

    		if ( currentWeight === 0 ) {

    			// accuN := incoming * weight

    			for ( let i = 0; i !== stride; ++ i ) {

    				buffer[ offset + i ] = buffer[ i ];

    			}

    			currentWeight = weight;

    		} else {

    			// accuN := accuN + incoming * weight

    			currentWeight += weight;
    			const mix = weight / currentWeight;
    			this._mixBufferRegion( buffer, offset, 0, mix, stride );

    		}

    		this.cumulativeWeight = currentWeight;

    	},

    	// accumulate data in the 'incoming' region into 'add'
    	accumulateAdditive: function ( weight ) {

    		const buffer = this.buffer,
    			stride = this.valueSize,
    			offset = stride * this._addIndex;

    		if ( this.cumulativeWeightAdditive === 0 ) {

    			// add = identity

    			this._setIdentity();

    		}

    		// add := add + incoming * weight

    		this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );
    		this.cumulativeWeightAdditive += weight;

    	},

    	// apply the state of 'accu<i>' to the binding when accus differ
    	apply: function ( accuIndex ) {

    		const stride = this.valueSize,
    			buffer = this.buffer,
    			offset = accuIndex * stride + stride,

    			weight = this.cumulativeWeight,
    			weightAdditive = this.cumulativeWeightAdditive,

    			binding = this.binding;

    		this.cumulativeWeight = 0;
    		this.cumulativeWeightAdditive = 0;

    		if ( weight < 1 ) {

    			// accuN := accuN + original * ( 1 - cumulativeWeight )

    			const originalValueOffset = stride * this._origIndex;

    			this._mixBufferRegion(
    				buffer, offset, originalValueOffset, 1 - weight, stride );

    		}

    		if ( weightAdditive > 0 ) {

    			// accuN := accuN + additive accuN

    			this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );

    		}

    		for ( let i = stride, e = stride + stride; i !== e; ++ i ) {

    			if ( buffer[ i ] !== buffer[ i + stride ] ) {

    				// value has changed -> update scene graph

    				binding.setValue( buffer, offset );
    				break;

    			}

    		}

    	},

    	// remember the state of the bound property and copy it to both accus
    	saveOriginalState: function () {

    		const binding = this.binding;

    		const buffer = this.buffer,
    			stride = this.valueSize,

    			originalValueOffset = stride * this._origIndex;

    		binding.getValue( buffer, originalValueOffset );

    		// accu[0..1] := orig -- initially detect changes against the original
    		for ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {

    			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

    		}

    		// Add to identity for additive
    		this._setIdentity();

    		this.cumulativeWeight = 0;
    		this.cumulativeWeightAdditive = 0;

    	},

    	// apply the state previously taken via 'saveOriginalState' to the binding
    	restoreOriginalState: function () {

    		const originalValueOffset = this.valueSize * 3;
    		this.binding.setValue( this.buffer, originalValueOffset );

    	},

    	_setAdditiveIdentityNumeric: function () {

    		const startIndex = this._addIndex * this.valueSize;
    		const endIndex = startIndex + this.valueSize;

    		for ( let i = startIndex; i < endIndex; i ++ ) {

    			this.buffer[ i ] = 0;

    		}

    	},

    	_setAdditiveIdentityQuaternion: function () {

    		this._setAdditiveIdentityNumeric();
    		this.buffer[ this._addIndex * 4 + 3 ] = 1;

    	},

    	_setAdditiveIdentityOther: function () {

    		const startIndex = this._origIndex * this.valueSize;
    		const targetIndex = this._addIndex * this.valueSize;

    		for ( let i = 0; i < this.valueSize; i ++ ) {

    			this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];

    		}

    	},


    	// mix functions

    	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

    		if ( t >= 0.5 ) {

    			for ( let i = 0; i !== stride; ++ i ) {

    				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

    			}

    		}

    	},

    	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

    		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

    	},

    	_slerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {

    		const workOffset = this._workIndex * stride;

    		// Store result in intermediate buffer offset
    		Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );

    		// Slerp to the intermediate result
    		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );

    	},

    	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

    		const s = 1 - t;

    		for ( let i = 0; i !== stride; ++ i ) {

    			const j = dstOffset + i;

    			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

    		}

    	},

    	_lerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {

    		for ( let i = 0; i !== stride; ++ i ) {

    			const j = dstOffset + i;

    			buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;

    		}

    	}

    } );

    // Characters [].:/ are reserved for track binding syntax.
    const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
    const _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

    // Attempts to allow node names from any language. ES5's `\w` regexp matches
    // only latin characters, and the unicode \p{L} is not yet supported. So
    // instead, we exclude reserved characters and match everything else.
    const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
    const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

    // Parent directories, delimited by '/' or ':'. Currently unused, but must
    // be matched to parse the rest of the track name.
    const _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

    // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
    const _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

    // Object on target node, and accessor. May not contain reserved
    // characters. Accessor may contain any character except closing bracket.
    const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

    // Property and accessor. May not contain reserved characters. Accessor may
    // contain any non-bracket characters.
    const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

    const _trackRe = new RegExp( ''
    	+ '^'
    	+ _directoryRe
    	+ _nodeRe
    	+ _objectRe
    	+ _propertyRe
    	+ '$'
    );

    const _supportedObjectNames = [ 'material', 'materials', 'bones' ];

    function Composite( targetGroup, path, optionalParsedPath ) {

    	const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

    	this._targetGroup = targetGroup;
    	this._bindings = targetGroup.subscribe_( path, parsedPath );

    }

    Object.assign( Composite.prototype, {

    	getValue: function ( array, offset ) {

    		this.bind(); // bind all binding

    		const firstValidIndex = this._targetGroup.nCachedObjects_,
    			binding = this._bindings[ firstValidIndex ];

    		// and only call .getValue on the first
    		if ( binding !== undefined ) binding.getValue( array, offset );

    	},

    	setValue: function ( array, offset ) {

    		const bindings = this._bindings;

    		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

    			bindings[ i ].setValue( array, offset );

    		}

    	},

    	bind: function () {

    		const bindings = this._bindings;

    		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

    			bindings[ i ].bind();

    		}

    	},

    	unbind: function () {

    		const bindings = this._bindings;

    		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

    			bindings[ i ].unbind();

    		}

    	}

    } );


    function PropertyBinding( rootNode, path, parsedPath ) {

    	this.path = path;
    	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

    	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

    	this.rootNode = rootNode;

    }

    Object.assign( PropertyBinding, {

    	Composite: Composite,

    	create: function ( root, path, parsedPath ) {

    		if ( ! ( root && root.isAnimationObjectGroup ) ) {

    			return new PropertyBinding( root, path, parsedPath );

    		} else {

    			return new PropertyBinding.Composite( root, path, parsedPath );

    		}

    	},

    	/**
    	 * Replaces spaces with underscores and removes unsupported characters from
    	 * node names, to ensure compatibility with parseTrackName().
    	 *
    	 * @param {string} name Node name to be sanitized.
    	 * @return {string}
    	 */
    	sanitizeNodeName: function ( name ) {

    		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

    	},

    	parseTrackName: function ( trackName ) {

    		const matches = _trackRe.exec( trackName );

    		if ( ! matches ) {

    			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

    		}

    		const results = {
    			// directoryName: matches[ 1 ], // (tschw) currently unused
    			nodeName: matches[ 2 ],
    			objectName: matches[ 3 ],
    			objectIndex: matches[ 4 ],
    			propertyName: matches[ 5 ], // required
    			propertyIndex: matches[ 6 ]
    		};

    		const lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

    		if ( lastDot !== undefined && lastDot !== - 1 ) {

    			const objectName = results.nodeName.substring( lastDot + 1 );

    			// Object names must be checked against an allowlist. Otherwise, there
    			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
    			// 'bar' could be the objectName, or part of a nodeName (which can
    			// include '.' characters).
    			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

    				results.nodeName = results.nodeName.substring( 0, lastDot );
    				results.objectName = objectName;

    			}

    		}

    		if ( results.propertyName === null || results.propertyName.length === 0 ) {

    			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

    		}

    		return results;

    	},

    	findNode: function ( root, nodeName ) {

    		if ( ! nodeName || nodeName === "" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

    			return root;

    		}

    		// search into skeleton bones.
    		if ( root.skeleton ) {

    			const bone = root.skeleton.getBoneByName( nodeName );

    			if ( bone !== undefined ) {

    				return bone;

    			}

    		}

    		// search into node subtree.
    		if ( root.children ) {

    			const searchNodeSubtree = function ( children ) {

    				for ( let i = 0; i < children.length; i ++ ) {

    					const childNode = children[ i ];

    					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

    						return childNode;

    					}

    					const result = searchNodeSubtree( childNode.children );

    					if ( result ) return result;

    				}

    				return null;

    			};

    			const subTreeNode = searchNodeSubtree( root.children );

    			if ( subTreeNode ) {

    				return subTreeNode;

    			}

    		}

    		return null;

    	}

    } );

    Object.assign( PropertyBinding.prototype, { // prototype, continued

    	// these are used to "bind" a nonexistent property
    	_getValue_unavailable: function () {},
    	_setValue_unavailable: function () {},

    	BindingType: {
    		Direct: 0,
    		EntireArray: 1,
    		ArrayElement: 2,
    		HasFromToArray: 3
    	},

    	Versioning: {
    		None: 0,
    		NeedsUpdate: 1,
    		MatrixWorldNeedsUpdate: 2
    	},

    	GetterByBindingType: [

    		function getValue_direct( buffer, offset ) {

    			buffer[ offset ] = this.node[ this.propertyName ];

    		},

    		function getValue_array( buffer, offset ) {

    			const source = this.resolvedProperty;

    			for ( let i = 0, n = source.length; i !== n; ++ i ) {

    				buffer[ offset ++ ] = source[ i ];

    			}

    		},

    		function getValue_arrayElement( buffer, offset ) {

    			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

    		},

    		function getValue_toArray( buffer, offset ) {

    			this.resolvedProperty.toArray( buffer, offset );

    		}

    	],

    	SetterByBindingTypeAndVersioning: [

    		[
    			// Direct

    			function setValue_direct( buffer, offset ) {

    				this.targetObject[ this.propertyName ] = buffer[ offset ];

    			},

    			function setValue_direct_setNeedsUpdate( buffer, offset ) {

    				this.targetObject[ this.propertyName ] = buffer[ offset ];
    				this.targetObject.needsUpdate = true;

    			},

    			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

    				this.targetObject[ this.propertyName ] = buffer[ offset ];
    				this.targetObject.matrixWorldNeedsUpdate = true;

    			}

    		], [

    			// EntireArray

    			function setValue_array( buffer, offset ) {

    				const dest = this.resolvedProperty;

    				for ( let i = 0, n = dest.length; i !== n; ++ i ) {

    					dest[ i ] = buffer[ offset ++ ];

    				}

    			},

    			function setValue_array_setNeedsUpdate( buffer, offset ) {

    				const dest = this.resolvedProperty;

    				for ( let i = 0, n = dest.length; i !== n; ++ i ) {

    					dest[ i ] = buffer[ offset ++ ];

    				}

    				this.targetObject.needsUpdate = true;

    			},

    			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

    				const dest = this.resolvedProperty;

    				for ( let i = 0, n = dest.length; i !== n; ++ i ) {

    					dest[ i ] = buffer[ offset ++ ];

    				}

    				this.targetObject.matrixWorldNeedsUpdate = true;

    			}

    		], [

    			// ArrayElement

    			function setValue_arrayElement( buffer, offset ) {

    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

    			},

    			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
    				this.targetObject.needsUpdate = true;

    			},

    			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
    				this.targetObject.matrixWorldNeedsUpdate = true;

    			}

    		], [

    			// HasToFromArray

    			function setValue_fromArray( buffer, offset ) {

    				this.resolvedProperty.fromArray( buffer, offset );

    			},

    			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

    				this.resolvedProperty.fromArray( buffer, offset );
    				this.targetObject.needsUpdate = true;

    			},

    			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

    				this.resolvedProperty.fromArray( buffer, offset );
    				this.targetObject.matrixWorldNeedsUpdate = true;

    			}

    		]

    	],

    	getValue: function getValue_unbound( targetArray, offset ) {

    		this.bind();
    		this.getValue( targetArray, offset );

    		// Note: This class uses a State pattern on a per-method basis:
    		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
    		// prototype version of these methods with one that represents
    		// the bound state. When the property is not found, the methods
    		// become no-ops.

    	},

    	setValue: function getValue_unbound( sourceArray, offset ) {

    		this.bind();
    		this.setValue( sourceArray, offset );

    	},

    	// create getter / setter pair for a property in the scene graph
    	bind: function () {

    		let targetObject = this.node,
    			parsedPath = this.parsedPath,

    			objectName = parsedPath.objectName,
    			propertyName = parsedPath.propertyName,
    			propertyIndex = parsedPath.propertyIndex;

    		if ( ! targetObject ) {

    			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

    			this.node = targetObject;

    		}

    		// set fail state so we can just 'return' on error
    		this.getValue = this._getValue_unavailable;
    		this.setValue = this._setValue_unavailable;

    		// ensure there is a value node
    		if ( ! targetObject ) {

    			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
    			return;

    		}

    		if ( objectName ) {

    			let objectIndex = parsedPath.objectIndex;

    			// special cases were we need to reach deeper into the hierarchy to get the face materials....
    			switch ( objectName ) {

    				case 'materials':

    					if ( ! targetObject.material ) {

    						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
    						return;

    					}

    					if ( ! targetObject.material.materials ) {

    						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
    						return;

    					}

    					targetObject = targetObject.material.materials;

    					break;

    				case 'bones':

    					if ( ! targetObject.skeleton ) {

    						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
    						return;

    					}

    					// potential future optimization: skip this if propertyIndex is already an integer
    					// and convert the integer string to a true integer.

    					targetObject = targetObject.skeleton.bones;

    					// support resolving morphTarget names into indices.
    					for ( let i = 0; i < targetObject.length; i ++ ) {

    						if ( targetObject[ i ].name === objectIndex ) {

    							objectIndex = i;
    							break;

    						}

    					}

    					break;

    				default:

    					if ( targetObject[ objectName ] === undefined ) {

    						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
    						return;

    					}

    					targetObject = targetObject[ objectName ];

    			}


    			if ( objectIndex !== undefined ) {

    				if ( targetObject[ objectIndex ] === undefined ) {

    					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
    					return;

    				}

    				targetObject = targetObject[ objectIndex ];

    			}

    		}

    		// resolve property
    		const nodeProperty = targetObject[ propertyName ];

    		if ( nodeProperty === undefined ) {

    			const nodeName = parsedPath.nodeName;

    			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
    				'.' + propertyName + ' but it wasn\'t found.', targetObject );
    			return;

    		}

    		// determine versioning scheme
    		let versioning = this.Versioning.None;

    		this.targetObject = targetObject;

    		if ( targetObject.needsUpdate !== undefined ) { // material

    			versioning = this.Versioning.NeedsUpdate;

    		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

    			versioning = this.Versioning.MatrixWorldNeedsUpdate;

    		}

    		// determine how the property gets bound
    		let bindingType = this.BindingType.Direct;

    		if ( propertyIndex !== undefined ) {

    			// access a sub element of the property array (only primitives are supported right now)

    			if ( propertyName === "morphTargetInfluences" ) {

    				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

    				// support resolving morphTarget names into indices.
    				if ( ! targetObject.geometry ) {

    					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
    					return;

    				}

    				if ( targetObject.geometry.isBufferGeometry ) {

    					if ( ! targetObject.geometry.morphAttributes ) {

    						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
    						return;

    					}

    					if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {

    						propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];

    					}


    				} else {

    					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );
    					return;

    				}

    			}

    			bindingType = this.BindingType.ArrayElement;

    			this.resolvedProperty = nodeProperty;
    			this.propertyIndex = propertyIndex;

    		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

    			// must use copy for Object3D.Euler/Quaternion

    			bindingType = this.BindingType.HasFromToArray;

    			this.resolvedProperty = nodeProperty;

    		} else if ( Array.isArray( nodeProperty ) ) {

    			bindingType = this.BindingType.EntireArray;

    			this.resolvedProperty = nodeProperty;

    		} else {

    			this.propertyName = propertyName;

    		}

    		// select getter / setter
    		this.getValue = this.GetterByBindingType[ bindingType ];
    		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

    	},

    	unbind: function () {

    		this.node = null;

    		// back to the prototype version of getValue / setValue
    		// note: avoiding to mutate the shape of 'this' via 'delete'
    		this.getValue = this._getValue_unbound;
    		this.setValue = this._setValue_unbound;

    	}

    } );

    // DECLARE ALIAS AFTER assign prototype
    Object.assign( PropertyBinding.prototype, {

    	// initial state of these methods that calls 'bind'
    	_getValue_unbound: PropertyBinding.prototype.getValue,
    	_setValue_unbound: PropertyBinding.prototype.setValue,

    } );

    /**
     *
     * A group of objects that receives a shared animation state.
     *
     * Usage:
     *
     *  - Add objects you would otherwise pass as 'root' to the
     *    constructor or the .clipAction method of AnimationMixer.
     *
     *  - Instead pass this object as 'root'.
     *
     *  - You can also add and remove objects later when the mixer
     *    is running.
     *
     * Note:
     *
     *    Objects of this class appear as one object to the mixer,
     *    so cache control of the individual objects must be done
     *    on the group.
     *
     * Limitation:
     *
     *  - The animated properties must be compatible among the
     *    all objects in the group.
     *
     *  - A single property can either be controlled through a
     *    target group or directly, but not both.
     */

    function AnimationObjectGroup() {

    	this.uuid = MathUtils.generateUUID();

    	// cached objects followed by the active ones
    	this._objects = Array.prototype.slice.call( arguments );

    	this.nCachedObjects_ = 0; // threshold
    	// note: read by PropertyBinding.Composite

    	const indices = {};
    	this._indicesByUUID = indices; // for bookkeeping

    	for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

    		indices[ arguments[ i ].uuid ] = i;

    	}

    	this._paths = []; // inside: string
    	this._parsedPaths = []; // inside: { we don't care, here }
    	this._bindings = []; // inside: Array< PropertyBinding >
    	this._bindingsIndicesByPath = {}; // inside: indices in these arrays

    	const scope = this;

    	this.stats = {

    		objects: {
    			get total() {

    				return scope._objects.length;

    			},
    			get inUse() {

    				return this.total - scope.nCachedObjects_;

    			}
    		},
    		get bindingsPerObject() {

    			return scope._bindings.length;

    		}

    	};

    }

    Object.assign( AnimationObjectGroup.prototype, {

    	isAnimationObjectGroup: true,

    	add: function () {

    		const objects = this._objects,
    			indicesByUUID = this._indicesByUUID,
    			paths = this._paths,
    			parsedPaths = this._parsedPaths,
    			bindings = this._bindings,
    			nBindings = bindings.length;

    		let knownObject = undefined,
    			nObjects = objects.length,
    			nCachedObjects = this.nCachedObjects_;

    		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

    			const object = arguments[ i ],
    				uuid = object.uuid;
    			let index = indicesByUUID[ uuid ];

    			if ( index === undefined ) {

    				// unknown object -> add it to the ACTIVE region

    				index = nObjects ++;
    				indicesByUUID[ uuid ] = index;
    				objects.push( object );

    				// accounting is done, now do the same for all bindings

    				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

    					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

    				}

    			} else if ( index < nCachedObjects ) {

    				knownObject = objects[ index ];

    				// move existing object to the ACTIVE region

    				const firstActiveIndex = -- nCachedObjects,
    					lastCachedObject = objects[ firstActiveIndex ];

    				indicesByUUID[ lastCachedObject.uuid ] = index;
    				objects[ index ] = lastCachedObject;

    				indicesByUUID[ uuid ] = firstActiveIndex;
    				objects[ firstActiveIndex ] = object;

    				// accounting is done, now do the same for all bindings

    				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

    					const bindingsForPath = bindings[ j ],
    						lastCached = bindingsForPath[ firstActiveIndex ];

    					let binding = bindingsForPath[ index ];

    					bindingsForPath[ index ] = lastCached;

    					if ( binding === undefined ) {

    						// since we do not bother to create new bindings
    						// for objects that are cached, the binding may
    						// or may not exist

    						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

    					}

    					bindingsForPath[ firstActiveIndex ] = binding;

    				}

    			} else if ( objects[ index ] !== knownObject ) {

    				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
    					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

    			} // else the object is already where we want it to be

    		} // for arguments

    		this.nCachedObjects_ = nCachedObjects;

    	},

    	remove: function () {

    		const objects = this._objects,
    			indicesByUUID = this._indicesByUUID,
    			bindings = this._bindings,
    			nBindings = bindings.length;

    		let nCachedObjects = this.nCachedObjects_;

    		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

    			const object = arguments[ i ],
    				uuid = object.uuid,
    				index = indicesByUUID[ uuid ];

    			if ( index !== undefined && index >= nCachedObjects ) {

    				// move existing object into the CACHED region

    				const lastCachedIndex = nCachedObjects ++,
    					firstActiveObject = objects[ lastCachedIndex ];

    				indicesByUUID[ firstActiveObject.uuid ] = index;
    				objects[ index ] = firstActiveObject;

    				indicesByUUID[ uuid ] = lastCachedIndex;
    				objects[ lastCachedIndex ] = object;

    				// accounting is done, now do the same for all bindings

    				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

    					const bindingsForPath = bindings[ j ],
    						firstActive = bindingsForPath[ lastCachedIndex ],
    						binding = bindingsForPath[ index ];

    					bindingsForPath[ index ] = firstActive;
    					bindingsForPath[ lastCachedIndex ] = binding;

    				}

    			}

    		} // for arguments

    		this.nCachedObjects_ = nCachedObjects;

    	},

    	// remove & forget
    	uncache: function () {

    		const objects = this._objects,
    			indicesByUUID = this._indicesByUUID,
    			bindings = this._bindings,
    			nBindings = bindings.length;

    		let nCachedObjects = this.nCachedObjects_,
    			nObjects = objects.length;

    		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

    			const object = arguments[ i ],
    				uuid = object.uuid,
    				index = indicesByUUID[ uuid ];

    			if ( index !== undefined ) {

    				delete indicesByUUID[ uuid ];

    				if ( index < nCachedObjects ) {

    					// object is cached, shrink the CACHED region

    					const firstActiveIndex = -- nCachedObjects,
    						lastCachedObject = objects[ firstActiveIndex ],
    						lastIndex = -- nObjects,
    						lastObject = objects[ lastIndex ];

    					// last cached object takes this object's place
    					indicesByUUID[ lastCachedObject.uuid ] = index;
    					objects[ index ] = lastCachedObject;

    					// last object goes to the activated slot and pop
    					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
    					objects[ firstActiveIndex ] = lastObject;
    					objects.pop();

    					// accounting is done, now do the same for all bindings

    					for ( let j = 0, m = nBindings; j !== m; ++ j ) {

    						const bindingsForPath = bindings[ j ],
    							lastCached = bindingsForPath[ firstActiveIndex ],
    							last = bindingsForPath[ lastIndex ];

    						bindingsForPath[ index ] = lastCached;
    						bindingsForPath[ firstActiveIndex ] = last;
    						bindingsForPath.pop();

    					}

    				} else {

    					// object is active, just swap with the last and pop

    					const lastIndex = -- nObjects,
    						lastObject = objects[ lastIndex ];

    					indicesByUUID[ lastObject.uuid ] = index;
    					objects[ index ] = lastObject;
    					objects.pop();

    					// accounting is done, now do the same for all bindings

    					for ( let j = 0, m = nBindings; j !== m; ++ j ) {

    						const bindingsForPath = bindings[ j ];

    						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
    						bindingsForPath.pop();

    					}

    				} // cached or active

    			} // if object is known

    		} // for arguments

    		this.nCachedObjects_ = nCachedObjects;

    	},

    	// Internal interface used by befriended PropertyBinding.Composite:

    	subscribe_: function ( path, parsedPath ) {

    		// returns an array of bindings for the given path that is changed
    		// according to the contained objects in the group

    		let indicesByPath = this._bindingsIndicesByPath,
    			index = indicesByPath[ path ],
    			bindings = this._bindings;

    		if ( index !== undefined ) return bindings[ index ];

    		const paths = this._paths,
    			parsedPaths = this._parsedPaths,
    			objects = this._objects,
    			nObjects = objects.length,
    			nCachedObjects = this.nCachedObjects_,
    			bindingsForPath = new Array( nObjects );

    		index = bindings.length;

    		indicesByPath[ path ] = index;

    		paths.push( path );
    		parsedPaths.push( parsedPath );
    		bindings.push( bindingsForPath );

    		for ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

    			const object = objects[ i ];
    			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

    		}

    		return bindingsForPath;

    	},

    	unsubscribe_: function ( path ) {

    		// tells the group to forget about a property path and no longer
    		// update the array previously obtained with 'subscribe_'

    		const indicesByPath = this._bindingsIndicesByPath,
    			index = indicesByPath[ path ];

    		if ( index !== undefined ) {

    			const paths = this._paths,
    				parsedPaths = this._parsedPaths,
    				bindings = this._bindings,
    				lastBindingsIndex = bindings.length - 1,
    				lastBindings = bindings[ lastBindingsIndex ],
    				lastBindingsPath = path[ lastBindingsIndex ];

    			indicesByPath[ lastBindingsPath ] = index;

    			bindings[ index ] = lastBindings;
    			bindings.pop();

    			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
    			parsedPaths.pop();

    			paths[ index ] = paths[ lastBindingsIndex ];
    			paths.pop();

    		}

    	}

    } );

    function AnimationAction( mixer, clip, localRoot, blendMode ) {

    	this._mixer = mixer;
    	this._clip = clip;
    	this._localRoot = localRoot || null;
    	this.blendMode = blendMode || clip.blendMode;

    	const tracks = clip.tracks,
    		nTracks = tracks.length,
    		interpolants = new Array( nTracks );

    	const interpolantSettings = {
    		endingStart: ZeroCurvatureEnding,
    		endingEnd: ZeroCurvatureEnding
    	};

    	for ( let i = 0; i !== nTracks; ++ i ) {

    		const interpolant = tracks[ i ].createInterpolant( null );
    		interpolants[ i ] = interpolant;
    		interpolant.settings = interpolantSettings;

    	}

    	this._interpolantSettings = interpolantSettings;

    	this._interpolants = interpolants; // bound by the mixer

    	// inside: PropertyMixer (managed by the mixer)
    	this._propertyBindings = new Array( nTracks );

    	this._cacheIndex = null; // for the memory manager
    	this._byClipCacheIndex = null; // for the memory manager

    	this._timeScaleInterpolant = null;
    	this._weightInterpolant = null;

    	this.loop = LoopRepeat;
    	this._loopCount = - 1;

    	// global mixer time when the action is to be started
    	// it's set back to 'null' upon start of the action
    	this._startTime = null;

    	// scaled local time of the action
    	// gets clamped or wrapped to 0..clip.duration according to loop
    	this.time = 0;

    	this.timeScale = 1;
    	this._effectiveTimeScale = 1;

    	this.weight = 1;
    	this._effectiveWeight = 1;

    	this.repetitions = Infinity; // no. of repetitions when looping

    	this.paused = false; // true -> zero effective time scale
    	this.enabled = true; // false -> zero effective weight

    	this.clampWhenFinished = false;// keep feeding the last frame?

    	this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
    	this.zeroSlopeAtEnd = true;// clips for start, loop and end

    }

    Object.assign( AnimationAction.prototype, {

    	// State & Scheduling

    	play: function () {

    		this._mixer._activateAction( this );

    		return this;

    	},

    	stop: function () {

    		this._mixer._deactivateAction( this );

    		return this.reset();

    	},

    	reset: function () {

    		this.paused = false;
    		this.enabled = true;

    		this.time = 0; // restart clip
    		this._loopCount = - 1;// forget previous loops
    		this._startTime = null;// forget scheduling

    		return this.stopFading().stopWarping();

    	},

    	isRunning: function () {

    		return this.enabled && ! this.paused && this.timeScale !== 0 &&
    			this._startTime === null && this._mixer._isActiveAction( this );

    	},

    	// return true when play has been called
    	isScheduled: function () {

    		return this._mixer._isActiveAction( this );

    	},

    	startAt: function ( time ) {

    		this._startTime = time;

    		return this;

    	},

    	setLoop: function ( mode, repetitions ) {

    		this.loop = mode;
    		this.repetitions = repetitions;

    		return this;

    	},

    	// Weight

    	// set the weight stopping any scheduled fading
    	// although .enabled = false yields an effective weight of zero, this
    	// method does *not* change .enabled, because it would be confusing
    	setEffectiveWeight: function ( weight ) {

    		this.weight = weight;

    		// note: same logic as when updated at runtime
    		this._effectiveWeight = this.enabled ? weight : 0;

    		return this.stopFading();

    	},

    	// return the weight considering fading and .enabled
    	getEffectiveWeight: function () {

    		return this._effectiveWeight;

    	},

    	fadeIn: function ( duration ) {

    		return this._scheduleFading( duration, 0, 1 );

    	},

    	fadeOut: function ( duration ) {

    		return this._scheduleFading( duration, 1, 0 );

    	},

    	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

    		fadeOutAction.fadeOut( duration );
    		this.fadeIn( duration );

    		if ( warp ) {

    			const fadeInDuration = this._clip.duration,
    				fadeOutDuration = fadeOutAction._clip.duration,

    				startEndRatio = fadeOutDuration / fadeInDuration,
    				endStartRatio = fadeInDuration / fadeOutDuration;

    			fadeOutAction.warp( 1.0, startEndRatio, duration );
    			this.warp( endStartRatio, 1.0, duration );

    		}

    		return this;

    	},

    	crossFadeTo: function ( fadeInAction, duration, warp ) {

    		return fadeInAction.crossFadeFrom( this, duration, warp );

    	},

    	stopFading: function () {

    		let weightInterpolant = this._weightInterpolant;

    		if ( weightInterpolant !== null ) {

    			this._weightInterpolant = null;
    			this._mixer._takeBackControlInterpolant( weightInterpolant );

    		}

    		return this;

    	},

    	// Time Scale Control

    	// set the time scale stopping any scheduled warping
    	// although .paused = true yields an effective time scale of zero, this
    	// method does *not* change .paused, because it would be confusing
    	setEffectiveTimeScale: function ( timeScale ) {

    		this.timeScale = timeScale;
    		this._effectiveTimeScale = this.paused ? 0 : timeScale;

    		return this.stopWarping();

    	},

    	// return the time scale considering warping and .paused
    	getEffectiveTimeScale: function () {

    		return this._effectiveTimeScale;

    	},

    	setDuration: function ( duration ) {

    		this.timeScale = this._clip.duration / duration;

    		return this.stopWarping();

    	},

    	syncWith: function ( action ) {

    		this.time = action.time;
    		this.timeScale = action.timeScale;

    		return this.stopWarping();

    	},

    	halt: function ( duration ) {

    		return this.warp( this._effectiveTimeScale, 0, duration );

    	},

    	warp: function ( startTimeScale, endTimeScale, duration ) {

    		const mixer = this._mixer,
    			now = mixer.time,
    			timeScale = this.timeScale;

    		let interpolant = this._timeScaleInterpolant;

    		if ( interpolant === null ) {

    			interpolant = mixer._lendControlInterpolant();
    			this._timeScaleInterpolant = interpolant;

    		}

    		const times = interpolant.parameterPositions,
    			values = interpolant.sampleValues;

    		times[ 0 ] = now;
    		times[ 1 ] = now + duration;

    		values[ 0 ] = startTimeScale / timeScale;
    		values[ 1 ] = endTimeScale / timeScale;

    		return this;

    	},

    	stopWarping: function () {

    		let timeScaleInterpolant = this._timeScaleInterpolant;

    		if ( timeScaleInterpolant !== null ) {

    			this._timeScaleInterpolant = null;
    			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

    		}

    		return this;

    	},

    	// Object Accessors

    	getMixer: function () {

    		return this._mixer;

    	},

    	getClip: function () {

    		return this._clip;

    	},

    	getRoot: function () {

    		return this._localRoot || this._mixer._root;

    	},

    	// Interna

    	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

    		// called by the mixer

    		if ( ! this.enabled ) {

    			// call ._updateWeight() to update ._effectiveWeight

    			this._updateWeight( time );
    			return;

    		}

    		const startTime = this._startTime;

    		if ( startTime !== null ) {

    			// check for scheduled start of action

    			const timeRunning = ( time - startTime ) * timeDirection;
    			if ( timeRunning < 0 || timeDirection === 0 ) {

    				return; // yet to come / don't decide when delta = 0

    			}

    			// start

    			this._startTime = null; // unschedule
    			deltaTime = timeDirection * timeRunning;

    		}

    		// apply time scale and advance time

    		deltaTime *= this._updateTimeScale( time );
    		const clipTime = this._updateTime( deltaTime );

    		// note: _updateTime may disable the action resulting in
    		// an effective weight of 0

    		const weight = this._updateWeight( time );

    		if ( weight > 0 ) {

    			const interpolants = this._interpolants;
    			const propertyMixers = this._propertyBindings;

    			switch ( this.blendMode ) {

    				case AdditiveAnimationBlendMode:

    					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {

    						interpolants[ j ].evaluate( clipTime );
    						propertyMixers[ j ].accumulateAdditive( weight );

    					}

    					break;

    				case NormalAnimationBlendMode:
    				default:

    					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {

    						interpolants[ j ].evaluate( clipTime );
    						propertyMixers[ j ].accumulate( accuIndex, weight );

    					}

    			}

    		}

    	},

    	_updateWeight: function ( time ) {

    		let weight = 0;

    		if ( this.enabled ) {

    			weight = this.weight;
    			const interpolant = this._weightInterpolant;

    			if ( interpolant !== null ) {

    				const interpolantValue = interpolant.evaluate( time )[ 0 ];

    				weight *= interpolantValue;

    				if ( time > interpolant.parameterPositions[ 1 ] ) {

    					this.stopFading();

    					if ( interpolantValue === 0 ) {

    						// faded out, disable
    						this.enabled = false;

    					}

    				}

    			}

    		}

    		this._effectiveWeight = weight;
    		return weight;

    	},

    	_updateTimeScale: function ( time ) {

    		let timeScale = 0;

    		if ( ! this.paused ) {

    			timeScale = this.timeScale;

    			const interpolant = this._timeScaleInterpolant;

    			if ( interpolant !== null ) {

    				const interpolantValue = interpolant.evaluate( time )[ 0 ];

    				timeScale *= interpolantValue;

    				if ( time > interpolant.parameterPositions[ 1 ] ) {

    					this.stopWarping();

    					if ( timeScale === 0 ) {

    						// motion has halted, pause
    						this.paused = true;

    					} else {

    						// warp done - apply final time scale
    						this.timeScale = timeScale;

    					}

    				}

    			}

    		}

    		this._effectiveTimeScale = timeScale;
    		return timeScale;

    	},

    	_updateTime: function ( deltaTime ) {

    		const duration = this._clip.duration;
    		const loop = this.loop;

    		let time = this.time + deltaTime;
    		let loopCount = this._loopCount;

    		const pingPong = ( loop === LoopPingPong );

    		if ( deltaTime === 0 ) {

    			if ( loopCount === - 1 ) return time;

    			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

    		}

    		if ( loop === LoopOnce ) {

    			if ( loopCount === - 1 ) {

    				// just started

    				this._loopCount = 0;
    				this._setEndings( true, true, false );

    			}

    			handle_stop: {

    				if ( time >= duration ) {

    					time = duration;

    				} else if ( time < 0 ) {

    					time = 0;

    				} else {

    					this.time = time;

    					break handle_stop;

    				}

    				if ( this.clampWhenFinished ) this.paused = true;
    				else this.enabled = false;

    				this.time = time;

    				this._mixer.dispatchEvent( {
    					type: 'finished', action: this,
    					direction: deltaTime < 0 ? - 1 : 1
    				} );

    			}

    		} else { // repetitive Repeat or PingPong

    			if ( loopCount === - 1 ) {

    				// just started

    				if ( deltaTime >= 0 ) {

    					loopCount = 0;

    					this._setEndings( true, this.repetitions === 0, pingPong );

    				} else {

    					// when looping in reverse direction, the initial
    					// transition through zero counts as a repetition,
    					// so leave loopCount at -1

    					this._setEndings( this.repetitions === 0, true, pingPong );

    				}

    			}

    			if ( time >= duration || time < 0 ) {

    				// wrap around

    				const loopDelta = Math.floor( time / duration ); // signed
    				time -= duration * loopDelta;

    				loopCount += Math.abs( loopDelta );

    				const pending = this.repetitions - loopCount;

    				if ( pending <= 0 ) {

    					// have to stop (switch state, clamp time, fire event)

    					if ( this.clampWhenFinished ) this.paused = true;
    					else this.enabled = false;

    					time = deltaTime > 0 ? duration : 0;

    					this.time = time;

    					this._mixer.dispatchEvent( {
    						type: 'finished', action: this,
    						direction: deltaTime > 0 ? 1 : - 1
    					} );

    				} else {

    					// keep running

    					if ( pending === 1 ) {

    						// entering the last round

    						const atStart = deltaTime < 0;
    						this._setEndings( atStart, ! atStart, pingPong );

    					} else {

    						this._setEndings( false, false, pingPong );

    					}

    					this._loopCount = loopCount;

    					this.time = time;

    					this._mixer.dispatchEvent( {
    						type: 'loop', action: this, loopDelta: loopDelta
    					} );

    				}

    			} else {

    				this.time = time;

    			}

    			if ( pingPong && ( loopCount & 1 ) === 1 ) {

    				// invert time for the "pong round"

    				return duration - time;

    			}

    		}

    		return time;

    	},

    	_setEndings: function ( atStart, atEnd, pingPong ) {

    		const settings = this._interpolantSettings;

    		if ( pingPong ) {

    			settings.endingStart = ZeroSlopeEnding;
    			settings.endingEnd = ZeroSlopeEnding;

    		} else {

    			// assuming for LoopOnce atStart == atEnd == true

    			if ( atStart ) {

    				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

    			} else {

    				settings.endingStart = WrapAroundEnding;

    			}

    			if ( atEnd ) {

    				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

    			} else {

    				settings.endingEnd 	 = WrapAroundEnding;

    			}

    		}

    	},

    	_scheduleFading: function ( duration, weightNow, weightThen ) {

    		const mixer = this._mixer, now = mixer.time;
    		let interpolant = this._weightInterpolant;

    		if ( interpolant === null ) {

    			interpolant = mixer._lendControlInterpolant();
    			this._weightInterpolant = interpolant;

    		}

    		const times = interpolant.parameterPositions,
    			values = interpolant.sampleValues;

    		times[ 0 ] = now;
    		values[ 0 ] = weightNow;
    		times[ 1 ] = now + duration;
    		values[ 1 ] = weightThen;

    		return this;

    	}

    } );

    function AnimationMixer( root ) {

    	this._root = root;
    	this._initMemoryManager();
    	this._accuIndex = 0;

    	this.time = 0;

    	this.timeScale = 1.0;

    }

    AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

    	constructor: AnimationMixer,

    	_bindAction: function ( action, prototypeAction ) {

    		const root = action._localRoot || this._root,
    			tracks = action._clip.tracks,
    			nTracks = tracks.length,
    			bindings = action._propertyBindings,
    			interpolants = action._interpolants,
    			rootUuid = root.uuid,
    			bindingsByRoot = this._bindingsByRootAndName;

    		let bindingsByName = bindingsByRoot[ rootUuid ];

    		if ( bindingsByName === undefined ) {

    			bindingsByName = {};
    			bindingsByRoot[ rootUuid ] = bindingsByName;

    		}

    		for ( let i = 0; i !== nTracks; ++ i ) {

    			const track = tracks[ i ],
    				trackName = track.name;

    			let binding = bindingsByName[ trackName ];

    			if ( binding !== undefined ) {

    				bindings[ i ] = binding;

    			} else {

    				binding = bindings[ i ];

    				if ( binding !== undefined ) {

    					// existing binding, make sure the cache knows

    					if ( binding._cacheIndex === null ) {

    						++ binding.referenceCount;
    						this._addInactiveBinding( binding, rootUuid, trackName );

    					}

    					continue;

    				}

    				const path = prototypeAction && prototypeAction.
    					_propertyBindings[ i ].binding.parsedPath;

    				binding = new PropertyMixer(
    					PropertyBinding.create( root, trackName, path ),
    					track.ValueTypeName, track.getValueSize() );

    				++ binding.referenceCount;
    				this._addInactiveBinding( binding, rootUuid, trackName );

    				bindings[ i ] = binding;

    			}

    			interpolants[ i ].resultBuffer = binding.buffer;

    		}

    	},

    	_activateAction: function ( action ) {

    		if ( ! this._isActiveAction( action ) ) {

    			if ( action._cacheIndex === null ) {

    				// this action has been forgotten by the cache, but the user
    				// appears to be still using it -> rebind

    				const rootUuid = ( action._localRoot || this._root ).uuid,
    					clipUuid = action._clip.uuid,
    					actionsForClip = this._actionsByClip[ clipUuid ];

    				this._bindAction( action,
    					actionsForClip && actionsForClip.knownActions[ 0 ] );

    				this._addInactiveAction( action, clipUuid, rootUuid );

    			}

    			const bindings = action._propertyBindings;

    			// increment reference counts / sort out state
    			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

    				const binding = bindings[ i ];

    				if ( binding.useCount ++ === 0 ) {

    					this._lendBinding( binding );
    					binding.saveOriginalState();

    				}

    			}

    			this._lendAction( action );

    		}

    	},

    	_deactivateAction: function ( action ) {

    		if ( this._isActiveAction( action ) ) {

    			const bindings = action._propertyBindings;

    			// decrement reference counts / sort out state
    			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

    				const binding = bindings[ i ];

    				if ( -- binding.useCount === 0 ) {

    					binding.restoreOriginalState();
    					this._takeBackBinding( binding );

    				}

    			}

    			this._takeBackAction( action );

    		}

    	},

    	// Memory manager

    	_initMemoryManager: function () {

    		this._actions = []; // 'nActiveActions' followed by inactive ones
    		this._nActiveActions = 0;

    		this._actionsByClip = {};
    		// inside:
    		// {
    		// 	knownActions: Array< AnimationAction > - used as prototypes
    		// 	actionByRoot: AnimationAction - lookup
    		// }


    		this._bindings = []; // 'nActiveBindings' followed by inactive ones
    		this._nActiveBindings = 0;

    		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


    		this._controlInterpolants = []; // same game as above
    		this._nActiveControlInterpolants = 0;

    		const scope = this;

    		this.stats = {

    			actions: {
    				get total() {

    					return scope._actions.length;

    				},
    				get inUse() {

    					return scope._nActiveActions;

    				}
    			},
    			bindings: {
    				get total() {

    					return scope._bindings.length;

    				},
    				get inUse() {

    					return scope._nActiveBindings;

    				}
    			},
    			controlInterpolants: {
    				get total() {

    					return scope._controlInterpolants.length;

    				},
    				get inUse() {

    					return scope._nActiveControlInterpolants;

    				}
    			}

    		};

    	},

    	// Memory management for AnimationAction objects

    	_isActiveAction: function ( action ) {

    		const index = action._cacheIndex;
    		return index !== null && index < this._nActiveActions;

    	},

    	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

    		const actions = this._actions,
    			actionsByClip = this._actionsByClip;

    		let actionsForClip = actionsByClip[ clipUuid ];

    		if ( actionsForClip === undefined ) {

    			actionsForClip = {

    				knownActions: [ action ],
    				actionByRoot: {}

    			};

    			action._byClipCacheIndex = 0;

    			actionsByClip[ clipUuid ] = actionsForClip;

    		} else {

    			const knownActions = actionsForClip.knownActions;

    			action._byClipCacheIndex = knownActions.length;
    			knownActions.push( action );

    		}

    		action._cacheIndex = actions.length;
    		actions.push( action );

    		actionsForClip.actionByRoot[ rootUuid ] = action;

    	},

    	_removeInactiveAction: function ( action ) {

    		const actions = this._actions,
    			lastInactiveAction = actions[ actions.length - 1 ],
    			cacheIndex = action._cacheIndex;

    		lastInactiveAction._cacheIndex = cacheIndex;
    		actions[ cacheIndex ] = lastInactiveAction;
    		actions.pop();

    		action._cacheIndex = null;


    		const clipUuid = action._clip.uuid,
    			actionsByClip = this._actionsByClip,
    			actionsForClip = actionsByClip[ clipUuid ],
    			knownActionsForClip = actionsForClip.knownActions,

    			lastKnownAction =
    				knownActionsForClip[ knownActionsForClip.length - 1 ],

    			byClipCacheIndex = action._byClipCacheIndex;

    		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
    		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
    		knownActionsForClip.pop();

    		action._byClipCacheIndex = null;


    		const actionByRoot = actionsForClip.actionByRoot,
    			rootUuid = ( action._localRoot || this._root ).uuid;

    		delete actionByRoot[ rootUuid ];

    		if ( knownActionsForClip.length === 0 ) {

    			delete actionsByClip[ clipUuid ];

    		}

    		this._removeInactiveBindingsForAction( action );

    	},

    	_removeInactiveBindingsForAction: function ( action ) {

    		const bindings = action._propertyBindings;

    		for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

    			const binding = bindings[ i ];

    			if ( -- binding.referenceCount === 0 ) {

    				this._removeInactiveBinding( binding );

    			}

    		}

    	},

    	_lendAction: function ( action ) {

    		// [ active actions |  inactive actions  ]
    		// [  active actions >| inactive actions ]
    		//                 s        a
    		//                  <-swap->
    		//                 a        s

    		const actions = this._actions,
    			prevIndex = action._cacheIndex,

    			lastActiveIndex = this._nActiveActions ++,

    			firstInactiveAction = actions[ lastActiveIndex ];

    		action._cacheIndex = lastActiveIndex;
    		actions[ lastActiveIndex ] = action;

    		firstInactiveAction._cacheIndex = prevIndex;
    		actions[ prevIndex ] = firstInactiveAction;

    	},

    	_takeBackAction: function ( action ) {

    		// [  active actions  | inactive actions ]
    		// [ active actions |< inactive actions  ]
    		//        a        s
    		//         <-swap->
    		//        s        a

    		const actions = this._actions,
    			prevIndex = action._cacheIndex,

    			firstInactiveIndex = -- this._nActiveActions,

    			lastActiveAction = actions[ firstInactiveIndex ];

    		action._cacheIndex = firstInactiveIndex;
    		actions[ firstInactiveIndex ] = action;

    		lastActiveAction._cacheIndex = prevIndex;
    		actions[ prevIndex ] = lastActiveAction;

    	},

    	// Memory management for PropertyMixer objects

    	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

    		const bindingsByRoot = this._bindingsByRootAndName,
    			bindings = this._bindings;

    		let bindingByName = bindingsByRoot[ rootUuid ];

    		if ( bindingByName === undefined ) {

    			bindingByName = {};
    			bindingsByRoot[ rootUuid ] = bindingByName;

    		}

    		bindingByName[ trackName ] = binding;

    		binding._cacheIndex = bindings.length;
    		bindings.push( binding );

    	},

    	_removeInactiveBinding: function ( binding ) {

    		const bindings = this._bindings,
    			propBinding = binding.binding,
    			rootUuid = propBinding.rootNode.uuid,
    			trackName = propBinding.path,
    			bindingsByRoot = this._bindingsByRootAndName,
    			bindingByName = bindingsByRoot[ rootUuid ],

    			lastInactiveBinding = bindings[ bindings.length - 1 ],
    			cacheIndex = binding._cacheIndex;

    		lastInactiveBinding._cacheIndex = cacheIndex;
    		bindings[ cacheIndex ] = lastInactiveBinding;
    		bindings.pop();

    		delete bindingByName[ trackName ];

    		if ( Object.keys( bindingByName ).length === 0 ) {

    			delete bindingsByRoot[ rootUuid ];

    		}

    	},

    	_lendBinding: function ( binding ) {

    		const bindings = this._bindings,
    			prevIndex = binding._cacheIndex,

    			lastActiveIndex = this._nActiveBindings ++,

    			firstInactiveBinding = bindings[ lastActiveIndex ];

    		binding._cacheIndex = lastActiveIndex;
    		bindings[ lastActiveIndex ] = binding;

    		firstInactiveBinding._cacheIndex = prevIndex;
    		bindings[ prevIndex ] = firstInactiveBinding;

    	},

    	_takeBackBinding: function ( binding ) {

    		const bindings = this._bindings,
    			prevIndex = binding._cacheIndex,

    			firstInactiveIndex = -- this._nActiveBindings,

    			lastActiveBinding = bindings[ firstInactiveIndex ];

    		binding._cacheIndex = firstInactiveIndex;
    		bindings[ firstInactiveIndex ] = binding;

    		lastActiveBinding._cacheIndex = prevIndex;
    		bindings[ prevIndex ] = lastActiveBinding;

    	},


    	// Memory management of Interpolants for weight and time scale

    	_lendControlInterpolant: function () {

    		const interpolants = this._controlInterpolants,
    			lastActiveIndex = this._nActiveControlInterpolants ++;

    		let interpolant = interpolants[ lastActiveIndex ];

    		if ( interpolant === undefined ) {

    			interpolant = new LinearInterpolant(
    				new Float32Array( 2 ), new Float32Array( 2 ),
    				1, this._controlInterpolantsResultBuffer );

    			interpolant.__cacheIndex = lastActiveIndex;
    			interpolants[ lastActiveIndex ] = interpolant;

    		}

    		return interpolant;

    	},

    	_takeBackControlInterpolant: function ( interpolant ) {

    		const interpolants = this._controlInterpolants,
    			prevIndex = interpolant.__cacheIndex,

    			firstInactiveIndex = -- this._nActiveControlInterpolants,

    			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

    		interpolant.__cacheIndex = firstInactiveIndex;
    		interpolants[ firstInactiveIndex ] = interpolant;

    		lastActiveInterpolant.__cacheIndex = prevIndex;
    		interpolants[ prevIndex ] = lastActiveInterpolant;

    	},

    	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

    	// return an action for a clip optionally using a custom root target
    	// object (this method allocates a lot of dynamic memory in case a
    	// previously unknown clip/root combination is specified)
    	clipAction: function ( clip, optionalRoot, blendMode ) {

    		const root = optionalRoot || this._root,
    			rootUuid = root.uuid;

    		let clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;

    		const clipUuid = clipObject !== null ? clipObject.uuid : clip;

    		let actionsForClip = this._actionsByClip[ clipUuid ],
    			prototypeAction = null;

    		if ( blendMode === undefined ) {

    			if ( clipObject !== null ) {

    				blendMode = clipObject.blendMode;

    			} else {

    				blendMode = NormalAnimationBlendMode;

    			}

    		}

    		if ( actionsForClip !== undefined ) {

    			const existingAction = actionsForClip.actionByRoot[ rootUuid ];

    			if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {

    				return existingAction;

    			}

    			// we know the clip, so we don't have to parse all
    			// the bindings again but can just copy
    			prototypeAction = actionsForClip.knownActions[ 0 ];

    			// also, take the clip from the prototype action
    			if ( clipObject === null )
    				clipObject = prototypeAction._clip;

    		}

    		// clip must be known when specified via string
    		if ( clipObject === null ) return null;

    		// allocate all resources required to run it
    		const newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );

    		this._bindAction( newAction, prototypeAction );

    		// and make the action known to the memory manager
    		this._addInactiveAction( newAction, clipUuid, rootUuid );

    		return newAction;

    	},

    	// get an existing action
    	existingAction: function ( clip, optionalRoot ) {

    		const root = optionalRoot || this._root,
    			rootUuid = root.uuid,

    			clipObject = typeof clip === 'string' ?
    				AnimationClip.findByName( root, clip ) : clip,

    			clipUuid = clipObject ? clipObject.uuid : clip,

    			actionsForClip = this._actionsByClip[ clipUuid ];

    		if ( actionsForClip !== undefined ) {

    			return actionsForClip.actionByRoot[ rootUuid ] || null;

    		}

    		return null;

    	},

    	// deactivates all previously scheduled actions
    	stopAllAction: function () {

    		const actions = this._actions,
    			nActions = this._nActiveActions;

    		for ( let i = nActions - 1; i >= 0; -- i ) {

    			actions[ i ].stop();

    		}

    		return this;

    	},

    	// advance the time and update apply the animation
    	update: function ( deltaTime ) {

    		deltaTime *= this.timeScale;

    		const actions = this._actions,
    			nActions = this._nActiveActions,

    			time = this.time += deltaTime,
    			timeDirection = Math.sign( deltaTime ),

    			accuIndex = this._accuIndex ^= 1;

    		// run active actions

    		for ( let i = 0; i !== nActions; ++ i ) {

    			const action = actions[ i ];

    			action._update( time, deltaTime, timeDirection, accuIndex );

    		}

    		// update scene graph

    		const bindings = this._bindings,
    			nBindings = this._nActiveBindings;

    		for ( let i = 0; i !== nBindings; ++ i ) {

    			bindings[ i ].apply( accuIndex );

    		}

    		return this;

    	},

    	// Allows you to seek to a specific time in an animation.
    	setTime: function ( timeInSeconds ) {

    		this.time = 0; // Zero out time attribute for AnimationMixer object;
    		for ( let i = 0; i < this._actions.length; i ++ ) {

    			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

    		}

    		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

    	},

    	// return this mixer's root target object
    	getRoot: function () {

    		return this._root;

    	},

    	// free all resources specific to a particular clip
    	uncacheClip: function ( clip ) {

    		const actions = this._actions,
    			clipUuid = clip.uuid,
    			actionsByClip = this._actionsByClip,
    			actionsForClip = actionsByClip[ clipUuid ];

    		if ( actionsForClip !== undefined ) {

    			// note: just calling _removeInactiveAction would mess up the
    			// iteration state and also require updating the state we can
    			// just throw away

    			const actionsToRemove = actionsForClip.knownActions;

    			for ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

    				const action = actionsToRemove[ i ];

    				this._deactivateAction( action );

    				const cacheIndex = action._cacheIndex,
    					lastInactiveAction = actions[ actions.length - 1 ];

    				action._cacheIndex = null;
    				action._byClipCacheIndex = null;

    				lastInactiveAction._cacheIndex = cacheIndex;
    				actions[ cacheIndex ] = lastInactiveAction;
    				actions.pop();

    				this._removeInactiveBindingsForAction( action );

    			}

    			delete actionsByClip[ clipUuid ];

    		}

    	},

    	// free all resources specific to a particular root target object
    	uncacheRoot: function ( root ) {

    		const rootUuid = root.uuid,
    			actionsByClip = this._actionsByClip;

    		for ( const clipUuid in actionsByClip ) {

    			const actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
    				action = actionByRoot[ rootUuid ];

    			if ( action !== undefined ) {

    				this._deactivateAction( action );
    				this._removeInactiveAction( action );

    			}

    		}

    		const bindingsByRoot = this._bindingsByRootAndName,
    			bindingByName = bindingsByRoot[ rootUuid ];

    		if ( bindingByName !== undefined ) {

    			for ( const trackName in bindingByName ) {

    				const binding = bindingByName[ trackName ];
    				binding.restoreOriginalState();
    				this._removeInactiveBinding( binding );

    			}

    		}

    	},

    	// remove a targeted clip from the cache
    	uncacheAction: function ( clip, optionalRoot ) {

    		const action = this.existingAction( clip, optionalRoot );

    		if ( action !== null ) {

    			this._deactivateAction( action );
    			this._removeInactiveAction( action );

    		}

    	}

    } );

    function Uniform( value ) {

    	if ( typeof value === 'string' ) {

    		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
    		value = arguments[ 1 ];

    	}

    	this.value = value;

    }

    Uniform.prototype.clone = function () {

    	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

    };

    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

    	InterleavedBuffer.call( this, array, stride );

    	this.meshPerAttribute = meshPerAttribute || 1;

    }

    InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

    	constructor: InstancedInterleavedBuffer,

    	isInstancedInterleavedBuffer: true,

    	copy: function ( source ) {

    		InterleavedBuffer.prototype.copy.call( this, source );

    		this.meshPerAttribute = source.meshPerAttribute;

    		return this;

    	},

    	clone: function ( data ) {

    		const ib = InterleavedBuffer.prototype.clone.call( this, data );

    		ib.meshPerAttribute = this.meshPerAttribute;

    		return ib;

    	},

    	toJSON: function ( data ) {

    		const json = InterleavedBuffer.prototype.toJSON.call( this, data );

    		json.isInstancedInterleavedBuffer = true;
    		json.meshPerAttribute = this.meshPerAttribute;

    		return json;

    	}

    } );

    function Raycaster( origin, direction, near, far ) {

    	this.ray = new Ray( origin, direction );
    	// direction is assumed to be normalized (for accurate distance calculations)

    	this.near = near || 0;
    	this.far = far || Infinity;
    	this.camera = null;
    	this.layers = new Layers();

    	this.params = {
    		Mesh: {},
    		Line: { threshold: 1 },
    		LOD: {},
    		Points: { threshold: 1 },
    		Sprite: {}
    	};

    	Object.defineProperties( this.params, {
    		PointCloud: {
    			get: function () {

    				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
    				return this.Points;

    			}
    		}
    	} );

    }

    function ascSort( a, b ) {

    	return a.distance - b.distance;

    }

    function intersectObject( object, raycaster, intersects, recursive ) {

    	if ( object.layers.test( raycaster.layers ) ) {

    		object.raycast( raycaster, intersects );

    	}

    	if ( recursive === true ) {

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			intersectObject( children[ i ], raycaster, intersects, true );

    		}

    	}

    }

    Object.assign( Raycaster.prototype, {

    	set: function ( origin, direction ) {

    		// direction is assumed to be normalized (for accurate distance calculations)

    		this.ray.set( origin, direction );

    	},

    	setFromCamera: function ( coords, camera ) {

    		if ( ( camera && camera.isPerspectiveCamera ) ) {

    			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
    			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
    			this.camera = camera;

    		} else if ( ( camera && camera.isOrthographicCamera ) ) {

    			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
    			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
    			this.camera = camera;

    		} else {

    			console.error( 'THREE.Raycaster: Unsupported camera type.' );

    		}

    	},

    	intersectObject: function ( object, recursive, optionalTarget ) {

    		const intersects = optionalTarget || [];

    		intersectObject( object, this, intersects, recursive );

    		intersects.sort( ascSort );

    		return intersects;

    	},

    	intersectObjects: function ( objects, recursive, optionalTarget ) {

    		const intersects = optionalTarget || [];

    		if ( Array.isArray( objects ) === false ) {

    			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
    			return intersects;

    		}

    		for ( let i = 0, l = objects.length; i < l; i ++ ) {

    			intersectObject( objects[ i ], this, intersects, recursive );

    		}

    		intersects.sort( ascSort );

    		return intersects;

    	}

    } );

    /**
     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
     *
     * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
     * The azimuthal angle (theta) is measured from the positive z-axis.
     */

    class Spherical {

    	constructor( radius = 1, phi = 0, theta = 0 ) {

    		this.radius = radius;
    		this.phi = phi; // polar angle
    		this.theta = theta; // azimuthal angle

    		return this;

    	}

    	set( radius, phi, theta ) {

    		this.radius = radius;
    		this.phi = phi;
    		this.theta = theta;

    		return this;

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( other ) {

    		this.radius = other.radius;
    		this.phi = other.phi;
    		this.theta = other.theta;

    		return this;

    	}

    	// restrict phi to be betwee EPS and PI-EPS
    	makeSafe() {

    		const EPS = 0.000001;
    		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

    		return this;

    	}

    	setFromVector3( v ) {

    		return this.setFromCartesianCoords( v.x, v.y, v.z );

    	}

    	setFromCartesianCoords( x, y, z ) {

    		this.radius = Math.sqrt( x * x + y * y + z * z );

    		if ( this.radius === 0 ) {

    			this.theta = 0;
    			this.phi = 0;

    		} else {

    			this.theta = Math.atan2( x, z );
    			this.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );

    		}

    		return this;

    	}

    }

    /**
     * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
     */

    function Cylindrical( radius, theta, y ) {

    	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
    	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
    	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

    	return this;

    }

    Object.assign( Cylindrical.prototype, {

    	set: function ( radius, theta, y ) {

    		this.radius = radius;
    		this.theta = theta;
    		this.y = y;

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( other ) {

    		this.radius = other.radius;
    		this.theta = other.theta;
    		this.y = other.y;

    		return this;

    	},

    	setFromVector3: function ( v ) {

    		return this.setFromCartesianCoords( v.x, v.y, v.z );

    	},

    	setFromCartesianCoords: function ( x, y, z ) {

    		this.radius = Math.sqrt( x * x + z * z );
    		this.theta = Math.atan2( x, z );
    		this.y = y;

    		return this;

    	}

    } );

    const _vector$4 = new Vector2();

    function Box2( min, max ) {

    	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
    	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

    }

    Object.assign( Box2.prototype, {

    	set: function ( min, max ) {

    		this.min.copy( min );
    		this.max.copy( max );

    		return this;

    	},

    	setFromPoints: function ( points ) {

    		this.makeEmpty();

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			this.expandByPoint( points[ i ] );

    		}

    		return this;

    	},

    	setFromCenterAndSize: function ( center, size ) {

    		const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );
    		this.min.copy( center ).sub( halfSize );
    		this.max.copy( center ).add( halfSize );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( box ) {

    		this.min.copy( box.min );
    		this.max.copy( box.max );

    		return this;

    	},

    	makeEmpty: function () {

    		this.min.x = this.min.y = + Infinity;
    		this.max.x = this.max.y = - Infinity;

    		return this;

    	},

    	isEmpty: function () {

    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

    	},

    	getCenter: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box2: .getCenter() target is now required' );
    			target = new Vector2();

    		}

    		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

    	},

    	getSize: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box2: .getSize() target is now required' );
    			target = new Vector2();

    		}

    		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

    	},

    	expandByPoint: function ( point ) {

    		this.min.min( point );
    		this.max.max( point );

    		return this;

    	},

    	expandByVector: function ( vector ) {

    		this.min.sub( vector );
    		this.max.add( vector );

    		return this;

    	},

    	expandByScalar: function ( scalar ) {

    		this.min.addScalar( - scalar );
    		this.max.addScalar( scalar );

    		return this;

    	},

    	containsPoint: function ( point ) {

    		return point.x < this.min.x || point.x > this.max.x ||
    			point.y < this.min.y || point.y > this.max.y ? false : true;

    	},

    	containsBox: function ( box ) {

    		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
    			this.min.y <= box.min.y && box.max.y <= this.max.y;

    	},

    	getParameter: function ( point, target ) {

    		// This can potentially have a divide by zero if the box
    		// has a size dimension of 0.

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box2: .getParameter() target is now required' );
    			target = new Vector2();

    		}

    		return target.set(
    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
    			( point.y - this.min.y ) / ( this.max.y - this.min.y )
    		);

    	},

    	intersectsBox: function ( box ) {

    		// using 4 splitting planes to rule out intersections

    		return box.max.x < this.min.x || box.min.x > this.max.x ||
    			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

    	},

    	clampPoint: function ( point, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Box2: .clampPoint() target is now required' );
    			target = new Vector2();

    		}

    		return target.copy( point ).clamp( this.min, this.max );

    	},

    	distanceToPoint: function ( point ) {

    		const clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );
    		return clampedPoint.sub( point ).length();

    	},

    	intersect: function ( box ) {

    		this.min.max( box.min );
    		this.max.min( box.max );

    		return this;

    	},

    	union: function ( box ) {

    		this.min.min( box.min );
    		this.max.max( box.max );

    		return this;

    	},

    	translate: function ( offset ) {

    		this.min.add( offset );
    		this.max.add( offset );

    		return this;

    	},

    	equals: function ( box ) {

    		return box.min.equals( this.min ) && box.max.equals( this.max );

    	}

    } );

    const _startP = new Vector3();
    const _startEnd = new Vector3();

    function Line3( start, end ) {

    	this.start = ( start !== undefined ) ? start : new Vector3();
    	this.end = ( end !== undefined ) ? end : new Vector3();

    }

    Object.assign( Line3.prototype, {

    	set: function ( start, end ) {

    		this.start.copy( start );
    		this.end.copy( end );

    		return this;

    	},

    	clone: function () {

    		return new this.constructor().copy( this );

    	},

    	copy: function ( line ) {

    		this.start.copy( line.start );
    		this.end.copy( line.end );

    		return this;

    	},

    	getCenter: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Line3: .getCenter() target is now required' );
    			target = new Vector3();

    		}

    		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

    	},

    	delta: function ( target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Line3: .delta() target is now required' );
    			target = new Vector3();

    		}

    		return target.subVectors( this.end, this.start );

    	},

    	distanceSq: function () {

    		return this.start.distanceToSquared( this.end );

    	},

    	distance: function () {

    		return this.start.distanceTo( this.end );

    	},

    	at: function ( t, target ) {

    		if ( target === undefined ) {

    			console.warn( 'THREE.Line3: .at() target is now required' );
    			target = new Vector3();

    		}

    		return this.delta( target ).multiplyScalar( t ).add( this.start );

    	},

    	closestPointToPointParameter: function ( point, clampToLine ) {

    		_startP.subVectors( point, this.start );
    		_startEnd.subVectors( this.end, this.start );

    		const startEnd2 = _startEnd.dot( _startEnd );
    		const startEnd_startP = _startEnd.dot( _startP );

    		let t = startEnd_startP / startEnd2;

    		if ( clampToLine ) {

    			t = MathUtils.clamp( t, 0, 1 );

    		}

    		return t;

    	},

    	closestPointToPoint: function ( point, clampToLine, target ) {

    		const t = this.closestPointToPointParameter( point, clampToLine );

    		if ( target === undefined ) {

    			console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
    			target = new Vector3();

    		}

    		return this.delta( target ).multiplyScalar( t ).add( this.start );

    	},

    	applyMatrix4: function ( matrix ) {

    		this.start.applyMatrix4( matrix );
    		this.end.applyMatrix4( matrix );

    		return this;

    	},

    	equals: function ( line ) {

    		return line.start.equals( this.start ) && line.end.equals( this.end );

    	}

    } );

    function ImmediateRenderObject( material ) {

    	Object3D.call( this );

    	this.material = material;
    	this.render = function ( /* renderCallback */ ) {};

    	this.hasPositions = false;
    	this.hasNormals = false;
    	this.hasColors = false;
    	this.hasUvs = false;

    	this.positionArray = null;
    	this.normalArray = null;
    	this.colorArray = null;
    	this.uvArray = null;

    	this.count = 0;

    }

    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

    ImmediateRenderObject.prototype.isImmediateRenderObject = true;

    const _vector$3 = new Vector3();

    function SpotLightHelper( light, color ) {

    	Object3D.call( this );

    	this.light = light;
    	this.light.updateMatrixWorld();

    	this.matrix = light.matrixWorld;
    	this.matrixAutoUpdate = false;

    	this.color = color;

    	const geometry = new BufferGeometry();

    	const positions = [
    		0, 0, 0, 	0, 0, 1,
    		0, 0, 0, 	1, 0, 1,
    		0, 0, 0,	- 1, 0, 1,
    		0, 0, 0, 	0, 1, 1,
    		0, 0, 0, 	0, - 1, 1
    	];

    	for ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

    		const p1 = ( i / l ) * Math.PI * 2;
    		const p2 = ( j / l ) * Math.PI * 2;

    		positions.push(
    			Math.cos( p1 ), Math.sin( p1 ), 1,
    			Math.cos( p2 ), Math.sin( p2 ), 1
    		);

    	}

    	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

    	const material = new LineBasicMaterial( { fog: false, toneMapped: false } );

    	this.cone = new LineSegments( geometry, material );
    	this.add( this.cone );

    	this.update();

    }

    SpotLightHelper.prototype = Object.create( Object3D.prototype );
    SpotLightHelper.prototype.constructor = SpotLightHelper;

    SpotLightHelper.prototype.dispose = function () {

    	this.cone.geometry.dispose();
    	this.cone.material.dispose();

    };

    SpotLightHelper.prototype.update = function () {

    	this.light.updateMatrixWorld();

    	const coneLength = this.light.distance ? this.light.distance : 1000;
    	const coneWidth = coneLength * Math.tan( this.light.angle );

    	this.cone.scale.set( coneWidth, coneWidth, coneLength );

    	_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );

    	this.cone.lookAt( _vector$3 );

    	if ( this.color !== undefined ) {

    		this.cone.material.color.set( this.color );

    	} else {

    		this.cone.material.color.copy( this.light.color );

    	}

    };

    const _vector$2 = new Vector3();
    const _boneMatrix = new Matrix4();
    const _matrixWorldInv = new Matrix4();

    function getBoneList( object ) {

    	const boneList = [];

    	if ( object && object.isBone ) {

    		boneList.push( object );

    	}

    	for ( let i = 0; i < object.children.length; i ++ ) {

    		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

    	}

    	return boneList;

    }

    function SkeletonHelper( object ) {

    	const bones = getBoneList( object );

    	const geometry = new BufferGeometry();

    	const vertices = [];
    	const colors = [];

    	const color1 = new Color( 0, 0, 1 );
    	const color2 = new Color( 0, 1, 0 );

    	for ( let i = 0; i < bones.length; i ++ ) {

    		const bone = bones[ i ];

    		if ( bone.parent && bone.parent.isBone ) {

    			vertices.push( 0, 0, 0 );
    			vertices.push( 0, 0, 0 );
    			colors.push( color1.r, color1.g, color1.b );
    			colors.push( color2.r, color2.g, color2.b );

    		}

    	}

    	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    	const material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );

    	LineSegments.call( this, geometry, material );

    	this.type = 'SkeletonHelper';

    	this.root = object;
    	this.bones = bones;

    	this.matrix = object.matrixWorld;
    	this.matrixAutoUpdate = false;

    }

    SkeletonHelper.prototype = Object.create( LineSegments.prototype );
    SkeletonHelper.prototype.constructor = SkeletonHelper;

    SkeletonHelper.prototype.isSkeletonHelper = true;

    SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {

    	const bones = this.bones;

    	const geometry = this.geometry;
    	const position = geometry.getAttribute( 'position' );

    	_matrixWorldInv.getInverse( this.root.matrixWorld );

    	for ( let i = 0, j = 0; i < bones.length; i ++ ) {

    		const bone = bones[ i ];

    		if ( bone.parent && bone.parent.isBone ) {

    			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
    			_vector$2.setFromMatrixPosition( _boneMatrix );
    			position.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );

    			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
    			_vector$2.setFromMatrixPosition( _boneMatrix );
    			position.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );

    			j += 2;

    		}

    	}

    	geometry.getAttribute( 'position' ).needsUpdate = true;

    	Object3D.prototype.updateMatrixWorld.call( this, force );

    };

    function PointLightHelper( light, sphereSize, color ) {

    	this.light = light;
    	this.light.updateMatrixWorld();

    	this.color = color;

    	const geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
    	const material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );

    	Mesh.call( this, geometry, material );

    	this.type = 'PointLightHelper';

    	this.matrix = this.light.matrixWorld;
    	this.matrixAutoUpdate = false;

    	this.update();


    	/*
    	const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
    	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

    	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
    	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

    	const d = light.distance;

    	if ( d === 0.0 ) {

    		this.lightDistance.visible = false;

    	} else {

    		this.lightDistance.scale.set( d, d, d );

    	}

    	this.add( this.lightDistance );
    	*/

    }

    PointLightHelper.prototype = Object.create( Mesh.prototype );
    PointLightHelper.prototype.constructor = PointLightHelper;

    PointLightHelper.prototype.dispose = function () {

    	this.geometry.dispose();
    	this.material.dispose();

    };

    PointLightHelper.prototype.update = function () {

    	if ( this.color !== undefined ) {

    		this.material.color.set( this.color );

    	} else {

    		this.material.color.copy( this.light.color );

    	}

    	/*
    	const d = this.light.distance;

    	if ( d === 0.0 ) {

    		this.lightDistance.visible = false;

    	} else {

    		this.lightDistance.visible = true;
    		this.lightDistance.scale.set( d, d, d );

    	}
    	*/

    };

    const _vector$1 = new Vector3();
    const _color1 = new Color();
    const _color2 = new Color();

    function HemisphereLightHelper( light, size, color ) {

    	Object3D.call( this );

    	this.light = light;
    	this.light.updateMatrixWorld();

    	this.matrix = light.matrixWorld;
    	this.matrixAutoUpdate = false;

    	this.color = color;

    	const geometry = new OctahedronBufferGeometry( size );
    	geometry.rotateY( Math.PI * 0.5 );

    	this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
    	if ( this.color === undefined ) this.material.vertexColors = true;

    	const position = geometry.getAttribute( 'position' );
    	const colors = new Float32Array( position.count * 3 );

    	geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

    	this.add( new Mesh( geometry, this.material ) );

    	this.update();

    }

    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

    HemisphereLightHelper.prototype.dispose = function () {

    	this.children[ 0 ].geometry.dispose();
    	this.children[ 0 ].material.dispose();

    };

    HemisphereLightHelper.prototype.update = function () {

    	const mesh = this.children[ 0 ];

    	if ( this.color !== undefined ) {

    		this.material.color.set( this.color );

    	} else {

    		const colors = mesh.geometry.getAttribute( 'color' );

    		_color1.copy( this.light.color );
    		_color2.copy( this.light.groundColor );

    		for ( let i = 0, l = colors.count; i < l; i ++ ) {

    			const color = ( i < ( l / 2 ) ) ? _color1 : _color2;

    			colors.setXYZ( i, color.r, color.g, color.b );

    		}

    		colors.needsUpdate = true;

    	}

    	mesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );

    };

    function GridHelper( size, divisions, color1, color2 ) {

    	size = size || 10;
    	divisions = divisions || 10;
    	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
    	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

    	const center = divisions / 2;
    	const step = size / divisions;
    	const halfSize = size / 2;

    	const vertices = [], colors = [];

    	for ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

    		vertices.push( - halfSize, 0, k, halfSize, 0, k );
    		vertices.push( k, 0, - halfSize, k, 0, halfSize );

    		const color = i === center ? color1 : color2;

    		color.toArray( colors, j ); j += 3;
    		color.toArray( colors, j ); j += 3;
    		color.toArray( colors, j ); j += 3;
    		color.toArray( colors, j ); j += 3;

    	}

    	const geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    	const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

    	LineSegments.call( this, geometry, material );

    	this.type = 'GridHelper';

    }

    GridHelper.prototype = Object.create( LineSegments.prototype );
    GridHelper.prototype.constructor = GridHelper;

    function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

    	radius = radius || 10;
    	radials = radials || 16;
    	circles = circles || 8;
    	divisions = divisions || 64;
    	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
    	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

    	const vertices = [];
    	const colors = [];

    	// create the radials

    	for ( let i = 0; i <= radials; i ++ ) {

    		const v = ( i / radials ) * ( Math.PI * 2 );

    		const x = Math.sin( v ) * radius;
    		const z = Math.cos( v ) * radius;

    		vertices.push( 0, 0, 0 );
    		vertices.push( x, 0, z );

    		const color = ( i & 1 ) ? color1 : color2;

    		colors.push( color.r, color.g, color.b );
    		colors.push( color.r, color.g, color.b );

    	}

    	// create the circles

    	for ( let i = 0; i <= circles; i ++ ) {

    		const color = ( i & 1 ) ? color1 : color2;

    		const r = radius - ( radius / circles * i );

    		for ( let j = 0; j < divisions; j ++ ) {

    			// first vertex

    			let v = ( j / divisions ) * ( Math.PI * 2 );

    			let x = Math.sin( v ) * r;
    			let z = Math.cos( v ) * r;

    			vertices.push( x, 0, z );
    			colors.push( color.r, color.g, color.b );

    			// second vertex

    			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

    			x = Math.sin( v ) * r;
    			z = Math.cos( v ) * r;

    			vertices.push( x, 0, z );
    			colors.push( color.r, color.g, color.b );

    		}

    	}

    	const geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    	const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

    	LineSegments.call( this, geometry, material );

    	this.type = 'PolarGridHelper';

    }

    PolarGridHelper.prototype = Object.create( LineSegments.prototype );
    PolarGridHelper.prototype.constructor = PolarGridHelper;

    const _v1 = new Vector3();
    const _v2 = new Vector3();
    const _v3 = new Vector3();

    function DirectionalLightHelper( light, size, color ) {

    	Object3D.call( this );

    	this.light = light;
    	this.light.updateMatrixWorld();

    	this.matrix = light.matrixWorld;
    	this.matrixAutoUpdate = false;

    	this.color = color;

    	if ( size === undefined ) size = 1;

    	let geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( [
    		- size, size, 0,
    		size, size, 0,
    		size, - size, 0,
    		- size, - size, 0,
    		- size, size, 0
    	], 3 ) );

    	const material = new LineBasicMaterial( { fog: false, toneMapped: false } );

    	this.lightPlane = new Line( geometry, material );
    	this.add( this.lightPlane );

    	geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

    	this.targetLine = new Line( geometry, material );
    	this.add( this.targetLine );

    	this.update();

    }

    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

    DirectionalLightHelper.prototype.dispose = function () {

    	this.lightPlane.geometry.dispose();
    	this.lightPlane.material.dispose();
    	this.targetLine.geometry.dispose();
    	this.targetLine.material.dispose();

    };

    DirectionalLightHelper.prototype.update = function () {

    	_v1.setFromMatrixPosition( this.light.matrixWorld );
    	_v2.setFromMatrixPosition( this.light.target.matrixWorld );
    	_v3.subVectors( _v2, _v1 );

    	this.lightPlane.lookAt( _v2 );

    	if ( this.color !== undefined ) {

    		this.lightPlane.material.color.set( this.color );
    		this.targetLine.material.color.set( this.color );

    	} else {

    		this.lightPlane.material.color.copy( this.light.color );
    		this.targetLine.material.color.copy( this.light.color );

    	}

    	this.targetLine.lookAt( _v2 );
    	this.targetLine.scale.z = _v3.length();

    };

    const _vector = new Vector3();
    const _camera = new Camera$1();

    /**
     *	- shows frustum, line of sight and up of the camera
     *	- suitable for fast updates
     * 	- based on frustum visualization in lightgl.js shadowmap example
     *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
     */

    function CameraHelper( camera ) {

    	const geometry = new BufferGeometry();
    	const material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );

    	const vertices = [];
    	const colors = [];

    	const pointMap = {};

    	// colors

    	const colorFrustum = new Color( 0xffaa00 );
    	const colorCone = new Color( 0xff0000 );
    	const colorUp = new Color( 0x00aaff );
    	const colorTarget = new Color( 0xffffff );
    	const colorCross = new Color( 0x333333 );

    	// near

    	addLine( 'n1', 'n2', colorFrustum );
    	addLine( 'n2', 'n4', colorFrustum );
    	addLine( 'n4', 'n3', colorFrustum );
    	addLine( 'n3', 'n1', colorFrustum );

    	// far

    	addLine( 'f1', 'f2', colorFrustum );
    	addLine( 'f2', 'f4', colorFrustum );
    	addLine( 'f4', 'f3', colorFrustum );
    	addLine( 'f3', 'f1', colorFrustum );

    	// sides

    	addLine( 'n1', 'f1', colorFrustum );
    	addLine( 'n2', 'f2', colorFrustum );
    	addLine( 'n3', 'f3', colorFrustum );
    	addLine( 'n4', 'f4', colorFrustum );

    	// cone

    	addLine( 'p', 'n1', colorCone );
    	addLine( 'p', 'n2', colorCone );
    	addLine( 'p', 'n3', colorCone );
    	addLine( 'p', 'n4', colorCone );

    	// up

    	addLine( 'u1', 'u2', colorUp );
    	addLine( 'u2', 'u3', colorUp );
    	addLine( 'u3', 'u1', colorUp );

    	// target

    	addLine( 'c', 't', colorTarget );
    	addLine( 'p', 'c', colorCross );

    	// cross

    	addLine( 'cn1', 'cn2', colorCross );
    	addLine( 'cn3', 'cn4', colorCross );

    	addLine( 'cf1', 'cf2', colorCross );
    	addLine( 'cf3', 'cf4', colorCross );

    	function addLine( a, b, color ) {

    		addPoint( a, color );
    		addPoint( b, color );

    	}

    	function addPoint( id, color ) {

    		vertices.push( 0, 0, 0 );
    		colors.push( color.r, color.g, color.b );

    		if ( pointMap[ id ] === undefined ) {

    			pointMap[ id ] = [];

    		}

    		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

    	}

    	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    	LineSegments.call( this, geometry, material );

    	this.type = 'CameraHelper';

    	this.camera = camera;
    	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

    	this.matrix = camera.matrixWorld;
    	this.matrixAutoUpdate = false;

    	this.pointMap = pointMap;

    	this.update();

    }

    CameraHelper.prototype = Object.create( LineSegments.prototype );
    CameraHelper.prototype.constructor = CameraHelper;

    CameraHelper.prototype.update = function () {

    	const geometry = this.geometry;
    	const pointMap = this.pointMap;

    	const w = 1, h = 1;

    	// we need just camera projection matrix inverse
    	// world matrix must be identity

    	_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

    	// center / target

    	setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
    	setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

    	// near

    	setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
    	setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
    	setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
    	setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

    	// far

    	setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
    	setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
    	setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
    	setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

    	// up

    	setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
    	setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
    	setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

    	// cross

    	setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
    	setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
    	setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
    	setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

    	setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
    	setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
    	setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
    	setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

    	geometry.getAttribute( 'position' ).needsUpdate = true;

    };

    function setPoint( point, pointMap, geometry, camera, x, y, z ) {

    	_vector.set( x, y, z ).unproject( camera );

    	const points = pointMap[ point ];

    	if ( points !== undefined ) {

    		const position = geometry.getAttribute( 'position' );

    		for ( let i = 0, l = points.length; i < l; i ++ ) {

    			position.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );

    		}

    	}

    }

    const _box = new Box3();

    function BoxHelper( object, color ) {

    	this.object = object;

    	if ( color === undefined ) color = 0xffff00;

    	const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
    	const positions = new Float32Array( 8 * 3 );

    	const geometry = new BufferGeometry();
    	geometry.setIndex( new BufferAttribute( indices, 1 ) );
    	geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

    	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

    	this.type = 'BoxHelper';

    	this.matrixAutoUpdate = false;

    	this.update();

    }

    BoxHelper.prototype = Object.create( LineSegments.prototype );
    BoxHelper.prototype.constructor = BoxHelper;

    BoxHelper.prototype.update = function ( object ) {

    	if ( object !== undefined ) {

    		console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

    	}

    	if ( this.object !== undefined ) {

    		_box.setFromObject( this.object );

    	}

    	if ( _box.isEmpty() ) return;

    	const min = _box.min;
    	const max = _box.max;

    	/*
    	  5____4
    	1/___0/|
    	| 6__|_7
    	2/___3/

    	0: max.x, max.y, max.z
    	1: min.x, max.y, max.z
    	2: min.x, min.y, max.z
    	3: max.x, min.y, max.z
    	4: max.x, max.y, min.z
    	5: min.x, max.y, min.z
    	6: min.x, min.y, min.z
    	7: max.x, min.y, min.z
    	*/

    	const position = this.geometry.attributes.position;
    	const array = position.array;

    	array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
    	array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
    	array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
    	array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
    	array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
    	array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
    	array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
    	array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

    	position.needsUpdate = true;

    	this.geometry.computeBoundingSphere();


    };

    BoxHelper.prototype.setFromObject = function ( object ) {

    	this.object = object;
    	this.update();

    	return this;

    };

    BoxHelper.prototype.copy = function ( source ) {

    	LineSegments.prototype.copy.call( this, source );

    	this.object = source.object;

    	return this;

    };

    function Box3Helper( box, color ) {

    	this.type = 'Box3Helper';

    	this.box = box;

    	if ( color === undefined ) color = 0xffff00;

    	const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

    	const positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

    	const geometry = new BufferGeometry();

    	geometry.setIndex( new BufferAttribute( indices, 1 ) );

    	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

    	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

    	this.type = 'Box3Helper';

    	this.geometry.computeBoundingSphere();

    }

    Box3Helper.prototype = Object.create( LineSegments.prototype );
    Box3Helper.prototype.constructor = Box3Helper;

    Box3Helper.prototype.updateMatrixWorld = function ( force ) {

    	const box = this.box;

    	if ( box.isEmpty() ) return;

    	box.getCenter( this.position );

    	box.getSize( this.scale );

    	this.scale.multiplyScalar( 0.5 );

    	Object3D.prototype.updateMatrixWorld.call( this, force );

    };

    function PlaneHelper( plane, size, hex ) {

    	this.plane = plane;

    	this.size = ( size === undefined ) ? 1 : size;

    	const color = ( hex !== undefined ) ? hex : 0xffff00;

    	const positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

    	const geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
    	geometry.computeBoundingSphere();

    	Line.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

    	this.type = 'PlaneHelper';

    	//

    	const positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

    	const geometry2 = new BufferGeometry();
    	geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
    	geometry2.computeBoundingSphere();

    	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );

    }

    PlaneHelper.prototype = Object.create( Line.prototype );
    PlaneHelper.prototype.constructor = PlaneHelper;

    PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

    	let scale = - this.plane.constant;

    	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

    	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

    	this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

    	this.lookAt( this.plane.normal );

    	Object3D.prototype.updateMatrixWorld.call( this, force );

    };

    const _axis = new Vector3();
    let _lineGeometry, _coneGeometry;

    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

    	// dir is assumed to be normalized

    	Object3D.call( this );

    	this.type = 'ArrowHelper';

    	if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
    	if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
    	if ( length === undefined ) length = 1;
    	if ( color === undefined ) color = 0xffff00;
    	if ( headLength === undefined ) headLength = 0.2 * length;
    	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

    	if ( _lineGeometry === undefined ) {

    		_lineGeometry = new BufferGeometry();
    		_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

    		_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
    		_coneGeometry.translate( 0, - 0.5, 0 );

    	}

    	this.position.copy( origin );

    	this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
    	this.line.matrixAutoUpdate = false;
    	this.add( this.line );

    	this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
    	this.cone.matrixAutoUpdate = false;
    	this.add( this.cone );

    	this.setDirection( dir );
    	this.setLength( length, headLength, headWidth );

    }

    ArrowHelper.prototype = Object.create( Object3D.prototype );
    ArrowHelper.prototype.constructor = ArrowHelper;

    ArrowHelper.prototype.setDirection = function ( dir ) {

    	// dir is assumed to be normalized

    	if ( dir.y > 0.99999 ) {

    		this.quaternion.set( 0, 0, 0, 1 );

    	} else if ( dir.y < - 0.99999 ) {

    		this.quaternion.set( 1, 0, 0, 0 );

    	} else {

    		_axis.set( dir.z, 0, - dir.x ).normalize();

    		const radians = Math.acos( dir.y );

    		this.quaternion.setFromAxisAngle( _axis, radians );

    	}

    };

    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

    	if ( headLength === undefined ) headLength = 0.2 * length;
    	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

    	this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
    	this.line.updateMatrix();

    	this.cone.scale.set( headWidth, headLength, headWidth );
    	this.cone.position.y = length;
    	this.cone.updateMatrix();

    };

    ArrowHelper.prototype.setColor = function ( color ) {

    	this.line.material.color.set( color );
    	this.cone.material.color.set( color );

    };

    ArrowHelper.prototype.copy = function ( source ) {

    	Object3D.prototype.copy.call( this, source, false );

    	this.line.copy( source.line );
    	this.cone.copy( source.cone );

    	return this;

    };

    function AxesHelper( size ) {

    	size = size || 1;

    	const vertices = [
    		0, 0, 0,	size, 0, 0,
    		0, 0, 0,	0, size, 0,
    		0, 0, 0,	0, 0, size
    	];

    	const colors = [
    		1, 0, 0,	1, 0.6, 0,
    		0, 1, 0,	0.6, 1, 0,
    		0, 0, 1,	0, 0.6, 1
    	];

    	const geometry = new BufferGeometry();
    	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    	const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

    	LineSegments.call( this, geometry, material );

    	this.type = 'AxesHelper';

    }

    AxesHelper.prototype = Object.create( LineSegments.prototype );
    AxesHelper.prototype.constructor = AxesHelper;

    const LOD_MIN = 4;
    const LOD_MAX = 8;

    // The standard deviations (radians) associated with the extra mips. These are
    // chosen to approximate a Trowbridge-Reitz distribution function times the
    // geometric shadowing function. These sigma values squared must match the
    // variance #defines in cube_uv_reflection_fragment.glsl.js.
    const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

    const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

    new OrthographicCamera();
    _createPlanes();

    // Golden Ratio
    const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
    const INV_PHI = 1 / PHI;

    // Vertices of a dodecahedron (except the opposites, which represent the
    // same axis), used as axis directions evenly spread on a sphere.
    [
    	new Vector3( 1, 1, 1 ),
    	new Vector3( - 1, 1, 1 ),
    	new Vector3( 1, 1, - 1 ),
    	new Vector3( - 1, 1, - 1 ),
    	new Vector3( 0, PHI, INV_PHI ),
    	new Vector3( 0, PHI, - INV_PHI ),
    	new Vector3( INV_PHI, 0, PHI ),
    	new Vector3( - INV_PHI, 0, PHI ),
    	new Vector3( PHI, INV_PHI, 0 ),
    	new Vector3( - PHI, INV_PHI, 0 ) ];

    function _createPlanes() {

    	const _lodPlanes = [];
    	const _sizeLods = [];
    	const _sigmas = [];

    	let lod = LOD_MAX;

    	for ( let i = 0; i < TOTAL_LODS; i ++ ) {

    		const sizeLod = Math.pow( 2, lod );
    		_sizeLods.push( sizeLod );
    		let sigma = 1.0 / sizeLod;

    		if ( i > LOD_MAX - LOD_MIN ) {

    			sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];

    		} else if ( i == 0 ) {

    			sigma = 0;

    		}

    		_sigmas.push( sigma );

    		const texelSize = 1.0 / ( sizeLod - 1 );
    		const min = - texelSize / 2;
    		const max = 1 + texelSize / 2;
    		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

    		const cubeFaces = 6;
    		const vertices = 6;
    		const positionSize = 3;
    		const uvSize = 2;
    		const faceIndexSize = 1;

    		const position = new Float32Array( positionSize * vertices * cubeFaces );
    		const uv = new Float32Array( uvSize * vertices * cubeFaces );
    		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

    		for ( let face = 0; face < cubeFaces; face ++ ) {

    			const x = ( face % 3 ) * 2 / 3 - 1;
    			const y = face > 2 ? 0 : - 1;
    			const coordinates = [
    				x, y, 0,
    				x + 2 / 3, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y + 1, 0
    			];
    			position.set( coordinates, positionSize * vertices * face );
    			uv.set( uv1, uvSize * vertices * face );
    			const fill = [ face, face, face, face, face, face ];
    			faceIndex.set( fill, faceIndexSize * vertices * face );

    		}

    		const planes = new BufferGeometry();
    		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
    		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
    		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
    		_lodPlanes.push( planes );

    		if ( lod > LOD_MIN ) {

    			lod --;

    		}

    	}

    	return { _lodPlanes, _sizeLods, _sigmas };

    }

    //

    Curve.create = function ( construct, getPoint ) {

    	console.log( 'THREE.Curve.create() has been deprecated' );

    	construct.prototype = Object.create( Curve.prototype );
    	construct.prototype.constructor = construct;
    	construct.prototype.getPoint = getPoint;

    	return construct;

    };

    //

    Object.assign( CurvePath.prototype, {

    	createPointsGeometry: function ( divisions ) {

    		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

    		// generate geometry from path points (for Line or Points objects)

    		const pts = this.getPoints( divisions );
    		return this.createGeometry( pts );

    	},

    	createSpacedPointsGeometry: function ( divisions ) {

    		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

    		// generate geometry from equidistant sampling along the path

    		const pts = this.getSpacedPoints( divisions );
    		return this.createGeometry( pts );

    	},

    	createGeometry: function ( points ) {

    		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

    		const geometry = new Geometry();

    		for ( let i = 0, l = points.length; i < l; i ++ ) {

    			const point = points[ i ];
    			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

    		}

    		return geometry;

    	}

    } );

    //

    Object.assign( Path.prototype, {

    	fromPoints: function ( points ) {

    		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
    		return this.setFromPoints( points );

    	}

    } );

    //

    function Spline( points ) {

    	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

    	CatmullRomCurve3.call( this, points );
    	this.type = 'catmullrom';

    }

    Spline.prototype = Object.create( CatmullRomCurve3.prototype );

    Object.assign( Spline.prototype, {

    	initFromArray: function ( /* a */ ) {

    		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

    	},
    	getControlPointsArray: function ( /* optionalTarget */ ) {

    		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

    	},
    	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

    		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

    	}

    } );

    GridHelper.prototype.setColors = function () {

    	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

    };

    SkeletonHelper.prototype.update = function () {

    	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

    };

    //

    Object.assign( Loader.prototype, {

    	extractUrlBase: function ( url ) {

    		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
    		return LoaderUtils.extractUrlBase( url );

    	}

    } );

    Loader.Handlers = {

    	add: function ( /* regex, loader */ ) {

    		console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

    	},

    	get: function ( /* file */ ) {

    		console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

    	}

    };

    Object.assign( ObjectLoader.prototype, {

    	setTexturePath: function ( value ) {

    		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
    		return this.setResourcePath( value );

    	}

    } );

    //

    Object.assign( Box2.prototype, {

    	center: function ( optionalTarget ) {

    		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
    		return this.getCenter( optionalTarget );

    	},
    	empty: function () {

    		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
    		return this.isEmpty();

    	},
    	isIntersectionBox: function ( box ) {

    		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
    		return this.intersectsBox( box );

    	},
    	size: function ( optionalTarget ) {

    		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
    		return this.getSize( optionalTarget );

    	}
    } );

    Object.assign( Box3.prototype, {

    	center: function ( optionalTarget ) {

    		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
    		return this.getCenter( optionalTarget );

    	},
    	empty: function () {

    		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
    		return this.isEmpty();

    	},
    	isIntersectionBox: function ( box ) {

    		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
    		return this.intersectsBox( box );

    	},
    	isIntersectionSphere: function ( sphere ) {

    		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
    		return this.intersectsSphere( sphere );

    	},
    	size: function ( optionalTarget ) {

    		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
    		return this.getSize( optionalTarget );

    	}
    } );

    Object.assign( Sphere.prototype, {

    	empty: function () {

    		console.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );
    		return this.isEmpty();

    	},

    } );

    Frustum.prototype.setFromMatrix = function ( m ) {

    	console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );
    	return this.setFromProjectionMatrix( m );

    };

    Line3.prototype.center = function ( optionalTarget ) {

    	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
    	return this.getCenter( optionalTarget );

    };

    Object.assign( MathUtils, {

    	random16: function () {

    		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
    		return Math.random();

    	},

    	nearestPowerOfTwo: function ( value ) {

    		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
    		return MathUtils.floorPowerOfTwo( value );

    	},

    	nextPowerOfTwo: function ( value ) {

    		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
    		return MathUtils.ceilPowerOfTwo( value );

    	}

    } );

    Object.assign( Matrix3.prototype, {

    	flattenToArrayOffset: function ( array, offset ) {

    		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
    		return this.toArray( array, offset );

    	},
    	multiplyVector3: function ( vector ) {

    		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
    		return vector.applyMatrix3( this );

    	},
    	multiplyVector3Array: function ( /* a */ ) {

    		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

    	},
    	applyToBufferAttribute: function ( attribute ) {

    		console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );
    		return attribute.applyMatrix3( this );

    	},
    	applyToVector3Array: function ( /* array, offset, length */ ) {

    		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

    	}

    } );

    Object.assign( Matrix4.prototype, {

    	extractPosition: function ( m ) {

    		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
    		return this.copyPosition( m );

    	},
    	flattenToArrayOffset: function ( array, offset ) {

    		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
    		return this.toArray( array, offset );

    	},
    	getPosition: function () {

    		console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
    		return new Vector3().setFromMatrixColumn( this, 3 );

    	},
    	setRotationFromQuaternion: function ( q ) {

    		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
    		return this.makeRotationFromQuaternion( q );

    	},
    	multiplyToArray: function () {

    		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

    	},
    	multiplyVector3: function ( vector ) {

    		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
    		return vector.applyMatrix4( this );

    	},
    	multiplyVector4: function ( vector ) {

    		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
    		return vector.applyMatrix4( this );

    	},
    	multiplyVector3Array: function ( /* a */ ) {

    		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

    	},
    	rotateAxis: function ( v ) {

    		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
    		v.transformDirection( this );

    	},
    	crossVector: function ( vector ) {

    		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
    		return vector.applyMatrix4( this );

    	},
    	translate: function () {

    		console.error( 'THREE.Matrix4: .translate() has been removed.' );

    	},
    	rotateX: function () {

    		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

    	},
    	rotateY: function () {

    		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

    	},
    	rotateZ: function () {

    		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

    	},
    	rotateByAxis: function () {

    		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

    	},
    	applyToBufferAttribute: function ( attribute ) {

    		console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );
    		return attribute.applyMatrix4( this );

    	},
    	applyToVector3Array: function ( /* array, offset, length */ ) {

    		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

    	},
    	makeFrustum: function ( left, right, bottom, top, near, far ) {

    		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
    		return this.makePerspective( left, right, top, bottom, near, far );

    	}

    } );

    Plane.prototype.isIntersectionLine = function ( line ) {

    	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
    	return this.intersectsLine( line );

    };

    Quaternion.prototype.multiplyVector3 = function ( vector ) {

    	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
    	return vector.applyQuaternion( this );

    };

    Object.assign( Ray.prototype, {

    	isIntersectionBox: function ( box ) {

    		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
    		return this.intersectsBox( box );

    	},
    	isIntersectionPlane: function ( plane ) {

    		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
    		return this.intersectsPlane( plane );

    	},
    	isIntersectionSphere: function ( sphere ) {

    		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
    		return this.intersectsSphere( sphere );

    	}

    } );

    Object.assign( Triangle.prototype, {

    	area: function () {

    		console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
    		return this.getArea();

    	},
    	barycoordFromPoint: function ( point, target ) {

    		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
    		return this.getBarycoord( point, target );

    	},
    	midpoint: function ( target ) {

    		console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
    		return this.getMidpoint( target );

    	},
    	normal: function ( target ) {

    		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
    		return this.getNormal( target );

    	},
    	plane: function ( target ) {

    		console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
    		return this.getPlane( target );

    	}

    } );

    Object.assign( Triangle, {

    	barycoordFromPoint: function ( point, a, b, c, target ) {

    		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
    		return Triangle.getBarycoord( point, a, b, c, target );

    	},
    	normal: function ( a, b, c, target ) {

    		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
    		return Triangle.getNormal( a, b, c, target );

    	}

    } );

    Object.assign( Shape.prototype, {

    	extractAllPoints: function ( divisions ) {

    		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
    		return this.extractPoints( divisions );

    	},
    	extrude: function ( options ) {

    		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
    		return new ExtrudeGeometry( this, options );

    	},
    	makeGeometry: function ( options ) {

    		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
    		return new ShapeGeometry( this, options );

    	}

    } );

    Object.assign( Vector2.prototype, {

    	fromAttribute: function ( attribute, index, offset ) {

    		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
    		return this.fromBufferAttribute( attribute, index, offset );

    	},
    	distanceToManhattan: function ( v ) {

    		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
    		return this.manhattanDistanceTo( v );

    	},
    	lengthManhattan: function () {

    		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
    		return this.manhattanLength();

    	}

    } );

    Object.assign( Vector3.prototype, {

    	setEulerFromRotationMatrix: function () {

    		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

    	},
    	setEulerFromQuaternion: function () {

    		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

    	},
    	getPositionFromMatrix: function ( m ) {

    		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
    		return this.setFromMatrixPosition( m );

    	},
    	getScaleFromMatrix: function ( m ) {

    		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
    		return this.setFromMatrixScale( m );

    	},
    	getColumnFromMatrix: function ( index, matrix ) {

    		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
    		return this.setFromMatrixColumn( matrix, index );

    	},
    	applyProjection: function ( m ) {

    		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
    		return this.applyMatrix4( m );

    	},
    	fromAttribute: function ( attribute, index, offset ) {

    		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
    		return this.fromBufferAttribute( attribute, index, offset );

    	},
    	distanceToManhattan: function ( v ) {

    		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
    		return this.manhattanDistanceTo( v );

    	},
    	lengthManhattan: function () {

    		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
    		return this.manhattanLength();

    	}

    } );

    Object.assign( Vector4.prototype, {

    	fromAttribute: function ( attribute, index, offset ) {

    		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
    		return this.fromBufferAttribute( attribute, index, offset );

    	},
    	lengthManhattan: function () {

    		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
    		return this.manhattanLength();

    	}

    } );

    //

    Object.assign( Geometry.prototype, {

    	computeTangents: function () {

    		console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

    	},
    	computeLineDistances: function () {

    		console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

    	},
    	applyMatrix: function ( matrix ) {

    		console.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );
    		return this.applyMatrix4( matrix );

    	}

    } );

    Object.assign( Object3D.prototype, {

    	getChildByName: function ( name ) {

    		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
    		return this.getObjectByName( name );

    	},
    	renderDepth: function () {

    		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

    	},
    	translate: function ( distance, axis ) {

    		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
    		return this.translateOnAxis( axis, distance );

    	},
    	getWorldRotation: function () {

    		console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

    	},
    	applyMatrix: function ( matrix ) {

    		console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );
    		return this.applyMatrix4( matrix );

    	}

    } );

    Object.defineProperties( Object3D.prototype, {

    	eulerOrder: {
    		get: function () {

    			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
    			return this.rotation.order;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
    			this.rotation.order = value;

    		}
    	},
    	useQuaternion: {
    		get: function () {

    			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

    		},
    		set: function () {

    			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

    		}
    	}

    } );

    Object.assign( Mesh.prototype, {

    	setDrawMode: function () {

    		console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

    	},

    } );

    Object.defineProperties( Mesh.prototype, {

    	drawMode: {
    		get: function () {

    			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );
    			return TrianglesDrawMode;

    		},
    		set: function () {

    			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

    		}
    	}

    } );

    Object.defineProperties( LOD.prototype, {

    	objects: {
    		get: function () {

    			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
    			return this.levels;

    		}
    	}

    } );

    Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

    	get: function () {

    		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

    	},
    	set: function () {

    		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

    	}

    } );

    SkinnedMesh.prototype.initBones = function () {

    	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

    };

    Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

    	get: function () {

    		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
    		return this.arcLengthDivisions;

    	},
    	set: function ( value ) {

    		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
    		this.arcLengthDivisions = value;

    	}

    } );

    //

    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

    	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
    			"Use .setFocalLength and .filmGauge for a photographic setup." );

    	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
    	this.setFocalLength( focalLength );

    };

    //

    Object.defineProperties( Light$1.prototype, {
    	onlyShadow: {
    		set: function () {

    			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

    		}
    	},
    	shadowCameraFov: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
    			this.shadow.camera.fov = value;

    		}
    	},
    	shadowCameraLeft: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
    			this.shadow.camera.left = value;

    		}
    	},
    	shadowCameraRight: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
    			this.shadow.camera.right = value;

    		}
    	},
    	shadowCameraTop: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
    			this.shadow.camera.top = value;

    		}
    	},
    	shadowCameraBottom: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
    			this.shadow.camera.bottom = value;

    		}
    	},
    	shadowCameraNear: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
    			this.shadow.camera.near = value;

    		}
    	},
    	shadowCameraFar: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
    			this.shadow.camera.far = value;

    		}
    	},
    	shadowCameraVisible: {
    		set: function () {

    			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

    		}
    	},
    	shadowBias: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
    			this.shadow.bias = value;

    		}
    	},
    	shadowDarkness: {
    		set: function () {

    			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

    		}
    	},
    	shadowMapWidth: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
    			this.shadow.mapSize.width = value;

    		}
    	},
    	shadowMapHeight: {
    		set: function ( value ) {

    			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
    			this.shadow.mapSize.height = value;

    		}
    	}
    } );

    //

    Object.defineProperties( BufferAttribute.prototype, {

    	length: {
    		get: function () {

    			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
    			return this.array.length;

    		}
    	},
    	dynamic: {
    		get: function () {

    			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
    			return this.usage === DynamicDrawUsage;

    		},
    		set: function ( /* value */ ) {

    			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
    			this.setUsage( DynamicDrawUsage );

    		}
    	}

    } );

    Object.assign( BufferAttribute.prototype, {
    	setDynamic: function ( value ) {

    		console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
    		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
    		return this;

    	},
    	copyIndicesArray: function ( /* indices */ ) {

    		console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

    	},
    	setArray: function ( /* array */ ) {

    		console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

    	}
    } );

    Object.assign( BufferGeometry.prototype, {

    	addIndex: function ( index ) {

    		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
    		this.setIndex( index );

    	},
    	addAttribute: function ( name, attribute ) {

    		console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

    		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

    			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

    			return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

    		}

    		if ( name === 'index' ) {

    			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
    			this.setIndex( attribute );

    			return this;

    		}

    		return this.setAttribute( name, attribute );

    	},
    	addDrawCall: function ( start, count, indexOffset ) {

    		if ( indexOffset !== undefined ) {

    			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

    		}

    		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
    		this.addGroup( start, count );

    	},
    	clearDrawCalls: function () {

    		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
    		this.clearGroups();

    	},
    	computeTangents: function () {

    		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

    	},
    	computeOffsets: function () {

    		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

    	},
    	removeAttribute: function ( name ) {

    		console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

    		return this.deleteAttribute( name );

    	},
    	applyMatrix: function ( matrix ) {

    		console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );
    		return this.applyMatrix4( matrix );

    	}

    } );

    Object.defineProperties( BufferGeometry.prototype, {

    	drawcalls: {
    		get: function () {

    			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
    			return this.groups;

    		}
    	},
    	offsets: {
    		get: function () {

    			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
    			return this.groups;

    		}
    	}

    } );

    Object.defineProperties( InstancedBufferGeometry.prototype, {

    	maxInstancedCount: {
    		get: function () {

    			console.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );
    			return this.instanceCount;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );
    			this.instanceCount = value;

    		}
    	}

    } );

    Object.defineProperties( Raycaster.prototype, {

    	linePrecision: {
    		get: function () {

    			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
    			return this.params.Line.threshold;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
    			this.params.Line.threshold = value;

    		}
    	}

    } );

    Object.defineProperties( InterleavedBuffer.prototype, {

    	dynamic: {
    		get: function () {

    			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
    			return this.usage === DynamicDrawUsage;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
    			this.setUsage( value );

    		}
    	}

    } );

    Object.assign( InterleavedBuffer.prototype, {
    	setDynamic: function ( value ) {

    		console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
    		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
    		return this;

    	},
    	setArray: function ( /* array */ ) {

    		console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

    	}
    } );

    //

    Object.assign( ExtrudeBufferGeometry.prototype, {

    	getArrays: function () {

    		console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

    	},

    	addShapeList: function () {

    		console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

    	},

    	addShape: function () {

    		console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

    	}

    } );

    //

    Object.defineProperties( Uniform.prototype, {

    	dynamic: {
    		set: function () {

    			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

    		}
    	},
    	onUpdate: {
    		value: function () {

    			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
    			return this;

    		}
    	}

    } );

    //

    Object.defineProperties( Material.prototype, {

    	wrapAround: {
    		get: function () {

    			console.warn( 'THREE.Material: .wrapAround has been removed.' );

    		},
    		set: function () {

    			console.warn( 'THREE.Material: .wrapAround has been removed.' );

    		}
    	},

    	overdraw: {
    		get: function () {

    			console.warn( 'THREE.Material: .overdraw has been removed.' );

    		},
    		set: function () {

    			console.warn( 'THREE.Material: .overdraw has been removed.' );

    		}
    	},

    	wrapRGB: {
    		get: function () {

    			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
    			return new Color();

    		}
    	},

    	shading: {
    		get: function () {

    			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
    			this.flatShading = ( value === FlatShading );

    		}
    	},

    	stencilMask: {
    		get: function () {

    			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
    			return this.stencilFuncMask;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
    			this.stencilFuncMask = value;

    		}
    	}

    } );

    Object.defineProperties( MeshPhongMaterial.prototype, {

    	metal: {
    		get: function () {

    			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
    			return false;

    		},
    		set: function () {

    			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

    		}
    	}

    } );

    Object.defineProperties( MeshPhysicalMaterial.prototype, {

    	transparency: {
    		get: function () {

    			console.warn( 'THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.' );
    			return this.transmission;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.' );
    			this.transmission = value;

    		}
    	}

    } );

    Object.defineProperties( ShaderMaterial.prototype, {

    	derivatives: {
    		get: function () {

    			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
    			return this.extensions.derivatives;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
    			this.extensions.derivatives = value;

    		}
    	}

    } );

    //

    Object.assign( WebGLRenderer.prototype, {

    	clearTarget: function ( renderTarget, color, depth, stencil ) {

    		console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
    		this.setRenderTarget( renderTarget );
    		this.clear( color, depth, stencil );

    	},
    	animate: function ( callback ) {

    		console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
    		this.setAnimationLoop( callback );

    	},
    	getCurrentRenderTarget: function () {

    		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
    		return this.getRenderTarget();

    	},
    	getMaxAnisotropy: function () {

    		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
    		return this.capabilities.getMaxAnisotropy();

    	},
    	getPrecision: function () {

    		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
    		return this.capabilities.precision;

    	},
    	resetGLState: function () {

    		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
    		return this.state.reset();

    	},
    	supportsFloatTextures: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
    		return this.extensions.get( 'OES_texture_float' );

    	},
    	supportsHalfFloatTextures: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
    		return this.extensions.get( 'OES_texture_half_float' );

    	},
    	supportsStandardDerivatives: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
    		return this.extensions.get( 'OES_standard_derivatives' );

    	},
    	supportsCompressedTextureS3TC: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
    		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

    	},
    	supportsCompressedTexturePVRTC: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
    		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

    	},
    	supportsBlendMinMax: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
    		return this.extensions.get( 'EXT_blend_minmax' );

    	},
    	supportsVertexTextures: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
    		return this.capabilities.vertexTextures;

    	},
    	supportsInstancedArrays: function () {

    		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
    		return this.extensions.get( 'ANGLE_instanced_arrays' );

    	},
    	enableScissorTest: function ( boolean ) {

    		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
    		this.setScissorTest( boolean );

    	},
    	initMaterial: function () {

    		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

    	},
    	addPrePlugin: function () {

    		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

    	},
    	addPostPlugin: function () {

    		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

    	},
    	updateShadowMap: function () {

    		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

    	},
    	setFaceCulling: function () {

    		console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

    	},
    	allocTextureUnit: function () {

    		console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

    	},
    	setTexture: function () {

    		console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

    	},
    	setTexture2D: function () {

    		console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

    	},
    	setTextureCube: function () {

    		console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

    	},
    	getActiveMipMapLevel: function () {

    		console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
    		return this.getActiveMipmapLevel();

    	}

    } );

    Object.defineProperties( WebGLRenderer.prototype, {

    	shadowMapEnabled: {
    		get: function () {

    			return this.shadowMap.enabled;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
    			this.shadowMap.enabled = value;

    		}
    	},
    	shadowMapType: {
    		get: function () {

    			return this.shadowMap.type;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
    			this.shadowMap.type = value;

    		}
    	},
    	shadowMapCullFace: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
    			return undefined;

    		},
    		set: function ( /* value */ ) {

    			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

    		}
    	},
    	context: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
    			return this.getContext();

    		}
    	},
    	vr: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );
    			return this.xr;

    		}
    	},
    	gammaInput: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
    			return false;

    		},
    		set: function () {

    			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );

    		}
    	},
    	gammaOutput: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
    			return false;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
    			this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;

    		}
    	},
    	toneMappingWhitePoint: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );
    			return 1.0;

    		},
    		set: function () {

    			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );

    		}
    	},

    } );

    Object.defineProperties( WebGLShadowMap.prototype, {

    	cullFace: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
    			return undefined;

    		},
    		set: function ( /* cullFace */ ) {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

    		}
    	},
    	renderReverseSided: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
    			return undefined;

    		},
    		set: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

    		}
    	},
    	renderSingleSided: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
    			return undefined;

    		},
    		set: function () {

    			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

    		}
    	}

    } );

    //

    Object.defineProperties( WebGLRenderTarget.prototype, {

    	wrapS: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
    			return this.texture.wrapS;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
    			this.texture.wrapS = value;

    		}
    	},
    	wrapT: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
    			return this.texture.wrapT;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
    			this.texture.wrapT = value;

    		}
    	},
    	magFilter: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
    			return this.texture.magFilter;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
    			this.texture.magFilter = value;

    		}
    	},
    	minFilter: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
    			return this.texture.minFilter;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
    			this.texture.minFilter = value;

    		}
    	},
    	anisotropy: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
    			return this.texture.anisotropy;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
    			this.texture.anisotropy = value;

    		}
    	},
    	offset: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
    			return this.texture.offset;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
    			this.texture.offset = value;

    		}
    	},
    	repeat: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
    			return this.texture.repeat;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
    			this.texture.repeat = value;

    		}
    	},
    	format: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
    			return this.texture.format;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
    			this.texture.format = value;

    		}
    	},
    	type: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
    			return this.texture.type;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
    			this.texture.type = value;

    		}
    	},
    	generateMipmaps: {
    		get: function () {

    			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
    			return this.texture.generateMipmaps;

    		},
    		set: function ( value ) {

    			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
    			this.texture.generateMipmaps = value;

    		}
    	}

    } );

    //

    Object.defineProperties( Audio.prototype, {

    	load: {
    		value: function ( file ) {

    			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
    			const scope = this;
    			const audioLoader = new AudioLoader();
    			audioLoader.load( file, function ( buffer ) {

    				scope.setBuffer( buffer );

    			} );
    			return this;

    		}
    	},
    	startTime: {
    		set: function () {

    			console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );

    		}
    	}

    } );

    AudioAnalyser.prototype.getData = function () {

    	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
    	return this.getFrequencyData();

    };

    //

    CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

    	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
    	return this.update( renderer, scene );

    };

    ImageUtils.crossOrigin = undefined;

    ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

    	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

    	const loader = new TextureLoader();
    	loader.setCrossOrigin( this.crossOrigin );

    	const texture = loader.load( url, onLoad, undefined, onError );

    	if ( mapping ) texture.mapping = mapping;

    	return texture;

    };

    ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

    	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

    	const loader = new CubeTextureLoader();
    	loader.setCrossOrigin( this.crossOrigin );

    	const texture = loader.load( urls, onLoad, undefined, onError );

    	if ( mapping ) texture.mapping = mapping;

    	return texture;

    };

    ImageUtils.loadCompressedTexture = function () {

    	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

    };

    ImageUtils.loadCompressedTextureCube = function () {

    	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

    };

    ( (function () {

    	function GLTFLoader( manager ) {

    		Loader.call( this, manager );

    		this.dracoLoader = null;
    		this.ddsLoader = null;
    		this.ktx2Loader = null;

    		this.pluginCallbacks = [];

    		this.register( function ( parser ) {

    			return new GLTFMaterialsClearcoatExtension( parser );

    		} );
    		this.register( function ( parser ) {

    			return new GLTFTextureBasisUExtension( parser );

    		} );

    		this.register( function ( parser ) {

    			return new GLTFMaterialsTransmissionExtension( parser );

    		} );

    	}

    	GLTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    		constructor: GLTFLoader,

    		load: function ( url, onLoad, onProgress, onError ) {

    			var scope = this;

    			var resourcePath;

    			if ( this.resourcePath !== '' ) {

    				resourcePath = this.resourcePath;

    			} else if ( this.path !== '' ) {

    				resourcePath = this.path;

    			} else {

    				resourcePath = LoaderUtils.extractUrlBase( url );

    			}

    			// Tells the LoadingManager to track an extra item, which resolves after
    			// the model is fully loaded. This means the count of items loaded will
    			// be incorrect, but ensures manager.onLoad() does not fire early.
    			scope.manager.itemStart( url );

    			var _onError = function ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );
    				scope.manager.itemEnd( url );

    			};

    			var loader = new FileLoader( scope.manager );

    			loader.setPath( this.path );
    			loader.setResponseType( 'arraybuffer' );
    			loader.setRequestHeader( this.requestHeader );

    			if ( scope.crossOrigin === 'use-credentials' ) {

    				loader.setWithCredentials( true );

    			}

    			loader.load( url, function ( data ) {

    				try {

    					scope.parse( data, resourcePath, function ( gltf ) {

    						onLoad( gltf );

    						scope.manager.itemEnd( url );

    					}, _onError );

    				} catch ( e ) {

    					_onError( e );

    				}

    			}, onProgress, _onError );

    		},

    		setDRACOLoader: function ( dracoLoader ) {

    			this.dracoLoader = dracoLoader;
    			return this;

    		},

    		setDDSLoader: function ( ddsLoader ) {

    			this.ddsLoader = ddsLoader;
    			return this;

    		},

    		setKTX2Loader: function ( ktx2Loader ) {

    			this.ktx2Loader = ktx2Loader;
    			return this;

    		},

    		register: function ( callback ) {

    			if ( this.pluginCallbacks.indexOf( callback ) === - 1 ) {

    				this.pluginCallbacks.push( callback );

    			}

    			return this;

    		},

    		unregister: function ( callback ) {

    			if ( this.pluginCallbacks.indexOf( callback ) !== - 1 ) {

    				this.pluginCallbacks.splice( this.pluginCallbacks.indexOf( callback ), 1 );

    			}

    			return this;

    		},

    		parse: function ( data, path, onLoad, onError ) {

    			var content;
    			var extensions = {};
    			var plugins = {};

    			if ( typeof data === 'string' ) {

    				content = data;

    			} else {

    				var magic = LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );

    				if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {

    					try {

    						extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );

    					} catch ( error ) {

    						if ( onError ) onError( error );
    						return;

    					}

    					content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;

    				} else {

    					content = LoaderUtils.decodeText( new Uint8Array( data ) );

    				}

    			}

    			var json = JSON.parse( content );

    			if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {

    				if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );
    				return;

    			}

    			var parser = new GLTFParser( json, {

    				path: path || this.resourcePath || '',
    				crossOrigin: this.crossOrigin,
    				manager: this.manager,
    				ktx2Loader: this.ktx2Loader

    			} );

    			parser.fileLoader.setRequestHeader( this.requestHeader );

    			for ( var i = 0; i < this.pluginCallbacks.length; i ++ ) {

    				var plugin = this.pluginCallbacks[ i ]( parser );
    				plugins[ plugin.name ] = plugin;

    				// Workaround to avoid determining as unknown extension
    				// in addUnknownExtensionsToUserData().
    				// Remove this workaround if we move all the existing
    				// extension handlers to plugin system
    				extensions[ plugin.name ] = true;

    			}

    			if ( json.extensionsUsed ) {

    				for ( var i = 0; i < json.extensionsUsed.length; ++ i ) {

    					var extensionName = json.extensionsUsed[ i ];
    					var extensionsRequired = json.extensionsRequired || [];

    					switch ( extensionName ) {

    						case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
    							extensions[ extensionName ] = new GLTFLightsExtension( json );
    							break;

    						case EXTENSIONS.KHR_MATERIALS_UNLIT:
    							extensions[ extensionName ] = new GLTFMaterialsUnlitExtension();
    							break;

    						case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
    							extensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
    							break;

    						case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
    							extensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );
    							break;

    						case EXTENSIONS.MSFT_TEXTURE_DDS:
    							extensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );
    							break;

    						case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
    							extensions[ extensionName ] = new GLTFTextureTransformExtension();
    							break;

    						case EXTENSIONS.KHR_MESH_QUANTIZATION:
    							extensions[ extensionName ] = new GLTFMeshQuantizationExtension();
    							break;

    						default:

    							if ( extensionsRequired.indexOf( extensionName ) >= 0 && plugins[ extensionName ] === undefined ) {

    								console.warn( 'THREE.GLTFLoader: Unknown extension "' + extensionName + '".' );

    							}

    					}

    				}

    			}

    			parser.setExtensions( extensions );
    			parser.setPlugins( plugins );
    			parser.parse( onLoad, onError );

    		}

    	} );

    	/* GLTFREGISTRY */

    	function GLTFRegistry() {

    		var objects = {};

    		return	{

    			get: function ( key ) {

    				return objects[ key ];

    			},

    			add: function ( key, object ) {

    				objects[ key ] = object;

    			},

    			remove: function ( key ) {

    				delete objects[ key ];

    			},

    			removeAll: function () {

    				objects = {};

    			}

    		};

    	}

    	/*********************************/
    	/********** EXTENSIONS ***********/
    	/*********************************/

    	var EXTENSIONS = {
    		KHR_BINARY_GLTF: 'KHR_binary_glTF',
    		KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
    		KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
    		KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',
    		KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
    		KHR_MATERIALS_TRANSMISSION: 'KHR_materials_transmission',
    		KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
    		KHR_TEXTURE_BASISU: 'KHR_texture_basisu',
    		KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
    		KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',
    		MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
    	};

    	/**
    	 * DDS Texture Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds
    	 *
    	 */
    	function GLTFTextureDDSExtension( ddsLoader ) {

    		if ( ! ddsLoader ) {

    			throw new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader' );

    		}

    		this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
    		this.ddsLoader = ddsLoader;

    	}

    	/**
    	 * Punctual Lights Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual
    	 */
    	function GLTFLightsExtension( json ) {

    		this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;

    		var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};
    		this.lightDefs = extension.lights || [];

    	}

    	GLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {

    		var lightDef = this.lightDefs[ lightIndex ];
    		var lightNode;

    		var color = new Color( 0xffffff );
    		if ( lightDef.color !== undefined ) color.fromArray( lightDef.color );

    		var range = lightDef.range !== undefined ? lightDef.range : 0;

    		switch ( lightDef.type ) {

    			case 'directional':
    				lightNode = new DirectionalLight( color );
    				lightNode.target.position.set( 0, 0, - 1 );
    				lightNode.add( lightNode.target );
    				break;

    			case 'point':
    				lightNode = new PointLight( color );
    				lightNode.distance = range;
    				break;

    			case 'spot':
    				lightNode = new SpotLight( color );
    				lightNode.distance = range;
    				// Handle spotlight properties.
    				lightDef.spot = lightDef.spot || {};
    				lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
    				lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;
    				lightNode.angle = lightDef.spot.outerConeAngle;
    				lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
    				lightNode.target.position.set( 0, 0, - 1 );
    				lightNode.add( lightNode.target );
    				break;

    			default:
    				throw new Error( 'THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".' );

    		}

    		// Some lights (e.g. spot) default to a position other than the origin. Reset the position
    		// here, because node-level parsing will only override position if explicitly specified.
    		lightNode.position.set( 0, 0, 0 );

    		lightNode.decay = 2;

    		if ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;

    		lightNode.name = lightDef.name || ( 'light_' + lightIndex );

    		return Promise.resolve( lightNode );

    	};

    	/**
    	 * Unlit Materials Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit
    	 */
    	function GLTFMaterialsUnlitExtension() {

    		this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;

    	}

    	GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {

    		return MeshBasicMaterial;

    	};

    	GLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {

    		var pending = [];

    		materialParams.color = new Color( 1.0, 1.0, 1.0 );
    		materialParams.opacity = 1.0;

    		var metallicRoughness = materialDef.pbrMetallicRoughness;

    		if ( metallicRoughness ) {

    			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

    				var array = metallicRoughness.baseColorFactor;

    				materialParams.color.fromArray( array );
    				materialParams.opacity = array[ 3 ];

    			}

    			if ( metallicRoughness.baseColorTexture !== undefined ) {

    				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

    			}

    		}

    		return Promise.all( pending );

    	};

    	/**
    	 * Clearcoat Materials Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat
    	 */
    	function GLTFMaterialsClearcoatExtension( parser ) {

    		this.parser = parser;
    		this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;

    	}

    	GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function ( /* materialIndex */ ) {

    		return MeshPhysicalMaterial;

    	};

    	GLTFMaterialsClearcoatExtension.prototype.extendMaterialParams = function ( materialIndex, materialParams ) {

    		var parser = this.parser;
    		var materialDef = parser.json.materials[ materialIndex ];

    		if ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {

    			return Promise.resolve();

    		}

    		var pending = [];

    		var extension = materialDef.extensions[ this.name ];

    		if ( extension.clearcoatFactor !== undefined ) {

    			materialParams.clearcoat = extension.clearcoatFactor;

    		}

    		if ( extension.clearcoatTexture !== undefined ) {

    			pending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );

    		}

    		if ( extension.clearcoatRoughnessFactor !== undefined ) {

    			materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;

    		}

    		if ( extension.clearcoatRoughnessTexture !== undefined ) {

    			pending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );

    		}

    		if ( extension.clearcoatNormalTexture !== undefined ) {

    			pending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );

    			if ( extension.clearcoatNormalTexture.scale !== undefined ) {

    				var scale = extension.clearcoatNormalTexture.scale;

    				materialParams.clearcoatNormalScale = new Vector2( scale, scale );

    			}

    		}

    		return Promise.all( pending );

    	};

    	/**
    	 * Transmission Materials Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission
    	 * Draft: https://github.com/KhronosGroup/glTF/pull/1698
    	 */
    	function GLTFMaterialsTransmissionExtension( parser ) {

    		this.parser = parser;
    		this.name = EXTENSIONS.KHR_MATERIALS_TRANSMISSION;

    	}

    	GLTFMaterialsTransmissionExtension.prototype.getMaterialType = function ( /* materialIndex */ ) {

    		return MeshPhysicalMaterial;

    	};

    	GLTFMaterialsTransmissionExtension.prototype.extendMaterialParams = function ( materialIndex, materialParams ) {

    		var parser = this.parser;
    		var materialDef = parser.json.materials[ materialIndex ];

    		if ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {

    			return Promise.resolve();

    		}

    		var pending = [];

    		var extension = materialDef.extensions[ this.name ];

    		if ( extension.transmissionFactor !== undefined ) {

    			materialParams.transmission = extension.transmissionFactor;

    		}

    		if ( extension.transmissionTexture !== undefined ) {

    			pending.push( parser.assignTexture( materialParams, 'transmissionMap', extension.transmissionTexture ) );

    		}

    		return Promise.all( pending );

    	};

    	/**
    	 * BasisU Texture Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu
    	 * (draft PR https://github.com/KhronosGroup/glTF/pull/1751)
    	 */
    	function GLTFTextureBasisUExtension( parser ) {

    		this.parser = parser;
    		this.name = EXTENSIONS.KHR_TEXTURE_BASISU;

    	}

    	GLTFTextureBasisUExtension.prototype.loadTexture = function ( textureIndex ) {

    		var parser = this.parser;
    		var json = parser.json;

    		var textureDef = json.textures[ textureIndex ];

    		if ( ! textureDef.extensions || ! textureDef.extensions[ this.name ] ) {

    			return null;

    		}

    		var extension = textureDef.extensions[ this.name ];
    		var source = json.images[ extension.source ];
    		var loader = parser.options.ktx2Loader;

    		if ( ! loader ) {

    			throw new Error( 'THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures' );

    		}

    		return parser.loadTextureImage( textureIndex, source, loader );

    	};

    	/* BINARY EXTENSION */
    	var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
    	var BINARY_EXTENSION_HEADER_LENGTH = 12;
    	var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };

    	function GLTFBinaryExtension( data ) {

    		this.name = EXTENSIONS.KHR_BINARY_GLTF;
    		this.content = null;
    		this.body = null;

    		var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );

    		this.header = {
    			magic: LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
    			version: headerView.getUint32( 4, true ),
    			length: headerView.getUint32( 8, true )
    		};

    		if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {

    			throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );

    		} else if ( this.header.version < 2.0 ) {

    			throw new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );

    		}

    		var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
    		var chunkIndex = 0;

    		while ( chunkIndex < chunkView.byteLength ) {

    			var chunkLength = chunkView.getUint32( chunkIndex, true );
    			chunkIndex += 4;

    			var chunkType = chunkView.getUint32( chunkIndex, true );
    			chunkIndex += 4;

    			if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {

    				var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
    				this.content = LoaderUtils.decodeText( contentArray );

    			} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {

    				var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
    				this.body = data.slice( byteOffset, byteOffset + chunkLength );

    			}

    			// Clients must ignore chunks with unknown types.

    			chunkIndex += chunkLength;

    		}

    		if ( this.content === null ) {

    			throw new Error( 'THREE.GLTFLoader: JSON content not found.' );

    		}

    	}

    	/**
    	 * DRACO Mesh Compression Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression
    	 */
    	function GLTFDracoMeshCompressionExtension( json, dracoLoader ) {

    		if ( ! dracoLoader ) {

    			throw new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );

    		}

    		this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
    		this.json = json;
    		this.dracoLoader = dracoLoader;
    		this.dracoLoader.preload();

    	}

    	GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {

    		var json = this.json;
    		var dracoLoader = this.dracoLoader;
    		var bufferViewIndex = primitive.extensions[ this.name ].bufferView;
    		var gltfAttributeMap = primitive.extensions[ this.name ].attributes;
    		var threeAttributeMap = {};
    		var attributeNormalizedMap = {};
    		var attributeTypeMap = {};

    		for ( var attributeName in gltfAttributeMap ) {

    			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

    			threeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];

    		}

    		for ( attributeName in primitive.attributes ) {

    			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

    			if ( gltfAttributeMap[ attributeName ] !== undefined ) {

    				var accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];
    				var componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

    				attributeTypeMap[ threeAttributeName ] = componentType;
    				attributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;

    			}

    		}

    		return parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {

    			return new Promise( function ( resolve ) {

    				dracoLoader.decodeDracoFile( bufferView, function ( geometry ) {

    					for ( var attributeName in geometry.attributes ) {

    						var attribute = geometry.attributes[ attributeName ];
    						var normalized = attributeNormalizedMap[ attributeName ];

    						if ( normalized !== undefined ) attribute.normalized = normalized;

    					}

    					resolve( geometry );

    				}, threeAttributeMap, attributeTypeMap );

    			} );

    		} );

    	};

    	/**
    	 * Texture Transform Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform
    	 */
    	function GLTFTextureTransformExtension() {

    		this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;

    	}

    	GLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {

    		texture = texture.clone();

    		if ( transform.offset !== undefined ) {

    			texture.offset.fromArray( transform.offset );

    		}

    		if ( transform.rotation !== undefined ) {

    			texture.rotation = transform.rotation;

    		}

    		if ( transform.scale !== undefined ) {

    			texture.repeat.fromArray( transform.scale );

    		}

    		if ( transform.texCoord !== undefined ) {

    			console.warn( 'THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.' );

    		}

    		texture.needsUpdate = true;

    		return texture;

    	};

    	/**
    	 * Specular-Glossiness Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
    	 */

    	/**
    	 * A sub class of StandardMaterial with some of the functionality
    	 * changed via the `onBeforeCompile` callback
    	 * @pailhead
    	 */

    	function GLTFMeshStandardSGMaterial( params ) {

    		MeshStandardMaterial.call( this );

    		this.isGLTFSpecularGlossinessMaterial = true;

    		//various chunks that need replacing
    		var specularMapParsFragmentChunk = [
    			'#ifdef USE_SPECULARMAP',
    			'	uniform sampler2D specularMap;',
    			'#endif'
    		].join( '\n' );

    		var glossinessMapParsFragmentChunk = [
    			'#ifdef USE_GLOSSINESSMAP',
    			'	uniform sampler2D glossinessMap;',
    			'#endif'
    		].join( '\n' );

    		var specularMapFragmentChunk = [
    			'vec3 specularFactor = specular;',
    			'#ifdef USE_SPECULARMAP',
    			'	vec4 texelSpecular = texture2D( specularMap, vUv );',
    			'	texelSpecular = sRGBToLinear( texelSpecular );',
    			'	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
    			'	specularFactor *= texelSpecular.rgb;',
    			'#endif'
    		].join( '\n' );

    		var glossinessMapFragmentChunk = [
    			'float glossinessFactor = glossiness;',
    			'#ifdef USE_GLOSSINESSMAP',
    			'	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
    			'	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
    			'	glossinessFactor *= texelGlossiness.a;',
    			'#endif'
    		].join( '\n' );

    		var lightPhysicalFragmentChunk = [
    			'PhysicalMaterial material;',
    			'material.diffuseColor = diffuseColor.rgb;',
    			'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',
    			'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',
    			'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',
    			'material.specularRoughness += geometryRoughness;',
    			'material.specularRoughness = min( material.specularRoughness, 1.0 );',
    			'material.specularColor = specularFactor.rgb;',
    		].join( '\n' );

    		var uniforms = {
    			specular: { value: new Color().setHex( 0xffffff ) },
    			glossiness: { value: 1 },
    			specularMap: { value: null },
    			glossinessMap: { value: null }
    		};

    		this._extraUniforms = uniforms;

    		// please see #14031 or #13198 for an alternate approach
    		this.onBeforeCompile = function ( shader ) {

    			for ( var uniformName in uniforms ) {

    				shader.uniforms[ uniformName ] = uniforms[ uniformName ];

    			}

    			shader.fragmentShader = shader.fragmentShader.replace( 'uniform float roughness;', 'uniform vec3 specular;' );
    			shader.fragmentShader = shader.fragmentShader.replace( 'uniform float metalness;', 'uniform float glossiness;' );
    			shader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk );
    			shader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk );
    			shader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk );
    			shader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk );
    			shader.fragmentShader = shader.fragmentShader.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );

    		};

    		/*eslint-disable*/
    		Object.defineProperties(
    			this,
    			{
    				specular: {
    					get: function () { return uniforms.specular.value; },
    					set: function ( v ) { uniforms.specular.value = v; }
    				},
    				specularMap: {
    					get: function () { return uniforms.specularMap.value; },
    					set: function ( v ) { uniforms.specularMap.value = v; }
    				},
    				glossiness: {
    					get: function () { return uniforms.glossiness.value; },
    					set: function ( v ) { uniforms.glossiness.value = v; }
    				},
    				glossinessMap: {
    					get: function () { return uniforms.glossinessMap.value; },
    					set: function ( v ) {

    						uniforms.glossinessMap.value = v;
    						//how about something like this - @pailhead
    						if ( v ) {

    							this.defines.USE_GLOSSINESSMAP = '';
    							// set USE_ROUGHNESSMAP to enable vUv
    							this.defines.USE_ROUGHNESSMAP = '';

    						} else {

    							delete this.defines.USE_ROUGHNESSMAP;
    							delete this.defines.USE_GLOSSINESSMAP;

    						}

    					}
    				}
    			}
    		);

    		/*eslint-enable*/
    		delete this.metalness;
    		delete this.roughness;
    		delete this.metalnessMap;
    		delete this.roughnessMap;

    		this.setValues( params );

    	}

    	GLTFMeshStandardSGMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
    	GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;

    	GLTFMeshStandardSGMaterial.prototype.copy = function ( source ) {

    		MeshStandardMaterial.prototype.copy.call( this, source );
    		this.specularMap = source.specularMap;
    		this.specular.copy( source.specular );
    		this.glossinessMap = source.glossinessMap;
    		this.glossiness = source.glossiness;
    		delete this.metalness;
    		delete this.roughness;
    		delete this.metalnessMap;
    		delete this.roughnessMap;
    		return this;

    	};

    	function GLTFMaterialsPbrSpecularGlossinessExtension() {

    		return {

    			name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,

    			specularGlossinessParams: [
    				'color',
    				'map',
    				'lightMap',
    				'lightMapIntensity',
    				'aoMap',
    				'aoMapIntensity',
    				'emissive',
    				'emissiveIntensity',
    				'emissiveMap',
    				'bumpMap',
    				'bumpScale',
    				'normalMap',
    				'normalMapType',
    				'displacementMap',
    				'displacementScale',
    				'displacementBias',
    				'specularMap',
    				'specular',
    				'glossinessMap',
    				'glossiness',
    				'alphaMap',
    				'envMap',
    				'envMapIntensity',
    				'refractionRatio',
    			],

    			getMaterialType: function () {

    				return GLTFMeshStandardSGMaterial;

    			},

    			extendParams: function ( materialParams, materialDef, parser ) {

    				var pbrSpecularGlossiness = materialDef.extensions[ this.name ];

    				materialParams.color = new Color( 1.0, 1.0, 1.0 );
    				materialParams.opacity = 1.0;

    				var pending = [];

    				if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {

    					var array = pbrSpecularGlossiness.diffuseFactor;

    					materialParams.color.fromArray( array );
    					materialParams.opacity = array[ 3 ];

    				}

    				if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {

    					pending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );

    				}

    				materialParams.emissive = new Color( 0.0, 0.0, 0.0 );
    				materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
    				materialParams.specular = new Color( 1.0, 1.0, 1.0 );

    				if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {

    					materialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );

    				}

    				if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {

    					var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
    					pending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );
    					pending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );

    				}

    				return Promise.all( pending );

    			},

    			createMaterial: function ( materialParams ) {

    				var material = new GLTFMeshStandardSGMaterial( materialParams );
    				material.fog = true;

    				material.color = materialParams.color;

    				material.map = materialParams.map === undefined ? null : materialParams.map;

    				material.lightMap = null;
    				material.lightMapIntensity = 1.0;

    				material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;
    				material.aoMapIntensity = 1.0;

    				material.emissive = materialParams.emissive;
    				material.emissiveIntensity = 1.0;
    				material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;

    				material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;
    				material.bumpScale = 1;

    				material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;
    				material.normalMapType = TangentSpaceNormalMap;

    				if ( materialParams.normalScale ) material.normalScale = materialParams.normalScale;

    				material.displacementMap = null;
    				material.displacementScale = 1;
    				material.displacementBias = 0;

    				material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;
    				material.specular = materialParams.specular;

    				material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;
    				material.glossiness = materialParams.glossiness;

    				material.alphaMap = null;

    				material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;
    				material.envMapIntensity = 1.0;

    				material.refractionRatio = 0.98;

    				return material;

    			},

    		};

    	}

    	/**
    	 * Mesh Quantization Extension
    	 *
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization
    	 */
    	function GLTFMeshQuantizationExtension() {

    		this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;

    	}

    	/*********************************/
    	/********** INTERPOLATION ********/
    	/*********************************/

    	// Spline Interpolation
    	// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
    	function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

    		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

    	}

    	GLTFCubicSplineInterpolant.prototype = Object.create( Interpolant.prototype );
    	GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;

    	GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {

    		// Copies a sample value to the result buffer. See description of glTF
    		// CUBICSPLINE values layout in interpolate_() function below.

    		var result = this.resultBuffer,
    			values = this.sampleValues,
    			valueSize = this.valueSize,
    			offset = index * valueSize * 3 + valueSize;

    		for ( var i = 0; i !== valueSize; i ++ ) {

    			result[ i ] = values[ offset + i ];

    		}

    		return result;

    	};

    	GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

    	GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

    	GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {

    		var result = this.resultBuffer;
    		var values = this.sampleValues;
    		var stride = this.valueSize;

    		var stride2 = stride * 2;
    		var stride3 = stride * 3;

    		var td = t1 - t0;

    		var p = ( t - t0 ) / td;
    		var pp = p * p;
    		var ppp = pp * p;

    		var offset1 = i1 * stride3;
    		var offset0 = offset1 - stride3;

    		var s2 = - 2 * ppp + 3 * pp;
    		var s3 = ppp - pp;
    		var s0 = 1 - s2;
    		var s1 = s3 - pp + p;

    		// Layout of keyframe output values for CUBICSPLINE animations:
    		//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
    		for ( var i = 0; i !== stride; i ++ ) {

    			var p0 = values[ offset0 + i + stride ]; // splineVertex_k
    			var m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)
    			var p1 = values[ offset1 + i + stride ]; // splineVertex_k+1
    			var m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)

    			result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;

    		}

    		return result;

    	};

    	/*********************************/
    	/********** INTERNALS ************/
    	/*********************************/

    	/* CONSTANTS */

    	var WEBGL_CONSTANTS = {
    		FLOAT: 5126,
    		//FLOAT_MAT2: 35674,
    		FLOAT_MAT3: 35675,
    		FLOAT_MAT4: 35676,
    		FLOAT_VEC2: 35664,
    		FLOAT_VEC3: 35665,
    		FLOAT_VEC4: 35666,
    		LINEAR: 9729,
    		REPEAT: 10497,
    		SAMPLER_2D: 35678,
    		POINTS: 0,
    		LINES: 1,
    		LINE_LOOP: 2,
    		LINE_STRIP: 3,
    		TRIANGLES: 4,
    		TRIANGLE_STRIP: 5,
    		TRIANGLE_FAN: 6,
    		UNSIGNED_BYTE: 5121,
    		UNSIGNED_SHORT: 5123
    	};

    	var WEBGL_COMPONENT_TYPES = {
    		5120: Int8Array,
    		5121: Uint8Array,
    		5122: Int16Array,
    		5123: Uint16Array,
    		5125: Uint32Array,
    		5126: Float32Array
    	};

    	var WEBGL_FILTERS = {
    		9728: NearestFilter,
    		9729: LinearFilter,
    		9984: NearestMipmapNearestFilter,
    		9985: LinearMipmapNearestFilter,
    		9986: NearestMipmapLinearFilter,
    		9987: LinearMipmapLinearFilter
    	};

    	var WEBGL_WRAPPINGS = {
    		33071: ClampToEdgeWrapping,
    		33648: MirroredRepeatWrapping,
    		10497: RepeatWrapping
    	};

    	var WEBGL_TYPE_SIZES = {
    		'SCALAR': 1,
    		'VEC2': 2,
    		'VEC3': 3,
    		'VEC4': 4,
    		'MAT2': 4,
    		'MAT3': 9,
    		'MAT4': 16
    	};

    	var ATTRIBUTES = {
    		POSITION: 'position',
    		NORMAL: 'normal',
    		TANGENT: 'tangent',
    		TEXCOORD_0: 'uv',
    		TEXCOORD_1: 'uv2',
    		COLOR_0: 'color',
    		WEIGHTS_0: 'skinWeight',
    		JOINTS_0: 'skinIndex',
    	};

    	var PATH_PROPERTIES = {
    		scale: 'scale',
    		translation: 'position',
    		rotation: 'quaternion',
    		weights: 'morphTargetInfluences'
    	};

    	var INTERPOLATION = {
    		CUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each
    		                        // keyframe track will be initialized with a default interpolation type, then modified.
    		LINEAR: InterpolateLinear,
    		STEP: InterpolateDiscrete
    	};

    	var ALPHA_MODES = {
    		OPAQUE: 'OPAQUE',
    		MASK: 'MASK',
    		BLEND: 'BLEND'
    	};

    	var MIME_TYPE_FORMATS = {
    		'image/png': RGBAFormat,
    		'image/jpeg': RGBFormat
    	};

    	/* UTILITY FUNCTIONS */

    	function resolveURL( url, path ) {

    		// Invalid URL
    		if ( typeof url !== 'string' || url === '' ) return '';

    		// Host Relative URL
    		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {

    			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );

    		}

    		// Absolute URL http://,https://,//
    		if ( /^(https?:)?\/\//i.test( url ) ) return url;

    		// Data URI
    		if ( /^data:.*,.*$/i.test( url ) ) return url;

    		// Blob URL
    		if ( /^blob:.*$/i.test( url ) ) return url;

    		// Relative URL
    		return path + url;

    	}

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
    	 */
    	function createDefaultMaterial( cache ) {

    		if ( cache[ 'DefaultMaterial' ] === undefined ) {

    			cache[ 'DefaultMaterial' ] = new MeshStandardMaterial( {
    				color: 0xFFFFFF,
    				emissive: 0x000000,
    				metalness: 1,
    				roughness: 1,
    				transparent: false,
    				depthTest: true,
    				side: FrontSide
    			} );

    		}

    		return cache[ 'DefaultMaterial' ];

    	}

    	function addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {

    		// Add unknown glTF extensions to an object's userData.

    		for ( var name in objectDef.extensions ) {

    			if ( knownExtensions[ name ] === undefined ) {

    				object.userData.gltfExtensions = object.userData.gltfExtensions || {};
    				object.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];

    			}

    		}

    	}

    	/**
    	 * @param {Object3D|Material|BufferGeometry} object
    	 * @param {GLTF.definition} gltfDef
    	 */
    	function assignExtrasToUserData( object, gltfDef ) {

    		if ( gltfDef.extras !== undefined ) {

    			if ( typeof gltfDef.extras === 'object' ) {

    				Object.assign( object.userData, gltfDef.extras );

    			} else {

    				console.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );

    			}

    		}

    	}

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
    	 *
    	 * @param {BufferGeometry} geometry
    	 * @param {Array<GLTF.Target>} targets
    	 * @param {GLTFParser} parser
    	 * @return {Promise<BufferGeometry>}
    	 */
    	function addMorphTargets( geometry, targets, parser ) {

    		var hasMorphPosition = false;
    		var hasMorphNormal = false;

    		for ( var i = 0, il = targets.length; i < il; i ++ ) {

    			var target = targets[ i ];

    			if ( target.POSITION !== undefined ) hasMorphPosition = true;
    			if ( target.NORMAL !== undefined ) hasMorphNormal = true;

    			if ( hasMorphPosition && hasMorphNormal ) break;

    		}

    		if ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );

    		var pendingPositionAccessors = [];
    		var pendingNormalAccessors = [];

    		for ( var i = 0, il = targets.length; i < il; i ++ ) {

    			var target = targets[ i ];

    			if ( hasMorphPosition ) {

    				var pendingAccessor = target.POSITION !== undefined
    					? parser.getDependency( 'accessor', target.POSITION )
    					: geometry.attributes.position;

    				pendingPositionAccessors.push( pendingAccessor );

    			}

    			if ( hasMorphNormal ) {

    				var pendingAccessor = target.NORMAL !== undefined
    					? parser.getDependency( 'accessor', target.NORMAL )
    					: geometry.attributes.normal;

    				pendingNormalAccessors.push( pendingAccessor );

    			}

    		}

    		return Promise.all( [
    			Promise.all( pendingPositionAccessors ),
    			Promise.all( pendingNormalAccessors )
    		] ).then( function ( accessors ) {

    			var morphPositions = accessors[ 0 ];
    			var morphNormals = accessors[ 1 ];

    			if ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;
    			if ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;
    			geometry.morphTargetsRelative = true;

    			return geometry;

    		} );

    	}

    	/**
    	 * @param {Mesh} mesh
    	 * @param {GLTF.Mesh} meshDef
    	 */
    	function updateMorphTargets( mesh, meshDef ) {

    		mesh.updateMorphTargets();

    		if ( meshDef.weights !== undefined ) {

    			for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {

    				mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];

    			}

    		}

    		// .extras has user-defined data, so check that .extras.targetNames is an array.
    		if ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {

    			var targetNames = meshDef.extras.targetNames;

    			if ( mesh.morphTargetInfluences.length === targetNames.length ) {

    				mesh.morphTargetDictionary = {};

    				for ( var i = 0, il = targetNames.length; i < il; i ++ ) {

    					mesh.morphTargetDictionary[ targetNames[ i ] ] = i;

    				}

    			} else {

    				console.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );

    			}

    		}

    	}

    	function createPrimitiveKey( primitiveDef ) {

    		var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];
    		var geometryKey;

    		if ( dracoExtension ) {

    			geometryKey = 'draco:' + dracoExtension.bufferView
    				+ ':' + dracoExtension.indices
    				+ ':' + createAttributesKey( dracoExtension.attributes );

    		} else {

    			geometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;

    		}

    		return geometryKey;

    	}

    	function createAttributesKey( attributes ) {

    		var attributesKey = '';

    		var keys = Object.keys( attributes ).sort();

    		for ( var i = 0, il = keys.length; i < il; i ++ ) {

    			attributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';

    		}

    		return attributesKey;

    	}

    	/* GLTF PARSER */

    	function GLTFParser( json, options ) {

    		this.json = json || {};
    		this.extensions = {};
    		this.plugins = {};
    		this.options = options || {};

    		// loader object cache
    		this.cache = new GLTFRegistry();

    		// associations between Three.js objects and glTF elements
    		this.associations = new Map();

    		// BufferGeometry caching
    		this.primitiveCache = {};

    		// Object3D instance caches
    		this.meshCache = { refs: {}, uses: {} };
    		this.cameraCache = { refs: {}, uses: {} };
    		this.lightCache = { refs: {}, uses: {} };

    		// Use an ImageBitmapLoader if imageBitmaps are supported. Moves much of the
    		// expensive work of uploading a texture to the GPU off the main thread.
    		if ( typeof createImageBitmap !== 'undefined' && /Firefox/.test( navigator.userAgent ) === false ) {

    			this.textureLoader = new ImageBitmapLoader( this.options.manager );

    		} else {

    			this.textureLoader = new TextureLoader( this.options.manager );

    		}

    		this.textureLoader.setCrossOrigin( this.options.crossOrigin );

    		this.fileLoader = new FileLoader( this.options.manager );
    		this.fileLoader.setResponseType( 'arraybuffer' );

    		if ( this.options.crossOrigin === 'use-credentials' ) {

    			this.fileLoader.setWithCredentials( true );

    		}

    	}

    	GLTFParser.prototype.setExtensions = function ( extensions ) {

    		this.extensions = extensions;

    	};

    	GLTFParser.prototype.setPlugins = function ( plugins ) {

    		this.plugins = plugins;

    	};

    	GLTFParser.prototype.parse = function ( onLoad, onError ) {

    		var parser = this;
    		var json = this.json;
    		var extensions = this.extensions;

    		// Clear the loader cache
    		this.cache.removeAll();

    		// Mark the special nodes/meshes in json for efficient parse
    		this._markDefs();

    		Promise.all( [

    			this.getDependencies( 'scene' ),
    			this.getDependencies( 'animation' ),
    			this.getDependencies( 'camera' ),

    		] ).then( function ( dependencies ) {

    			var result = {
    				scene: dependencies[ 0 ][ json.scene || 0 ],
    				scenes: dependencies[ 0 ],
    				animations: dependencies[ 1 ],
    				cameras: dependencies[ 2 ],
    				asset: json.asset,
    				parser: parser,
    				userData: {}
    			};

    			addUnknownExtensionsToUserData( extensions, result, json );

    			assignExtrasToUserData( result, json );

    			onLoad( result );

    		} ).catch( onError );

    	};

    	/**
    	 * Marks the special nodes/meshes in json for efficient parse.
    	 */
    	GLTFParser.prototype._markDefs = function () {

    		var nodeDefs = this.json.nodes || [];
    		var skinDefs = this.json.skins || [];
    		var meshDefs = this.json.meshes || [];

    		// Nothing in the node definition indicates whether it is a Bone or an
    		// Object3D. Use the skins' joint references to mark bones.
    		for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {

    			var joints = skinDefs[ skinIndex ].joints;

    			for ( var i = 0, il = joints.length; i < il; i ++ ) {

    				nodeDefs[ joints[ i ] ].isBone = true;

    			}

    		}

    		// Iterate over all nodes, marking references to shared resources,
    		// as well as skeleton joints.
    		for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {

    			var nodeDef = nodeDefs[ nodeIndex ];

    			if ( nodeDef.mesh !== undefined ) {

    				this._addNodeRef( this.meshCache, nodeDef.mesh );

    				// Nothing in the mesh definition indicates whether it is
    				// a SkinnedMesh or Mesh. Use the node's mesh reference
    				// to mark SkinnedMesh if node has skin.
    				if ( nodeDef.skin !== undefined ) {

    					meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;

    				}

    			}

    			if ( nodeDef.camera !== undefined ) {

    				this._addNodeRef( this.cameraCache, nodeDef.camera );

    			}

    			if ( nodeDef.extensions
    				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]
    				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {

    				this._addNodeRef( this.lightCache, nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light );

    			}

    		}

    	};

    	/**
    	 * Counts references to shared node / Object3D resources. These resources
    	 * can be reused, or "instantiated", at multiple nodes in the scene
    	 * hierarchy. Mesh, Camera, and Light instances are instantiated and must
    	 * be marked. Non-scenegraph resources (like Materials, Geometries, and
    	 * Textures) can be reused directly and are not marked here.
    	 *
    	 * Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
    	 */
    	GLTFParser.prototype._addNodeRef = function ( cache, index ) {

    		if ( index === undefined ) return;

    		if ( cache.refs[ index ] === undefined ) {

    			cache.refs[ index ] = cache.uses[ index ] = 0;

    		}

    		cache.refs[ index ] ++;

    	};

    	/** Returns a reference to a shared resource, cloning it if necessary. */
    	GLTFParser.prototype._getNodeRef = function ( cache, index, object ) {

    		if ( cache.refs[ index ] <= 1 ) return object;

    		var ref = object.clone();

    		ref.name += '_instance_' + ( cache.uses[ index ] ++ );

    		return ref;

    	};

    	GLTFParser.prototype._invokeOne = function ( func ) {

    		var extensions = Object.values( this.plugins );
    		extensions.push( this );

    		for ( var i = 0; i < extensions.length; i ++ ) {

    			var result = func( extensions[ i ] );

    			if ( result ) return result;

    		}

    	};

    	GLTFParser.prototype._invokeAll = function ( func ) {

    		var extensions = Object.values( this.plugins );
    		extensions.unshift( this );

    		var pending = [];

    		for ( var i = 0; i < extensions.length; i ++ ) {

    			pending.push( func( extensions[ i ] ) );

    		}

    		return Promise.all( pending );

    	};

    	/**
    	 * Requests the specified dependency asynchronously, with caching.
    	 * @param {string} type
    	 * @param {number} index
    	 * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}
    	 */
    	GLTFParser.prototype.getDependency = function ( type, index ) {

    		var cacheKey = type + ':' + index;
    		var dependency = this.cache.get( cacheKey );

    		if ( ! dependency ) {

    			switch ( type ) {

    				case 'scene':
    					dependency = this.loadScene( index );
    					break;

    				case 'node':
    					dependency = this.loadNode( index );
    					break;

    				case 'mesh':
    					dependency = this._invokeOne( function ( ext ) {

    						return ext.loadMesh && ext.loadMesh( index );

    					} );
    					break;

    				case 'accessor':
    					dependency = this.loadAccessor( index );
    					break;

    				case 'bufferView':
    					dependency = this._invokeOne( function ( ext ) {

    						return ext.loadBufferView && ext.loadBufferView( index );

    					} );
    					break;

    				case 'buffer':
    					dependency = this.loadBuffer( index );
    					break;

    				case 'material':
    					dependency = this._invokeOne( function ( ext ) {

    						return ext.loadMaterial && ext.loadMaterial( index );

    					} );
    					break;

    				case 'texture':
    					dependency = this._invokeOne( function ( ext ) {

    						return ext.loadTexture && ext.loadTexture( index );

    					} );
    					break;

    				case 'skin':
    					dependency = this.loadSkin( index );
    					break;

    				case 'animation':
    					dependency = this.loadAnimation( index );
    					break;

    				case 'camera':
    					dependency = this.loadCamera( index );
    					break;

    				case 'light':
    					dependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );
    					break;

    				default:
    					throw new Error( 'Unknown type: ' + type );

    			}

    			this.cache.add( cacheKey, dependency );

    		}

    		return dependency;

    	};

    	/**
    	 * Requests all dependencies of the specified type asynchronously, with caching.
    	 * @param {string} type
    	 * @return {Promise<Array<Object>>}
    	 */
    	GLTFParser.prototype.getDependencies = function ( type ) {

    		var dependencies = this.cache.get( type );

    		if ( ! dependencies ) {

    			var parser = this;
    			var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];

    			dependencies = Promise.all( defs.map( function ( def, index ) {

    				return parser.getDependency( type, index );

    			} ) );

    			this.cache.add( type, dependencies );

    		}

    		return dependencies;

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
    	 * @param {number} bufferIndex
    	 * @return {Promise<ArrayBuffer>}
    	 */
    	GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {

    		var bufferDef = this.json.buffers[ bufferIndex ];
    		var loader = this.fileLoader;

    		if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {

    			throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );

    		}

    		// If present, GLB container is required to be the first buffer.
    		if ( bufferDef.uri === undefined && bufferIndex === 0 ) {

    			return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );

    		}

    		var options = this.options;

    		return new Promise( function ( resolve, reject ) {

    			loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {

    				reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );

    			} );

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
    	 * @param {number} bufferViewIndex
    	 * @return {Promise<ArrayBuffer>}
    	 */
    	GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {

    		var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];

    		return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {

    			var byteLength = bufferViewDef.byteLength || 0;
    			var byteOffset = bufferViewDef.byteOffset || 0;
    			return buffer.slice( byteOffset, byteOffset + byteLength );

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
    	 * @param {number} accessorIndex
    	 * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}
    	 */
    	GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {

    		var parser = this;
    		var json = this.json;

    		var accessorDef = this.json.accessors[ accessorIndex ];

    		if ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {

    			// Ignore empty accessors, which may be used to declare runtime
    			// information about attributes coming from another source (e.g. Draco
    			// compression extension).
    			return Promise.resolve( null );

    		}

    		var pendingBufferViews = [];

    		if ( accessorDef.bufferView !== undefined ) {

    			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );

    		} else {

    			pendingBufferViews.push( null );

    		}

    		if ( accessorDef.sparse !== undefined ) {

    			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
    			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );

    		}

    		return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {

    			var bufferView = bufferViews[ 0 ];

    			var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
    			var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

    			// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
    			var elementBytes = TypedArray.BYTES_PER_ELEMENT;
    			var itemBytes = elementBytes * itemSize;
    			var byteOffset = accessorDef.byteOffset || 0;
    			var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;
    			var normalized = accessorDef.normalized === true;
    			var array, bufferAttribute;

    			// The buffer is not interleaved if the stride is the item size in bytes.
    			if ( byteStride && byteStride !== itemBytes ) {

    				// Each "slice" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer
    				// This makes sure that IBA.count reflects accessor.count properly
    				var ibSlice = Math.floor( byteOffset / byteStride );
    				var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
    				var ib = parser.cache.get( ibCacheKey );

    				if ( ! ib ) {

    					array = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );

    					// Integer parameters to IB/IBA are in array elements, not bytes.
    					ib = new InterleavedBuffer( array, byteStride / elementBytes );

    					parser.cache.add( ibCacheKey, ib );

    				}

    				bufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );

    			} else {

    				if ( bufferView === null ) {

    					array = new TypedArray( accessorDef.count * itemSize );

    				} else {

    					array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );

    				}

    				bufferAttribute = new BufferAttribute( array, itemSize, normalized );

    			}

    			// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
    			if ( accessorDef.sparse !== undefined ) {

    				var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
    				var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];

    				var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
    				var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;

    				var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
    				var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );

    				if ( bufferView !== null ) {

    					// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
    					bufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );

    				}

    				for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {

    					var index = sparseIndices[ i ];

    					bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
    					if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
    					if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
    					if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
    					if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );

    				}

    			}

    			return bufferAttribute;

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
    	 * @param {number} textureIndex
    	 * @return {Promise<THREE.Texture>}
    	 */
    	GLTFParser.prototype.loadTexture = function ( textureIndex ) {

    		var parser = this;
    		var json = this.json;
    		var options = this.options;

    		var textureDef = json.textures[ textureIndex ];

    		var textureExtensions = textureDef.extensions || {};

    		var source;

    		if ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {

    			source = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];

    		} else {

    			source = json.images[ textureDef.source ];

    		}

    		var loader;

    		if ( source.uri ) {

    			loader = options.manager.getHandler( source.uri );

    		}

    		if ( ! loader ) {

    			loader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]
    				? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader
    				: this.textureLoader;

    		}

    		return this.loadTextureImage( textureIndex, source, loader );

    	};

    	GLTFParser.prototype.loadTextureImage = function ( textureIndex, source, loader ) {

    		var parser = this;
    		var json = this.json;
    		var options = this.options;

    		var textureDef = json.textures[ textureIndex ];

    		var URL = self.URL || self.webkitURL;

    		var sourceURI = source.uri;
    		var isObjectURL = false;

    		if ( source.bufferView !== undefined ) {

    			// Load binary image data from bufferView, if provided.

    			sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {

    				isObjectURL = true;
    				var blob = new Blob( [ bufferView ], { type: source.mimeType } );
    				sourceURI = URL.createObjectURL( blob );
    				return sourceURI;

    			} );

    		}

    		return Promise.resolve( sourceURI ).then( function ( sourceURI ) {

    			return new Promise( function ( resolve, reject ) {

    				var onLoad = resolve;

    				if ( loader.isImageBitmapLoader === true ) {

    					onLoad = function ( imageBitmap ) {

    						resolve( new CanvasTexture( imageBitmap ) );

    					};

    				}

    				loader.load( resolveURL( sourceURI, options.path ), onLoad, undefined, reject );

    			} );

    		} ).then( function ( texture ) {

    			// Clean up resources and configure Texture.

    			if ( isObjectURL === true ) {

    				URL.revokeObjectURL( sourceURI );

    			}

    			texture.flipY = false;

    			if ( textureDef.name ) texture.name = textureDef.name;

    			// Ignore unknown mime types, like DDS files.
    			if ( source.mimeType in MIME_TYPE_FORMATS ) {

    				texture.format = MIME_TYPE_FORMATS[ source.mimeType ];

    			}

    			var samplers = json.samplers || {};
    			var sampler = samplers[ textureDef.sampler ] || {};

    			texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;
    			texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;
    			texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;
    			texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;

    			parser.associations.set( texture, {
    				type: 'textures',
    				index: textureIndex
    			} );

    			return texture;

    		} );

    	};

    	/**
    	 * Asynchronously assigns a texture to the given material parameters.
    	 * @param {Object} materialParams
    	 * @param {string} mapName
    	 * @param {Object} mapDef
    	 * @return {Promise}
    	 */
    	GLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {

    		var parser = this;

    		return this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {

    			if ( ! texture.isCompressedTexture ) {

    				switch ( mapName ) {

    					case 'aoMap':
    					case 'emissiveMap':
    					case 'metalnessMap':
    					case 'normalMap':
    					case 'roughnessMap':
    						texture.format = RGBFormat;
    						break;

    				}

    			}

    			// Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured
    			// However, we will copy UV set 0 to UV set 1 on demand for aoMap
    			if ( mapDef.texCoord !== undefined && mapDef.texCoord != 0 && ! ( mapName === 'aoMap' && mapDef.texCoord == 1 ) ) {

    				console.warn( 'THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.' );

    			}

    			if ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {

    				var transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;

    				if ( transform ) {

    					var gltfReference = parser.associations.get( texture );
    					texture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );
    					parser.associations.set( texture, gltfReference );

    				}

    			}

    			materialParams[ mapName ] = texture;

    		} );

    	};

    	/**
    	 * Assigns final material to a Mesh, Line, or Points instance. The instance
    	 * already has a material (generated from the glTF material options alone)
    	 * but reuse of the same glTF material may require multiple threejs materials
    	 * to accomodate different primitive types, defines, etc. New materials will
    	 * be created if necessary, and reused from a cache.
    	 * @param  {Object3D} mesh Mesh, Line, or Points instance.
    	 */
    	GLTFParser.prototype.assignFinalMaterial = function ( mesh ) {

    		var geometry = mesh.geometry;
    		var material = mesh.material;

    		var useVertexTangents = geometry.attributes.tangent !== undefined;
    		var useVertexColors = geometry.attributes.color !== undefined;
    		var useFlatShading = geometry.attributes.normal === undefined;
    		var useSkinning = mesh.isSkinnedMesh === true;
    		var useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;
    		var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;

    		if ( mesh.isPoints ) {

    			var cacheKey = 'PointsMaterial:' + material.uuid;

    			var pointsMaterial = this.cache.get( cacheKey );

    			if ( ! pointsMaterial ) {

    				pointsMaterial = new PointsMaterial();
    				Material.prototype.copy.call( pointsMaterial, material );
    				pointsMaterial.color.copy( material.color );
    				pointsMaterial.map = material.map;
    				pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px

    				this.cache.add( cacheKey, pointsMaterial );

    			}

    			material = pointsMaterial;

    		} else if ( mesh.isLine ) {

    			var cacheKey = 'LineBasicMaterial:' + material.uuid;

    			var lineMaterial = this.cache.get( cacheKey );

    			if ( ! lineMaterial ) {

    				lineMaterial = new LineBasicMaterial();
    				Material.prototype.copy.call( lineMaterial, material );
    				lineMaterial.color.copy( material.color );

    				this.cache.add( cacheKey, lineMaterial );

    			}

    			material = lineMaterial;

    		}

    		// Clone the material if it will be modified
    		if ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {

    			var cacheKey = 'ClonedMaterial:' + material.uuid + ':';

    			if ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';
    			if ( useSkinning ) cacheKey += 'skinning:';
    			if ( useVertexTangents ) cacheKey += 'vertex-tangents:';
    			if ( useVertexColors ) cacheKey += 'vertex-colors:';
    			if ( useFlatShading ) cacheKey += 'flat-shading:';
    			if ( useMorphTargets ) cacheKey += 'morph-targets:';
    			if ( useMorphNormals ) cacheKey += 'morph-normals:';

    			var cachedMaterial = this.cache.get( cacheKey );

    			if ( ! cachedMaterial ) {

    				cachedMaterial = material.clone();

    				if ( useSkinning ) cachedMaterial.skinning = true;
    				if ( useVertexTangents ) cachedMaterial.vertexTangents = true;
    				if ( useVertexColors ) cachedMaterial.vertexColors = true;
    				if ( useFlatShading ) cachedMaterial.flatShading = true;
    				if ( useMorphTargets ) cachedMaterial.morphTargets = true;
    				if ( useMorphNormals ) cachedMaterial.morphNormals = true;

    				this.cache.add( cacheKey, cachedMaterial );

    				this.associations.set( cachedMaterial, this.associations.get( material ) );

    			}

    			material = cachedMaterial;

    		}

    		// workarounds for mesh and geometry

    		if ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {

    			geometry.setAttribute( 'uv2', geometry.attributes.uv );

    		}

    		// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995
    		if ( material.normalScale && ! useVertexTangents ) {

    			material.normalScale.y = - material.normalScale.y;

    		}

    		if ( material.clearcoatNormalScale && ! useVertexTangents ) {

    			material.clearcoatNormalScale.y = - material.clearcoatNormalScale.y;

    		}

    		mesh.material = material;

    	};

    	GLTFParser.prototype.getMaterialType = function ( /* materialIndex */ ) {

    		return MeshStandardMaterial;

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
    	 * @param {number} materialIndex
    	 * @return {Promise<Material>}
    	 */
    	GLTFParser.prototype.loadMaterial = function ( materialIndex ) {

    		var parser = this;
    		var json = this.json;
    		var extensions = this.extensions;
    		var materialDef = json.materials[ materialIndex ];

    		var materialType;
    		var materialParams = {};
    		var materialExtensions = materialDef.extensions || {};

    		var pending = [];

    		if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {

    			var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
    			materialType = sgExtension.getMaterialType();
    			pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );

    		} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {

    			var kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];
    			materialType = kmuExtension.getMaterialType();
    			pending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );

    		} else {

    			// Specification:
    			// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material

    			var metallicRoughness = materialDef.pbrMetallicRoughness || {};

    			materialParams.color = new Color( 1.0, 1.0, 1.0 );
    			materialParams.opacity = 1.0;

    			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

    				var array = metallicRoughness.baseColorFactor;

    				materialParams.color.fromArray( array );
    				materialParams.opacity = array[ 3 ];

    			}

    			if ( metallicRoughness.baseColorTexture !== undefined ) {

    				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

    			}

    			materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
    			materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;

    			if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {

    				pending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );
    				pending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );

    			}

    			materialType = this._invokeOne( function ( ext ) {

    				return ext.getMaterialType && ext.getMaterialType( materialIndex );

    			} );

    			pending.push( this._invokeAll( function ( ext ) {

    				return ext.extendMaterialParams && ext.extendMaterialParams( materialIndex, materialParams );

    			} ) );

    		}

    		if ( materialDef.doubleSided === true ) {

    			materialParams.side = DoubleSide;

    		}

    		var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;

    		if ( alphaMode === ALPHA_MODES.BLEND ) {

    			materialParams.transparent = true;

    			// See: https://github.com/mrdoob/three.js/issues/17706
    			materialParams.depthWrite = false;

    		} else {

    			materialParams.transparent = false;

    			if ( alphaMode === ALPHA_MODES.MASK ) {

    				materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;

    			}

    		}

    		if ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {

    			pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );

    			materialParams.normalScale = new Vector2( 1, 1 );

    			if ( materialDef.normalTexture.scale !== undefined ) {

    				materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );

    			}

    		}

    		if ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {

    			pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );

    			if ( materialDef.occlusionTexture.strength !== undefined ) {

    				materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;

    			}

    		}

    		if ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {

    			materialParams.emissive = new Color().fromArray( materialDef.emissiveFactor );

    		}

    		if ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {

    			pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );

    		}

    		return Promise.all( pending ).then( function () {

    			var material;

    			if ( materialType === GLTFMeshStandardSGMaterial ) {

    				material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );

    			} else {

    				material = new materialType( materialParams );

    			}

    			if ( materialDef.name ) material.name = materialDef.name;

    			// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.
    			if ( material.map ) material.map.encoding = sRGBEncoding;
    			if ( material.emissiveMap ) material.emissiveMap.encoding = sRGBEncoding;

    			assignExtrasToUserData( material, materialDef );

    			parser.associations.set( material, { type: 'materials', index: materialIndex } );

    			if ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );

    			return material;

    		} );

    	};

    	/**
    	 * @param {BufferGeometry} geometry
    	 * @param {GLTF.Primitive} primitiveDef
    	 * @param {GLTFParser} parser
    	 */
    	function computeBounds( geometry, primitiveDef, parser ) {

    		var attributes = primitiveDef.attributes;

    		var box = new Box3();

    		if ( attributes.POSITION !== undefined ) {

    			var accessor = parser.json.accessors[ attributes.POSITION ];

    			var min = accessor.min;
    			var max = accessor.max;

    			// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.

    			if ( min !== undefined && max !== undefined ) {

    				box.set(
    					new Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),
    					new Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );

    			} else {

    				console.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );

    				return;

    			}

    		} else {

    			return;

    		}

    		var targets = primitiveDef.targets;

    		if ( targets !== undefined ) {

    			var maxDisplacement = new Vector3();
    			var vector = new Vector3();

    			for ( var i = 0, il = targets.length; i < il; i ++ ) {

    				var target = targets[ i ];

    				if ( target.POSITION !== undefined ) {

    					var accessor = parser.json.accessors[ target.POSITION ];
    					var min = accessor.min;
    					var max = accessor.max;

    					// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.

    					if ( min !== undefined && max !== undefined ) {

    						// we need to get max of absolute components because target weight is [-1,1]
    						vector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );
    						vector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );
    						vector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );

    						// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative
    						// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets
    						// are used to implement key-frame animations and as such only two are active at a time - this results in very large
    						// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.
    						maxDisplacement.max( vector );

    					} else {

    						console.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );

    					}

    				}

    			}

    			// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.
    			box.expandByVector( maxDisplacement );

    		}

    		geometry.boundingBox = box;

    		var sphere = new Sphere();

    		box.getCenter( sphere.center );
    		sphere.radius = box.min.distanceTo( box.max ) / 2;

    		geometry.boundingSphere = sphere;

    	}

    	/**
    	 * @param {BufferGeometry} geometry
    	 * @param {GLTF.Primitive} primitiveDef
    	 * @param {GLTFParser} parser
    	 * @return {Promise<BufferGeometry>}
    	 */
    	function addPrimitiveAttributes( geometry, primitiveDef, parser ) {

    		var attributes = primitiveDef.attributes;

    		var pending = [];

    		function assignAttributeAccessor( accessorIndex, attributeName ) {

    			return parser.getDependency( 'accessor', accessorIndex )
    				.then( function ( accessor ) {

    					geometry.setAttribute( attributeName, accessor );

    				} );

    		}

    		for ( var gltfAttributeName in attributes ) {

    			var threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();

    			// Skip attributes already provided by e.g. Draco extension.
    			if ( threeAttributeName in geometry.attributes ) continue;

    			pending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );

    		}

    		if ( primitiveDef.indices !== undefined && ! geometry.index ) {

    			var accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {

    				geometry.setIndex( accessor );

    			} );

    			pending.push( accessor );

    		}

    		assignExtrasToUserData( geometry, primitiveDef );

    		computeBounds( geometry, primitiveDef, parser );

    		return Promise.all( pending ).then( function () {

    			return primitiveDef.targets !== undefined
    				? addMorphTargets( geometry, primitiveDef.targets, parser )
    				: geometry;

    		} );

    	}

    	/**
    	 * @param {BufferGeometry} geometry
    	 * @param {Number} drawMode
    	 * @return {BufferGeometry}
    	 */
    	function toTrianglesDrawMode( geometry, drawMode ) {

    		var index = geometry.getIndex();

    		// generate index if not present

    		if ( index === null ) {

    			var indices = [];

    			var position = geometry.getAttribute( 'position' );

    			if ( position !== undefined ) {

    				for ( var i = 0; i < position.count; i ++ ) {

    					indices.push( i );

    				}

    				geometry.setIndex( indices );
    				index = geometry.getIndex();

    			} else {

    				console.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );
    				return geometry;

    			}

    		}

    		//

    		var numberOfTriangles = index.count - 2;
    		var newIndices = [];

    		if ( drawMode === TriangleFanDrawMode ) {

    			// gl.TRIANGLE_FAN

    			for ( var i = 1; i <= numberOfTriangles; i ++ ) {

    				newIndices.push( index.getX( 0 ) );
    				newIndices.push( index.getX( i ) );
    				newIndices.push( index.getX( i + 1 ) );

    			}

    		} else {

    			// gl.TRIANGLE_STRIP

    			for ( var i = 0; i < numberOfTriangles; i ++ ) {

    				if ( i % 2 === 0 ) {

    					newIndices.push( index.getX( i ) );
    					newIndices.push( index.getX( i + 1 ) );
    					newIndices.push( index.getX( i + 2 ) );


    				} else {

    					newIndices.push( index.getX( i + 2 ) );
    					newIndices.push( index.getX( i + 1 ) );
    					newIndices.push( index.getX( i ) );

    				}

    			}

    		}

    		if ( ( newIndices.length / 3 ) !== numberOfTriangles ) {

    			console.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );

    		}

    		// build final geometry

    		var newGeometry = geometry.clone();
    		newGeometry.setIndex( newIndices );

    		return newGeometry;

    	}

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
    	 *
    	 * Creates BufferGeometries from primitives.
    	 *
    	 * @param {Array<GLTF.Primitive>} primitives
    	 * @return {Promise<Array<BufferGeometry>>}
    	 */
    	GLTFParser.prototype.loadGeometries = function ( primitives ) {

    		var parser = this;
    		var extensions = this.extensions;
    		var cache = this.primitiveCache;

    		function createDracoPrimitive( primitive ) {

    			return extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]
    				.decodePrimitive( primitive, parser )
    				.then( function ( geometry ) {

    					return addPrimitiveAttributes( geometry, primitive, parser );

    				} );

    		}

    		var pending = [];

    		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

    			var primitive = primitives[ i ];
    			var cacheKey = createPrimitiveKey( primitive );

    			// See if we've already created this geometry
    			var cached = cache[ cacheKey ];

    			if ( cached ) {

    				// Use the cached geometry if it exists
    				pending.push( cached.promise );

    			} else {

    				var geometryPromise;

    				if ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {

    					// Use DRACO geometry if available
    					geometryPromise = createDracoPrimitive( primitive );

    				} else {

    					// Otherwise create a new geometry
    					geometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );

    				}

    				// Cache this geometry
    				cache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };

    				pending.push( geometryPromise );

    			}

    		}

    		return Promise.all( pending );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
    	 * @param {number} meshIndex
    	 * @return {Promise<Group|Mesh|SkinnedMesh>}
    	 */
    	GLTFParser.prototype.loadMesh = function ( meshIndex ) {

    		var parser = this;
    		var json = this.json;

    		var meshDef = json.meshes[ meshIndex ];
    		var primitives = meshDef.primitives;

    		var pending = [];

    		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

    			var material = primitives[ i ].material === undefined
    				? createDefaultMaterial( this.cache )
    				: this.getDependency( 'material', primitives[ i ].material );

    			pending.push( material );

    		}

    		pending.push( parser.loadGeometries( primitives ) );

    		return Promise.all( pending ).then( function ( results ) {

    			var materials = results.slice( 0, results.length - 1 );
    			var geometries = results[ results.length - 1 ];

    			var meshes = [];

    			for ( var i = 0, il = geometries.length; i < il; i ++ ) {

    				var geometry = geometries[ i ];
    				var primitive = primitives[ i ];

    				// 1. create Mesh

    				var mesh;

    				var material = materials[ i ];

    				if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
    					primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
    					primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
    					primitive.mode === undefined ) {

    					// .isSkinnedMesh isn't in glTF spec. See ._markDefs()
    					mesh = meshDef.isSkinnedMesh === true
    						? new SkinnedMesh( geometry, material )
    						: new Mesh( geometry, material );

    					if ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {

    						// we normalize floating point skin weight array to fix malformed assets (see #15319)
    						// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs
    						mesh.normalizeSkinWeights();

    					}

    					if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {

    						mesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleStripDrawMode );

    					} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {

    						mesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleFanDrawMode );

    					}

    				} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {

    					mesh = new LineSegments( geometry, material );

    				} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {

    					mesh = new Line( geometry, material );

    				} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {

    					mesh = new LineLoop( geometry, material );

    				} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {

    					mesh = new Points( geometry, material );

    				} else {

    					throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );

    				}

    				if ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {

    					updateMorphTargets( mesh, meshDef );

    				}

    				mesh.name = meshDef.name || ( 'mesh_' + meshIndex );

    				if ( geometries.length > 1 ) mesh.name += '_' + i;

    				assignExtrasToUserData( mesh, meshDef );

    				parser.assignFinalMaterial( mesh );

    				meshes.push( mesh );

    			}

    			if ( meshes.length === 1 ) {

    				return meshes[ 0 ];

    			}

    			var group = new Group();

    			for ( var i = 0, il = meshes.length; i < il; i ++ ) {

    				group.add( meshes[ i ] );

    			}

    			return group;

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
    	 * @param {number} cameraIndex
    	 * @return {Promise<THREE.Camera>}
    	 */
    	GLTFParser.prototype.loadCamera = function ( cameraIndex ) {

    		var camera;
    		var cameraDef = this.json.cameras[ cameraIndex ];
    		var params = cameraDef[ cameraDef.type ];

    		if ( ! params ) {

    			console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
    			return;

    		}

    		if ( cameraDef.type === 'perspective' ) {

    			camera = new PerspectiveCamera( MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );

    		} else if ( cameraDef.type === 'orthographic' ) {

    			camera = new OrthographicCamera( - params.xmag, params.xmag, params.ymag, - params.ymag, params.znear, params.zfar );

    		}

    		if ( cameraDef.name ) camera.name = cameraDef.name;

    		assignExtrasToUserData( camera, cameraDef );

    		return Promise.resolve( camera );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
    	 * @param {number} skinIndex
    	 * @return {Promise<Object>}
    	 */
    	GLTFParser.prototype.loadSkin = function ( skinIndex ) {

    		var skinDef = this.json.skins[ skinIndex ];

    		var skinEntry = { joints: skinDef.joints };

    		if ( skinDef.inverseBindMatrices === undefined ) {

    			return Promise.resolve( skinEntry );

    		}

    		return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {

    			skinEntry.inverseBindMatrices = accessor;

    			return skinEntry;

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
    	 * @param {number} animationIndex
    	 * @return {Promise<AnimationClip>}
    	 */
    	GLTFParser.prototype.loadAnimation = function ( animationIndex ) {

    		var json = this.json;

    		var animationDef = json.animations[ animationIndex ];

    		var pendingNodes = [];
    		var pendingInputAccessors = [];
    		var pendingOutputAccessors = [];
    		var pendingSamplers = [];
    		var pendingTargets = [];

    		for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {

    			var channel = animationDef.channels[ i ];
    			var sampler = animationDef.samplers[ channel.sampler ];
    			var target = channel.target;
    			var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.
    			var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
    			var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;

    			pendingNodes.push( this.getDependency( 'node', name ) );
    			pendingInputAccessors.push( this.getDependency( 'accessor', input ) );
    			pendingOutputAccessors.push( this.getDependency( 'accessor', output ) );
    			pendingSamplers.push( sampler );
    			pendingTargets.push( target );

    		}

    		return Promise.all( [

    			Promise.all( pendingNodes ),
    			Promise.all( pendingInputAccessors ),
    			Promise.all( pendingOutputAccessors ),
    			Promise.all( pendingSamplers ),
    			Promise.all( pendingTargets )

    		] ).then( function ( dependencies ) {

    			var nodes = dependencies[ 0 ];
    			var inputAccessors = dependencies[ 1 ];
    			var outputAccessors = dependencies[ 2 ];
    			var samplers = dependencies[ 3 ];
    			var targets = dependencies[ 4 ];

    			var tracks = [];

    			for ( var i = 0, il = nodes.length; i < il; i ++ ) {

    				var node = nodes[ i ];
    				var inputAccessor = inputAccessors[ i ];
    				var outputAccessor = outputAccessors[ i ];
    				var sampler = samplers[ i ];
    				var target = targets[ i ];

    				if ( node === undefined ) continue;

    				node.updateMatrix();
    				node.matrixAutoUpdate = true;

    				var TypedKeyframeTrack;

    				switch ( PATH_PROPERTIES[ target.path ] ) {

    					case PATH_PROPERTIES.weights:

    						TypedKeyframeTrack = NumberKeyframeTrack;
    						break;

    					case PATH_PROPERTIES.rotation:

    						TypedKeyframeTrack = QuaternionKeyframeTrack;
    						break;

    					case PATH_PROPERTIES.position:
    					case PATH_PROPERTIES.scale:
    					default:

    						TypedKeyframeTrack = VectorKeyframeTrack;
    						break;

    				}

    				var targetName = node.name ? node.name : node.uuid;

    				var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;

    				var targetNames = [];

    				if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {

    					// Node may be a Group (glTF mesh with several primitives) or a Mesh.
    					node.traverse( function ( object ) {

    						if ( object.isMesh === true && object.morphTargetInfluences ) {

    							targetNames.push( object.name ? object.name : object.uuid );

    						}

    					} );

    				} else {

    					targetNames.push( targetName );

    				}

    				var outputArray = outputAccessor.array;

    				if ( outputAccessor.normalized ) {

    					var scale;

    					if ( outputArray.constructor === Int8Array ) {

    						scale = 1 / 127;

    					} else if ( outputArray.constructor === Uint8Array ) {

    						scale = 1 / 255;

    					} else if ( outputArray.constructor == Int16Array ) {

    						scale = 1 / 32767;

    					} else if ( outputArray.constructor === Uint16Array ) {

    						scale = 1 / 65535;

    					} else {

    						throw new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );

    					}

    					var scaled = new Float32Array( outputArray.length );

    					for ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {

    						scaled[ j ] = outputArray[ j ] * scale;

    					}

    					outputArray = scaled;

    				}

    				for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {

    					var track = new TypedKeyframeTrack(
    						targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
    						inputAccessor.array,
    						outputArray,
    						interpolation
    					);

    					// Override interpolation with custom factory method.
    					if ( sampler.interpolation === 'CUBICSPLINE' ) {

    						track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {

    							// A CUBICSPLINE keyframe in glTF has three output values for each input value,
    							// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
    							// must be divided by three to get the interpolant's sampleSize argument.

    							return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );

    						};

    						// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.
    						track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;

    					}

    					tracks.push( track );

    				}

    			}

    			var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;

    			return new AnimationClip( name, undefined, tracks );

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
    	 * @param {number} nodeIndex
    	 * @return {Promise<Object3D>}
    	 */
    	GLTFParser.prototype.loadNode = function ( nodeIndex ) {

    		var json = this.json;
    		var extensions = this.extensions;
    		var parser = this;

    		var nodeDef = json.nodes[ nodeIndex ];

    		return ( function () {

    			var pending = [];

    			if ( nodeDef.mesh !== undefined ) {

    				pending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {

    					var node = parser._getNodeRef( parser.meshCache, nodeDef.mesh, mesh );

    					// if weights are provided on the node, override weights on the mesh.
    					if ( nodeDef.weights !== undefined ) {

    						node.traverse( function ( o ) {

    							if ( ! o.isMesh ) return;

    							for ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {

    								o.morphTargetInfluences[ i ] = nodeDef.weights[ i ];

    							}

    						} );

    					}

    					return node;

    				} ) );

    			}

    			if ( nodeDef.camera !== undefined ) {

    				pending.push( parser.getDependency( 'camera', nodeDef.camera ).then( function ( camera ) {

    					return parser._getNodeRef( parser.cameraCache, nodeDef.camera, camera );

    				} ) );

    			}

    			if ( nodeDef.extensions
    				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]
    				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {

    				var lightIndex = nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light;

    				pending.push( parser.getDependency( 'light', lightIndex ).then( function ( light ) {

    					return parser._getNodeRef( parser.lightCache, lightIndex, light );

    				} ) );

    			}

    			return Promise.all( pending );

    		}() ).then( function ( objects ) {

    			var node;

    			// .isBone isn't in glTF spec. See ._markDefs
    			if ( nodeDef.isBone === true ) {

    				node = new Bone();

    			} else if ( objects.length > 1 ) {

    				node = new Group();

    			} else if ( objects.length === 1 ) {

    				node = objects[ 0 ];

    			} else {

    				node = new Object3D();

    			}

    			if ( node !== objects[ 0 ] ) {

    				for ( var i = 0, il = objects.length; i < il; i ++ ) {

    					node.add( objects[ i ] );

    				}

    			}

    			if ( nodeDef.name ) {

    				node.userData.name = nodeDef.name;
    				node.name = PropertyBinding.sanitizeNodeName( nodeDef.name );

    			}

    			assignExtrasToUserData( node, nodeDef );

    			if ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );

    			if ( nodeDef.matrix !== undefined ) {

    				var matrix = new Matrix4();
    				matrix.fromArray( nodeDef.matrix );
    				node.applyMatrix4( matrix );

    			} else {

    				if ( nodeDef.translation !== undefined ) {

    					node.position.fromArray( nodeDef.translation );

    				}

    				if ( nodeDef.rotation !== undefined ) {

    					node.quaternion.fromArray( nodeDef.rotation );

    				}

    				if ( nodeDef.scale !== undefined ) {

    					node.scale.fromArray( nodeDef.scale );

    				}

    			}

    			parser.associations.set( node, { type: 'nodes', index: nodeIndex } );

    			return node;

    		} );

    	};

    	/**
    	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
    	 * @param {number} sceneIndex
    	 * @return {Promise<Group>}
    	 */
    	GLTFParser.prototype.loadScene = function () {

    		// scene node hierachy builder

    		function buildNodeHierachy( nodeId, parentObject, json, parser ) {

    			var nodeDef = json.nodes[ nodeId ];

    			return parser.getDependency( 'node', nodeId ).then( function ( node ) {

    				if ( nodeDef.skin === undefined ) return node;

    				// build skeleton here as well

    				var skinEntry;

    				return parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {

    					skinEntry = skin;

    					var pendingJoints = [];

    					for ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {

    						pendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );

    					}

    					return Promise.all( pendingJoints );

    				} ).then( function ( jointNodes ) {

    					node.traverse( function ( mesh ) {

    						if ( ! mesh.isMesh ) return;

    						var bones = [];
    						var boneInverses = [];

    						for ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {

    							var jointNode = jointNodes[ j ];

    							if ( jointNode ) {

    								bones.push( jointNode );

    								var mat = new Matrix4();

    								if ( skinEntry.inverseBindMatrices !== undefined ) {

    									mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );

    								}

    								boneInverses.push( mat );

    							} else {

    								console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[ j ] );

    							}

    						}

    						mesh.bind( new Skeleton( bones, boneInverses ), mesh.matrixWorld );

    					} );

    					return node;

    				} );

    			} ).then( function ( node ) {

    				// build node hierachy

    				parentObject.add( node );

    				var pending = [];

    				if ( nodeDef.children ) {

    					var children = nodeDef.children;

    					for ( var i = 0, il = children.length; i < il; i ++ ) {

    						var child = children[ i ];
    						pending.push( buildNodeHierachy( child, node, json, parser ) );

    					}

    				}

    				return Promise.all( pending );

    			} );

    		}

    		return function loadScene( sceneIndex ) {

    			var json = this.json;
    			var extensions = this.extensions;
    			var sceneDef = this.json.scenes[ sceneIndex ];
    			var parser = this;

    			// Loader returns Group, not Scene.
    			// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172
    			var scene = new Group();
    			if ( sceneDef.name ) scene.name = sceneDef.name;

    			assignExtrasToUserData( scene, sceneDef );

    			if ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );

    			var nodeIds = sceneDef.nodes || [];

    			var pending = [];

    			for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {

    				pending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );

    			}

    			return Promise.all( pending ).then( function () {

    				return scene;

    			} );

    		};

    	}();

    	return GLTFLoader;

    }) )();

    var DRACOLoader = function ( manager ) {

    	Loader.call( this, manager );

    	this.decoderPath = '';
    	this.decoderConfig = {};
    	this.decoderBinary = null;
    	this.decoderPending = null;

    	this.workerLimit = 4;
    	this.workerPool = [];
    	this.workerNextTaskID = 1;
    	this.workerSourceURL = '';

    	this.defaultAttributeIDs = {
    		position: 'POSITION',
    		normal: 'NORMAL',
    		color: 'COLOR',
    		uv: 'TEX_COORD'
    	};
    	this.defaultAttributeTypes = {
    		position: 'Float32Array',
    		normal: 'Float32Array',
    		color: 'Float32Array',
    		uv: 'Float32Array'
    	};

    };

    DRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

    	constructor: DRACOLoader,

    	setDecoderPath: function ( path ) {

    		this.decoderPath = path;

    		return this;

    	},

    	setDecoderConfig: function ( config ) {

    		this.decoderConfig = config;

    		return this;

    	},

    	setWorkerLimit: function ( workerLimit ) {

    		this.workerLimit = workerLimit;

    		return this;

    	},

    	/** @deprecated */
    	setVerbosity: function () {

    		console.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );

    	},

    	/** @deprecated */
    	setDrawMode: function () {

    		console.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );

    	},

    	/** @deprecated */
    	setSkipDequantization: function () {

    		console.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );

    	},

    	load: function ( url, onLoad, onProgress, onError ) {

    		var loader = new FileLoader( this.manager );

    		loader.setPath( this.path );
    		loader.setResponseType( 'arraybuffer' );
    		loader.setRequestHeader( this.requestHeader );

    		if ( this.crossOrigin === 'use-credentials' ) {

    			loader.setWithCredentials( true );

    		}

    		loader.load( url, ( buffer ) => {

    			var taskConfig = {
    				attributeIDs: this.defaultAttributeIDs,
    				attributeTypes: this.defaultAttributeTypes,
    				useUniqueIDs: false
    			};

    			this.decodeGeometry( buffer, taskConfig )
    				.then( onLoad )
    				.catch( onError );

    		}, onProgress, onError );

    	},

    	/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */
    	decodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {

    		var taskConfig = {
    			attributeIDs: attributeIDs || this.defaultAttributeIDs,
    			attributeTypes: attributeTypes || this.defaultAttributeTypes,
    			useUniqueIDs: !! attributeIDs
    		};

    		this.decodeGeometry( buffer, taskConfig ).then( callback );

    	},

    	decodeGeometry: function ( buffer, taskConfig ) {

    		// TODO: For backward-compatibility, support 'attributeTypes' objects containing
    		// references (rather than names) to typed array constructors. These must be
    		// serialized before sending them to the worker.
    		for ( var attribute in taskConfig.attributeTypes ) {

    			var type = taskConfig.attributeTypes[ attribute ];

    			if ( type.BYTES_PER_ELEMENT !== undefined ) {

    				taskConfig.attributeTypes[ attribute ] = type.name;

    			}

    		}

    		//

    		var taskKey = JSON.stringify( taskConfig );

    		// Check for an existing task using this buffer. A transferred buffer cannot be transferred
    		// again from this thread.
    		if ( DRACOLoader.taskCache.has( buffer ) ) {

    			var cachedTask = DRACOLoader.taskCache.get( buffer );

    			if ( cachedTask.key === taskKey ) {

    				return cachedTask.promise;

    			} else if ( buffer.byteLength === 0 ) {

    				// Technically, it would be possible to wait for the previous task to complete,
    				// transfer the buffer back, and decode again with the second configuration. That
    				// is complex, and I don't know of any reason to decode a Draco buffer twice in
    				// different ways, so this is left unimplemented.
    				throw new Error(

    					'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +
    					'settings. Buffer has already been transferred.'

    				);

    			}

    		}

    		//

    		var worker;
    		var taskID = this.workerNextTaskID ++;
    		var taskCost = buffer.byteLength;

    		// Obtain a worker and assign a task, and construct a geometry instance
    		// when the task completes.
    		var geometryPending = this._getWorker( taskID, taskCost )
    			.then( ( _worker ) => {

    				worker = _worker;

    				return new Promise( ( resolve, reject ) => {

    					worker._callbacks[ taskID ] = { resolve, reject };

    					worker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );

    					// this.debug();

    				} );

    			} )
    			.then( ( message ) => this._createGeometry( message.geometry ) );

    		// Remove task from the task list.
    		// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)
    		geometryPending
    			.catch( () => true )
    			.then( () => {

    				if ( worker && taskID ) {

    					this._releaseTask( worker, taskID );

    					// this.debug();

    				}

    			} );

    		// Cache the task result.
    		DRACOLoader.taskCache.set( buffer, {

    			key: taskKey,
    			promise: geometryPending

    		} );

    		return geometryPending;

    	},

    	_createGeometry: function ( geometryData ) {

    		var geometry = new BufferGeometry();

    		if ( geometryData.index ) {

    			geometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );

    		}

    		for ( var i = 0; i < geometryData.attributes.length; i ++ ) {

    			var attribute = geometryData.attributes[ i ];
    			var name = attribute.name;
    			var array = attribute.array;
    			var itemSize = attribute.itemSize;

    			geometry.setAttribute( name, new BufferAttribute( array, itemSize ) );

    		}

    		return geometry;

    	},

    	_loadLibrary: function ( url, responseType ) {

    		var loader = new FileLoader( this.manager );
    		loader.setPath( this.decoderPath );
    		loader.setResponseType( responseType );

    		return new Promise( ( resolve, reject ) => {

    			loader.load( url, resolve, undefined, reject );

    		} );

    	},

    	preload: function () {

    		this._initDecoder();

    		return this;

    	},

    	_initDecoder: function () {

    		if ( this.decoderPending ) return this.decoderPending;

    		var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';
    		var librariesPending = [];

    		if ( useJS ) {

    			librariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );

    		} else {

    			librariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );
    			librariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );

    		}

    		this.decoderPending = Promise.all( librariesPending )
    			.then( ( libraries ) => {

    				var jsContent = libraries[ 0 ];

    				if ( ! useJS ) {

    					this.decoderConfig.wasmBinary = libraries[ 1 ];

    				}

    				var fn = DRACOLoader.DRACOWorker.toString();

    				var body = [
    					'/* draco decoder */',
    					jsContent,
    					'',
    					'/* worker */',
    					fn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )
    				].join( '\n' );

    				this.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );

    			} );

    		return this.decoderPending;

    	},

    	_getWorker: function ( taskID, taskCost ) {

    		return this._initDecoder().then( () => {

    			if ( this.workerPool.length < this.workerLimit ) {

    				var worker = new Worker( this.workerSourceURL );

    				worker._callbacks = {};
    				worker._taskCosts = {};
    				worker._taskLoad = 0;

    				worker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );

    				worker.onmessage = function ( e ) {

    					var message = e.data;

    					switch ( message.type ) {

    						case 'decode':
    							worker._callbacks[ message.id ].resolve( message );
    							break;

    						case 'error':
    							worker._callbacks[ message.id ].reject( message );
    							break;

    						default:
    							console.error( 'THREE.DRACOLoader: Unexpected message, "' + message.type + '"' );

    					}

    				};

    				this.workerPool.push( worker );

    			} else {

    				this.workerPool.sort( function ( a, b ) {

    					return a._taskLoad > b._taskLoad ? - 1 : 1;

    				} );

    			}

    			var worker = this.workerPool[ this.workerPool.length - 1 ];
    			worker._taskCosts[ taskID ] = taskCost;
    			worker._taskLoad += taskCost;
    			return worker;

    		} );

    	},

    	_releaseTask: function ( worker, taskID ) {

    		worker._taskLoad -= worker._taskCosts[ taskID ];
    		delete worker._callbacks[ taskID ];
    		delete worker._taskCosts[ taskID ];

    	},

    	debug: function () {

    		console.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );

    	},

    	dispose: function () {

    		for ( var i = 0; i < this.workerPool.length; ++ i ) {

    			this.workerPool[ i ].terminate();

    		}

    		this.workerPool.length = 0;

    		return this;

    	}

    } );

    /* WEB WORKER */

    DRACOLoader.DRACOWorker = function () {

    	var decoderConfig;
    	var decoderPending;

    	onmessage = function ( e ) {

    		var message = e.data;

    		switch ( message.type ) {

    			case 'init':
    				decoderConfig = message.decoderConfig;
    				decoderPending = new Promise( function ( resolve/*, reject*/ ) {

    					decoderConfig.onModuleLoaded = function ( draco ) {

    						// Module is Promise-like. Wrap before resolving to avoid loop.
    						resolve( { draco: draco } );

    					};

    					DracoDecoderModule( decoderConfig );

    				} );
    				break;

    			case 'decode':
    				var buffer = message.buffer;
    				var taskConfig = message.taskConfig;
    				decoderPending.then( ( module ) => {

    					var draco = module.draco;
    					var decoder = new draco.Decoder();
    					var decoderBuffer = new draco.DecoderBuffer();
    					decoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );

    					try {

    						var geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );

    						var buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );

    						if ( geometry.index ) buffers.push( geometry.index.array.buffer );

    						self.postMessage( { type: 'decode', id: message.id, geometry }, buffers );

    					} catch ( error ) {

    						console.error( error );

    						self.postMessage( { type: 'error', id: message.id, error: error.message } );

    					} finally {

    						draco.destroy( decoderBuffer );
    						draco.destroy( decoder );

    					}

    				} );
    				break;

    		}

    	};

    	function decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {

    		var attributeIDs = taskConfig.attributeIDs;
    		var attributeTypes = taskConfig.attributeTypes;

    		var dracoGeometry;
    		var decodingStatus;

    		var geometryType = decoder.GetEncodedGeometryType( decoderBuffer );

    		if ( geometryType === draco.TRIANGULAR_MESH ) {

    			dracoGeometry = new draco.Mesh();
    			decodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );

    		} else if ( geometryType === draco.POINT_CLOUD ) {

    			dracoGeometry = new draco.PointCloud();
    			decodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );

    		} else {

    			throw new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );

    		}

    		if ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {

    			throw new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );

    		}

    		var geometry = { index: null, attributes: [] };

    		// Gather all vertex attributes.
    		for ( var attributeName in attributeIDs ) {

    			var attributeType = self[ attributeTypes[ attributeName ] ];

    			var attribute;
    			var attributeID;

    			// A Draco file may be created with default vertex attributes, whose attribute IDs
    			// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,
    			// a Draco file may contain a custom set of attributes, identified by known unique
    			// IDs. glTF files always do the latter, and `.drc` files typically do the former.
    			if ( taskConfig.useUniqueIDs ) {

    				attributeID = attributeIDs[ attributeName ];
    				attribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );

    			} else {

    				attributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );

    				if ( attributeID === - 1 ) continue;

    				attribute = decoder.GetAttribute( dracoGeometry, attributeID );

    			}

    			geometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );

    		}

    		// Add index.
    		if ( geometryType === draco.TRIANGULAR_MESH ) {

    			// Generate mesh faces.
    			var numFaces = dracoGeometry.num_faces();
    			var numIndices = numFaces * 3;
    			var index = new Uint32Array( numIndices );
    			var indexArray = new draco.DracoInt32Array();

    			for ( var i = 0; i < numFaces; ++ i ) {

    				decoder.GetFaceFromMesh( dracoGeometry, i, indexArray );

    				for ( var j = 0; j < 3; ++ j ) {

    					index[ i * 3 + j ] = indexArray.GetValue( j );

    				}

    			}

    			geometry.index = { array: index, itemSize: 1 };

    			draco.destroy( indexArray );

    		}

    		draco.destroy( dracoGeometry );

    		return geometry;

    	}

    	function decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {

    		var numComponents = attribute.num_components();
    		var numPoints = dracoGeometry.num_points();
    		var numValues = numPoints * numComponents;
    		var dracoArray;

    		var array;

    		switch ( attributeType ) {

    			case Float32Array:
    				dracoArray = new draco.DracoFloat32Array();
    				decoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Float32Array( numValues );
    				break;

    			case Int8Array:
    				dracoArray = new draco.DracoInt8Array();
    				decoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Int8Array( numValues );
    				break;

    			case Int16Array:
    				dracoArray = new draco.DracoInt16Array();
    				decoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Int16Array( numValues );
    				break;

    			case Int32Array:
    				dracoArray = new draco.DracoInt32Array();
    				decoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Int32Array( numValues );
    				break;

    			case Uint8Array:
    				dracoArray = new draco.DracoUInt8Array();
    				decoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Uint8Array( numValues );
    				break;

    			case Uint16Array:
    				dracoArray = new draco.DracoUInt16Array();
    				decoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Uint16Array( numValues );
    				break;

    			case Uint32Array:
    				dracoArray = new draco.DracoUInt32Array();
    				decoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );
    				array = new Uint32Array( numValues );
    				break;

    			default:
    				throw new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );

    		}

    		for ( var i = 0; i < numValues; i ++ ) {

    			array[ i ] = dracoArray.GetValue( i );

    		}

    		draco.destroy( dracoArray );

    		return {
    			name: attributeName,
    			array: array,
    			itemSize: numComponents
    		};

    	}

    };

    DRACOLoader.taskCache = new WeakMap();

    /** Deprecated static methods */

    /** @deprecated */
    DRACOLoader.setDecoderPath = function () {

    	console.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );

    };

    /** @deprecated */
    DRACOLoader.setDecoderConfig = function () {

    	console.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );

    };

    /** @deprecated */
    DRACOLoader.releaseDecoderModule = function () {

    	console.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );

    };

    /** @deprecated */
    DRACOLoader.getDecoderModule = function () {

    	console.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );

    };

    // This set of controls performs orbiting, dollying (zooming), and panning.
    // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
    //
    //    Orbit - left mouse / touch: one-finger move
    //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
    //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

    var OrbitControls = function ( object, domElement ) {

    	if ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter "domElement" is now mandatory.' );
    	if ( domElement === document ) console.error( 'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.' );

    	this.object = object;
    	this.domElement = domElement;

    	// Set to false to disable this control
    	this.enabled = true;

    	// "target" sets the location of focus, where the object orbits around
    	this.target = new Vector3();

    	// How far you can dolly in and out ( PerspectiveCamera only )
    	this.minDistance = 0;
    	this.maxDistance = Infinity;

    	// How far you can zoom in and out ( OrthographicCamera only )
    	this.minZoom = 0;
    	this.maxZoom = Infinity;

    	// How far you can orbit vertically, upper and lower limits.
    	// Range is 0 to Math.PI radians.
    	this.minPolarAngle = 0; // radians
    	this.maxPolarAngle = Math.PI; // radians

    	// How far you can orbit horizontally, upper and lower limits.
    	// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
    	this.minAzimuthAngle = - Infinity; // radians
    	this.maxAzimuthAngle = Infinity; // radians

    	// Set to true to enable damping (inertia)
    	// If damping is enabled, you must call controls.update() in your animation loop
    	this.enableDamping = false;
    	this.dampingFactor = 0.05;

    	// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    	// Set to false to disable zooming
    	this.enableZoom = true;
    	this.zoomSpeed = 1.0;

    	// Set to false to disable rotating
    	this.enableRotate = true;
    	this.rotateSpeed = 1.0;

    	// Set to false to disable panning
    	this.enablePan = true;
    	this.panSpeed = 1.0;
    	this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
    	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

    	// Set to true to automatically rotate around the target
    	// If auto-rotate is enabled, you must call controls.update() in your animation loop
    	this.autoRotate = false;
    	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

    	// Set to false to disable use of the keys
    	this.enableKeys = true;

    	// The four arrow keys
    	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

    	// Mouse buttons
    	this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

    	// Touch fingers
    	this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

    	// for reset
    	this.target0 = this.target.clone();
    	this.position0 = this.object.position.clone();
    	this.zoom0 = this.object.zoom;

    	//
    	// public methods
    	//

    	this.getPolarAngle = function () {

    		return spherical.phi;

    	};

    	this.getAzimuthalAngle = function () {

    		return spherical.theta;

    	};

    	this.saveState = function () {

    		scope.target0.copy( scope.target );
    		scope.position0.copy( scope.object.position );
    		scope.zoom0 = scope.object.zoom;

    	};

    	this.reset = function () {

    		scope.target.copy( scope.target0 );
    		scope.object.position.copy( scope.position0 );
    		scope.object.zoom = scope.zoom0;

    		scope.object.updateProjectionMatrix();
    		scope.dispatchEvent( changeEvent );

    		scope.update();

    		state = STATE.NONE;

    	};

    	// this method is exposed, but perhaps it would be better if we can make it private...
    	this.update = function () {

    		var offset = new Vector3();

    		// so camera.up is the orbit axis
    		var quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );
    		var quatInverse = quat.clone().inverse();

    		var lastPosition = new Vector3();
    		var lastQuaternion = new Quaternion();

    		var twoPI = 2 * Math.PI;

    		return function update() {

    			var position = scope.object.position;

    			offset.copy( position ).sub( scope.target );

    			// rotate offset to "y-axis-is-up" space
    			offset.applyQuaternion( quat );

    			// angle from z-axis around y-axis
    			spherical.setFromVector3( offset );

    			if ( scope.autoRotate && state === STATE.NONE ) {

    				rotateLeft( getAutoRotationAngle() );

    			}

    			if ( scope.enableDamping ) {

    				spherical.theta += sphericalDelta.theta * scope.dampingFactor;
    				spherical.phi += sphericalDelta.phi * scope.dampingFactor;

    			} else {

    				spherical.theta += sphericalDelta.theta;
    				spherical.phi += sphericalDelta.phi;

    			}

    			// restrict theta to be between desired limits

    			var min = scope.minAzimuthAngle;
    			var max = scope.maxAzimuthAngle;

    			if ( isFinite( min ) && isFinite( max ) ) {

    				if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;

    				if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;

    				if ( min < max ) {

    					spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );

    				} else {

    					spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?
    						Math.max( min, spherical.theta ) :
    						Math.min( max, spherical.theta );

    				}

    			}

    			// restrict phi to be between desired limits
    			spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

    			spherical.makeSafe();


    			spherical.radius *= scale;

    			// restrict radius to be between desired limits
    			spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

    			// move target to panned location

    			if ( scope.enableDamping === true ) {

    				scope.target.addScaledVector( panOffset, scope.dampingFactor );

    			} else {

    				scope.target.add( panOffset );

    			}

    			offset.setFromSpherical( spherical );

    			// rotate offset back to "camera-up-vector-is-up" space
    			offset.applyQuaternion( quatInverse );

    			position.copy( scope.target ).add( offset );

    			scope.object.lookAt( scope.target );

    			if ( scope.enableDamping === true ) {

    				sphericalDelta.theta *= ( 1 - scope.dampingFactor );
    				sphericalDelta.phi *= ( 1 - scope.dampingFactor );

    				panOffset.multiplyScalar( 1 - scope.dampingFactor );

    			} else {

    				sphericalDelta.set( 0, 0, 0 );

    				panOffset.set( 0, 0, 0 );

    			}

    			scale = 1;

    			// update condition is:
    			// min(camera displacement, camera rotation in radians)^2 > EPS
    			// using small-angle approximation cos(x/2) = 1 - x^2 / 8

    			if ( zoomChanged ||
    				lastPosition.distanceToSquared( scope.object.position ) > EPS ||
    				8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

    				scope.dispatchEvent( changeEvent );

    				lastPosition.copy( scope.object.position );
    				lastQuaternion.copy( scope.object.quaternion );
    				zoomChanged = false;

    				return true;

    			}

    			return false;

    		};

    	}();

    	this.dispose = function () {

    		scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
    		scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
    		scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

    		scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
    		scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
    		scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

    		scope.domElement.ownerDocument.removeEventListener( 'mousemove', onMouseMove, false );
    		scope.domElement.ownerDocument.removeEventListener( 'mouseup', onMouseUp, false );

    		scope.domElement.removeEventListener( 'keydown', onKeyDown, false );

    		//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

    	};

    	//
    	// internals
    	//

    	var scope = this;

    	var changeEvent = { type: 'change' };
    	var startEvent = { type: 'start' };
    	var endEvent = { type: 'end' };

    	var STATE = {
    		NONE: - 1,
    		ROTATE: 0,
    		DOLLY: 1,
    		PAN: 2,
    		TOUCH_ROTATE: 3,
    		TOUCH_PAN: 4,
    		TOUCH_DOLLY_PAN: 5,
    		TOUCH_DOLLY_ROTATE: 6
    	};

    	var state = STATE.NONE;

    	var EPS = 0.000001;

    	// current position in spherical coordinates
    	var spherical = new Spherical();
    	var sphericalDelta = new Spherical();

    	var scale = 1;
    	var panOffset = new Vector3();
    	var zoomChanged = false;

    	var rotateStart = new Vector2();
    	var rotateEnd = new Vector2();
    	var rotateDelta = new Vector2();

    	var panStart = new Vector2();
    	var panEnd = new Vector2();
    	var panDelta = new Vector2();

    	var dollyStart = new Vector2();
    	var dollyEnd = new Vector2();
    	var dollyDelta = new Vector2();

    	function getAutoRotationAngle() {

    		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

    	}

    	function getZoomScale() {

    		return Math.pow( 0.95, scope.zoomSpeed );

    	}

    	function rotateLeft( angle ) {

    		sphericalDelta.theta -= angle;

    	}

    	function rotateUp( angle ) {

    		sphericalDelta.phi -= angle;

    	}

    	var panLeft = function () {

    		var v = new Vector3();

    		return function panLeft( distance, objectMatrix ) {

    			v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
    			v.multiplyScalar( - distance );

    			panOffset.add( v );

    		};

    	}();

    	var panUp = function () {

    		var v = new Vector3();

    		return function panUp( distance, objectMatrix ) {

    			if ( scope.screenSpacePanning === true ) {

    				v.setFromMatrixColumn( objectMatrix, 1 );

    			} else {

    				v.setFromMatrixColumn( objectMatrix, 0 );
    				v.crossVectors( scope.object.up, v );

    			}

    			v.multiplyScalar( distance );

    			panOffset.add( v );

    		};

    	}();

    	// deltaX and deltaY are in pixels; right and down are positive
    	var pan = function () {

    		var offset = new Vector3();

    		return function pan( deltaX, deltaY ) {

    			var element = scope.domElement;

    			if ( scope.object.isPerspectiveCamera ) {

    				// perspective
    				var position = scope.object.position;
    				offset.copy( position ).sub( scope.target );
    				var targetDistance = offset.length();

    				// half of the fov is center to top of screen
    				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

    				// we use only clientHeight here so aspect ratio does not distort speed
    				panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
    				panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

    			} else if ( scope.object.isOrthographicCamera ) {

    				// orthographic
    				panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
    				panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

    			} else {

    				// camera neither orthographic nor perspective
    				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
    				scope.enablePan = false;

    			}

    		};

    	}();

    	function dollyOut( dollyScale ) {

    		if ( scope.object.isPerspectiveCamera ) {

    			scale /= dollyScale;

    		} else if ( scope.object.isOrthographicCamera ) {

    			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
    			scope.object.updateProjectionMatrix();
    			zoomChanged = true;

    		} else {

    			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
    			scope.enableZoom = false;

    		}

    	}

    	function dollyIn( dollyScale ) {

    		if ( scope.object.isPerspectiveCamera ) {

    			scale *= dollyScale;

    		} else if ( scope.object.isOrthographicCamera ) {

    			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
    			scope.object.updateProjectionMatrix();
    			zoomChanged = true;

    		} else {

    			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
    			scope.enableZoom = false;

    		}

    	}

    	//
    	// event callbacks - update the object state
    	//

    	function handleMouseDownRotate( event ) {

    		rotateStart.set( event.clientX, event.clientY );

    	}

    	function handleMouseDownDolly( event ) {

    		dollyStart.set( event.clientX, event.clientY );

    	}

    	function handleMouseDownPan( event ) {

    		panStart.set( event.clientX, event.clientY );

    	}

    	function handleMouseMoveRotate( event ) {

    		rotateEnd.set( event.clientX, event.clientY );

    		rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

    		var element = scope.domElement;

    		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

    		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

    		rotateStart.copy( rotateEnd );

    		scope.update();

    	}

    	function handleMouseMoveDolly( event ) {

    		dollyEnd.set( event.clientX, event.clientY );

    		dollyDelta.subVectors( dollyEnd, dollyStart );

    		if ( dollyDelta.y > 0 ) {

    			dollyOut( getZoomScale() );

    		} else if ( dollyDelta.y < 0 ) {

    			dollyIn( getZoomScale() );

    		}

    		dollyStart.copy( dollyEnd );

    		scope.update();

    	}

    	function handleMouseMovePan( event ) {

    		panEnd.set( event.clientX, event.clientY );

    		panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

    		pan( panDelta.x, panDelta.y );

    		panStart.copy( panEnd );

    		scope.update();

    	}

    	function handleMouseWheel( event ) {

    		if ( event.deltaY < 0 ) {

    			dollyIn( getZoomScale() );

    		} else if ( event.deltaY > 0 ) {

    			dollyOut( getZoomScale() );

    		}

    		scope.update();

    	}

    	function handleKeyDown( event ) {

    		var needsUpdate = false;

    		switch ( event.keyCode ) {

    			case scope.keys.UP:
    				pan( 0, scope.keyPanSpeed );
    				needsUpdate = true;
    				break;

    			case scope.keys.BOTTOM:
    				pan( 0, - scope.keyPanSpeed );
    				needsUpdate = true;
    				break;

    			case scope.keys.LEFT:
    				pan( scope.keyPanSpeed, 0 );
    				needsUpdate = true;
    				break;

    			case scope.keys.RIGHT:
    				pan( - scope.keyPanSpeed, 0 );
    				needsUpdate = true;
    				break;

    		}

    		if ( needsUpdate ) {

    			// prevent the browser from scrolling on cursor keys
    			event.preventDefault();

    			scope.update();

    		}


    	}

    	function handleTouchStartRotate( event ) {

    		if ( event.touches.length == 1 ) {

    			rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

    		} else {

    			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
    			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

    			rotateStart.set( x, y );

    		}

    	}

    	function handleTouchStartPan( event ) {

    		if ( event.touches.length == 1 ) {

    			panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

    		} else {

    			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
    			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

    			panStart.set( x, y );

    		}

    	}

    	function handleTouchStartDolly( event ) {

    		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
    		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

    		var distance = Math.sqrt( dx * dx + dy * dy );

    		dollyStart.set( 0, distance );

    	}

    	function handleTouchStartDollyPan( event ) {

    		if ( scope.enableZoom ) handleTouchStartDolly( event );

    		if ( scope.enablePan ) handleTouchStartPan( event );

    	}

    	function handleTouchStartDollyRotate( event ) {

    		if ( scope.enableZoom ) handleTouchStartDolly( event );

    		if ( scope.enableRotate ) handleTouchStartRotate( event );

    	}

    	function handleTouchMoveRotate( event ) {

    		if ( event.touches.length == 1 ) {

    			rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

    		} else {

    			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
    			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

    			rotateEnd.set( x, y );

    		}

    		rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

    		var element = scope.domElement;

    		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

    		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

    		rotateStart.copy( rotateEnd );

    	}

    	function handleTouchMovePan( event ) {

    		if ( event.touches.length == 1 ) {

    			panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

    		} else {

    			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
    			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

    			panEnd.set( x, y );

    		}

    		panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

    		pan( panDelta.x, panDelta.y );

    		panStart.copy( panEnd );

    	}

    	function handleTouchMoveDolly( event ) {

    		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
    		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

    		var distance = Math.sqrt( dx * dx + dy * dy );

    		dollyEnd.set( 0, distance );

    		dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );

    		dollyOut( dollyDelta.y );

    		dollyStart.copy( dollyEnd );

    	}

    	function handleTouchMoveDollyPan( event ) {

    		if ( scope.enableZoom ) handleTouchMoveDolly( event );

    		if ( scope.enablePan ) handleTouchMovePan( event );

    	}

    	function handleTouchMoveDollyRotate( event ) {

    		if ( scope.enableZoom ) handleTouchMoveDolly( event );

    		if ( scope.enableRotate ) handleTouchMoveRotate( event );

    	}

    	//
    	// event handlers - FSM: listen for events and reset state
    	//

    	function onMouseDown( event ) {

    		if ( scope.enabled === false ) return;

    		// Prevent the browser from scrolling.
    		event.preventDefault();

    		// Manually set the focus since calling preventDefault above
    		// prevents the browser from setting it automatically.

    		scope.domElement.focus ? scope.domElement.focus() : window.focus();

    		var mouseAction;

    		switch ( event.button ) {

    			case 0:

    				mouseAction = scope.mouseButtons.LEFT;
    				break;

    			case 1:

    				mouseAction = scope.mouseButtons.MIDDLE;
    				break;

    			case 2:

    				mouseAction = scope.mouseButtons.RIGHT;
    				break;

    			default:

    				mouseAction = - 1;

    		}

    		switch ( mouseAction ) {

    			case MOUSE.DOLLY:

    				if ( scope.enableZoom === false ) return;

    				handleMouseDownDolly( event );

    				state = STATE.DOLLY;

    				break;

    			case MOUSE.ROTATE:

    				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

    					if ( scope.enablePan === false ) return;

    					handleMouseDownPan( event );

    					state = STATE.PAN;

    				} else {

    					if ( scope.enableRotate === false ) return;

    					handleMouseDownRotate( event );

    					state = STATE.ROTATE;

    				}

    				break;

    			case MOUSE.PAN:

    				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

    					if ( scope.enableRotate === false ) return;

    					handleMouseDownRotate( event );

    					state = STATE.ROTATE;

    				} else {

    					if ( scope.enablePan === false ) return;

    					handleMouseDownPan( event );

    					state = STATE.PAN;

    				}

    				break;

    			default:

    				state = STATE.NONE;

    		}

    		if ( state !== STATE.NONE ) {

    			scope.domElement.ownerDocument.addEventListener( 'mousemove', onMouseMove, false );
    			scope.domElement.ownerDocument.addEventListener( 'mouseup', onMouseUp, false );

    			scope.dispatchEvent( startEvent );

    		}

    	}

    	function onMouseMove( event ) {

    		if ( scope.enabled === false ) return;

    		event.preventDefault();

    		switch ( state ) {

    			case STATE.ROTATE:

    				if ( scope.enableRotate === false ) return;

    				handleMouseMoveRotate( event );

    				break;

    			case STATE.DOLLY:

    				if ( scope.enableZoom === false ) return;

    				handleMouseMoveDolly( event );

    				break;

    			case STATE.PAN:

    				if ( scope.enablePan === false ) return;

    				handleMouseMovePan( event );

    				break;

    		}

    	}

    	function onMouseUp( event ) {

    		if ( scope.enabled === false ) return;

    		scope.domElement.ownerDocument.removeEventListener( 'mousemove', onMouseMove, false );
    		scope.domElement.ownerDocument.removeEventListener( 'mouseup', onMouseUp, false );

    		scope.dispatchEvent( endEvent );

    		state = STATE.NONE;

    	}

    	function onMouseWheel( event ) {

    		if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

    		event.preventDefault();
    		event.stopPropagation();

    		scope.dispatchEvent( startEvent );

    		handleMouseWheel( event );

    		scope.dispatchEvent( endEvent );

    	}

    	function onKeyDown( event ) {

    		if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

    		handleKeyDown( event );

    	}

    	function onTouchStart( event ) {

    		if ( scope.enabled === false ) return;

    		event.preventDefault(); // prevent scrolling

    		switch ( event.touches.length ) {

    			case 1:

    				switch ( scope.touches.ONE ) {

    					case TOUCH.ROTATE:

    						if ( scope.enableRotate === false ) return;

    						handleTouchStartRotate( event );

    						state = STATE.TOUCH_ROTATE;

    						break;

    					case TOUCH.PAN:

    						if ( scope.enablePan === false ) return;

    						handleTouchStartPan( event );

    						state = STATE.TOUCH_PAN;

    						break;

    					default:

    						state = STATE.NONE;

    				}

    				break;

    			case 2:

    				switch ( scope.touches.TWO ) {

    					case TOUCH.DOLLY_PAN:

    						if ( scope.enableZoom === false && scope.enablePan === false ) return;

    						handleTouchStartDollyPan( event );

    						state = STATE.TOUCH_DOLLY_PAN;

    						break;

    					case TOUCH.DOLLY_ROTATE:

    						if ( scope.enableZoom === false && scope.enableRotate === false ) return;

    						handleTouchStartDollyRotate( event );

    						state = STATE.TOUCH_DOLLY_ROTATE;

    						break;

    					default:

    						state = STATE.NONE;

    				}

    				break;

    			default:

    				state = STATE.NONE;

    		}

    		if ( state !== STATE.NONE ) {

    			scope.dispatchEvent( startEvent );

    		}

    	}

    	function onTouchMove( event ) {

    		if ( scope.enabled === false ) return;

    		event.preventDefault(); // prevent scrolling
    		event.stopPropagation();

    		switch ( state ) {

    			case STATE.TOUCH_ROTATE:

    				if ( scope.enableRotate === false ) return;

    				handleTouchMoveRotate( event );

    				scope.update();

    				break;

    			case STATE.TOUCH_PAN:

    				if ( scope.enablePan === false ) return;

    				handleTouchMovePan( event );

    				scope.update();

    				break;

    			case STATE.TOUCH_DOLLY_PAN:

    				if ( scope.enableZoom === false && scope.enablePan === false ) return;

    				handleTouchMoveDollyPan( event );

    				scope.update();

    				break;

    			case STATE.TOUCH_DOLLY_ROTATE:

    				if ( scope.enableZoom === false && scope.enableRotate === false ) return;

    				handleTouchMoveDollyRotate( event );

    				scope.update();

    				break;

    			default:

    				state = STATE.NONE;

    		}

    	}

    	function onTouchEnd( event ) {

    		if ( scope.enabled === false ) return;

    		scope.dispatchEvent( endEvent );

    		state = STATE.NONE;

    	}

    	function onContextMenu( event ) {

    		if ( scope.enabled === false ) return;

    		event.preventDefault();

    	}

    	//

    	scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

    	scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
    	scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

    	scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
    	scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
    	scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

    	scope.domElement.addEventListener( 'keydown', onKeyDown, false );

    	// make sure element can receive keys.

    	if ( scope.domElement.tabIndex === - 1 ) {

    		scope.domElement.tabIndex = 0;

    	}

    	// force an update at start

    	this.update();

    };

    OrbitControls.prototype = Object.create( EventDispatcher.prototype );
    OrbitControls.prototype.constructor = OrbitControls;


    // This set of controls performs orbiting, dollying (zooming), and panning.
    // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
    // This is very similar to OrbitControls, another set of touch behavior
    //
    //    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
    //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
    //    Pan - left mouse, or arrow keys / touch: one-finger move

    var MapControls = function ( object, domElement ) {

    	OrbitControls.call( this, object, domElement );

    	this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up

    	this.mouseButtons.LEFT = MOUSE.PAN;
    	this.mouseButtons.RIGHT = MOUSE.ROTATE;

    	this.touches.ONE = TOUCH.PAN;
    	this.touches.TWO = TOUCH.DOLLY_ROTATE;

    };

    MapControls.prototype = Object.create( EventDispatcher.prototype );
    MapControls.prototype.constructor = MapControls;

    if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    	/* eslint-disable no-undef */
    	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
    		revision: REVISION,
    	} } ) );
    	/* eslint-enable no-undef */

    }

    /* node_modules/svelthree/src/utils/PropUtils.svelte generated by Svelte v3.46.4 */

    function isValidArray3Prop(p) {
    	let isValid = false;

    	p && p.constructor === Array && p.length === 3
    	? isValid = true
    	: null;

    	return isValid;
    }

    function isArray(p) {
    	return p && p.constructor === Array;
    }

    function isValidMatrix4(p) {
    	p
    	? console.error("SVELTHREE > passing a Matrix4 as prop is not implemented yet!")
    	: null;

    	return false;
    }

    /* node_modules/svelthree/src/utils/UniversalPropIterator.svelte generated by Svelte v3.46.4 */

    class UniversalPropIterator {
    	//TODO: implement proper handling of type Material[]
    	constructor(obj) {
    		this.obj = obj;

    		obj["type"]
    		? this.objTypeStr = obj["type"]
    		: (this.objTypeStr = "", console.info("SVELTHREE TODO > UniversalPropIterator > constructor : obj has no 'type' property, probably of type 'Material[]' or WebGLRenderer", obj));

    		this.dlTarget = undefined;
    	}

    	setFromVector3OrArray(p) {
    		this.props[p].constructor === Vector3
    		? this.obj[p].copy(this.props[p])
    		: Array.isArray(this.props[p])
    			? this.obj[p].set(this.props[p][0], this.props[p][1], this.props[p][2])
    			: null;
    	}

    	checkSetColor(p) {
    		if (isArray(this.props[p])) {
    			if (isValidArray3Prop(this.props[p])) {
    				this.obj[p] = new Color(this.props[p][0], this.props[p][1], this.props[p][2]);
    			} else {
    				console.error("SVELTHREE > UniversalPropIterator > checkSetColor : Prop should be an Array of three (3) values!", p);
    			}
    		} else {
    			this.obj[p] = new Color(this.props[p]);
    		}
    	}

    	/**  TODO : I came up with the concept of Empty being basically a bare Object3D but it needs to be typed properly (own class?), right now, we're relying on it being passed
     * as 'target' inside DirectionalLightProps, that's not good practice.
     */
    	checkSetDlTarget(p) {
    		this.props[p] === undefined
    		? // TODO : Check why this is undefined on init! Not severe problem, but still to be checked.
    			null
    		: // TODO : Check why this being called twice on init! Not severe problem, but still to be checked.
    			//console.warn("SVELTHREE > UniversalPropIterator > checkSetDlTarget : " + this.objTypeStr + " : target in 'props' now defined!!"),
    			this.obj[p] = this.props[p].getEmpty(); //console.warn("SVELTHREE > UniversalPropIterator > checkSetDlTarget : " + this.objTypeStr + " : target in 'props' but undefined!")
    	}

    	tryPropsUpdate(props) {
    		this.props = props;

    		//console.info("SVELTHREE > UniversalPropIterator > tryPropsUpdate : this.props: ", this.props)
    		if (this.obj) {
    			/*
    console.info(
        "SVELTHREE > UniversalPropIterator > tryPropsUpdate : " +
            this.objTypeStr +
            " : this.props: ",
        this.props
    )
    */
    			for (let p in this.props) {
    				//console.info("SVELTHREE > " + this.objTypeStr + " : tryPropsUpdate, p: ", p)
    				//console.info("SVELTHREE > " + this.objTypeStr + " : tryPropsUpdate, this.props[p]: ", this.props[p])
    				if (this.obj.hasOwnProperty(p)) {
    					//console.info("SVELTHREE > " + this.objTypeStr + " : properties provided via 'props' will override other shorthand props!")
    					//TODO: Does Three check if props are equal and not change / set them if? Are there any serious drawbacks at all (performance) if no equality check?
    					p === "scale" || p === "position" || p === "rotation"
    					? this.setFromVector3OrArray(p)
    					: p === "color"
    						? this.checkSetColor(p)
    						: p === "target" && this.objTypeStr === "DirectionalLight"
    							? this.checkSetDlTarget(p)
    							: //standard 1:1
    								this.obj[p] = this.props[p];
    				} else if (this.obj[p.toString()]) {
    					//method
    					p === "lookAt" && this.obj["lookAt"]
    					? this.props[p].constructor === Vector3
    						? this.obj["lookAt"](this.props[p])
    						: Array.isArray(this.props[p])
    							? this.obj["lookAt"](this.props[p][0], this.props[p][1], this.props[p][2])
    							: null
    					: null;
    				} else {
    					console.error("SVELTHREE > " + this.objTypeStr + " : No such property in " + this.objTypeStr + "! : " + p.toString());
    				}
    			}
    		}

    		if (this.objTypeStr.includes("Material")) {
    			this.obj["needsUpdate"] = true;
    		}
    	}
    }

    /* node_modules/svelthree/src/utils/Object3DUtils.svelte generated by Svelte v3.46.4 */

    class Object3DUtils {
    	constructor(obj) {
    		this.obj = obj;
    	}

    	tryPosUpdate(p) {
    		this.obj
    		? p.constructor === Vector3
    			? this.obj["position"].copy(p)
    			: Array.isArray(p) && p.length === 3
    				? this.obj["position"].set(p[0], p[1], p[2])
    				: console.error("SVELTHREE > Object3DUtils > prop " + p.toString() + " has to be an Array(3) or valid THREE.Vector3!", { obj: this.obj, p })
    		: null;
    	}

    	tryRotUpdate(p) {
    		this.obj
    		? p.constructor === Euler
    			? this.obj["rotation"].copy(p)
    			: Array.isArray(p) && p.length === 3
    				? this.obj["rotation"].set(p[0], p[1], p[2])
    				: Array.isArray(p) && p.length === 4
    					? this.obj["rotation"].set(p[0], p[1], p[2], p[3])
    					: console.error("SVELTHREE > Object3DUtils > prop " + p.toString() + " has to be Array(3 || 4) or valid THREE.Euler!", { obj: this.obj, p })
    		: null;
    	}

    	tryScaleUpdate(p) {
    		this.obj
    		? p.constructor === Vector3
    			? this.obj["scale"].copy(p)
    			: Array.isArray(p)
    				? this.obj["scale"].set(p[0], p[1], p[2])
    				: console.error("SVELTHREE > Object3DUtils > prop " + p.toString() + " has to be an Array(3) or valid THREE.Vector3!", { obj: this.obj, p })
    		: null;
    	}

    	tryLookAtUpdate(p) {
    		this.obj.lookAt
    		? p.constructor === Vector3
    			? this.obj.lookAt(p)
    			: Array.isArray(p) && p.length === 3
    				? this.obj.lookAt(p[0], p[1], p[2])
    				: console.error("SVELTHREE > Object3DUtils > prop " + p.toString() + " has to be an Array(3) or valid THREE.Vector3!", { obj: this.obj, p })
    		: null;
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const svelthreeStores = writable([]);

    /* node_modules/svelthree/src/utils/AnimationProp.svelte generated by Svelte v3.46.4 */

    class AnimationProp {
    	constructor(fn) {
    		this.fn = fn;
    	}

    	initiate(obj, ...args) {
    		let initiatedFn;

    		try {
    			initiatedFn = this.fn(obj, args);

    			if (!initiatedFn.hasOwnProperty("onStart")) {
    				console.warn("SVELTHREE > Provided animation is missing 'onStart' function!", { animation: initiatedFn });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			}

    			if (!initiatedFn.hasOwnProperty("onDestroy")) {
    				console.warn("SVELTHREE > Provided animation has no 'onDestroy' function!", { animation: initiatedFn });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			}
    		} catch(e) {
    			throw new Error("SVELTHREE Exception (see warning above), " + e);
    		}

    		return initiatedFn;
    	}
    }

    /* node_modules/svelthree/src/utils/Sv3AnimationManager.svelte generated by Svelte v3.46.4 */

    class SvelthreeAnimationManager {
    	constructor(animation, aniauto, obj, scene) {
    		this.animation = animation;
    		this.aniauto = aniauto;
    		this.obj = obj;
    		this.scene = scene;
    	}

    	handleCurrentSceneStatus(currentSceneActive) {
    		currentSceneActive
    		? this.aniauto ? this.handleSceneActive() : null
    		: this.handleSceneInActive();
    	}

    	//active / reactivated
    	handleSceneActive() {
    		//check if animation has been initiated, if so try to execute 'onSceneReactivated'...
    		if (this.animationInitiated() === true) {
    			this.tryOnSceneReactivated();
    		} else {
    			//... otherwise initate / start it (aniauto is true)
    			this.initiateAnimation();
    		}
    	}

    	initiateAnimation() {
    		//console.info("SVELTHREE > SvelthreeAnimationManager > initiateAnimation!")
    		//if animation is a function it has not been initiated / started yet (otherwise object)
    		!this.scene.userData.isActive
    		? console.warn("SVELTHREE > SvelthreeAnimationManager : initiateAnimation : You're about to initiate an animation in an inactive Scene!")
    		: null;

    		this.animation = this.animation.initiate(this.obj, ...arguments);
    		console.info("SVELTHREE > SvelthreeAnimationManager > initiateAnimation : after initialization: this.animation:", this.animation);

    		try {
    			this.animation.onStart();
    		} catch(e) {
    			throw new Error("SVELTHREE Exception, " + e);
    		}
    	}

    	tryOnSceneReactivated() {
    		this.animation.onSceneReactivated
    		? this.animation.onSceneReactivated()
    		: console.warn("SVELTHREE > SvelthreeAnimationManager > tryOnSceneReactivated : Animation couldn't be started, missing 'onSceneReactivated' method!");
    	}

    	//inactive / deactivated
    	handleSceneInActive() {
    		//check if animation has been initiated
    		//if it has been initated, try to execute 'onSceneDeactivated'
    		if (this.animationInitiated() === true) ;
    	}

    	tryOnSceneDeactivated() {
    		this.animation.onSceneDeactivated
    		? this.animation.onSceneDeactivated()
    		: console.warn("SVELTHREE > SvelthreeAnimationManager > tryOnSceneDeactivated : Animation couldn't be stopped, missing 'onSceneDeactivated' method!");
    	}

    	// --------- user initiated actions ---------
    	startAni() {
    		if (this.animationInitiated() === false) {
    			this.initiateAnimation();
    		} else {
    			console.warn("SVELTHREE > SvelthreeAnimationManager > startAni : animation has already been initiated! 'animation': ", this.animation);
    		}
    	}

    	destroyAnimation() {
    		//console.warn("SVELTHREE > SvelthreeAnimationManager > destroyAnimation")
    		/** TODO  BUG  WHY?  When testing in a demo, this runs just fine / as intended, however
     * when testing via REPL (running sapper svelthree-website on localhost:3000) an exception is being thrown
     * "SVELTHREE Exception, TypeError: this.animation.onDestroy is not a function"
     * If we check 'this.animation' in a demo, it contains 'onDestroy' etc, with REPL 'AnimationProp' empty
     *
     * check aniauto change in a demo...
     */
    		/*
    try {
        console.warn("SVELTHREE > SvelthreeAnimationManager > trying this.animation.onDestroy() : this.animation", this.animation)
        this.animation.onDestroy()
    } catch (e) {
        throw new Error("SVELTHREE Exception, " + e)
    }
    */
    		// WORKAROUND:
    		// Don't try / check, just check if this.animation has 'onDestroy', if not just throw a warning, not exception.
    		if (this.animation.hasOwnProperty("onDestroy")) {
    			this.animation.onDestroy();
    		} else {
    			console.warn("SVELTHREE > SvelthreeAnimationManager > Unable to find 'onDestroy' method in 'animation': This may be a BUG in REPL and may be safe to ignore. Please check if your animation is running as intended and consider checking it in another environment. Contributions on this issue are welcome! : this.animation", this.animation);
    		}
    	}

    	animationInitiated() {
    		if (this.animationIsAnimationProp()) {
    			return false;
    		} else if (this.animationIsObject()) {
    			return true;
    		} else {
    			console.warn("SVELTHREE > SvelthreeAnimationManager > animationInitiated? : 'animation': ", this.animation);
    			throw new Error("SVELTHREE > SvelthreeAnimationManager > animationInitiated? : 'animation' prop is of unsupported type!");
    		}
    	}

    	animationIsAnimationProp() {
    		if (this.animation) {
    			if (this.animation instanceof AnimationProp) {
    				return true;
    			}
    		}

    		return false;
    	}

    	animationIsObject() {
    		if (this.animation) {
    			if (typeof this.animation === "object") {
    				return true;
    			}
    		}

    		return false;
    	}

    	getAnimation() {
    		return this.animation;
    	}
    }

    /* node_modules/svelthree/src/components/SvelthreeAnimation.svelte generated by Svelte v3.46.4 */

    const { console: console_1$b } = globals;

    function create_fragment$c(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SvelthreeAnimation', slots, []);
    	let { animationEnabled = undefined } = $$props;
    	let { animation = undefined } = $$props;
    	let { aniauto = undefined } = $$props;
    	let { obj = undefined } = $$props;
    	let { scene = undefined } = $$props;

    	/** TODO : Would reactive autoani make sense?
     * Would have to reactivly recreate whole animation and restart it, but does this make sense on runtime?
     * 'autoani' is meant to be an initial setting, so rather not.
     */
    	//$: aniauto || animation ? createAnimationManager() : null
    	let aniManager;

    	function createAnimationManager() {
    		//console.warn("SVELTHREE > createAnimationManager!")
    		if (!aniManager) {
    			$$invalidate(0, animation = new AnimationProp(animation));
    			$$invalidate(9, aniManager = new SvelthreeAnimationManager(animation, aniauto, obj, scene));
    		}
    	}

    	let { currentSceneActive } = $$props;

    	function getAnimation() {
    		if (aniManager) {
    			return aniManager.getAnimation();
    		} else {
    			console.error("SVELTHREE > SvelthreeAnimation > destroyAnimation : missing SvelthreeAnimationManager!", { aniManager });
    			return undefined;
    		}
    	}

    	function destroyAnimation() {
    		//console.warn("SVELTHREE > SvelthreeAnimation > destroyAnimation")
    		if (aniManager) {
    			aniManager.destroyAnimation();
    		} else {
    			if (animation && animationEnabled) {
    				console.error("SVELTHREE > SvelthreeAnimation > destroyAnimation : missing SvelthreeAnimationManager!", { aniManager });
    			}
    		}
    	}

    	function startAni() {
    		if (aniManager) {
    			aniManager.startAni();
    		} else {
    			console.error("SVELTHREE > SvelthreeAnimation > destroyAnimation : missing SvelthreeAnimationManager!", { aniManager });
    		}
    	}

    	onMount(() => {
    		//console.warn("SVELTHREE > onMount : SvelthreeAnimation")
    		return () => {
    			console.info("SVELTHREE > onDestroy : SvelthreeAnimation");
    			destroyAnimation();
    		};
    	});

    	const writable_props = [
    		'animationEnabled',
    		'animation',
    		'aniauto',
    		'obj',
    		'scene',
    		'currentSceneActive'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$b.warn(`<SvelthreeAnimation> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('animationEnabled' in $$props) $$invalidate(1, animationEnabled = $$props.animationEnabled);
    		if ('animation' in $$props) $$invalidate(0, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(2, aniauto = $$props.aniauto);
    		if ('obj' in $$props) $$invalidate(3, obj = $$props.obj);
    		if ('scene' in $$props) $$invalidate(4, scene = $$props.scene);
    		if ('currentSceneActive' in $$props) $$invalidate(5, currentSceneActive = $$props.currentSceneActive);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		SvelthreeAnimationManager,
    		AnimationProp,
    		animationEnabled,
    		animation,
    		aniauto,
    		obj,
    		scene,
    		aniManager,
    		createAnimationManager,
    		currentSceneActive,
    		getAnimation,
    		destroyAnimation,
    		startAni
    	});

    	$$self.$inject_state = $$props => {
    		if ('animationEnabled' in $$props) $$invalidate(1, animationEnabled = $$props.animationEnabled);
    		if ('animation' in $$props) $$invalidate(0, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(2, aniauto = $$props.aniauto);
    		if ('obj' in $$props) $$invalidate(3, obj = $$props.obj);
    		if ('scene' in $$props) $$invalidate(4, scene = $$props.scene);
    		if ('aniManager' in $$props) $$invalidate(9, aniManager = $$props.aniManager);
    		if ('currentSceneActive' in $$props) $$invalidate(5, currentSceneActive = $$props.currentSceneActive);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*animation, animationEnabled*/ 3) {
    			animation && animationEnabled
    			? createAnimationManager()
    			: null;
    		}

    		if ($$self.$$.dirty & /*currentSceneActive, aniManager*/ 544) {
    			if (currentSceneActive) {
    				aniManager
    				? aniManager.handleCurrentSceneStatus(currentSceneActive)
    				: null;
    			}
    		}
    	};

    	return [
    		animation,
    		animationEnabled,
    		aniauto,
    		obj,
    		scene,
    		currentSceneActive,
    		getAnimation,
    		destroyAnimation,
    		startAni,
    		aniManager
    	];
    }

    class SvelthreeAnimation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			animationEnabled: 1,
    			animation: 0,
    			aniauto: 2,
    			obj: 3,
    			scene: 4,
    			currentSceneActive: 5,
    			getAnimation: 6,
    			destroyAnimation: 7,
    			startAni: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvelthreeAnimation",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*currentSceneActive*/ ctx[5] === undefined && !('currentSceneActive' in props)) {
    			console_1$b.warn("<SvelthreeAnimation> was created without expected prop 'currentSceneActive'");
    		}
    	}

    	get animationEnabled() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animationEnabled(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get animation() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aniauto() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aniauto(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get obj() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set obj(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scene() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentSceneActive() {
    		throw new Error("<SvelthreeAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentSceneActive(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAnimation() {
    		return this.$$.ctx[6];
    	}

    	set getAnimation(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get destroyAnimation() {
    		return this.$$.ctx[7];
    	}

    	set destroyAnimation(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startAni() {
    		return this.$$.ctx[8];
    	}

    	set startAni(value) {
    		throw new Error("<SvelthreeAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/Camera.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$5, Object: Object_1$4, console: console_1$a } = globals;

    function create_fragment$b(ctx) {
    	let svelthreeanimation;
    	let updating_currentSceneActive;
    	let current;

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		/*svelthreeanimation_currentSceneActive_binding*/ ctx[26](value);
    	}

    	let svelthreeanimation_props = {
    		animationEnabled: /*animationEnabled*/ ctx[6],
    		animation: /*animation*/ ctx[2],
    		aniauto: /*aniauto*/ ctx[3],
    		obj: /*cam*/ ctx[0],
    		scene: /*scene*/ ctx[1]
    	};

    	if (/*currentSceneActive*/ ctx[5] !== void 0) {
    		svelthreeanimation_props.currentSceneActive = /*currentSceneActive*/ ctx[5];
    	}

    	svelthreeanimation = new SvelthreeAnimation({
    			props: svelthreeanimation_props,
    			$$inline: true
    		});

    	/*svelthreeanimation_binding*/ ctx[25](svelthreeanimation);
    	binding_callbacks.push(() => bind(svelthreeanimation, 'currentSceneActive', svelthreeanimation_currentSceneActive_binding));

    	const block = {
    		c: function create() {
    			create_component(svelthreeanimation.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$5("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(svelthreeanimation, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const svelthreeanimation_changes = {};
    			if (dirty & /*animationEnabled*/ 64) svelthreeanimation_changes.animationEnabled = /*animationEnabled*/ ctx[6];
    			if (dirty & /*animation*/ 4) svelthreeanimation_changes.animation = /*animation*/ ctx[2];
    			if (dirty & /*aniauto*/ 8) svelthreeanimation_changes.aniauto = /*aniauto*/ ctx[3];
    			if (dirty & /*cam*/ 1) svelthreeanimation_changes.obj = /*cam*/ ctx[0];
    			if (dirty & /*scene*/ 2) svelthreeanimation_changes.scene = /*scene*/ ctx[1];

    			if (!updating_currentSceneActive && dirty & /*currentSceneActive*/ 32) {
    				updating_currentSceneActive = true;
    				svelthreeanimation_changes.currentSceneActive = /*currentSceneActive*/ ctx[5];
    				add_flush_callback(() => updating_currentSceneActive = false);
    			}

    			svelthreeanimation.$set(svelthreeanimation_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svelthreeanimation.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svelthreeanimation.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*svelthreeanimation_binding*/ ctx[25](null);
    			destroy_component(svelthreeanimation, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function tryMatrixUpdate$1() {
    	console.error("SVELTHREE > Camera : updating Matrix is not yet implemented!");
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(24, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Camera', slots, []);
    	let ani;
    	let { scene } = $$props;
    	let sti;

    	if (scene) {
    		if (scene.type === "Scene") {
    			setSTI();
    		} else {
    			console.warn("SVELTHREE > Camera : You have to provide a valid 'scene' prop of type 'Scene'!", { scene });
    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	} else {
    		console.warn("SVELTHREE > Camera : You have to provide a {scene} prop!", { scene });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	let { animation = undefined } = $$props;
    	let { aniauto = undefined } = $$props;
    	let { id = undefined } = $$props;
    	let { cam } = $$props;
    	let object3DUtils;
    	let camPropIterator;

    	if (cam) {
    		object3DUtils = new Object3DUtils(cam);
    		camPropIterator = new UniversalPropIterator(cam);
    	} else {
    		console.warn("SVELTHREE > Camera : camera was not provided by parent component!", { cam });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	scene.add(cam);
    	console.info("SVELTHREE > Camera : " + cam.type + " was added to scene!", { cam, scene, total: scene.children.length });
    	cam.userData.id = id;
    	cam.userData.isActive = false;
    	cam.userData.indexInCameras = $svelthreeStores[sti].cameras.length;
    	$svelthreeStores[sti].cameras.push({ camera: cam, id, isActive: false });
    	let { pos = [0, 0, 2] } = $$props;
    	let { rot = [0, 0, 0] } = $$props;
    	let { lookAt = [0, 0, 0] } = $$props;
    	let { matrix = undefined } = $$props;
    	let { props = undefined } = $$props;
    	let { fnOnMount = undefined } = $$props;

    	onMount(fnOnMount
    	? () => fnOnMount(self)
    	: () => {
    			console.info("SVELTHREE > onMount : Camera");

    			return () => {
    				console.info("SVELTHREE > onDestroy : Camera");
    				removeCameraFromParent();
    			};
    		});

    	function setSTI() {
    		if (scene.userData.sti >= 0) {
    			$$invalidate(21, sti = scene.userData.sti);
    		} else {
    			console.warn("SVELTHREE > Camera : Failed to set 'sti' from 'scene.userData.sti', 'sti' has to be >= 0!", {
    				scene,
    				userData: scene.userData,
    				sti: scene.userData.sti
    			});

    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	}

    	function tryControlsUpdate() {
    		$svelthreeStores["orbitcontrols"]
    		? $svelthreeStores["orbitcontrols"].update()
    		: null;
    	}

    	// reactive animation handling (has to be enabled as last, so that initial animation state overrides props)
    	let currentSceneActive = false;

    	let animationEnabled = false;

    	function removeCameraFromParent() {
    		cam.parent.remove(cam);
    	}

    	function getCamera() {
    		return $svelthreeStores[sti].cameras[cam.userData.indexInCameras].camera;
    	}

    	function getIndexInCameras() {
    		return $svelthreeStores[sti].cameras[cam.userData.indexInCameras].camera.userData.indexInCameras;
    	}

    	function getSTI() {
    		return sti;
    	}

    	function getScene() {
    		return scene;
    	}

    	function getAnimation() {
    		return ani.getAnimation();
    	}

    	function startAni() {
    		ani.startAni();
    	}

    	const writable_props = [
    		'scene',
    		'animation',
    		'aniauto',
    		'id',
    		'cam',
    		'pos',
    		'rot',
    		'lookAt',
    		'matrix',
    		'props',
    		'fnOnMount'
    	];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$a.warn(`<Camera> was created with unknown prop '${key}'`);
    	});

    	function svelthreeanimation_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ani = $$value;
    			$$invalidate(4, ani);
    		});
    	}

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		currentSceneActive = value;
    		((($$invalidate(5, currentSceneActive), $$invalidate(24, $svelthreeStores)), $$invalidate(21, sti)), $$invalidate(1, scene));
    	}

    	$$self.$$set = $$props => {
    		if ('scene' in $$props) $$invalidate(1, scene = $$props.scene);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('cam' in $$props) $$invalidate(0, cam = $$props.cam);
    		if ('pos' in $$props) $$invalidate(8, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(9, rot = $$props.rot);
    		if ('lookAt' in $$props) $$invalidate(10, lookAt = $$props.lookAt);
    		if ('matrix' in $$props) $$invalidate(11, matrix = $$props.matrix);
    		if ('props' in $$props) $$invalidate(12, props = $$props.props);
    		if ('fnOnMount' in $$props) $$invalidate(13, fnOnMount = $$props.fnOnMount);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		UniversalPropIterator,
    		Object3DUtils,
    		isValidMatrix4,
    		svelthreeStores,
    		SvelthreeAnimation,
    		ani,
    		scene,
    		sti,
    		animation,
    		aniauto,
    		id,
    		cam,
    		object3DUtils,
    		camPropIterator,
    		pos,
    		rot,
    		lookAt,
    		matrix,
    		props,
    		fnOnMount,
    		setSTI,
    		tryMatrixUpdate: tryMatrixUpdate$1,
    		tryControlsUpdate,
    		currentSceneActive,
    		animationEnabled,
    		removeCameraFromParent,
    		getCamera,
    		getIndexInCameras,
    		getSTI,
    		getScene,
    		getAnimation,
    		startAni,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('ani' in $$props) $$invalidate(4, ani = $$props.ani);
    		if ('scene' in $$props) $$invalidate(1, scene = $$props.scene);
    		if ('sti' in $$props) $$invalidate(21, sti = $$props.sti);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('cam' in $$props) $$invalidate(0, cam = $$props.cam);
    		if ('object3DUtils' in $$props) $$invalidate(22, object3DUtils = $$props.object3DUtils);
    		if ('camPropIterator' in $$props) $$invalidate(23, camPropIterator = $$props.camPropIterator);
    		if ('pos' in $$props) $$invalidate(8, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(9, rot = $$props.rot);
    		if ('lookAt' in $$props) $$invalidate(10, lookAt = $$props.lookAt);
    		if ('matrix' in $$props) $$invalidate(11, matrix = $$props.matrix);
    		if ('props' in $$props) $$invalidate(12, props = $$props.props);
    		if ('fnOnMount' in $$props) $$invalidate(13, fnOnMount = $$props.fnOnMount);
    		if ('currentSceneActive' in $$props) $$invalidate(5, currentSceneActive = $$props.currentSceneActive);
    		if ('animationEnabled' in $$props) $$invalidate(6, animationEnabled = $$props.animationEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*matrix, object3DUtils, pos*/ 4196608) {
    			!matrix
    			? (object3DUtils.tryPosUpdate(pos), tryControlsUpdate())
    			: null;
    		}

    		if ($$self.$$.dirty & /*matrix, object3DUtils, rot*/ 4196864) {
    			!matrix ? object3DUtils.tryRotUpdate(rot) : null;
    		}

    		if ($$self.$$.dirty & /*matrix, object3DUtils, lookAt*/ 4197376) {
    			!matrix ? object3DUtils.tryLookAtUpdate(lookAt) : null;
    		}

    		if ($$self.$$.dirty & /*matrix*/ 2048) {
    			// TODO  implement updating Matrix
    			isValidMatrix4(matrix)
    			? (console.warn("SVELTHREE > Camera : Matrix provided, will ignore 'pos' or 'rot' props if any provided!"), tryMatrixUpdate$1())
    			: null;
    		}

    		if ($$self.$$.dirty & /*props, camPropIterator*/ 8392704) {
    			props
    			? Object.keys(props).length > 0
    				? camPropIterator
    					? camPropIterator.tryPropsUpdate(props)
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty & /*$svelthreeStores, sti, scene*/ 18874370) {
    			$$invalidate(5, currentSceneActive = $svelthreeStores[sti].scenes[scene.userData.indexInScenes].isActive);
    		}

    		if ($$self.$$.dirty & /*animation*/ 4) {
    			animation
    			? $$invalidate(6, animationEnabled = true)
    			: null;
    		}
    	};

    	return [
    		cam,
    		scene,
    		animation,
    		aniauto,
    		ani,
    		currentSceneActive,
    		animationEnabled,
    		id,
    		pos,
    		rot,
    		lookAt,
    		matrix,
    		props,
    		fnOnMount,
    		removeCameraFromParent,
    		getCamera,
    		getIndexInCameras,
    		getSTI,
    		getScene,
    		getAnimation,
    		startAni,
    		sti,
    		object3DUtils,
    		camPropIterator,
    		$svelthreeStores,
    		svelthreeanimation_binding,
    		svelthreeanimation_currentSceneActive_binding
    	];
    }

    class Camera extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			scene: 1,
    			animation: 2,
    			aniauto: 3,
    			id: 7,
    			cam: 0,
    			pos: 8,
    			rot: 9,
    			lookAt: 10,
    			matrix: 11,
    			props: 12,
    			fnOnMount: 13,
    			removeCameraFromParent: 14,
    			getCamera: 15,
    			getIndexInCameras: 16,
    			getSTI: 17,
    			getScene: 18,
    			getAnimation: 19,
    			startAni: 20
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Camera",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[1] === undefined && !('scene' in props)) {
    			console_1$a.warn("<Camera> was created without expected prop 'scene'");
    		}

    		if (/*cam*/ ctx[0] === undefined && !('cam' in props)) {
    			console_1$a.warn("<Camera> was created without expected prop 'cam'");
    		}
    	}

    	get scene() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get animation() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aniauto() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aniauto(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cam() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cam(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pos() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pos(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rot() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rot(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lookAt() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lookAt(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get matrix() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set matrix(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fnOnMount() {
    		throw new Error_1$5("<Camera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fnOnMount(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get removeCameraFromParent() {
    		return this.$$.ctx[14];
    	}

    	set removeCameraFromParent(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getCamera() {
    		return this.$$.ctx[15];
    	}

    	set getCamera(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getIndexInCameras() {
    		return this.$$.ctx[16];
    	}

    	set getIndexInCameras(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSTI() {
    		return this.$$.ctx[17];
    	}

    	set getSTI(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getScene() {
    		return this.$$.ctx[18];
    	}

    	set getScene(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAnimation() {
    		return this.$$.ctx[19];
    	}

    	set getAnimation(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startAni() {
    		return this.$$.ctx[20];
    	}

    	set startAni(value) {
    		throw new Error_1$5("<Camera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/PerspectiveCamera.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$4, console: console_1$9 } = globals;

    function create_fragment$a(ctx) {
    	let camera_1;
    	let current;

    	let camera_1_props = {
    		scene: /*scene*/ ctx[0],
    		cam: /*cam*/ ctx[9],
    		id: /*id*/ ctx[1],
    		pos: /*pos*/ ctx[4],
    		rot: /*rot*/ ctx[5],
    		lookAt: /*lookAt*/ ctx[6],
    		matrix: /*matrix*/ ctx[7],
    		props: /*props*/ ctx[8],
    		animation: /*animation*/ ctx[2],
    		aniauto: /*aniauto*/ ctx[3]
    	};

    	camera_1 = new Camera({ props: camera_1_props, $$inline: true });
    	/*camera_1_binding*/ ctx[19](camera_1);

    	const block = {
    		c: function create() {
    			create_component(camera_1.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$4("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(camera_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const camera_1_changes = {};
    			if (dirty & /*scene*/ 1) camera_1_changes.scene = /*scene*/ ctx[0];
    			if (dirty & /*cam*/ 512) camera_1_changes.cam = /*cam*/ ctx[9];
    			if (dirty & /*id*/ 2) camera_1_changes.id = /*id*/ ctx[1];
    			if (dirty & /*pos*/ 16) camera_1_changes.pos = /*pos*/ ctx[4];
    			if (dirty & /*rot*/ 32) camera_1_changes.rot = /*rot*/ ctx[5];
    			if (dirty & /*lookAt*/ 64) camera_1_changes.lookAt = /*lookAt*/ ctx[6];
    			if (dirty & /*matrix*/ 128) camera_1_changes.matrix = /*matrix*/ ctx[7];
    			if (dirty & /*props*/ 256) camera_1_changes.props = /*props*/ ctx[8];
    			if (dirty & /*animation*/ 4) camera_1_changes.animation = /*animation*/ ctx[2];
    			if (dirty & /*aniauto*/ 8) camera_1_changes.aniauto = /*aniauto*/ ctx[3];
    			camera_1.$set(camera_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(camera_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(camera_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*camera_1_binding*/ ctx[19](null);
    			destroy_component(camera_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PerspectiveCamera', slots, []);
    	let { scene } = $$props;
    	let { id = undefined } = $$props;

    	if (!id) {
    		console.warn("SVELTHREE > PerspectiveCamera : you have to provide an 'id' prop (not empty String) for Cameras in order to assign them to a 'WebGLRenderer' component!", { id });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	let { animation = undefined } = $$props;
    	let { aniauto = false } = $$props;
    	let { pos = undefined } = $$props;
    	let { rot = undefined } = $$props;
    	let { lookAt = undefined } = $$props;
    	let { matrix = undefined } = $$props;
    	let { config = undefined } = $$props;
    	let { props = undefined } = $$props;
    	let cam;

    	config && config.length > 0
    	? // TOFIX  (compiles) if possible --> Expected 4-6 arguments, but got 0 or more.
    		// WHY?  not just hardcode contructor arguments?  ANSWER  Avoiding maintaning THREE constructor changes, let THREE report constructor API Errors.
    		cam = new PerspectiveCamera(...config)
    	: cam = new PerspectiveCamera();

    	let { helper = false } = $$props;
    	let camHelper = undefined;

    	onMount(() => {
    		console.info("SVELTHREE > onMount : " + cam.type);
    		startUpdatingHelper();

    		return () => {
    			console.info("SVELTHREE > onDestroy : " + cam.type);
    			stopUpdatingHelper();
    		};
    	});

    	function createHelper() {
    		$$invalidate(18, camHelper = new CameraHelper(cam));
    		scene.add(camHelper);
    		$$invalidate(18, camHelper.visible = false, camHelper);

    		console.info("SVELTHREE > " + cam.type + " : HELPER added!", {
    			camHelper,
    			scene,
    			total: scene.children.length
    		});
    	}

    	let doUpdateHelper = false;
    	let updateHelper_rAF = 0;

    	function startUpdatingHelper() {
    		doUpdateHelper = true;
    		updateHelper_rAF = requestAnimationFrame(updateHelper);
    	}

    	function stopUpdatingHelper() {
    		doUpdateHelper = false;
    		cancelAnimationFrame(updateHelper_rAF);
    	}

    	function updateHelper() {
    		if (doUpdateHelper) {
    			camHelper ? camHelper.update() : null;
    			requestAnimationFrame(updateHelper);
    		}
    	}

    	function getHelper() {
    		return camHelper;
    	}

    	function getId() {
    		return id;
    	}

    	/*
    export function getCamera() {
        return cam;
    }
     */
    	/** TODO  how to type Svelte components?
     * type SvelteComponent = import('*.svelte').default
     * */
    	// TODO  do I have to write an Interface by myself?
    	let camera; // typeof = 'object'

    	function getCamera() {
    		// TODO  keep an eye on it / fix. compiles without errors, so leave it.
    		return camera.getCamera();
    	}

    	function getIndexInCameras() {
    		return camera.getIndexInCameras();
    	}

    	function getSTI() {
    		return camera.getSTI();
    	}

    	const writable_props = [
    		'scene',
    		'id',
    		'animation',
    		'aniauto',
    		'pos',
    		'rot',
    		'lookAt',
    		'matrix',
    		'config',
    		'props',
    		'helper'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$9.warn(`<PerspectiveCamera> was created with unknown prop '${key}'`);
    	});

    	function camera_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			camera = $$value;
    			$$invalidate(10, camera);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('scene' in $$props) $$invalidate(0, scene = $$props.scene);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('pos' in $$props) $$invalidate(4, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(5, rot = $$props.rot);
    		if ('lookAt' in $$props) $$invalidate(6, lookAt = $$props.lookAt);
    		if ('matrix' in $$props) $$invalidate(7, matrix = $$props.matrix);
    		if ('config' in $$props) $$invalidate(11, config = $$props.config);
    		if ('props' in $$props) $$invalidate(8, props = $$props.props);
    		if ('helper' in $$props) $$invalidate(12, helper = $$props.helper);
    	};

    	$$self.$capture_state = () => ({
    		PerspectiveCamera,
    		CameraHelper,
    		Camera,
    		onMount,
    		scene,
    		id,
    		animation,
    		aniauto,
    		pos,
    		rot,
    		lookAt,
    		matrix,
    		config,
    		props,
    		cam,
    		helper,
    		camHelper,
    		createHelper,
    		doUpdateHelper,
    		updateHelper_rAF,
    		startUpdatingHelper,
    		stopUpdatingHelper,
    		updateHelper,
    		getHelper,
    		getId,
    		camera,
    		getCamera,
    		getIndexInCameras,
    		getSTI
    	});

    	$$self.$inject_state = $$props => {
    		if ('scene' in $$props) $$invalidate(0, scene = $$props.scene);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('pos' in $$props) $$invalidate(4, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(5, rot = $$props.rot);
    		if ('lookAt' in $$props) $$invalidate(6, lookAt = $$props.lookAt);
    		if ('matrix' in $$props) $$invalidate(7, matrix = $$props.matrix);
    		if ('config' in $$props) $$invalidate(11, config = $$props.config);
    		if ('props' in $$props) $$invalidate(8, props = $$props.props);
    		if ('cam' in $$props) $$invalidate(9, cam = $$props.cam);
    		if ('helper' in $$props) $$invalidate(12, helper = $$props.helper);
    		if ('camHelper' in $$props) $$invalidate(18, camHelper = $$props.camHelper);
    		if ('doUpdateHelper' in $$props) doUpdateHelper = $$props.doUpdateHelper;
    		if ('updateHelper_rAF' in $$props) updateHelper_rAF = $$props.updateHelper_rAF;
    		if ('camera' in $$props) $$invalidate(10, camera = $$props.camera);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*camHelper, cam, helper*/ 266752) {
    			!camHelper && cam && helper ? createHelper() : null;
    		}
    	};

    	return [
    		scene,
    		id,
    		animation,
    		aniauto,
    		pos,
    		rot,
    		lookAt,
    		matrix,
    		props,
    		cam,
    		camera,
    		config,
    		helper,
    		getHelper,
    		getId,
    		getCamera,
    		getIndexInCameras,
    		getSTI,
    		camHelper,
    		camera_1_binding
    	];
    }

    class PerspectiveCamera_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			scene: 0,
    			id: 1,
    			animation: 2,
    			aniauto: 3,
    			pos: 4,
    			rot: 5,
    			lookAt: 6,
    			matrix: 7,
    			config: 11,
    			props: 8,
    			helper: 12,
    			getHelper: 13,
    			getId: 14,
    			getCamera: 15,
    			getIndexInCameras: 16,
    			getSTI: 17
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PerspectiveCamera_1",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[0] === undefined && !('scene' in props)) {
    			console_1$9.warn("<PerspectiveCamera> was created without expected prop 'scene'");
    		}
    	}

    	get scene() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get animation() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aniauto() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aniauto(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pos() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pos(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rot() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rot(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lookAt() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lookAt(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get matrix() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set matrix(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get config() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get helper() {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set helper(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getHelper() {
    		return this.$$.ctx[13];
    	}

    	set getHelper(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getId() {
    		return this.$$.ctx[14];
    	}

    	set getId(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getCamera() {
    		return this.$$.ctx[15];
    	}

    	set getCamera(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getIndexInCameras() {
    		return this.$$.ctx[16];
    	}

    	set getIndexInCameras(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSTI() {
    		return this.$$.ctx[17];
    	}

    	set getSTI(value) {
    		throw new Error_1$4("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/SvelthreeInteraction.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1$3, console: console_1$8 } = globals;

    function create_fragment$9(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getPointerData(e) {
    	let pointerData = {
    		// PointerEventInit props, see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent
    		pointerId: 1976 + e["pointerId"],
    		width: e["width"],
    		height: e["height"],
    		pressure: e["pressure"],
    		tangentialPressure: e["tangentialPressure"],
    		tiltX: e["tangentialPressure"],
    		tiltY: e["tiltY"],
    		twist: e["twist"],
    		pointerType: e["pointerType"],
    		isPrimary: e["isPrimary"],
    		// without PointerEvent methods
    		// MouseEvent props, see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
    		altKey: e.altKey,
    		button: e.button,
    		buttons: e.buttons,
    		clientX: e.clientX,
    		clientY: e.clientY,
    		ctrlKey: e.ctrlKey,
    		metaKey: e.metaKey,
    		movementX: e.movementX,
    		movementY: e.movementY,
    		offsetX: e.offsetX,
    		offsetY: e.offsetY,
    		pageX: e.pageX,
    		pageY: e.pageY,
    		//region: e.region, // doesn't exist on Mouse or PointerEvent, deprecated?
    		relatedTarget: e.relatedTarget,
    		screenX: e.screenX,
    		screenY: e.screenY,
    		shiftKey: e.shiftKey,
    		//which // not standardized
    		//mozPressure // deprecated
    		//mozInputSource // not standardized
    		//webkitForce // not standardized
    		x: e.x,
    		y: e.y, // = clientY
    		
    	}; // without MouseEvent methods

    	return pointerData;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(8, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SvelthreeInteraction', slots, []);
    	let { interactionEnabled } = $$props;
    	let { parent } = $$props;
    	let { sti } = $$props;
    	let { obj } = $$props;

    	//export let recursive: boolean
    	let raycaster;

    	let { dispatch } = $$props;

    	/**
     * Canvas-DOM-Element listens to 'pointermove' the whole time in order to trigger over/out enter/leave events
     */
    	let c;

    	// Use single pointermove from canvas via store
    	let lastPointerMoveEvent;

    	function addListeners() {
    		c.addEventListener("click", tryDispatch, false);
    		c.addEventListener("pointerup", tryDispatch, false);
    		c.addEventListener("pointerdown", tryDispatch, false);
    	}

    	function removeListeners() {
    		c.removeEventListener("click", tryDispatch);
    		c.removeEventListener("pointerup", tryDispatch);
    		c.removeEventListener("pointerdown", tryDispatch);
    	}

    	let checks = {
    		click: { check: dispatchOnIntersect },
    		pointerup: { check: dispatchOnIntersect },
    		pointerdown: { check: dispatchOnIntersect },
    		pointermove: { check: dispatchAlways }
    	};

    	function tryDispatch(e) {
    		if (checks.hasOwnProperty(e.type)) {
    			checks[e.type].check(e);
    		}
    	}

    	onMount(() => {
    		console.info("SVELTHREE > onMount : SvelthreeInteraction");

    		return () => {
    			console.info("SVELTHREE > onDestroy : SvelthreeInteraction");
    			$$invalidate(0, obj.userData.interact = false, obj);

    			if (c) {
    				c.removeEventListener("pointermove", checkOverOut);
    				c.removeEventListener("click", tryDispatch);
    				c.removeEventListener("pointerup", tryDispatch);
    				c.removeEventListener("pointerdown", tryDispatch);
    				c.removeEventListener("pointermove", tryDispatch);
    			}
    		};
    	});

    	let isOverDispatched = false;
    	let isOutDispatched = true;
    	let raycasterData;

    	/**
     * The checkOverOut could maybe also be further optimized to bypass raycaster check one level higher?
     * Although we already get very decent performance with high number of interactive objects, the problem is
     * this check happens on every pointermove event in every interactive object. Not sure if some distance calculation
     * based on e.g. the bounding box of the mesh would be more performant than simply checking "allIntersections" in
     * store like we do at the moment. hmm...
     */
    	function checkOverOut(e) {
    		if (intersects()) {
    			if (!isOverDispatched) {
    				let pointerData = getPointerData(e);

    				mDispatch(
    					"pointerenter",
    					{
    						type: "pointerenter",
    						target: obj,
    						pointerData,
    						raycasterData
    					},
    					!!parent.onPointerEnter
    				);

    				mDispatch(
    					"pointerover",
    					{
    						type: "pointerover",
    						target: obj,
    						pointerData,
    						raycasterData
    					},
    					!!parent.onPointerOver
    				);

    				isOverDispatched = true;
    				isOutDispatched = false;
    			}
    		} else {
    			if (!isOutDispatched) {
    				let pointerData = getPointerData(e);

    				mDispatch(
    					"pointerout",
    					{
    						type: "pointerout",
    						target: obj,
    						pointerData,
    						raycasterData
    					},
    					!!parent.onPointerOut
    				);

    				mDispatch(
    					"pointerleave",
    					{
    						type: "pointerleave",
    						target: obj,
    						pointerData,
    						raycasterData
    					},
    					!!parent.onPointerLeave
    				);

    				isOutDispatched = true;
    				isOverDispatched = false;
    			}
    		}
    	}

    	/**
     * Proccess 'pointermove'-event only if parent component has been rendered with an on:click handler
     * or if an internal 'onPointerMove'-handler was provided.
     * @see https://discord.com/channels/457912077277855764/457912077277855766/728789428729938021
     * @see https://svelte.dev/repl/b7d49058463c48cbb1b35cbbe19c184d?version=3.24.0
     */
    	function dispatchAlways(e) {
    		Object.keys(parent.$$.callbacks).includes("pointermove")
    		? dispatch(e.type, {
    				event: e,
    				target: obj,
    				unprojected: $svelthreeStores[sti].pointer.unprojected
    			})
    		: null;

    		parent.onPointerMove
    		? onPointerMoveAction(new CustomEvent(e.type,
    			{
    					detail: {
    						event: e,
    						target: obj,
    						unprojected: $svelthreeStores[sti].pointer.unprojected
    					}
    				}))
    		: null;
    	}

    	function dispatchOnIntersect(e) {
    		if (intersects()) {
    			e.type === "click"
    			? doDispatch(e, !!parent.onClick)
    			: null;

    			e.type === "pointerup"
    			? doDispatch(e, !!parent.onPointerUp)
    			: null;

    			e.type === "pointerdown"
    			? doDispatch(e, !!parent.onPointerDown)
    			: null;
    		}
    	}

    	function doDispatch(e, fireInternal) {
    		let pointerData = getPointerData(e);

    		mDispatch(
    			e.type,
    			{
    				type: e.type,
    				target: obj,
    				pointerData,
    				raycasterData
    			},
    			fireInternal
    		);
    	}

    	function mDispatch(message, details, fireInternal) {
    		dispatch(message, details);

    		if (fireInternal) {
    			let event = new CustomEvent(message, { detail: details });

    			switch (message) {
    				case "click":
    					parent.onClick ? onClickAction(event) : null;
    					break;
    				case "pointerup":
    					parent.onPointerUp ? onPointerUpAction(event) : null;
    					break;
    				case "pointerdown":
    					parent.onPointerDown ? onPointerDownAction(event) : null;
    					break;
    				case "pointerover":
    					parent.onPointerOver ? onPointerOverAction(event) : null;
    					break;
    				case "pointerout":
    					parent.onPointerOut ? onPointerOutAction(event) : null;
    					break;
    				case "pointerenter":
    					parent.onPointerOut ? onPointerEnterAction(event) : null;
    					break;
    				case "pointerleave":
    					parent.onPointerLeave
    					? onPointerLeaveAction(event)
    					: null;
    					break;
    			}
    		}
    	}

    	/**
     * @see https://threejs.org/docs/#api/en/core/Raycaster
     */
    	function intersects() {
    		if ($svelthreeStores[sti].allIntersections) {
    			if ($svelthreeStores[sti].allIntersections.length > 0 && $svelthreeStores[sti].allIntersections[0].object === obj) {
    				let intersects = raycaster.intersectObject(obj);

    				raycasterData = {
    					intersections: intersects,
    					ray: raycaster.ray,
    					camera: raycaster.camera,
    					unprojectedPoint: new Vector3($svelthreeStores[sti].pointer.pos.x, $svelthreeStores[sti].pointer.pos.y, 0).unproject(raycaster.camera)
    				};

    				return true;
    			} else {
    				return false;
    			}
    		} else {
    			return false;
    		}
    	}

    	// --- Internal Actions ---
    	function onClickAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction :internal onClickAction!");

    		typeof parent.onClick === "function"
    		? parent.onClick(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onClick' object is not a valid function!");
    	}

    	function onPointerUpAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerUpAction!");

    		typeof parent.onPointerUp === "function"
    		? parent.onPointerUp(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerUp' object is not a function!");
    	}

    	function onPointerDownAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerDownAction!");

    		typeof parent.onPointerDown === "function"
    		? parent.onPointerDown(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerDown' object is not a function!");
    	}

    	function onPointerOverAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerOverAction!", e);

    		typeof parent.onPointerOver === "function"
    		? parent.onPointerOver(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerOver' object is not a function!");
    	}

    	function onPointerOutAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerOutAction!", e);

    		typeof parent.onPointerOut === "function"
    		? parent.onPointerOut(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerOut' object is not a function!");
    	}

    	function onPointerEnterAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerEnterAction!", e);

    		typeof parent.onPointerEnter === "function"
    		? parent.onPointerEnter(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerEnter' object is not a function!");
    	}

    	function onPointerLeaveAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerLeaveAction!", e);

    		typeof parent.onPointerLeave === "function"
    		? parent.onPointerLeave(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerLeave' object is not a function!");
    	}

    	function onPointerMoveAction(e) {
    		console.info("SVELTHREE > SvelthreeInteraction : internal onPointerMoveAction!");

    		typeof parent.onPointerMove === "function"
    		? parent.onPointerMove(e)
    		: console.error("SVELTHREE > SvelthreeInteraction : provided 'onPointerMove' object is not a function!");
    	}

    	const writable_props = ['interactionEnabled', 'parent', 'sti', 'obj', 'dispatch'];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$8.warn(`<SvelthreeInteraction> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('interactionEnabled' in $$props) $$invalidate(1, interactionEnabled = $$props.interactionEnabled);
    		if ('parent' in $$props) $$invalidate(2, parent = $$props.parent);
    		if ('sti' in $$props) $$invalidate(3, sti = $$props.sti);
    		if ('obj' in $$props) $$invalidate(0, obj = $$props.obj);
    		if ('dispatch' in $$props) $$invalidate(4, dispatch = $$props.dispatch);
    	};

    	$$self.$capture_state = () => ({
    		svelthreeStores,
    		onMount,
    		Vector3,
    		interactionEnabled,
    		parent,
    		sti,
    		obj,
    		raycaster,
    		dispatch,
    		c,
    		lastPointerMoveEvent,
    		addListeners,
    		removeListeners,
    		checks,
    		tryDispatch,
    		isOverDispatched,
    		isOutDispatched,
    		raycasterData,
    		getPointerData,
    		checkOverOut,
    		dispatchAlways,
    		dispatchOnIntersect,
    		doDispatch,
    		mDispatch,
    		intersects,
    		onClickAction,
    		onPointerUpAction,
    		onPointerDownAction,
    		onPointerOverAction,
    		onPointerOutAction,
    		onPointerEnterAction,
    		onPointerLeaveAction,
    		onPointerMoveAction,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('interactionEnabled' in $$props) $$invalidate(1, interactionEnabled = $$props.interactionEnabled);
    		if ('parent' in $$props) $$invalidate(2, parent = $$props.parent);
    		if ('sti' in $$props) $$invalidate(3, sti = $$props.sti);
    		if ('obj' in $$props) $$invalidate(0, obj = $$props.obj);
    		if ('raycaster' in $$props) $$invalidate(5, raycaster = $$props.raycaster);
    		if ('dispatch' in $$props) $$invalidate(4, dispatch = $$props.dispatch);
    		if ('c' in $$props) $$invalidate(6, c = $$props.c);
    		if ('lastPointerMoveEvent' in $$props) $$invalidate(7, lastPointerMoveEvent = $$props.lastPointerMoveEvent);
    		if ('checks' in $$props) checks = $$props.checks;
    		if ('isOverDispatched' in $$props) isOverDispatched = $$props.isOverDispatched;
    		if ('isOutDispatched' in $$props) isOutDispatched = $$props.isOutDispatched;
    		if ('raycasterData' in $$props) raycasterData = $$props.raycasterData;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$svelthreeStores, sti*/ 264) {
    			$svelthreeStores[sti].raycaster
    			? $$invalidate(5, raycaster = $svelthreeStores[sti].raycaster)
    			: null;
    		}

    		if ($$self.$$.dirty & /*$svelthreeStores, sti*/ 264) {
    			$svelthreeStores[sti].canvas.dom
    			? $$invalidate(6, c = $svelthreeStores[sti].canvas.dom)
    			: null;
    		}

    		if ($$self.$$.dirty & /*c, interactionEnabled, obj*/ 67) {
    			if (c) {
    				if (interactionEnabled && obj && !obj.userData.interact) {
    					addListeners();
    					$$invalidate(0, obj.userData.interact = true, obj);
    				} else if (!interactionEnabled && obj && obj.userData.interact) {
    					removeListeners();
    					$$invalidate(0, obj.userData.interact = false, obj);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*interactionEnabled, obj, raycaster, $svelthreeStores, sti, lastPointerMoveEvent*/ 427) {
    			if (interactionEnabled) {
    				if (obj && raycaster) {
    					if ($svelthreeStores[sti].pointer.event !== lastPointerMoveEvent) {
    						$$invalidate(7, lastPointerMoveEvent = $svelthreeStores[sti].pointer.event);
    						checkOverOut(lastPointerMoveEvent);
    						tryDispatch(lastPointerMoveEvent);
    					}
    				}
    			} else if (obj && obj.userData.interact) {
    				$$invalidate(0, obj.userData.interact = false, obj);
    				removeListeners();
    			}
    		}
    	};

    	return [
    		obj,
    		interactionEnabled,
    		parent,
    		sti,
    		dispatch,
    		raycaster,
    		c,
    		lastPointerMoveEvent,
    		$svelthreeStores
    	];
    }

    class SvelthreeInteraction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			interactionEnabled: 1,
    			parent: 2,
    			sti: 3,
    			obj: 0,
    			dispatch: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvelthreeInteraction",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*interactionEnabled*/ ctx[1] === undefined && !('interactionEnabled' in props)) {
    			console_1$8.warn("<SvelthreeInteraction> was created without expected prop 'interactionEnabled'");
    		}

    		if (/*parent*/ ctx[2] === undefined && !('parent' in props)) {
    			console_1$8.warn("<SvelthreeInteraction> was created without expected prop 'parent'");
    		}

    		if (/*sti*/ ctx[3] === undefined && !('sti' in props)) {
    			console_1$8.warn("<SvelthreeInteraction> was created without expected prop 'sti'");
    		}

    		if (/*obj*/ ctx[0] === undefined && !('obj' in props)) {
    			console_1$8.warn("<SvelthreeInteraction> was created without expected prop 'obj'");
    		}

    		if (/*dispatch*/ ctx[4] === undefined && !('dispatch' in props)) {
    			console_1$8.warn("<SvelthreeInteraction> was created without expected prop 'dispatch'");
    		}
    	}

    	get interactionEnabled() {
    		throw new Error("<SvelthreeInteraction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set interactionEnabled(value) {
    		throw new Error("<SvelthreeInteraction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parent() {
    		throw new Error("<SvelthreeInteraction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parent(value) {
    		throw new Error("<SvelthreeInteraction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sti() {
    		throw new Error("<SvelthreeInteraction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sti(value) {
    		throw new Error("<SvelthreeInteraction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get obj() {
    		throw new Error("<SvelthreeInteraction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set obj(value) {
    		throw new Error("<SvelthreeInteraction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dispatch() {
    		throw new Error("<SvelthreeInteraction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dispatch(value) {
    		throw new Error("<SvelthreeInteraction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/Mesh.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$3, Object: Object_1$2, console: console_1$7 } = globals;

    const get_default_slot_changes$2 = dirty => ({
    	scene: dirty[0] & /*scene*/ 4,
    	parent: dirty[0] & /*parentForSlot*/ 2
    });

    const get_default_slot_context$2 = ctx => ({
    	scene: /*scene*/ ctx[2],
    	parent: /*parentForSlot*/ ctx[1]
    });

    function create_fragment$8(ctx) {
    	let t0;
    	let svelthreeanimation;
    	let updating_currentSceneActive;
    	let t1;
    	let svelthreeinteraction;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[49].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], get_default_slot_context$2);

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		/*svelthreeanimation_currentSceneActive_binding*/ ctx[51](value);
    	}

    	let svelthreeanimation_props = {
    		animationEnabled: /*animationEnabled*/ ctx[8],
    		animation: /*animation*/ ctx[4],
    		aniauto: /*aniauto*/ ctx[3],
    		obj: /*mesh*/ ctx[0],
    		scene: /*scene*/ ctx[2]
    	};

    	if (/*currentSceneActive*/ ctx[7] !== void 0) {
    		svelthreeanimation_props.currentSceneActive = /*currentSceneActive*/ ctx[7];
    	}

    	svelthreeanimation = new SvelthreeAnimation({
    			props: svelthreeanimation_props,
    			$$inline: true
    		});

    	/*svelthreeanimation_binding*/ ctx[50](svelthreeanimation);
    	binding_callbacks.push(() => bind(svelthreeanimation, 'currentSceneActive', svelthreeanimation_currentSceneActive_binding));

    	svelthreeinteraction = new SvelthreeInteraction({
    			props: {
    				sti: /*sti*/ ctx[5],
    				dispatch: /*dispatch*/ ctx[11],
    				obj: /*mesh*/ ctx[0],
    				parent: /*self*/ ctx[10],
    				interactionEnabled: /*interactionEnabled*/ ctx[9]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    			t0 = space();
    			create_component(svelthreeanimation.$$.fragment);
    			t1 = space();
    			create_component(svelthreeinteraction.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			mount_component(svelthreeanimation, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(svelthreeinteraction, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*scene, parentForSlot*/ 6 | dirty[1] & /*$$scope*/ 131072)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[48],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[48])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[48], dirty, get_default_slot_changes$2),
    						get_default_slot_context$2
    					);
    				}
    			}

    			const svelthreeanimation_changes = {};
    			if (dirty[0] & /*animationEnabled*/ 256) svelthreeanimation_changes.animationEnabled = /*animationEnabled*/ ctx[8];
    			if (dirty[0] & /*animation*/ 16) svelthreeanimation_changes.animation = /*animation*/ ctx[4];
    			if (dirty[0] & /*aniauto*/ 8) svelthreeanimation_changes.aniauto = /*aniauto*/ ctx[3];
    			if (dirty[0] & /*mesh*/ 1) svelthreeanimation_changes.obj = /*mesh*/ ctx[0];
    			if (dirty[0] & /*scene*/ 4) svelthreeanimation_changes.scene = /*scene*/ ctx[2];

    			if (!updating_currentSceneActive && dirty[0] & /*currentSceneActive*/ 128) {
    				updating_currentSceneActive = true;
    				svelthreeanimation_changes.currentSceneActive = /*currentSceneActive*/ ctx[7];
    				add_flush_callback(() => updating_currentSceneActive = false);
    			}

    			svelthreeanimation.$set(svelthreeanimation_changes);
    			const svelthreeinteraction_changes = {};
    			if (dirty[0] & /*sti*/ 32) svelthreeinteraction_changes.sti = /*sti*/ ctx[5];
    			if (dirty[0] & /*mesh*/ 1) svelthreeinteraction_changes.obj = /*mesh*/ ctx[0];
    			if (dirty[0] & /*interactionEnabled*/ 512) svelthreeinteraction_changes.interactionEnabled = /*interactionEnabled*/ ctx[9];
    			svelthreeinteraction.$set(svelthreeinteraction_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(svelthreeanimation.$$.fragment, local);
    			transition_in(svelthreeinteraction.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(svelthreeanimation.$$.fragment, local);
    			transition_out(svelthreeinteraction.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t0);
    			/*svelthreeanimation_binding*/ ctx[50](null);
    			destroy_component(svelthreeanimation, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(svelthreeinteraction, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function tryMatrixUpdate() {
    	console.error("SVELTHREE > Mesh : updating Matrix is not yet implemented!");
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(47, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Mesh', slots, ['default']);
    	let ani;
    	let self = get_current_component();
    	let dispatch = createEventDispatcher();
    	let { name = undefined } = $$props;
    	let { parent = undefined } = $$props;
    	let { parentForSlot = undefined } = $$props;
    	let { parentForUs = undefined } = $$props;
    	let { scene } = $$props;
    	let { aniauto = undefined } = $$props;
    	let { interact = undefined } = $$props;

    	//export let recursive: boolean = undefined
    	let sti;

    	if (scene) {
    		if (scene.type === "Scene") {
    			setSTI();
    		} else {
    			console.warn("SVELTHREE > Mesh : You have to provide a valid 'scene' prop of type 'Scene'!", { scene });
    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	} else {
    		console.warn("SVELTHREE > Mesh : You have to provide a {scene} prop!", { scene });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	let interactive = undefined;
    	let generate = false;
    	let { mesh = undefined } = $$props;
    	let object3DUtils;
    	let meshPropIterator;
    	let matPropIterator;
    	let { material = undefined } = $$props;
    	let { geometry = undefined } = $$props;

    	mesh
    	? (generate = false, onMeshProvided())
    	: generate = true;

    	function onMeshProvided() {
    		// check if mesh is really a Mesh then do the rest
    		if (mesh.type === "Mesh") {
    			mesh.geometry
    			? $$invalidate(13, geometry = mesh.geometry)
    			: null;

    			mesh.material
    			? $$invalidate(12, material = mesh.material)
    			: console.warn("SVELTHREE > Mesh : Mesh provided, but has no material!", { mesh });

    			console.info("SVELTHREE > Mesh : Saved geometry:", { geometry });
    			console.info("SVELTHREE > Mesh : Saved material:", { material });
    			($$invalidate(0, mesh.userData.initScale = mesh.scale.x, mesh), $$invalidate(44, object3DUtils = new Object3DUtils(mesh)));
    			$$invalidate(45, meshPropIterator = new UniversalPropIterator(mesh));

    			material
    			? $$invalidate(46, matPropIterator = new UniversalPropIterator(material))
    			: null;
    		}
    	}

    	/**
     * Determining parent immediately if mesh is available on initialization (generate false)
     */
    	if (!generate) {
    		if (!parent) {
    			parentForSlot = mesh;
    		} else {
    			if (parent !== mesh) {
    				parentForUs = parent;
    				parentForSlot = mesh;
    			}
    		}
    	}

    	function checkParentSlot() {
    		if (generate) {
    			if (mesh && !parent) {
    				//parent was not provided, means we are the root parent
    				$$invalidate(1, parentForSlot = mesh);
    			} else {
    				if (!mesh) {
    					console.error("SVELTHREE > Mesh : 'parent' check : no mesh provided yet!");
    				} else if (parent) {
    					//parent is already there, either it has been provided or set on mesh generation to the mesh itself
    					//means this parent was provided and we are child
    					if (parent !== mesh) {
    						//set self as parent for next slot
    						$$invalidate(14, parentForUs = parent);

    						$$invalidate(1, parentForSlot = mesh);
    					} /* nothing */
    				}
    			}
    		}
    	}

    	let { userData = undefined } = $$props;

    	function tryApplyUserData() {
    		if (mesh) {
    			$$invalidate(0, mesh.userData = Object.assign(Object.assign({}, mesh.userData), userData), mesh);
    		}
    	}

    	let { animation = undefined } = $$props;
    	let { mat = undefined } = $$props;
    	let { pos = undefined } = $$props;
    	let { rot = undefined } = $$props;
    	let { scale = undefined } = $$props;
    	let { castShadow = undefined } = $$props;
    	let { receiveShadow = undefined } = $$props;
    	let { matrix = undefined } = $$props;
    	let { props = undefined } = $$props;

    	// reactive animation handling (has to be enabled as last, so that initial animation state overrides props)
    	let currentSceneActive = false;

    	let animationEnabled = false;
    	let interactionEnabled = undefined;
    	let { fnOnMount = undefined } = $$props;

    	onMount(fnOnMount
    	? () => fnOnMount(self)
    	: () => {
    			if (parent) {
    				console.info("SVELTHREE > onMount : Mesh, parent: ", parent);
    			} else {
    				console.info("SVELTHREE > onMount : Mesh");
    			}

    			return () => {
    				console.info("SVELTHREE > onDestroy : Mesh");
    				removeMeshFromParent();
    			};
    		});

    	function setSTI() {
    		if (scene.userData.sti >= 0) {
    			$$invalidate(5, sti = scene.userData.sti);
    		} else {
    			console.warn("SVELTHREE > Mesh : Failed to set 'sti' from 'scene.userData.sti', 'sti' has to be >= 0!", {
    				scene,
    				userData: scene.userData,
    				sti: scene.userData.sti
    			});

    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	}

    	function tryAddingMesh() {
    		if (!parentForUs) {
    			if (mesh.parent !== scene) {
    				scene.add(mesh);

    				console.info("SVELTHREE > Mesh : " + geometry.type + " was added to scene!", {
    					mesh,
    					scene,
    					total: scene.children.length
    				});
    			}
    		} else {
    			if (mesh.parent !== parentForUs) {
    				parentForUs.add(mesh);

    				console.info("SVELTHREE > Mesh : " + geometry.type + " was added to parent!", {
    					mesh,
    					parent: parentForUs,
    					scene,
    					total: scene.children.length
    				});
    			}
    		}
    	}

    	function tryMaterialUpdate() {
    		mesh
    		? ($$invalidate(0, mesh.material = material, mesh), console.info("SVELTHREE > Mesh : Material updated!"), matPropIterator
    			? matPropIterator.tryPropsUpdate(mat)
    			: null)
    		: null;
    	}

    	function tryGeometryUpdate() {
    		mesh
    		? ($$invalidate(0, mesh.geometry = geometry, mesh), console.info("SVELTHREE > Mesh : Geometry updated!"))
    		: null;
    	}

    	function tryCastShadowUpdate() {
    		mesh
    		? $$invalidate(0, mesh.castShadow = castShadow, mesh)
    		: null;
    	}

    	function tryReceiveShadowUpdate() {
    		mesh
    		? $$invalidate(0, mesh.receiveShadow = receiveShadow, mesh)
    		: null;
    	}

    	function removeMeshFromParent() {
    		mesh.parent.remove(mesh);
    	}

    	function getMesh() {
    		return mesh;
    	}

    	function getName() {
    		return name;
    	}

    	function getScene() {
    		return scene;
    	}

    	function getAnimation() {
    		return ani.getAnimation();
    	}

    	function startAni() {
    		ani.startAni();
    	}

    	let { onClick = undefined } = $$props;
    	let { onPointerUp = undefined } = $$props;
    	let { onPointerDown = undefined } = $$props;
    	let { onPointerOver = undefined } = $$props;
    	let { onPointerOut = undefined } = $$props;
    	let { onPointerEnter = undefined } = $$props;
    	let { onPointerLeave = undefined } = $$props;
    	let { onPointerMove = undefined } = $$props;

    	const writable_props = [
    		'name',
    		'parent',
    		'parentForSlot',
    		'parentForUs',
    		'scene',
    		'aniauto',
    		'interact',
    		'mesh',
    		'material',
    		'geometry',
    		'userData',
    		'animation',
    		'mat',
    		'pos',
    		'rot',
    		'scale',
    		'castShadow',
    		'receiveShadow',
    		'matrix',
    		'props',
    		'fnOnMount',
    		'onClick',
    		'onPointerUp',
    		'onPointerDown',
    		'onPointerOver',
    		'onPointerOut',
    		'onPointerEnter',
    		'onPointerLeave',
    		'onPointerMove'
    	];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<Mesh> was created with unknown prop '${key}'`);
    	});

    	function svelthreeanimation_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ani = $$value;
    			$$invalidate(6, ani);
    		});
    	}

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		currentSceneActive = value;
    		((($$invalidate(7, currentSceneActive), $$invalidate(47, $svelthreeStores)), $$invalidate(5, sti)), $$invalidate(2, scene));
    	}

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(15, name = $$props.name);
    		if ('parent' in $$props) $$invalidate(16, parent = $$props.parent);
    		if ('parentForSlot' in $$props) $$invalidate(1, parentForSlot = $$props.parentForSlot);
    		if ('parentForUs' in $$props) $$invalidate(14, parentForUs = $$props.parentForUs);
    		if ('scene' in $$props) $$invalidate(2, scene = $$props.scene);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('interact' in $$props) $$invalidate(17, interact = $$props.interact);
    		if ('mesh' in $$props) $$invalidate(0, mesh = $$props.mesh);
    		if ('material' in $$props) $$invalidate(12, material = $$props.material);
    		if ('geometry' in $$props) $$invalidate(13, geometry = $$props.geometry);
    		if ('userData' in $$props) $$invalidate(18, userData = $$props.userData);
    		if ('animation' in $$props) $$invalidate(4, animation = $$props.animation);
    		if ('mat' in $$props) $$invalidate(19, mat = $$props.mat);
    		if ('pos' in $$props) $$invalidate(20, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(21, rot = $$props.rot);
    		if ('scale' in $$props) $$invalidate(22, scale = $$props.scale);
    		if ('castShadow' in $$props) $$invalidate(23, castShadow = $$props.castShadow);
    		if ('receiveShadow' in $$props) $$invalidate(24, receiveShadow = $$props.receiveShadow);
    		if ('matrix' in $$props) $$invalidate(25, matrix = $$props.matrix);
    		if ('props' in $$props) $$invalidate(26, props = $$props.props);
    		if ('fnOnMount' in $$props) $$invalidate(27, fnOnMount = $$props.fnOnMount);
    		if ('onClick' in $$props) $$invalidate(34, onClick = $$props.onClick);
    		if ('onPointerUp' in $$props) $$invalidate(35, onPointerUp = $$props.onPointerUp);
    		if ('onPointerDown' in $$props) $$invalidate(36, onPointerDown = $$props.onPointerDown);
    		if ('onPointerOver' in $$props) $$invalidate(37, onPointerOver = $$props.onPointerOver);
    		if ('onPointerOut' in $$props) $$invalidate(38, onPointerOut = $$props.onPointerOut);
    		if ('onPointerEnter' in $$props) $$invalidate(39, onPointerEnter = $$props.onPointerEnter);
    		if ('onPointerLeave' in $$props) $$invalidate(40, onPointerLeave = $$props.onPointerLeave);
    		if ('onPointerMove' in $$props) $$invalidate(41, onPointerMove = $$props.onPointerMove);
    		if ('$$scope' in $$props) $$invalidate(48, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		get_current_component,
    		Mesh,
    		svelthreeStores,
    		UniversalPropIterator,
    		Object3DUtils,
    		SvelthreeAnimation,
    		isValidArray3Prop,
    		isValidMatrix4,
    		SvelthreeInteraction,
    		createEventDispatcher,
    		ani,
    		self,
    		dispatch,
    		name,
    		parent,
    		parentForSlot,
    		parentForUs,
    		scene,
    		aniauto,
    		interact,
    		sti,
    		interactive,
    		generate,
    		mesh,
    		object3DUtils,
    		meshPropIterator,
    		matPropIterator,
    		material,
    		geometry,
    		onMeshProvided,
    		checkParentSlot,
    		userData,
    		tryApplyUserData,
    		animation,
    		mat,
    		pos,
    		rot,
    		scale,
    		castShadow,
    		receiveShadow,
    		matrix,
    		props,
    		currentSceneActive,
    		animationEnabled,
    		interactionEnabled,
    		fnOnMount,
    		setSTI,
    		tryAddingMesh,
    		tryMaterialUpdate,
    		tryGeometryUpdate,
    		tryCastShadowUpdate,
    		tryReceiveShadowUpdate,
    		tryMatrixUpdate,
    		removeMeshFromParent,
    		getMesh,
    		getName,
    		getScene,
    		getAnimation,
    		startAni,
    		onClick,
    		onPointerUp,
    		onPointerDown,
    		onPointerOver,
    		onPointerOut,
    		onPointerEnter,
    		onPointerLeave,
    		onPointerMove,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('ani' in $$props) $$invalidate(6, ani = $$props.ani);
    		if ('self' in $$props) $$invalidate(10, self = $$props.self);
    		if ('dispatch' in $$props) $$invalidate(11, dispatch = $$props.dispatch);
    		if ('name' in $$props) $$invalidate(15, name = $$props.name);
    		if ('parent' in $$props) $$invalidate(16, parent = $$props.parent);
    		if ('parentForSlot' in $$props) $$invalidate(1, parentForSlot = $$props.parentForSlot);
    		if ('parentForUs' in $$props) $$invalidate(14, parentForUs = $$props.parentForUs);
    		if ('scene' in $$props) $$invalidate(2, scene = $$props.scene);
    		if ('aniauto' in $$props) $$invalidate(3, aniauto = $$props.aniauto);
    		if ('interact' in $$props) $$invalidate(17, interact = $$props.interact);
    		if ('sti' in $$props) $$invalidate(5, sti = $$props.sti);
    		if ('interactive' in $$props) $$invalidate(42, interactive = $$props.interactive);
    		if ('generate' in $$props) $$invalidate(43, generate = $$props.generate);
    		if ('mesh' in $$props) $$invalidate(0, mesh = $$props.mesh);
    		if ('object3DUtils' in $$props) $$invalidate(44, object3DUtils = $$props.object3DUtils);
    		if ('meshPropIterator' in $$props) $$invalidate(45, meshPropIterator = $$props.meshPropIterator);
    		if ('matPropIterator' in $$props) $$invalidate(46, matPropIterator = $$props.matPropIterator);
    		if ('material' in $$props) $$invalidate(12, material = $$props.material);
    		if ('geometry' in $$props) $$invalidate(13, geometry = $$props.geometry);
    		if ('userData' in $$props) $$invalidate(18, userData = $$props.userData);
    		if ('animation' in $$props) $$invalidate(4, animation = $$props.animation);
    		if ('mat' in $$props) $$invalidate(19, mat = $$props.mat);
    		if ('pos' in $$props) $$invalidate(20, pos = $$props.pos);
    		if ('rot' in $$props) $$invalidate(21, rot = $$props.rot);
    		if ('scale' in $$props) $$invalidate(22, scale = $$props.scale);
    		if ('castShadow' in $$props) $$invalidate(23, castShadow = $$props.castShadow);
    		if ('receiveShadow' in $$props) $$invalidate(24, receiveShadow = $$props.receiveShadow);
    		if ('matrix' in $$props) $$invalidate(25, matrix = $$props.matrix);
    		if ('props' in $$props) $$invalidate(26, props = $$props.props);
    		if ('currentSceneActive' in $$props) $$invalidate(7, currentSceneActive = $$props.currentSceneActive);
    		if ('animationEnabled' in $$props) $$invalidate(8, animationEnabled = $$props.animationEnabled);
    		if ('interactionEnabled' in $$props) $$invalidate(9, interactionEnabled = $$props.interactionEnabled);
    		if ('fnOnMount' in $$props) $$invalidate(27, fnOnMount = $$props.fnOnMount);
    		if ('onClick' in $$props) $$invalidate(34, onClick = $$props.onClick);
    		if ('onPointerUp' in $$props) $$invalidate(35, onPointerUp = $$props.onPointerUp);
    		if ('onPointerDown' in $$props) $$invalidate(36, onPointerDown = $$props.onPointerDown);
    		if ('onPointerOver' in $$props) $$invalidate(37, onPointerOver = $$props.onPointerOver);
    		if ('onPointerOut' in $$props) $$invalidate(38, onPointerOut = $$props.onPointerOut);
    		if ('onPointerEnter' in $$props) $$invalidate(39, onPointerEnter = $$props.onPointerEnter);
    		if ('onPointerLeave' in $$props) $$invalidate(40, onPointerLeave = $$props.onPointerLeave);
    		if ('onPointerMove' in $$props) $$invalidate(41, onPointerMove = $$props.onPointerMove);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*sti*/ 32 | $$self.$$.dirty[1] & /*$svelthreeStores*/ 65536) {
    			$$invalidate(42, interactive = $svelthreeStores[sti].canvas.interactive);
    		}

    		if ($$self.$$.dirty[0] & /*geometry, material, mesh, name*/ 45057 | $$self.$$.dirty[1] & /*generate*/ 4096) {
    			geometry && material && !mesh && generate
    			? ($$invalidate(0, mesh = new Mesh(geometry, material)), $$invalidate(0, mesh.name = name, mesh), $$invalidate(0, mesh.userData.initScale = mesh.scale.x, mesh), console.info("SVELTHREE > Mesh : " + geometry.type + " created!", { mesh }), console.info("SVELTHREE > Mesh : saved 'geometry' (generated):", geometry), console.info("SVELTHREE > Mesh : saved 'material' (generated):", material), $$invalidate(44, object3DUtils = new Object3DUtils(mesh)), $$invalidate(45, meshPropIterator = new UniversalPropIterator(mesh)))
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*matrix, scale, mesh*/ 37748737 | $$self.$$.dirty[1] & /*object3DUtils*/ 8192) {
    			!matrix
    			? scale
    				? isValidArray3Prop(scale)
    					? (object3DUtils.tryScaleUpdate(scale), $$invalidate(0, mesh.userData.initScale = mesh.scale.x, mesh))
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*mesh*/ 1) {
    			/**
     * Determining if mesh has to be generated first, was not available on initialization (generate true)
     */
    			// triggered as soon as mesh is generated
    			mesh ? checkParentSlot() : null;
    		}

    		if ($$self.$$.dirty[0] & /*geometry*/ 8192 | $$self.$$.dirty[1] & /*generate*/ 4096) {
    			// reactive creating / recreating mesh
    			geometry && generate
    			? (console.info("SVELTHREE > Mesh : Geometry provided!"), tryGeometryUpdate())
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*material*/ 4096 | $$self.$$.dirty[1] & /*generate*/ 4096) {
    			material && generate
    			? (console.info("SVELTHREE > Mesh : Material provided!"), $$invalidate(46, matPropIterator = new UniversalPropIterator(material)), tryMaterialUpdate())
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*geometry, mesh*/ 8193 | $$self.$$.dirty[1] & /*generate*/ 4096) {
    			// change geometry and material on provided mesh
    			//we know mesh has geometry if geometry is available and !generate, it was referenced onMeshProvided()
    			geometry && !generate
    			? geometry !== mesh.geometry ? tryGeometryUpdate() : null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*material, mesh*/ 4097 | $$self.$$.dirty[1] & /*generate*/ 4096) {
    			//we know mesh has material if material is available and !generate, it was referenced onMeshProvided()
    			material && !generate
    			? material !== mesh.material ? tryMaterialUpdate() : null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*mesh*/ 1) {
    			// This statement is being triggered on creation / recreation
    			mesh
    			? tryAddingMesh()
    			: console.error("SVELTHREE > Mesh : mesh was not created!");
    		}

    		if ($$self.$$.dirty[0] & /*userData*/ 262144) {
    			userData ? tryApplyUserData() : null;
    		}

    		if ($$self.$$.dirty[0] & /*matrix, pos*/ 34603008 | $$self.$$.dirty[1] & /*object3DUtils*/ 8192) {
    			//reactive updating props
    			!matrix
    			? pos
    				? isValidArray3Prop(pos)
    					? object3DUtils.tryPosUpdate(pos)
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*matrix, rot*/ 35651584 | $$self.$$.dirty[1] & /*object3DUtils*/ 8192) {
    			!matrix
    			? rot
    				? isValidArray3Prop(rot)
    					? object3DUtils.tryRotUpdate(rot)
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*matrix*/ 33554432) {
    			isValidMatrix4(matrix)
    			? (console.warn("SVELTHREE > Mesh : Matrix provided, will ignore 'pos', 'rot' or 'scale' props if any provided!"), tryMatrixUpdate())
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*castShadow*/ 8388608) {
    			castShadow ? tryCastShadowUpdate() : null;
    		}

    		if ($$self.$$.dirty[0] & /*receiveShadow*/ 16777216) {
    			receiveShadow ? tryReceiveShadowUpdate() : null;
    		}

    		if ($$self.$$.dirty[0] & /*props*/ 67108864 | $$self.$$.dirty[1] & /*meshPropIterator*/ 16384) {
    			props
    			? Object.keys(props).length > 0
    				? meshPropIterator
    					? meshPropIterator.tryPropsUpdate(props)
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*mat*/ 524288 | $$self.$$.dirty[1] & /*matPropIterator*/ 32768) {
    			mat
    			? Object.keys(mat).length > 0
    				? matPropIterator
    					? (console.info("SVELTHREE > Mesh : matPropIterator is true: ", mat), matPropIterator.tryPropsUpdate(mat))
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*sti, scene*/ 36 | $$self.$$.dirty[1] & /*$svelthreeStores*/ 65536) {
    			$$invalidate(7, currentSceneActive = $svelthreeStores[sti].scenes[scene.userData.indexInScenes].isActive);
    		}

    		if ($$self.$$.dirty[0] & /*animation*/ 16) {
    			animation
    			? $$invalidate(8, animationEnabled = true)
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*interact*/ 131072 | $$self.$$.dirty[1] & /*interactive*/ 2048) {
    			interactive && interact
    			? $$invalidate(9, interactionEnabled = true)
    			: $$invalidate(9, interactionEnabled = false);
    		}
    	};

    	return [
    		mesh,
    		parentForSlot,
    		scene,
    		aniauto,
    		animation,
    		sti,
    		ani,
    		currentSceneActive,
    		animationEnabled,
    		interactionEnabled,
    		self,
    		dispatch,
    		material,
    		geometry,
    		parentForUs,
    		name,
    		parent,
    		interact,
    		userData,
    		mat,
    		pos,
    		rot,
    		scale,
    		castShadow,
    		receiveShadow,
    		matrix,
    		props,
    		fnOnMount,
    		removeMeshFromParent,
    		getMesh,
    		getName,
    		getScene,
    		getAnimation,
    		startAni,
    		onClick,
    		onPointerUp,
    		onPointerDown,
    		onPointerOver,
    		onPointerOut,
    		onPointerEnter,
    		onPointerLeave,
    		onPointerMove,
    		interactive,
    		generate,
    		object3DUtils,
    		meshPropIterator,
    		matPropIterator,
    		$svelthreeStores,
    		$$scope,
    		slots,
    		svelthreeanimation_binding,
    		svelthreeanimation_currentSceneActive_binding
    	];
    }

    class Mesh_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$8,
    			create_fragment$8,
    			safe_not_equal,
    			{
    				name: 15,
    				parent: 16,
    				parentForSlot: 1,
    				parentForUs: 14,
    				scene: 2,
    				aniauto: 3,
    				interact: 17,
    				mesh: 0,
    				material: 12,
    				geometry: 13,
    				userData: 18,
    				animation: 4,
    				mat: 19,
    				pos: 20,
    				rot: 21,
    				scale: 22,
    				castShadow: 23,
    				receiveShadow: 24,
    				matrix: 25,
    				props: 26,
    				fnOnMount: 27,
    				removeMeshFromParent: 28,
    				getMesh: 29,
    				getName: 30,
    				getScene: 31,
    				getAnimation: 32,
    				startAni: 33,
    				onClick: 34,
    				onPointerUp: 35,
    				onPointerDown: 36,
    				onPointerOver: 37,
    				onPointerOut: 38,
    				onPointerEnter: 39,
    				onPointerLeave: 40,
    				onPointerMove: 41
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mesh_1",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[2] === undefined && !('scene' in props)) {
    			console_1$7.warn("<Mesh> was created without expected prop 'scene'");
    		}
    	}

    	get name() {
    		return this.$$.ctx[15];
    	}

    	set name(name) {
    		this.$$set({ name });
    		flush();
    	}

    	get parent() {
    		return this.$$.ctx[16];
    	}

    	set parent(parent) {
    		this.$$set({ parent });
    		flush();
    	}

    	get parentForSlot() {
    		return this.$$.ctx[1];
    	}

    	set parentForSlot(parentForSlot) {
    		this.$$set({ parentForSlot });
    		flush();
    	}

    	get parentForUs() {
    		return this.$$.ctx[14];
    	}

    	set parentForUs(parentForUs) {
    		this.$$set({ parentForUs });
    		flush();
    	}

    	get scene() {
    		return this.$$.ctx[2];
    	}

    	set scene(scene) {
    		this.$$set({ scene });
    		flush();
    	}

    	get aniauto() {
    		return this.$$.ctx[3];
    	}

    	set aniauto(aniauto) {
    		this.$$set({ aniauto });
    		flush();
    	}

    	get interact() {
    		return this.$$.ctx[17];
    	}

    	set interact(interact) {
    		this.$$set({ interact });
    		flush();
    	}

    	get mesh() {
    		return this.$$.ctx[0];
    	}

    	set mesh(mesh) {
    		this.$$set({ mesh });
    		flush();
    	}

    	get material() {
    		return this.$$.ctx[12];
    	}

    	set material(material) {
    		this.$$set({ material });
    		flush();
    	}

    	get geometry() {
    		return this.$$.ctx[13];
    	}

    	set geometry(geometry) {
    		this.$$set({ geometry });
    		flush();
    	}

    	get userData() {
    		return this.$$.ctx[18];
    	}

    	set userData(userData) {
    		this.$$set({ userData });
    		flush();
    	}

    	get animation() {
    		return this.$$.ctx[4];
    	}

    	set animation(animation) {
    		this.$$set({ animation });
    		flush();
    	}

    	get mat() {
    		return this.$$.ctx[19];
    	}

    	set mat(mat) {
    		this.$$set({ mat });
    		flush();
    	}

    	get pos() {
    		return this.$$.ctx[20];
    	}

    	set pos(pos) {
    		this.$$set({ pos });
    		flush();
    	}

    	get rot() {
    		return this.$$.ctx[21];
    	}

    	set rot(rot) {
    		this.$$set({ rot });
    		flush();
    	}

    	get scale() {
    		return this.$$.ctx[22];
    	}

    	set scale(scale) {
    		this.$$set({ scale });
    		flush();
    	}

    	get castShadow() {
    		return this.$$.ctx[23];
    	}

    	set castShadow(castShadow) {
    		this.$$set({ castShadow });
    		flush();
    	}

    	get receiveShadow() {
    		return this.$$.ctx[24];
    	}

    	set receiveShadow(receiveShadow) {
    		this.$$set({ receiveShadow });
    		flush();
    	}

    	get matrix() {
    		return this.$$.ctx[25];
    	}

    	set matrix(matrix) {
    		this.$$set({ matrix });
    		flush();
    	}

    	get props() {
    		return this.$$.ctx[26];
    	}

    	set props(props) {
    		this.$$set({ props });
    		flush();
    	}

    	get fnOnMount() {
    		return this.$$.ctx[27];
    	}

    	set fnOnMount(fnOnMount) {
    		this.$$set({ fnOnMount });
    		flush();
    	}

    	get removeMeshFromParent() {
    		return this.$$.ctx[28];
    	}

    	set removeMeshFromParent(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'removeMeshFromParent'");
    	}

    	get getMesh() {
    		return this.$$.ctx[29];
    	}

    	set getMesh(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'getMesh'");
    	}

    	get getName() {
    		return this.$$.ctx[30];
    	}

    	set getName(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'getName'");
    	}

    	get getScene() {
    		return this.$$.ctx[31];
    	}

    	set getScene(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'getScene'");
    	}

    	get getAnimation() {
    		return this.$$.ctx[32];
    	}

    	set getAnimation(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'getAnimation'");
    	}

    	get startAni() {
    		return this.$$.ctx[33];
    	}

    	set startAni(value) {
    		throw new Error_1$3("<Mesh>: Cannot set read-only property 'startAni'");
    	}

    	get onClick() {
    		return this.$$.ctx[34];
    	}

    	set onClick(onClick) {
    		this.$$set({ onClick });
    		flush();
    	}

    	get onPointerUp() {
    		return this.$$.ctx[35];
    	}

    	set onPointerUp(onPointerUp) {
    		this.$$set({ onPointerUp });
    		flush();
    	}

    	get onPointerDown() {
    		return this.$$.ctx[36];
    	}

    	set onPointerDown(onPointerDown) {
    		this.$$set({ onPointerDown });
    		flush();
    	}

    	get onPointerOver() {
    		return this.$$.ctx[37];
    	}

    	set onPointerOver(onPointerOver) {
    		this.$$set({ onPointerOver });
    		flush();
    	}

    	get onPointerOut() {
    		return this.$$.ctx[38];
    	}

    	set onPointerOut(onPointerOut) {
    		this.$$set({ onPointerOut });
    		flush();
    	}

    	get onPointerEnter() {
    		return this.$$.ctx[39];
    	}

    	set onPointerEnter(onPointerEnter) {
    		this.$$set({ onPointerEnter });
    		flush();
    	}

    	get onPointerLeave() {
    		return this.$$.ctx[40];
    	}

    	set onPointerLeave(onPointerLeave) {
    		this.$$set({ onPointerLeave });
    		flush();
    	}

    	get onPointerMove() {
    		return this.$$.ctx[41];
    	}

    	set onPointerMove(onPointerMove) {
    		this.$$set({ onPointerMove });
    		flush();
    	}
    }

    /* node_modules/svelthree/src/components/Canvas.svelte generated by Svelte v3.46.4 */

    const { console: console_1$6 } = globals;
    const file$1 = "node_modules/svelthree/src/components/Canvas.svelte";
    const get_default_slot_changes$1 = dirty => ({ sti: dirty & /*sti*/ 16 });
    const get_default_slot_context$1 = ctx => ({ sti: /*sti*/ ctx[4] });

    function create_fragment$7(ctx) {
    	let canvas;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			canvas = element("canvas");
    			if (default_slot) default_slot.c();
    			attr_dev(canvas, "width", /*w*/ ctx[0]);
    			attr_dev(canvas, "height", /*h*/ ctx[1]);
    			attr_dev(canvas, "style", /*style*/ ctx[2]);
    			attr_dev(canvas, "class", /*clazz*/ ctx[3]);
    			add_location(canvas, file$1, 124, 0, 4291);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas, anchor);

    			if (default_slot) {
    				default_slot.m(canvas, null);
    			}

    			/*canvas_binding*/ ctx[16](canvas);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, sti*/ 16400)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}

    			if (!current || dirty & /*w*/ 1) {
    				attr_dev(canvas, "width", /*w*/ ctx[0]);
    			}

    			if (!current || dirty & /*h*/ 2) {
    				attr_dev(canvas, "height", /*h*/ ctx[1]);
    			}

    			if (!current || dirty & /*style*/ 4) {
    				attr_dev(canvas, "style", /*style*/ ctx[2]);
    			}

    			if (!current || dirty & /*clazz*/ 8) {
    				attr_dev(canvas, "class", /*clazz*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas);
    			if (default_slot) default_slot.d(detaching);
    			/*canvas_binding*/ ctx[16](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(13, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Canvas', slots, ['default']);
    	let { w } = $$props;
    	let { h } = $$props;
    	let { style = undefined } = $$props;
    	let { class: clazz = undefined } = $$props;

    	const svelthreeStoreBody = {
    		id: undefined,
    		canvas: {
    			dom: undefined,
    			dim: { w: undefined, h: undefined },
    			interactive: false
    		},
    		scenes: [],
    		cameras: [],
    		activeCamera: undefined,
    		renderer: undefined,
    		raycaster: undefined,
    		allIntersections: undefined,
    		pointer: {
    			pos: new Vector2(-1, -1),
    			event: undefined,
    			isOverCanvas: false,
    			unprojected: new Vector3()
    		},
    		orbitcontrols: undefined
    	};

    	svelthreeStoreBody.canvas.dim.w = w;
    	svelthreeStoreBody.canvas.dim.h = h;
    	let sti;

    	//create new store
    	set_store_value(svelthreeStores, $svelthreeStores = [...$svelthreeStores, svelthreeStoreBody], $svelthreeStores);

    	sti = $svelthreeStores.length - 1;
    	let c;

    	function addCanvasToStore() {
    		$svelthreeStores[sti].canvas.dom === undefined
    		? set_store_value(svelthreeStores, $svelthreeStores[sti].canvas.dom = c, $svelthreeStores)
    		: null;
    	}

    	let { interactive = false } = $$props;
    	let isInteractive = false;
    	let raycaster;
    	let didMount;

    	function startUpdatingPointer() {
    		window.addEventListener("pointermove", updatePointer, false);
    	}

    	function updatePointer(e) {
    		let rect = c.getBoundingClientRect();
    		set_store_value(svelthreeStores, $svelthreeStores[sti].pointer.pos.x = (e.clientX - rect.left) / (rect.right - rect.left) * 2 - 1, $svelthreeStores);
    		set_store_value(svelthreeStores, $svelthreeStores[sti].pointer.pos.y = -((e.clientY - rect.top) / (rect.bottom - rect.top)) * 2 + 1, $svelthreeStores);

    		e.clientX > rect.left && e.clientX < rect.right && e.clientY > rect.top && e.clientY < rect.bottom
    		? set_store_value(svelthreeStores, $svelthreeStores[sti].pointer.isOverCanvas = true, $svelthreeStores)
    		: set_store_value(svelthreeStores, $svelthreeStores[sti].pointer.isOverCanvas = false, $svelthreeStores);

    		// calculate unprojected Point
    		// see https://stackoverflow.com/questions/13055214/mouse-canvas-x-y-to-three-js-world-x-y-z
    		let v = new Vector3($svelthreeStores[sti].pointer.pos.x, $svelthreeStores[sti].pointer.pos.y, 0.5);

    		let t = new Vector3();
    		v.unproject($svelthreeStores[sti].activeCamera);
    		v.sub($svelthreeStores[sti].activeCamera.position).normalize();
    		let d = -$svelthreeStores[sti].activeCamera.position.z / v.z;
    		t.copy($svelthreeStores[sti].activeCamera.position).add(v.multiplyScalar(d));
    		$svelthreeStores[sti].pointer.unprojected.copy(t);

    		/**
     *  IMPORTANT: we save this event in SvelthreeInteraction.svelte for construction of:
     *  'pointerenter', 'pointerover', 'pointerout', 'pointerleave' & 'pointermove'
     */
    		set_store_value(svelthreeStores, $svelthreeStores[sti].pointer.event = e, $svelthreeStores);
    	}

    	function stopUpdatingPointer() {
    		window.removeEventListener("pointermove", updatePointer);
    	}

    	onMount(() => {
    		$$invalidate(12, didMount = true);
    		console.info("SVELTHREE > onMount : Canvas, $svelthreeStores[sti]: ", $svelthreeStores[sti]);

    		return () => {
    			console.info("SVELTHREE > onDestroy : Canvas");
    			stopUpdatingPointer();
    		};
    	});

    	function getCanvas() {
    		return $svelthreeStores[sti].canvas.dom;
    	}

    	function getDimensions() {
    		return {
    			w: $svelthreeStores[sti].canvas.dom.width,
    			h: $svelthreeStores[sti].canvas.dom.height
    		};
    	}

    	function doResize(w, h) {
    		set_store_value(svelthreeStores, $svelthreeStores[sti].canvas.dim = { w, h }, $svelthreeStores);
    	}

    	const writable_props = ['w', 'h', 'style', 'class', 'interactive'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Canvas> was created with unknown prop '${key}'`);
    	});

    	function canvas_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			c = $$value;
    			$$invalidate(5, c);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('w' in $$props) $$invalidate(0, w = $$props.w);
    		if ('h' in $$props) $$invalidate(1, h = $$props.h);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('class' in $$props) $$invalidate(3, clazz = $$props.class);
    		if ('interactive' in $$props) $$invalidate(6, interactive = $$props.interactive);
    		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		svelthreeStores,
    		Raycaster,
    		Vector2,
    		Vector3,
    		w,
    		h,
    		style,
    		clazz,
    		svelthreeStoreBody,
    		sti,
    		c,
    		addCanvasToStore,
    		interactive,
    		isInteractive,
    		raycaster,
    		didMount,
    		startUpdatingPointer,
    		updatePointer,
    		stopUpdatingPointer,
    		getCanvas,
    		getDimensions,
    		doResize,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('w' in $$props) $$invalidate(0, w = $$props.w);
    		if ('h' in $$props) $$invalidate(1, h = $$props.h);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('clazz' in $$props) $$invalidate(3, clazz = $$props.clazz);
    		if ('sti' in $$props) $$invalidate(4, sti = $$props.sti);
    		if ('c' in $$props) $$invalidate(5, c = $$props.c);
    		if ('interactive' in $$props) $$invalidate(6, interactive = $$props.interactive);
    		if ('isInteractive' in $$props) $$invalidate(10, isInteractive = $$props.isInteractive);
    		if ('raycaster' in $$props) $$invalidate(11, raycaster = $$props.raycaster);
    		if ('didMount' in $$props) $$invalidate(12, didMount = $$props.didMount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*c*/ 32) {
    			c ? addCanvasToStore() : null;
    		}

    		if ($$self.$$.dirty & /*didMount, interactive*/ 4160) {
    			didMount
    			? $$invalidate(10, isInteractive = interactive)
    			: null;
    		}

    		if ($$self.$$.dirty & /*isInteractive, raycaster, c, sti, $svelthreeStores*/ 11312) {
    			// reactive create raycaster
    			isInteractive && !raycaster && c
    			? ($$invalidate(11, raycaster = new Raycaster()), set_store_value(svelthreeStores, $svelthreeStores[sti].raycaster = raycaster, $svelthreeStores), set_store_value(svelthreeStores, $svelthreeStores[sti].canvas.interactive = true, $svelthreeStores), startUpdatingPointer(), console.info("SVELTHREE > Canvas : after Raycaster creation, $svelthreeStores[sti]: ", $svelthreeStores[sti]))
    			: null;
    		}

    		if ($$self.$$.dirty & /*isInteractive, raycaster, sti, $svelthreeStores*/ 11280) {
    			// reactive remove raycaster
    			!isInteractive && raycaster
    			? (set_store_value(svelthreeStores, $svelthreeStores[sti].canvas.interactive = false, $svelthreeStores), set_store_value(svelthreeStores, $svelthreeStores[sti].raycaster = undefined, $svelthreeStores), $$invalidate(11, raycaster = null), stopUpdatingPointer(), console.info("SVELTHREE > Canvas : after Raycaster remove, $svelthreeStores[sti]: ", $svelthreeStores[sti]))
    			: null;
    		}
    	};

    	return [
    		w,
    		h,
    		style,
    		clazz,
    		sti,
    		c,
    		interactive,
    		getCanvas,
    		getDimensions,
    		doResize,
    		isInteractive,
    		raycaster,
    		didMount,
    		$svelthreeStores,
    		$$scope,
    		slots,
    		canvas_binding
    	];
    }

    class Canvas extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			w: 0,
    			h: 1,
    			style: 2,
    			class: 3,
    			interactive: 6,
    			getCanvas: 7,
    			getDimensions: 8,
    			doResize: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Canvas",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*w*/ ctx[0] === undefined && !('w' in props)) {
    			console_1$6.warn("<Canvas> was created without expected prop 'w'");
    		}

    		if (/*h*/ ctx[1] === undefined && !('h' in props)) {
    			console_1$6.warn("<Canvas> was created without expected prop 'h'");
    		}
    	}

    	get w() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set w(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get h() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set h(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get interactive() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set interactive(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getCanvas() {
    		return this.$$.ctx[7];
    	}

    	set getCanvas(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getDimensions() {
    		return this.$$.ctx[8];
    	}

    	set getDimensions(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get doResize() {
    		return this.$$.ctx[9];
    	}

    	set doResize(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/utils/LightUtils.svelte generated by Svelte v3.46.4 */

    class LightUtils {
    	constructor(light) {
    		this.light = light;
    	}

    	tryIntensityUpdate(intensity) {
    		console.info("SVELTHREE > LightUtils > tryIntensityUpdate ", intensity);
    		this.light ? this.light.intensity = intensity : null;
    	}

    	// TOFIX  different / better!
    	tryColorUpdate(color) {
    		console.info("color", color);

    		this.light
    		? isArray(color)
    			? isValidArray3Prop(color)
    				? this.light.color = new Color(color[0], color[1], color[2])
    				: null
    			: this.light.color = new Color(color)
    		: null;
    	}

    	tryShadowMapSizeUpdate(shadowMapSize) {
    		console.info("SVELTHREE > LightUtils > tryShadowMapSizeUpdate", shadowMapSize);

    		this.light
    		? (this.light.shadow.mapSize.width = shadowMapSize, this.light.shadow.mapSize.height = shadowMapSize)
    		: null;
    	}

    	/**
     * This is to be used with caution as it my break shadows! We tried to adjust the Toon-Shader with,
     * but with no satifying result
     * @param shadowBiasSize
     */
    	tryShadowBiasUpdate(shadowBiasSize) {
    		console.info("SVELTHREE > LightUtils > tryShadowBiasUpdate", shadowBiasSize);

    		this.light
    		? (this.light.shadow.bias = shadowBiasSize, this.light.shadow.bias = shadowBiasSize)
    		: null;
    	}

    	tryCastShadowUpdate(castShadow) {
    		console.info("SVELTHREE > LightUtils > tryCastShadowUpdate", castShadow);
    		this.light ? this.light.castShadow = castShadow : null;
    	} //console.info("SVELTHREE > LightUtils > tryCastShadowUpdate", {light: this.light, castShadow: castShadow})
    }

    /* node_modules/svelthree/src/components/Light.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$2, Object: Object_1$1, console: console_1$5 } = globals;

    function create_fragment$6(ctx) {
    	let svelthreeanimation;
    	let updating_currentSceneActive;
    	let current;

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		/*svelthreeanimation_currentSceneActive_binding*/ ctx[26](value);
    	}

    	let svelthreeanimation_props = {
    		animationEnabled: /*animationEnabled*/ ctx[6],
    		animation: /*animation*/ ctx[1],
    		aniauto: /*aniauto*/ ctx[2],
    		obj: /*light*/ ctx[3],
    		scene: /*scene*/ ctx[0]
    	};

    	if (/*currentSceneActive*/ ctx[5] !== void 0) {
    		svelthreeanimation_props.currentSceneActive = /*currentSceneActive*/ ctx[5];
    	}

    	svelthreeanimation = new SvelthreeAnimation({
    			props: svelthreeanimation_props,
    			$$inline: true
    		});

    	/*svelthreeanimation_binding*/ ctx[25](svelthreeanimation);
    	binding_callbacks.push(() => bind(svelthreeanimation, 'currentSceneActive', svelthreeanimation_currentSceneActive_binding));

    	const block = {
    		c: function create() {
    			create_component(svelthreeanimation.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(svelthreeanimation, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const svelthreeanimation_changes = {};
    			if (dirty & /*animationEnabled*/ 64) svelthreeanimation_changes.animationEnabled = /*animationEnabled*/ ctx[6];
    			if (dirty & /*animation*/ 2) svelthreeanimation_changes.animation = /*animation*/ ctx[1];
    			if (dirty & /*aniauto*/ 4) svelthreeanimation_changes.aniauto = /*aniauto*/ ctx[2];
    			if (dirty & /*light*/ 8) svelthreeanimation_changes.obj = /*light*/ ctx[3];
    			if (dirty & /*scene*/ 1) svelthreeanimation_changes.scene = /*scene*/ ctx[0];

    			if (!updating_currentSceneActive && dirty & /*currentSceneActive*/ 32) {
    				updating_currentSceneActive = true;
    				svelthreeanimation_changes.currentSceneActive = /*currentSceneActive*/ ctx[5];
    				add_flush_callback(() => updating_currentSceneActive = false);
    			}

    			svelthreeanimation.$set(svelthreeanimation_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svelthreeanimation.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svelthreeanimation.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*svelthreeanimation_binding*/ ctx[25](null);
    			destroy_component(svelthreeanimation, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(24, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Light', slots, []);
    	let ani;
    	let { scene } = $$props;
    	let sti;

    	if (scene) {
    		if (scene.type === "Scene") {
    			setSTI();
    		} else {
    			console.warn("SVELTHREE > Light : You have to provide a valid 'scene' prop of type 'Scene'!", { scene });
    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	} else {
    		console.warn("SVELTHREE > Light : You have to provide a {scene} prop!", { scene });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	function setSTI() {
    		if (scene.userData.sti >= 0) {
    			$$invalidate(20, sti = scene.userData.sti);
    		} else {
    			console.warn("SVELTHREE > Light : Failed to set 'sti' from 'scene.userData.sti', 'sti' has to be >= 0!", {
    				scene,
    				userData: scene.userData,
    				sti: scene.userData.sti
    			});

    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	}

    	let { animation = undefined } = $$props;
    	let { aniauto = undefined } = $$props;
    	let { parent = undefined } = $$props;
    	let { parentForUs = undefined } = $$props;
    	let { light = undefined } = $$props;
    	let lightUtils;
    	let object3DUtils;
    	let uniPropIterator;

    	if (light) {
    		object3DUtils = new Object3DUtils(light);
    		uniPropIterator = new UniversalPropIterator(light);
    		lightUtils = new LightUtils(light);
    	} else {
    		console.warn("SVELTHREE > Light : light was not provided by parent component!", { light });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	if (parent) {
    		//parent is already there, either it has been provided or set on mesh generation to the mesh itself
    		//means this parent was provided and we are child
    		if (parent !== light) {
    			//set self as parent for next slot
    			parentForUs = parent;
    		} /* nothing */
    	}

    	tryAddingLight();

    	function tryAddingLight() {
    		if (!parentForUs) {
    			//Add to scene if no parent was provided & scene is not parent already
    			if (light.parent !== scene) {
    				scene.add(light);

    				console.info("SVELTHREE > Light : " + light.type + " was added to scene!", {
    					light,
    					scene,
    					total: scene.children.length
    				});
    			}
    		} else {
    			//Add to provided parent if it's not parent already
    			if (light.parent !== parentForUs) {
    				parentForUs.add(light);

    				console.info("SVELTHREE > Light : " + light.type + " was added to parent!", {
    					light,
    					parent: parentForUs,
    					scene,
    					total: scene.children.length
    				});
    			}
    		}
    	}

    	let { pos = [0, 1, 0] } = $$props;
    	let { color = undefined } = $$props;
    	let { intensity = 0 } = $$props;
    	let { shadowMapSize = undefined } = $$props;
    	let { shadowBias = undefined } = $$props;
    	let { castShadow = undefined } = $$props;
    	let { props = undefined } = $$props;

    	// reactive animation handling (has to be enabled as last, so that initial animation state overrides props)
    	let currentSceneActive = false;

    	let animationEnabled = false;
    	let { fnOnMount = undefined } = $$props;

    	onMount(fnOnMount
    	? () => fnOnMount(self)
    	: () => {
    			console.info("SVELTHREE > onMount : Light");

    			return () => {
    				console.info("SVELTHREE > onDestroy : Light");
    				removeLightFromParent();
    			};
    		});

    	function removeLightFromParent() {
    		light.parent.remove(light);
    	}

    	function getAnimation() {
    		return ani.getAnimation();
    	}

    	function startAni() {
    		ani.startAni();
    	}

    	const writable_props = [
    		'scene',
    		'animation',
    		'aniauto',
    		'parent',
    		'parentForUs',
    		'light',
    		'pos',
    		'color',
    		'intensity',
    		'shadowMapSize',
    		'shadowBias',
    		'castShadow',
    		'props',
    		'fnOnMount'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<Light> was created with unknown prop '${key}'`);
    	});

    	function svelthreeanimation_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ani = $$value;
    			$$invalidate(4, ani);
    		});
    	}

    	function svelthreeanimation_currentSceneActive_binding(value) {
    		currentSceneActive = value;
    		((($$invalidate(5, currentSceneActive), $$invalidate(24, $svelthreeStores)), $$invalidate(20, sti)), $$invalidate(0, scene));
    	}

    	$$self.$$set = $$props => {
    		if ('scene' in $$props) $$invalidate(0, scene = $$props.scene);
    		if ('animation' in $$props) $$invalidate(1, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(2, aniauto = $$props.aniauto);
    		if ('parent' in $$props) $$invalidate(8, parent = $$props.parent);
    		if ('parentForUs' in $$props) $$invalidate(7, parentForUs = $$props.parentForUs);
    		if ('light' in $$props) $$invalidate(3, light = $$props.light);
    		if ('pos' in $$props) $$invalidate(9, pos = $$props.pos);
    		if ('color' in $$props) $$invalidate(10, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(11, intensity = $$props.intensity);
    		if ('shadowMapSize' in $$props) $$invalidate(12, shadowMapSize = $$props.shadowMapSize);
    		if ('shadowBias' in $$props) $$invalidate(13, shadowBias = $$props.shadowBias);
    		if ('castShadow' in $$props) $$invalidate(14, castShadow = $$props.castShadow);
    		if ('props' in $$props) $$invalidate(15, props = $$props.props);
    		if ('fnOnMount' in $$props) $$invalidate(16, fnOnMount = $$props.fnOnMount);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		svelthreeStores,
    		Object3DUtils,
    		LightUtils,
    		UniversalPropIterator,
    		SvelthreeAnimation,
    		ani,
    		scene,
    		sti,
    		setSTI,
    		animation,
    		aniauto,
    		parent,
    		parentForUs,
    		light,
    		lightUtils,
    		object3DUtils,
    		uniPropIterator,
    		tryAddingLight,
    		pos,
    		color,
    		intensity,
    		shadowMapSize,
    		shadowBias,
    		castShadow,
    		props,
    		currentSceneActive,
    		animationEnabled,
    		fnOnMount,
    		removeLightFromParent,
    		getAnimation,
    		startAni,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('ani' in $$props) $$invalidate(4, ani = $$props.ani);
    		if ('scene' in $$props) $$invalidate(0, scene = $$props.scene);
    		if ('sti' in $$props) $$invalidate(20, sti = $$props.sti);
    		if ('animation' in $$props) $$invalidate(1, animation = $$props.animation);
    		if ('aniauto' in $$props) $$invalidate(2, aniauto = $$props.aniauto);
    		if ('parent' in $$props) $$invalidate(8, parent = $$props.parent);
    		if ('parentForUs' in $$props) $$invalidate(7, parentForUs = $$props.parentForUs);
    		if ('light' in $$props) $$invalidate(3, light = $$props.light);
    		if ('lightUtils' in $$props) $$invalidate(21, lightUtils = $$props.lightUtils);
    		if ('object3DUtils' in $$props) $$invalidate(22, object3DUtils = $$props.object3DUtils);
    		if ('uniPropIterator' in $$props) $$invalidate(23, uniPropIterator = $$props.uniPropIterator);
    		if ('pos' in $$props) $$invalidate(9, pos = $$props.pos);
    		if ('color' in $$props) $$invalidate(10, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(11, intensity = $$props.intensity);
    		if ('shadowMapSize' in $$props) $$invalidate(12, shadowMapSize = $$props.shadowMapSize);
    		if ('shadowBias' in $$props) $$invalidate(13, shadowBias = $$props.shadowBias);
    		if ('castShadow' in $$props) $$invalidate(14, castShadow = $$props.castShadow);
    		if ('props' in $$props) $$invalidate(15, props = $$props.props);
    		if ('currentSceneActive' in $$props) $$invalidate(5, currentSceneActive = $$props.currentSceneActive);
    		if ('animationEnabled' in $$props) $$invalidate(6, animationEnabled = $$props.animationEnabled);
    		if ('fnOnMount' in $$props) $$invalidate(16, fnOnMount = $$props.fnOnMount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*pos, object3DUtils*/ 4194816) {
    			pos && pos.length > 0
    			? object3DUtils.tryPosUpdate(pos)
    			: null;
    		}

    		if ($$self.$$.dirty & /*intensity, lightUtils*/ 2099200) {
    			intensity
    			? lightUtils.tryIntensityUpdate(intensity)
    			: null;
    		}

    		if ($$self.$$.dirty & /*color, lightUtils*/ 2098176) {
    			color ? lightUtils.tryColorUpdate(color) : null;
    		}

    		if ($$self.$$.dirty & /*shadowMapSize, lightUtils*/ 2101248) {
    			/**
     * @see https://threejs.org/docs/#api/en/constants/Renderer
     * @see https://threejs.org/docs/#api/en/lights/shadows/LightShadow
     * @see https://threejs.org/docs/#api/en/lights/shadows/DirectionalLightShadow
     *
     * THREE.BasicShadowMap
     * THREE.PCFShadowMap
     * THREE.PCFSoftShadowMap
     * THREE.VSMShadowMap
     */
    			shadowMapSize
    			? lightUtils.tryShadowMapSizeUpdate(shadowMapSize)
    			: null;
    		}

    		if ($$self.$$.dirty & /*shadowBias, lightUtils*/ 2105344) {
    			shadowBias
    			? lightUtils.tryShadowBiasUpdate(shadowBias)
    			: null;
    		}

    		if ($$self.$$.dirty & /*castShadow, lightUtils*/ 2113536) {
    			castShadow
    			? lightUtils.tryCastShadowUpdate(castShadow)
    			: null;
    		}

    		if ($$self.$$.dirty & /*props, uniPropIterator*/ 8421376) {
    			props
    			? Object.keys(props).length > 0
    				? uniPropIterator.tryPropsUpdate(props)
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty & /*$svelthreeStores, sti, scene*/ 17825793) {
    			$$invalidate(5, currentSceneActive = $svelthreeStores[sti].scenes[scene.userData.indexInScenes].isActive);
    		}

    		if ($$self.$$.dirty & /*animation*/ 2) {
    			animation
    			? $$invalidate(6, animationEnabled = true)
    			: null;
    		}
    	};

    	return [
    		scene,
    		animation,
    		aniauto,
    		light,
    		ani,
    		currentSceneActive,
    		animationEnabled,
    		parentForUs,
    		parent,
    		pos,
    		color,
    		intensity,
    		shadowMapSize,
    		shadowBias,
    		castShadow,
    		props,
    		fnOnMount,
    		removeLightFromParent,
    		getAnimation,
    		startAni,
    		sti,
    		lightUtils,
    		object3DUtils,
    		uniPropIterator,
    		$svelthreeStores,
    		svelthreeanimation_binding,
    		svelthreeanimation_currentSceneActive_binding
    	];
    }

    class Light extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			scene: 0,
    			animation: 1,
    			aniauto: 2,
    			parent: 8,
    			parentForUs: 7,
    			light: 3,
    			pos: 9,
    			color: 10,
    			intensity: 11,
    			shadowMapSize: 12,
    			shadowBias: 13,
    			castShadow: 14,
    			props: 15,
    			fnOnMount: 16,
    			removeLightFromParent: 17,
    			getAnimation: 18,
    			startAni: 19
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Light",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[0] === undefined && !('scene' in props)) {
    			console_1$5.warn("<Light> was created without expected prop 'scene'");
    		}
    	}

    	get scene() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get animation() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aniauto() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aniauto(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parent() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parent(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parentForUs() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parentForUs(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pos() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pos(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shadowMapSize() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shadowMapSize(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shadowBias() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shadowBias(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get castShadow() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set castShadow(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fnOnMount() {
    		throw new Error_1$2("<Light>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fnOnMount(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get removeLightFromParent() {
    		return this.$$.ctx[17];
    	}

    	set removeLightFromParent(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAnimation() {
    		return this.$$.ctx[18];
    	}

    	set getAnimation(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startAni() {
    		return this.$$.ctx[19];
    	}

    	set startAni(value) {
    		throw new Error_1$2("<Light>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/DirectionalLight.svelte generated by Svelte v3.46.4 */

    const { console: console_1$4 } = globals;

    function create_fragment$5(ctx) {
    	let light_1;
    	let current;

    	light_1 = new Light({
    			props: {
    				scene: /*scene*/ ctx[7],
    				light: /*light*/ ctx[8],
    				props: /*props*/ ctx[0],
    				pos: /*pos*/ ctx[1],
    				color: /*color*/ ctx[2],
    				intensity: /*intensity*/ ctx[3],
    				shadowMapSize: /*shadowMapSize*/ ctx[4],
    				shadowBias: /*shadowBias*/ ctx[5],
    				castShadow: /*castShadow*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(light_1.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(light_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const light_1_changes = {};
    			if (dirty & /*scene*/ 128) light_1_changes.scene = /*scene*/ ctx[7];
    			if (dirty & /*props*/ 1) light_1_changes.props = /*props*/ ctx[0];
    			if (dirty & /*pos*/ 2) light_1_changes.pos = /*pos*/ ctx[1];
    			if (dirty & /*color*/ 4) light_1_changes.color = /*color*/ ctx[2];
    			if (dirty & /*intensity*/ 8) light_1_changes.intensity = /*intensity*/ ctx[3];
    			if (dirty & /*shadowMapSize*/ 16) light_1_changes.shadowMapSize = /*shadowMapSize*/ ctx[4];
    			if (dirty & /*shadowBias*/ 32) light_1_changes.shadowBias = /*shadowBias*/ ctx[5];
    			if (dirty & /*castShadow*/ 64) light_1_changes.castShadow = /*castShadow*/ ctx[6];
    			light_1.$set(light_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(light_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(light_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(light_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DirectionalLight', slots, []);
    	let { props = undefined } = $$props;
    	let { pos = undefined } = $$props;
    	let { color = undefined } = $$props;
    	let { intensity = undefined } = $$props;
    	let { shadowMapSize = undefined } = $$props;
    	let { shadowBias = undefined } = $$props;
    	let { castShadow = undefined } = $$props;
    	let { scene } = $$props;
    	let light = new DirectionalLight();

    	function getLight() {
    		return light;
    	}

    	let { helper = undefined } = $$props;
    	let lightHelper;

    	onMount(() => {
    		console.info("SVELTHREE > onMount : DirectionalLight");
    		startUpdatingHelper();

    		return () => {
    			console.info("SVELTHREE > onDestroy : DirectionalLight");
    			stopUpdatingHelper();
    		};
    	});

    	function createHelper() {
    		$$invalidate(12, lightHelper = new DirectionalLightHelper(light, 0.1, "aqua"));
    		scene.add(lightHelper);
    		$$invalidate(12, lightHelper.visible = false, lightHelper);

    		console.info("SVELTHREE > " + light.type + " HELPER added!", {
    			lightHelper,
    			scene,
    			total: scene.children.length
    		});
    	}

    	let doUpdateHelper = false;
    	let updateHelper_rAF = 0;

    	function startUpdatingHelper() {
    		doUpdateHelper = true;
    		updateHelper_rAF = requestAnimationFrame(updateHelper);
    	}

    	function stopUpdatingHelper() {
    		doUpdateHelper = false;
    		cancelAnimationFrame(updateHelper_rAF);
    	}

    	function updateHelper() {
    		if (doUpdateHelper) {
    			lightHelper ? lightHelper.update() : null;
    			updateHelper_rAF = requestAnimationFrame(updateHelper);
    		}
    	}

    	function getHelper() {
    		return lightHelper;
    	}

    	const writable_props = [
    		'props',
    		'pos',
    		'color',
    		'intensity',
    		'shadowMapSize',
    		'shadowBias',
    		'castShadow',
    		'scene',
    		'helper'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<DirectionalLight> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('props' in $$props) $$invalidate(0, props = $$props.props);
    		if ('pos' in $$props) $$invalidate(1, pos = $$props.pos);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(3, intensity = $$props.intensity);
    		if ('shadowMapSize' in $$props) $$invalidate(4, shadowMapSize = $$props.shadowMapSize);
    		if ('shadowBias' in $$props) $$invalidate(5, shadowBias = $$props.shadowBias);
    		if ('castShadow' in $$props) $$invalidate(6, castShadow = $$props.castShadow);
    		if ('scene' in $$props) $$invalidate(7, scene = $$props.scene);
    		if ('helper' in $$props) $$invalidate(10, helper = $$props.helper);
    	};

    	$$self.$capture_state = () => ({
    		DirectionalLight,
    		DirectionalLightHelper,
    		Light,
    		onMount,
    		props,
    		pos,
    		color,
    		intensity,
    		shadowMapSize,
    		shadowBias,
    		castShadow,
    		scene,
    		light,
    		getLight,
    		helper,
    		lightHelper,
    		createHelper,
    		doUpdateHelper,
    		updateHelper_rAF,
    		startUpdatingHelper,
    		stopUpdatingHelper,
    		updateHelper,
    		getHelper
    	});

    	$$self.$inject_state = $$props => {
    		if ('props' in $$props) $$invalidate(0, props = $$props.props);
    		if ('pos' in $$props) $$invalidate(1, pos = $$props.pos);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(3, intensity = $$props.intensity);
    		if ('shadowMapSize' in $$props) $$invalidate(4, shadowMapSize = $$props.shadowMapSize);
    		if ('shadowBias' in $$props) $$invalidate(5, shadowBias = $$props.shadowBias);
    		if ('castShadow' in $$props) $$invalidate(6, castShadow = $$props.castShadow);
    		if ('scene' in $$props) $$invalidate(7, scene = $$props.scene);
    		if ('light' in $$props) $$invalidate(8, light = $$props.light);
    		if ('helper' in $$props) $$invalidate(10, helper = $$props.helper);
    		if ('lightHelper' in $$props) $$invalidate(12, lightHelper = $$props.lightHelper);
    		if ('doUpdateHelper' in $$props) doUpdateHelper = $$props.doUpdateHelper;
    		if ('updateHelper_rAF' in $$props) updateHelper_rAF = $$props.updateHelper_rAF;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*lightHelper, helper*/ 5120) {
    			!lightHelper && light && helper ? createHelper() : null;
    		}
    	};

    	return [
    		props,
    		pos,
    		color,
    		intensity,
    		shadowMapSize,
    		shadowBias,
    		castShadow,
    		scene,
    		light,
    		getLight,
    		helper,
    		getHelper,
    		lightHelper
    	];
    }

    class DirectionalLight_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			props: 0,
    			pos: 1,
    			color: 2,
    			intensity: 3,
    			shadowMapSize: 4,
    			shadowBias: 5,
    			castShadow: 6,
    			scene: 7,
    			getLight: 9,
    			helper: 10,
    			getHelper: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DirectionalLight_1",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[7] === undefined && !('scene' in props)) {
    			console_1$4.warn("<DirectionalLight> was created without expected prop 'scene'");
    		}
    	}

    	get props() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pos() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pos(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shadowMapSize() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shadowMapSize(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shadowBias() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shadowBias(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get castShadow() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set castShadow(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scene() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getLight() {
    		return this.$$.ctx[9];
    	}

    	set getLight(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get helper() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set helper(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getHelper() {
    		return this.$$.ctx[11];
    	}

    	set getHelper(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/AmbientLight.svelte generated by Svelte v3.46.4 */

    const { console: console_1$3 } = globals;

    function create_fragment$4(ctx) {
    	let light_1;
    	let current;

    	light_1 = new Light({
    			props: {
    				scene: /*scene*/ ctx[3],
    				light: /*light*/ ctx[4],
    				props: /*props*/ ctx[0],
    				color: /*color*/ ctx[1],
    				intensity: /*intensity*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(light_1.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(light_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const light_1_changes = {};
    			if (dirty & /*scene*/ 8) light_1_changes.scene = /*scene*/ ctx[3];
    			if (dirty & /*props*/ 1) light_1_changes.props = /*props*/ ctx[0];
    			if (dirty & /*color*/ 2) light_1_changes.color = /*color*/ ctx[1];
    			if (dirty & /*intensity*/ 4) light_1_changes.intensity = /*intensity*/ ctx[2];
    			light_1.$set(light_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(light_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(light_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(light_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AmbientLight', slots, []);
    	let { props = undefined } = $$props;
    	let { color = undefined } = $$props;
    	let { intensity = undefined } = $$props;
    	let { scene } = $$props;
    	let light = new AmbientLight();

    	function getLight() {
    		return light;
    	}

    	onMount(() => {
    		console.info("SVELTHREE > onMount : AmbientLight");

    		return () => {
    			console.info("SVELTHREE > onDestroy : AmbientLight!");
    		};
    	});

    	const writable_props = ['props', 'color', 'intensity', 'scene'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<AmbientLight> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('props' in $$props) $$invalidate(0, props = $$props.props);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(2, intensity = $$props.intensity);
    		if ('scene' in $$props) $$invalidate(3, scene = $$props.scene);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		AmbientLight,
    		Light,
    		props,
    		color,
    		intensity,
    		scene,
    		light,
    		getLight
    	});

    	$$self.$inject_state = $$props => {
    		if ('props' in $$props) $$invalidate(0, props = $$props.props);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('intensity' in $$props) $$invalidate(2, intensity = $$props.intensity);
    		if ('scene' in $$props) $$invalidate(3, scene = $$props.scene);
    		if ('light' in $$props) $$invalidate(4, light = $$props.light);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [props, color, intensity, scene, light, getLight];
    }

    class AmbientLight_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			props: 0,
    			color: 1,
    			intensity: 2,
    			scene: 3,
    			getLight: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AmbientLight_1",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*scene*/ ctx[3] === undefined && !('scene' in props)) {
    			console_1$3.warn("<AmbientLight> was created without expected prop 'scene'");
    		}
    	}

    	get props() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scene() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scene(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getLight() {
    		return this.$$.ctx[5];
    	}

    	set getLight(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/Scene.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$1, console: console_1$2 } = globals;
    const get_default_slot_changes = dirty => ({ scene: dirty & /*scene*/ 1 });
    const get_default_slot_context = ctx => ({ scene: /*scene*/ ctx[0] });

    function create_fragment$3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, scene*/ 65)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(8, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Scene', slots, ['default']);
    	let { id = undefined } = $$props;

    	if (!id) {
    		console.warn("SVELTHREE > Scene : You have to provide an 'id' prop (not empty String) for Scenes in order to assign them to a 'WebGLRenderer' component!", { id });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	let { props = undefined } = $$props;
    	let { sti } = $$props;

    	if (sti === undefined) {
    		console.warn("SVELTHREE > Scene : You have to provide a {sti} prop for the Scene!", { sti });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	const svelthreeStore = $svelthreeStores[sti];
    	let scene = new Scene();
    	scene.userData.isActive = false;
    	scene.userData.id = id;
    	scene.userData.sti = sti;
    	scene.userData.animations = [];
    	scene.userData.indexInScenes = svelthreeStore.scenes.length;
    	svelthreeStore.scenes.push({ scene, id, isActive: false });

    	onMount(() => {
    		console.info("SVELTHREE > onMount : Scene", { sti });

    		for (let p in props) {
    			switch (p) {
    				case "background":
    					$$invalidate(0, scene[p] = new Color(props[p]), scene);
    					break;
    			}
    		}

    		return () => {
    			console.info("SVELTHREE > onDestroy : Scene");
    		}; // TODO  remove self from svelthreeStore
    	});

    	function getScene() {
    		return scene;
    	}

    	function getId() {
    		return id;
    	}

    	const writable_props = ['id', 'props', 'sti'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Scene> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('sti' in $$props) $$invalidate(3, sti = $$props.sti);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		svelthreeStores,
    		Scene,
    		Color,
    		id,
    		props,
    		sti,
    		svelthreeStore,
    		scene,
    		getScene,
    		getId,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('sti' in $$props) $$invalidate(3, sti = $$props.sti);
    		if ('scene' in $$props) $$invalidate(0, scene = $$props.scene);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [scene, id, props, sti, getScene, getId, $$scope, slots];
    }

    class Scene_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			id: 1,
    			props: 2,
    			sti: 3,
    			getScene: 4,
    			getId: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Scene_1",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*sti*/ ctx[3] === undefined && !('sti' in props)) {
    			console_1$2.warn("<Scene> was created without expected prop 'sti'");
    		}
    	}

    	get id() {
    		throw new Error_1$1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error_1$1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1$1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1$1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sti() {
    		throw new Error_1$1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sti(value) {
    		throw new Error_1$1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getScene() {
    		return this.$$.ctx[4];
    	}

    	set getScene(value) {
    		throw new Error_1$1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getId() {
    		return this.$$.ctx[5];
    	}

    	set getId(value) {
    		throw new Error_1$1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelthree/src/components/WebGLRenderer.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1, Object: Object_1, console: console_1$1 } = globals;

    function create_fragment$2(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $svelthreeStores;
    	validate_store(svelthreeStores, 'svelthreeStores');
    	component_subscribe($$self, svelthreeStores, $$value => $$invalidate(20, $svelthreeStores = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WebGLRenderer', slots, []);
    	let renderer;
    	let rendererPropIterator;
    	let { config = undefined } = $$props;
    	let { props = undefined } = $$props;
    	let { enableShadowMap = false } = $$props;
    	let { shadowMapType = PCFSoftShadowMap } = $$props;
    	let { sceneId: sceneToRenderId } = $$props;
    	let { camId: camToRenderId } = $$props;
    	let currentScene = undefined;
    	let currentCam = undefined;
    	let currentSceneId = "";
    	let currentCamId = "";
    	let canvas = undefined;
    	let { sti } = $$props;

    	if (sti === undefined) {
    		console.warn("SVELTHREE > Scene : You have to provide a {sti} prop for the WebGLRenderer component!", { sti });
    		throw new Error("SVELTHREE Exception (see warning above)");
    	}

    	//Reactive handling Canvas Resize by calling Canvas.doResize(w, h)
    	let storeCanvasDimW;

    	let storeCanvasDimH;

    	// TODO  check, this is NOT working! Do we need this at all? Examine changing canvas via dom without this
    	//
    	//Reactive handling Canvas Resize via DOM (e.g. devtools)
    	/*
    let devCanvasDimW
    let devCanvasDimH
    $: devCanvasDimW = $svelthreeStores[sti].canvas.dom ? $svelthreeStores[sti].canvas.dom.width :undefined
    $: devCanvasDimH = $svelthreeStores[sti].canvas.dom ?  $svelthreeStores[sti].canvas.dom.height  :undefined
    $: (devCanvasDimW || devCanvasDimH) && canvas ? updateCanvasDimInStore() : null // triggers above
    */
    	onMount(() => {
    		console.info("SVELTHREE > onMount : WebGLRenderer");
    		startAnimating();

    		return () => {
    			console.info("SVELTHREE > onDestroy : WebGLRenderer");
    			stopAnimating();
    		};
    	});

    	/**
     * // TODO  understand. STRANGE: if we run this inside reactive statement instead of the ternary version, there are no shadows ---> ???
     */
    	/*
    function createRenderer():void {
        //Spread operator doesn't get transpiled by Svelte, BUG in Edge! see https://github.com/sveltejs/svelte/issues/3052
        //trying with rollup-babel-plugin --> works!
        renderer = new WebGLRenderer({
            canvas: $svelthreeStores[sti].canvas.dom,
            ...config
        })
        rendererPropIterator = new UniversalPropIterator(renderer)
    }
    */
    	function setCurrentCamActive() {
    		console.info("SVELTHREE > WebGLRenderer : setCurrentCamActive", {
    			currentCam: currentCam.type,
    			uuid: currentCam.uuid,
    			isActive: currentCam.userData.isActive
    		});

    		$$invalidate(14, currentCam.userData.isActive = true, currentCam);
    		set_store_value(svelthreeStores, $svelthreeStores[sti].cameras[currentCam.userData.indexInCameras].isActive = true, $svelthreeStores);
    		set_store_value(svelthreeStores, $svelthreeStores[sti].activeCamera = currentCam, $svelthreeStores);

    		console.info(
    			"SVELTHREE > WebGLRenderer : setCurrentCamActive",
    			{
    				currentCam: currentCam.type,
    				uuid: currentCam.uuid,
    				isActive: currentCam.userData.isActive
    			},
    			"done!"
    		);
    	}

    	function setCurrentCamInactive() {
    		console.info("SVELTHREE > WebGLRenderer : setCurrentCamInactive", {
    			currentCam: currentCam.type,
    			uuid: currentCam.uuid,
    			isActive: currentCam.userData.isActive
    		});

    		$$invalidate(14, currentCam.userData.isActive = false, currentCam);
    		set_store_value(svelthreeStores, $svelthreeStores[sti].cameras[currentCam.userData.indexInCameras].isActive = false, $svelthreeStores);

    		console.info(
    			"SVELTHREE > WebGLRenderer : setCurrentCamInactive",
    			{
    				currentCam: currentCam.type,
    				uuid: currentCam.uuid,
    				isActive: currentCam.userData.isActive
    			},
    			"done!"
    		);
    	}

    	function resizeRenderer(tW, tH) {
    		console.info("SVELTHREE > WebGLRenderer : resizeRenderer!");
    		renderer ? renderer.setSize(tW, tH, false) : null;
    	}

    	function updateCameraAspect(tW, tH) {
    		console.info("SVELTHREE > WebGLRenderer : updateCameraAspect!");

    		currentCam
    		? (currentCam.type === "PerspectiveCamera"
    			? $$invalidate(14, currentCam.aspect = tW / tH, currentCam)
    			: null, currentCam.updateProjectionMatrix())
    		: null;
    	}

    	function getSceneToRender() {
    		console.info("SVELTHREE > WebGLRenderer : getSceneToRender!");

    		if ($svelthreeStores[sti].scenes.length > 0) {
    			if (sceneToRenderId === undefined) {
    				console.warn("SVELTHREE > WebGLRenderer : You have to provide the 'sceneId' prop!", { sceneId: sceneToRenderId });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			} else {
    				for (let i = 0; i < $svelthreeStores[sti].scenes.length; i++) {
    					let item = $svelthreeStores[sti].scenes[i];

    					if (item.id === sceneToRenderId) {
    						$$invalidate(15, currentSceneId = sceneToRenderId);
    						return item.scene;
    					}
    				}

    				console.warn("SVELTHREE > WebGLRenderer : Scene with id '" + sceneToRenderId + "' not found!", { scenes: $svelthreeStores[sti].scenes });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			}
    		} else {
    			console.warn("SVELTHREE > WebGLRenderer : getSceneToRender: No Scenes available!", { scenes: $svelthreeStores[sti].scenes });
    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	}

    	function getCamToRender() {
    		console.info("SVELTHREE > WebGLRenderer : getCamToRender!");

    		if ($svelthreeStores[sti].cameras.length > 0) {
    			if (camToRenderId === undefined) {
    				console.warn("SVELTHREE > WebGLRenderer : You have to provide the 'camId' prop!", { camId: camToRenderId });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			} else {
    				for (let i = 0; i < $svelthreeStores[sti].cameras.length; i++) {
    					let item = $svelthreeStores[sti].cameras[i];

    					if (item.id === camToRenderId) {
    						$$invalidate(16, currentCamId = camToRenderId);
    						return item.camera;
    					}
    				}

    				console.warn("SVELTHREE > WebGLRenderer : Camera with id '" + camToRenderId + "' not found!", { cameras: $svelthreeStores[sti].cameras });
    				throw new Error("SVELTHREE Exception (see warning above)");
    			}
    		} else {
    			console.warn("SVELTHREE > WebGLRenderer : getCamToRender: No Cameras available! $svelthreeStores[sti].cameras:", { cameras: $svelthreeStores[sti].cameras });
    			throw new Error("SVELTHREE Exception (see warning above)");
    		}
    	}

    	function deactivateCurrentScene() {
    		if (currentScene.userData.isActive === true) {
    			$$invalidate(13, currentScene.userData.isActive = false, currentScene);
    			set_store_value(svelthreeStores, $svelthreeStores[sti].scenes[currentScene.userData.indexInScenes].isActive = false, $svelthreeStores);
    		}
    	}

    	function activateCurrentScene() {
    		//resume animations only if scene was being deactivated before
    		if (currentScene.userData.isActive === false) {
    			$$invalidate(13, currentScene.userData.isActive = true, currentScene);
    			set_store_value(svelthreeStores, $svelthreeStores[sti].scenes[currentScene.userData.indexInScenes].isActive = true, $svelthreeStores);
    		} else if (currentScene.userData.isActive === undefined) {
    			console.info(currentScene); /** would also work
    props.scenes[currentScene.userData.indexInScenes].isActive = true
    $svelthreeStores = $svelthreeStores
     */

    			$$invalidate(13, currentScene.userData.isActive = true, currentScene);
    			set_store_value(svelthreeStores, $svelthreeStores[sti].scenes[currentScene.userData.indexInScenes].isActive = true, $svelthreeStores);
    		} /** would also work
    props.scenes[currentScene.userData.indexInScenes].isActive = true
    $svelthreeStores = $svelthreeStores
     */
    	}

    	let doAnimate = false;
    	let rAF = undefined;

    	function startAnimating() {
    		doAnimate = true;
    		rAF = requestAnimationFrame(animate);
    	}

    	function stopAnimating() {
    		doAnimate = false;
    		cancelAnimationFrame(rAF);
    	}

    	let logOnce = true;

    	// ------------- Interaction --------------------
    	let isInteractive = false;

    	let raycaster;

    	// ----------------------------------------------
    	function changeCursor(doit) {
    		//pBoolean ? $svelthreeStores[sti].canvas.dom.style.cursor = "$svelthreeStores[sti].pointer" : $svelthreeStores[sti].canvas.dom.style.cursor = "default"
    		//Problem with above: canvas triggers reactive statement above because style changes! FIX below
    		if (doit) {
    			if ($svelthreeStores[sti].allIntersections[0].object.userData.interact) {
    				document.body.style.cursor = "pointer";
    			} else if ($svelthreeStores[sti].orbitcontrols) {
    				document.body.style.cursor = "all-scroll";
    			} else {
    				document.body.style.cursor = "default";
    			}
    		} else {
    			if ($svelthreeStores[sti].orbitcontrols) {
    				document.body.style.cursor = "all-scroll";
    			} else {
    				document.body.style.cursor = "default";
    			}
    		}
    	}

    	let leftCanvas = true;

    	function checkCursor() {
    		$svelthreeStores[sti].pointer.isOverCanvas
    		? (leftCanvas = false, $svelthreeStores[sti].allIntersections
    			? $svelthreeStores[sti].allIntersections.length > 0
    				? changeCursor(true)
    				: changeCursor(false)
    			: null)
    		: !leftCanvas
    			? (leftCanvas = true, document.body.style.cursor = "default")
    			: null;
    	}

    	let toTest;

    	function animate() {
    		if (doAnimate) {
    			if (logOnce) {
    				logOnce = false;
    				console.info("SVELTHREE > WebGLRenderer > animate!", currentScene, currentCam, canvas);
    			}

    			isInteractive
    			? (raycaster.setFromCamera($svelthreeStores[sti].pointer.pos, currentCam), toTest = currentScene.children.filter(child => child.type === "Mesh"), set_store_value(svelthreeStores, $svelthreeStores[sti].allIntersections = raycaster.intersectObjects(toTest, true), $svelthreeStores))
    			: null;

    			isInteractive ? checkCursor() : null;

    			// OrbitControls
    			// required if controls.enableDamping or controls.autoRotate are set to true
    			$svelthreeStores[sti].orbitcontrols
    			? $svelthreeStores[sti].orbitcontrols.update()
    			: null;

    			renderer.render(currentScene, currentCam);
    			rAF = requestAnimationFrame(animate);
    		}
    	}

    	function getRenderer() {
    		return renderer;
    	}

    	function getCurrentCamera() {
    		return currentCam;
    	}

    	function setRender(parameters = { sceneId: "", camId: "" }) {
    		$$invalidate(0, sceneToRenderId = parameters.sceneId);
    		$$invalidate(1, camToRenderId = parameters.camId);
    	}

    	const writable_props = [
    		'config',
    		'props',
    		'enableShadowMap',
    		'shadowMapType',
    		'sceneId',
    		'camId',
    		'sti'
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<WebGLRenderer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('config' in $$props) $$invalidate(2, config = $$props.config);
    		if ('props' in $$props) $$invalidate(3, props = $$props.props);
    		if ('enableShadowMap' in $$props) $$invalidate(4, enableShadowMap = $$props.enableShadowMap);
    		if ('shadowMapType' in $$props) $$invalidate(5, shadowMapType = $$props.shadowMapType);
    		if ('sceneId' in $$props) $$invalidate(0, sceneToRenderId = $$props.sceneId);
    		if ('camId' in $$props) $$invalidate(1, camToRenderId = $$props.camId);
    		if ('sti' in $$props) $$invalidate(6, sti = $$props.sti);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		UniversalPropIterator,
    		svelthreeStores,
    		WebGLRenderer,
    		PCFSoftShadowMap,
    		renderer,
    		rendererPropIterator,
    		config,
    		props,
    		enableShadowMap,
    		shadowMapType,
    		sceneToRenderId,
    		camToRenderId,
    		currentScene,
    		currentCam,
    		currentSceneId,
    		currentCamId,
    		canvas,
    		sti,
    		storeCanvasDimW,
    		storeCanvasDimH,
    		setCurrentCamActive,
    		setCurrentCamInactive,
    		resizeRenderer,
    		updateCameraAspect,
    		getSceneToRender,
    		getCamToRender,
    		deactivateCurrentScene,
    		activateCurrentScene,
    		doAnimate,
    		rAF,
    		startAnimating,
    		stopAnimating,
    		logOnce,
    		isInteractive,
    		raycaster,
    		changeCursor,
    		leftCanvas,
    		checkCursor,
    		toTest,
    		animate,
    		getRenderer,
    		getCurrentCamera,
    		setRender,
    		$svelthreeStores
    	});

    	$$self.$inject_state = $$props => {
    		if ('renderer' in $$props) $$invalidate(11, renderer = $$props.renderer);
    		if ('rendererPropIterator' in $$props) $$invalidate(12, rendererPropIterator = $$props.rendererPropIterator);
    		if ('config' in $$props) $$invalidate(2, config = $$props.config);
    		if ('props' in $$props) $$invalidate(3, props = $$props.props);
    		if ('enableShadowMap' in $$props) $$invalidate(4, enableShadowMap = $$props.enableShadowMap);
    		if ('shadowMapType' in $$props) $$invalidate(5, shadowMapType = $$props.shadowMapType);
    		if ('sceneToRenderId' in $$props) $$invalidate(0, sceneToRenderId = $$props.sceneToRenderId);
    		if ('camToRenderId' in $$props) $$invalidate(1, camToRenderId = $$props.camToRenderId);
    		if ('currentScene' in $$props) $$invalidate(13, currentScene = $$props.currentScene);
    		if ('currentCam' in $$props) $$invalidate(14, currentCam = $$props.currentCam);
    		if ('currentSceneId' in $$props) $$invalidate(15, currentSceneId = $$props.currentSceneId);
    		if ('currentCamId' in $$props) $$invalidate(16, currentCamId = $$props.currentCamId);
    		if ('canvas' in $$props) $$invalidate(17, canvas = $$props.canvas);
    		if ('sti' in $$props) $$invalidate(6, sti = $$props.sti);
    		if ('storeCanvasDimW' in $$props) $$invalidate(18, storeCanvasDimW = $$props.storeCanvasDimW);
    		if ('storeCanvasDimH' in $$props) $$invalidate(19, storeCanvasDimH = $$props.storeCanvasDimH);
    		if ('doAnimate' in $$props) doAnimate = $$props.doAnimate;
    		if ('rAF' in $$props) rAF = $$props.rAF;
    		if ('logOnce' in $$props) logOnce = $$props.logOnce;
    		if ('isInteractive' in $$props) isInteractive = $$props.isInteractive;
    		if ('raycaster' in $$props) raycaster = $$props.raycaster;
    		if ('leftCanvas' in $$props) leftCanvas = $$props.leftCanvas;
    		if ('toTest' in $$props) toTest = $$props.toTest;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*renderer, $svelthreeStores, sti, config*/ 1050692) {
    			//triggered only once on init if there ish no current scene
    			!renderer
    			? $svelthreeStores[sti].canvas.dom
    				? ($$invalidate(11, renderer = new WebGLRenderer(Object.assign({ canvas: $svelthreeStores[sti].canvas.dom }, config))), $$invalidate(17, canvas = $svelthreeStores[sti].canvas.dom), $$invalidate(12, rendererPropIterator = new UniversalPropIterator(renderer)), set_store_value(svelthreeStores, $svelthreeStores[sti].renderer = renderer, $svelthreeStores))
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*renderer, enableShadowMap*/ 2064) {
    			renderer
    			? enableShadowMap
    				? $$invalidate(11, renderer.shadowMap.enabled = true, renderer)
    				: $$invalidate(11, renderer.shadowMap.enabled = false, renderer)
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*renderer, shadowMapType*/ 2080) {
    			renderer
    			? renderer.shadowMap.enabled
    				? $$invalidate(11, renderer.shadowMap.type = shadowMapType, renderer)
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*renderer, props, rendererPropIterator*/ 6152) {
    			renderer
    			? props
    				? Object.keys(props).length > 0
    					? rendererPropIterator
    						? rendererPropIterator.tryPropsUpdate(props)
    						: null
    					: null
    				: null
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*currentScene, sceneToRenderId*/ 8193) {
    			!currentScene && sceneToRenderId
    			? ($$invalidate(13, currentScene = getSceneToRender()), activateCurrentScene())
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*currentCam, currentSceneId*/ 49152) {
    			!currentCam && currentSceneId
    			? ($$invalidate(14, currentCam = getCamToRender()), setCurrentCamActive())
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*sceneToRenderId, currentSceneId, currentScene, camToRenderId, currentCamId, currentCam*/ 122883) {
    			{
    				if (sceneToRenderId !== currentSceneId) {
    					//won't trigger change if 'currentScene' is not being set, this happens first time onMount()
    					if (currentScene) {
    						deactivateCurrentScene();
    						$$invalidate(13, currentScene = getSceneToRender());
    						activateCurrentScene();
    					} //console.warn("SVELTHREE > WebGLRenderer : handle scene switch triggered, currentScene was NOT CHANGED:", {currentScene: currentScene})
    				}

    				if (camToRenderId !== currentCamId) {
    					//won't trigger change if 'currentCam' is not being set, this happens first time onMount()
    					if (currentCam) {
    						currentCam
    						? (setCurrentCamInactive(), $$invalidate(14, currentCam = getCamToRender()), setCurrentCamActive())
    						: null;
    					} //console.warn("SVELTHREE > WebGLRenderer : handle scene switch triggered, currentCam was NOT CHANGED:", {currentCam: currentCam})
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$svelthreeStores, sti*/ 1048640) {
    			// IMPORTANT!: the endpoint has to be a value not an object!!!
    			$$invalidate(18, storeCanvasDimW = $svelthreeStores[sti].canvas.dim.w);
    		}

    		if ($$self.$$.dirty[0] & /*$svelthreeStores, sti*/ 1048640) {
    			$$invalidate(19, storeCanvasDimH = $svelthreeStores[sti].canvas.dim.h);
    		}

    		if ($$self.$$.dirty[0] & /*storeCanvasDimW, storeCanvasDimH, canvas*/ 917504) {
    			(storeCanvasDimW || storeCanvasDimH) && canvas
    			? (console.info("SVELTHREE > WebGLRenderer : before resize renderer 1"), resizeRenderer(storeCanvasDimW, storeCanvasDimH), updateCameraAspect(storeCanvasDimW, storeCanvasDimH))
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*$svelthreeStores, sti*/ 1048640) {
    			$svelthreeStores[sti].canvas.interactive
    			? (raycaster = $svelthreeStores[sti].raycaster, isInteractive = true)
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*$svelthreeStores, sti*/ 1048640) {
    			!$svelthreeStores[sti].canvas.interactive
    			? (isInteractive = false, raycaster = null)
    			: null;
    		}
    	};

    	return [
    		sceneToRenderId,
    		camToRenderId,
    		config,
    		props,
    		enableShadowMap,
    		shadowMapType,
    		sti,
    		stopAnimating,
    		getRenderer,
    		getCurrentCamera,
    		setRender,
    		renderer,
    		rendererPropIterator,
    		currentScene,
    		currentCam,
    		currentSceneId,
    		currentCamId,
    		canvas,
    		storeCanvasDimW,
    		storeCanvasDimH,
    		$svelthreeStores
    	];
    }

    class WebGLRenderer_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$2,
    			create_fragment$2,
    			safe_not_equal,
    			{
    				config: 2,
    				props: 3,
    				enableShadowMap: 4,
    				shadowMapType: 5,
    				sceneId: 0,
    				camId: 1,
    				sti: 6,
    				stopAnimating: 7,
    				getRenderer: 8,
    				getCurrentCamera: 9,
    				setRender: 10
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WebGLRenderer_1",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*sceneToRenderId*/ ctx[0] === undefined && !('sceneId' in props)) {
    			console_1$1.warn("<WebGLRenderer> was created without expected prop 'sceneId'");
    		}

    		if (/*camToRenderId*/ ctx[1] === undefined && !('camId' in props)) {
    			console_1$1.warn("<WebGLRenderer> was created without expected prop 'camId'");
    		}

    		if (/*sti*/ ctx[6] === undefined && !('sti' in props)) {
    			console_1$1.warn("<WebGLRenderer> was created without expected prop 'sti'");
    		}
    	}

    	get config() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get enableShadowMap() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set enableShadowMap(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shadowMapType() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shadowMapType(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sceneId() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sceneId(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get camId() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set camId(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sti() {
    		throw new Error_1("<WebGLRenderer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sti(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stopAnimating() {
    		return this.$$.ctx[7];
    	}

    	set stopAnimating(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getRenderer() {
    		return this.$$.ctx[8];
    	}

    	set getRenderer(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getCurrentCamera() {
    		return this.$$.ctx[9];
    	}

    	set getCurrentCamera(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setRender() {
    		return this.$$.ctx[10];
    	}

    	set setRender(value) {
    		throw new Error_1("<WebGLRenderer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    /*!
     * GSAP 3.9.1
     * https://greensock.com
     *
     * @license Copyright 2008-2021, GreenSock. All rights reserved.
     * Subject to the terms at https://greensock.com/standard-license or for
     * Club GreenSock members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */

    /* eslint-disable */
    var _config = {
      autoSleep: 120,
      force3D: "auto",
      nullTargetWarn: 1,
      units: {
        lineHeight: ""
      }
    },
        _defaults = {
      duration: .5,
      overwrite: false,
      delay: 0
    },
        _suppressOverwrites,
        _bigNum$1 = 1e8,
        _tinyNum = 1 / _bigNum$1,
        _2PI = Math.PI * 2,
        _HALF_PI = _2PI / 4,
        _gsID = 0,
        _sqrt = Math.sqrt,
        _cos = Math.cos,
        _sin = Math.sin,
        _isString = function _isString(value) {
      return typeof value === "string";
    },
        _isFunction = function _isFunction(value) {
      return typeof value === "function";
    },
        _isNumber = function _isNumber(value) {
      return typeof value === "number";
    },
        _isUndefined = function _isUndefined(value) {
      return typeof value === "undefined";
    },
        _isObject = function _isObject(value) {
      return typeof value === "object";
    },
        _isNotFalse = function _isNotFalse(value) {
      return value !== false;
    },
        _windowExists$1 = function _windowExists() {
      return typeof window !== "undefined";
    },
        _isFuncOrString = function _isFuncOrString(value) {
      return _isFunction(value) || _isString(value);
    },
        _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
        // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
    _isArray = Array.isArray,
        _strictNumExp = /(?:-?\.?\d|\.)+/gi,
        //only numbers (including negatives and decimals) but NOT relative values.
    _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
        //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
    _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
        _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
        //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
    _relExp = /[+-]=-?[.\d]+/,
        _delimitedValueExp = /[^,'"\[\]\s]+/gi,
        // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
    _unitExp = /[\d.+\-=]+(?:e[-+]\d*)*/i,
        _globalTimeline,
        _win$1,
        _coreInitted,
        _doc$1,
        _globals = {},
        _installScope = {},
        _coreReady,
        _install = function _install(scope) {
      return (_installScope = _merge(scope, _globals)) && gsap;
    },
        _missingPlugin = function _missingPlugin(property, value) {
      return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
    },
        _warn = function _warn(message, suppress) {
      return !suppress && console.warn(message);
    },
        _addGlobal = function _addGlobal(name, obj) {
      return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
    },
        _emptyFunc = function _emptyFunc() {
      return 0;
    },
        _reservedProps = {},
        _lazyTweens = [],
        _lazyLookup = {},
        _lastRenderedFrame,
        _plugins = {},
        _effects = {},
        _nextGCFrame = 30,
        _harnessPlugins = [],
        _callbackNames = "",
        _harness = function _harness(targets) {
      var target = targets[0],
          harnessPlugin,
          i;
      _isObject(target) || _isFunction(target) || (targets = [targets]);

      if (!(harnessPlugin = (target._gsap || {}).harness)) {
        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
        i = _harnessPlugins.length;

        while (i-- && !_harnessPlugins[i].targetTest(target)) {}

        harnessPlugin = _harnessPlugins[i];
      }

      i = targets.length;

      while (i--) {
        targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
      }

      return targets;
    },
        _getCache = function _getCache(target) {
      return target._gsap || _harness(toArray(target))[0]._gsap;
    },
        _getProperty = function _getProperty(target, property, v) {
      return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
    },
        _forEachName = function _forEachName(names, func) {
      return (names = names.split(",")).forEach(func) || names;
    },
        //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
    _round = function _round(value) {
      return Math.round(value * 100000) / 100000 || 0;
    },
        _roundPrecise = function _roundPrecise(value) {
      return Math.round(value * 10000000) / 10000000 || 0;
    },
        // increased precision mostly for timing values.
    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
      //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
      var l = toFind.length,
          i = 0;

      for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

      return i < l;
    },
        _lazyRender = function _lazyRender() {
      var l = _lazyTweens.length,
          a = _lazyTweens.slice(0),
          i,
          tween;

      _lazyLookup = {};
      _lazyTweens.length = 0;

      for (i = 0; i < l; i++) {
        tween = a[i];
        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
      }
    },
        _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
      _lazyTweens.length && _lazyRender();
      animation.render(time, suppressEvents, force);
      _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
    },
        _numericIfPossible = function _numericIfPossible(value) {
      var n = parseFloat(value);
      return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
    },
        _passThrough = function _passThrough(p) {
      return p;
    },
        _setDefaults = function _setDefaults(obj, defaults) {
      for (var p in defaults) {
        p in obj || (obj[p] = defaults[p]);
      }

      return obj;
    },
        _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
      return function (obj, defaults) {
        for (var p in defaults) {
          p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
        }
      };
    },
        _merge = function _merge(base, toMerge) {
      for (var p in toMerge) {
        base[p] = toMerge[p];
      }

      return base;
    },
        _mergeDeep = function _mergeDeep(base, toMerge) {
      for (var p in toMerge) {
        p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
      }

      return base;
    },
        _copyExcluding = function _copyExcluding(obj, excluding) {
      var copy = {},
          p;

      for (p in obj) {
        p in excluding || (copy[p] = obj[p]);
      }

      return copy;
    },
        _inheritDefaults = function _inheritDefaults(vars) {
      var parent = vars.parent || _globalTimeline,
          func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

      if (_isNotFalse(vars.inherit)) {
        while (parent) {
          func(vars, parent.vars.defaults);
          parent = parent.parent || parent._dp;
        }
      }

      return vars;
    },
        _arraysMatch = function _arraysMatch(a1, a2) {
      var i = a1.length,
          match = i === a2.length;

      while (match && i-- && a1[i] === a2[i]) {}

      return i < 0;
    },
        _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }

      if (lastProp === void 0) {
        lastProp = "_last";
      }

      var prev = parent[lastProp],
          t;

      if (sortBy) {
        t = child[sortBy];

        while (prev && prev[sortBy] > t) {
          prev = prev._prev;
        }
      }

      if (prev) {
        child._next = prev._next;
        prev._next = child;
      } else {
        child._next = parent[firstProp];
        parent[firstProp] = child;
      }

      if (child._next) {
        child._next._prev = child;
      } else {
        parent[lastProp] = child;
      }

      child._prev = prev;
      child.parent = child._dp = parent;
      return child;
    },
        _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }

      if (lastProp === void 0) {
        lastProp = "_last";
      }

      var prev = child._prev,
          next = child._next;

      if (prev) {
        prev._next = next;
      } else if (parent[firstProp] === child) {
        parent[firstProp] = next;
      }

      if (next) {
        next._prev = prev;
      } else if (parent[lastProp] === child) {
        parent[lastProp] = prev;
      }

      child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
    },
        _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
      child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
      child._act = 0;
    },
        _uncache = function _uncache(animation, child) {
      if (animation && (!child || child._end > animation._dur || child._start < 0)) {
        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
        var a = animation;

        while (a) {
          a._dirty = 1;
          a = a.parent;
        }
      }

      return animation;
    },
        _recacheAncestors = function _recacheAncestors(animation) {
      var parent = animation.parent;

      while (parent && parent.parent) {
        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
        parent._dirty = 1;
        parent.totalDuration();
        parent = parent.parent;
      }

      return animation;
    },
        _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
      return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
    },
        _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
      return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
    },
        // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
    _animationCycle = function _animationCycle(tTime, cycleDuration) {
      var whole = Math.floor(tTime /= cycleDuration);
      return tTime && whole === tTime ? whole - 1 : whole;
    },
        _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
      return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
    },
        _setEnd = function _setEnd(animation) {
      return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
    },
        _alignPlayhead = function _alignPlayhead(animation, totalTime) {
      // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
      var parent = animation._dp;

      if (parent && parent.smoothChildTiming && animation._ts) {
        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

        _setEnd(animation);

        parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
      }

      return animation;
    },

    /*
    _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
    	let cycleDuration = duration + repeatDelay,
    		time = _round(clampedTotalTime % cycleDuration);
    	if (time > duration) {
    		time = duration;
    	}
    	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
    },
    */
    _postAddChecks = function _postAddChecks(timeline, child) {
      var t;

      if (child._time || child._initted && !child._dur) {
        //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
        t = _parentToChildTotalTime(timeline.rawTime(), child);

        if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
          child.render(t, true);
        }
      } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


      if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
        //in case any of the ancestors had completed but should now be enabled...
        if (timeline._dur < timeline.duration()) {
          t = timeline;

          while (t._dp) {
            t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

            t = t._dp;
          }
        }

        timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
      }
    },
        _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
      child.parent && _removeFromParent(child);
      child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
      child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

      _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

      _isFromOrFromStart(child) || (timeline._recent = child);
      skipChecks || _postAddChecks(timeline, child);
      return timeline;
    },
        _scrollTrigger = function _scrollTrigger(animation, trigger) {
      return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
    },
        _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
      _initTween(tween, totalTime);

      if (!tween._initted) {
        return 1;
      }

      if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
        _lazyTweens.push(tween);

        tween._lazy = [totalTime, suppressEvents];
        return 1;
      }
    },
        _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
      var parent = _ref.parent;
      return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
    },
        // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
    _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
      var data = _ref2.data;
      return data === "isFromStart" || data === "isStart";
    },
        _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
      var prevRatio = tween.ratio,
          ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
          // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
          tTime = 0,
          pt,
          iteration,
          prevIteration;

      if (repeatDelay && tween._repeat) {
        // in case there's a zero-duration tween that has a repeat with a repeatDelay
        tTime = _clamp(0, tween._tDur, totalTime);
        iteration = _animationCycle(tTime, repeatDelay);
        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
          // if iteration changed
          prevRatio = 1 - ratio;
          tween.vars.repeatRefresh && tween._initted && tween.invalidate();
        }
      }

      if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
          // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
          return;
        }

        prevIteration = tween._zTime;
        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

        tween.ratio = ratio;
        tween._from && (ratio = 1 - ratio);
        tween._time = 0;
        tween._tTime = tTime;
        pt = tween._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
        tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
        tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
          ratio && _removeFromParent(tween, 1);

          if (!suppressEvents) {
            _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

            tween._prom && tween._prom();
          }
        }
      } else if (!tween._zTime) {
        tween._zTime = totalTime;
      }
    },
        _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
      var child;

      if (time > prevTime) {
        child = animation._first;

        while (child && child._start <= time) {
          if (child.data === "isPause" && child._start > prevTime) {
            return child;
          }

          child = child._next;
        }
      } else {
        child = animation._last;

        while (child && child._start >= time) {
          if (child.data === "isPause" && child._start < prevTime) {
            return child;
          }

          child = child._prev;
        }
      }
    },
        _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
      var repeat = animation._repeat,
          dur = _roundPrecise(duration) || 0,
          totalProgress = animation._tTime / animation._tDur;
      totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
      animation._dur = dur;
      animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
      totalProgress > 0 && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);
      skipUncache || _uncache(animation.parent, animation);
      return animation;
    },
        _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
      return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
    },
        _zeroPosition = {
      _start: 0,
      endTime: _emptyFunc,
      totalDuration: _emptyFunc
    },
        _parsePosition = function _parsePosition(animation, position, percentAnimation) {
      var labels = animation.labels,
          recent = animation._recent || _zeroPosition,
          clippedDuration = animation.duration() >= _bigNum$1 ? recent.endTime(false) : animation._dur,
          //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
          offset,
          isPercent;

      if (_isString(position) && (isNaN(position) || position in labels)) {
        //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
        offset = position.charAt(0);
        isPercent = position.substr(-1) === "%";
        i = position.indexOf("=");

        if (offset === "<" || offset === ">") {
          i >= 0 && (position = position.replace(/=/, ""));
          return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
        }

        if (i < 0) {
          position in labels || (labels[position] = clippedDuration);
          return labels[position];
        }

        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

        if (isPercent && percentAnimation) {
          offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
        }

        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
      }

      return position == null ? clippedDuration : +position;
    },
        _createTweenType = function _createTweenType(type, params, timeline) {
      var isLegacy = _isNumber(params[1]),
          varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
          vars = params[varsIndex],
          irVars,
          parent;

      isLegacy && (vars.duration = params[1]);
      vars.parent = timeline;

      if (type) {
        irVars = vars;
        parent = timeline;

        while (parent && !("immediateRender" in irVars)) {
          // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
          irVars = parent.vars.defaults || {};
          parent = _isNotFalse(parent.vars.inherit) && parent.parent;
        }

        vars.immediateRender = _isNotFalse(irVars.immediateRender);
        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
      }

      return new Tween(params[0], vars, params[varsIndex + 1]);
    },
        _conditionalReturn = function _conditionalReturn(value, func) {
      return value || value === 0 ? func(value) : func;
    },
        _clamp = function _clamp(min, max, value) {
      return value < min ? min : value > max ? max : value;
    },
        getUnit = function getUnit(value, v) {
      return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : value.substr(v.index + v[0].length);
    },
        // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
    clamp = function clamp(min, max, value) {
      return _conditionalReturn(value, function (v) {
        return _clamp(min, max, v);
      });
    },
        _slice = [].slice,
        _isArrayLike = function _isArrayLike(value, nonEmpty) {
      return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win$1;
    },
        _flatten = function _flatten(ar, leaveStrings, accumulator) {
      if (accumulator === void 0) {
        accumulator = [];
      }

      return ar.forEach(function (value) {
        var _accumulator;

        return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
      }) || accumulator;
    },
        //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
    toArray = function toArray(value, scope, leaveStrings) {
      return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc$1).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
    },
        selector = function selector(value) {
      value = toArray(value)[0] || _warn("Invalid scope") || {};
      return function (v) {
        var el = value.current || value.nativeElement || value;
        return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc$1.createElement("div") : value);
      };
    },
        shuffle = function shuffle(a) {
      return a.sort(function () {
        return .5 - Math.random();
      });
    },
        // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
    //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
    distribute = function distribute(v) {
      if (_isFunction(v)) {
        return v;
      }

      var vars = _isObject(v) ? v : {
        each: v
      },
          //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
          from = vars.from || 0,
          base = parseFloat(vars.base) || 0,
          cache = {},
          isDecimal = from > 0 && from < 1,
          ratios = isNaN(from) || isDecimal,
          axis = vars.axis,
          ratioX = from,
          ratioY = from;

      if (_isString(from)) {
        ratioX = ratioY = {
          center: .5,
          edges: .5,
          end: 1
        }[from] || 0;
      } else if (!isDecimal && ratios) {
        ratioX = from[0];
        ratioY = from[1];
      }

      return function (i, target, a) {
        var l = (a || vars).length,
            distances = cache[l],
            originX,
            originY,
            x,
            y,
            d,
            j,
            max,
            min,
            wrapAt;

        if (!distances) {
          wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];

          if (!wrapAt) {
            max = -_bigNum$1;

            while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

            wrapAt--;
          }

          distances = cache[l] = [];
          originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
          originY = wrapAt === _bigNum$1 ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
          max = 0;
          min = _bigNum$1;

          for (j = 0; j < l; j++) {
            x = j % wrapAt - originX;
            y = originY - (j / wrapAt | 0);
            distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
            d > max && (max = d);
            d < min && (min = d);
          }

          from === "random" && shuffle(distances);
          distances.max = max - min;
          distances.min = min;
          distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
          distances.b = l < 0 ? base - l : base;
          distances.u = getUnit(vars.amount || vars.each) || 0; //unit

          ease = ease && l < 0 ? _invertEase(ease) : ease;
        }

        l = (distances[i] - distances.min) / distances.max || 0;
        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
      };
    },
        _roundModifier = function _roundModifier(v) {
      //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
      var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

      return function (raw) {
        var n = Math.round(parseFloat(raw) / v) * v * p;
        return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
      };
    },
        snap = function snap(snapTo, value) {
      var isArray = _isArray(snapTo),
          radius,
          is2D;

      if (!isArray && _isObject(snapTo)) {
        radius = isArray = snapTo.radius || _bigNum$1;

        if (snapTo.values) {
          snapTo = toArray(snapTo.values);

          if (is2D = !_isNumber(snapTo[0])) {
            radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
          }
        } else {
          snapTo = _roundModifier(snapTo.increment);
        }
      }

      return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
        is2D = snapTo(raw);
        return Math.abs(is2D - raw) <= radius ? is2D : raw;
      } : function (raw) {
        var x = parseFloat(is2D ? raw.x : raw),
            y = parseFloat(is2D ? raw.y : 0),
            min = _bigNum$1,
            closest = 0,
            i = snapTo.length,
            dx,
            dy;

        while (i--) {
          if (is2D) {
            dx = snapTo[i].x - x;
            dy = snapTo[i].y - y;
            dx = dx * dx + dy * dy;
          } else {
            dx = Math.abs(snapTo[i] - x);
          }

          if (dx < min) {
            min = dx;
            closest = i;
          }
        }

        closest = !radius || min <= radius ? snapTo[closest] : raw;
        return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
      });
    },
        random = function random(min, max, roundingIncrement, returnFunction) {
      return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
        return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
      });
    },
        pipe = function pipe() {
      for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
        functions[_key] = arguments[_key];
      }

      return function (value) {
        return functions.reduce(function (v, f) {
          return f(v);
        }, value);
      };
    },
        unitize = function unitize(func, unit) {
      return function (value) {
        return func(parseFloat(value)) + (unit || getUnit(value));
      };
    },
        normalize = function normalize(min, max, value) {
      return mapRange(min, max, 0, 1, value);
    },
        _wrapArray = function _wrapArray(a, wrapper, value) {
      return _conditionalReturn(value, function (index) {
        return a[~~wrapper(index)];
      });
    },
        wrap = function wrap(min, max, value) {
      // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
      var range = max - min;
      return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
        return (range + (value - min) % range) % range + min;
      });
    },
        wrapYoyo = function wrapYoyo(min, max, value) {
      var range = max - min,
          total = range * 2;
      return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
        value = (total + (value - min) % total) % total || 0;
        return min + (value > range ? total - value : value);
      });
    },
        _replaceRandom = function _replaceRandom(value) {
      //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
      var prev = 0,
          s = "",
          i,
          nums,
          end,
          isArray;

      while (~(i = value.indexOf("random(", prev))) {
        end = value.indexOf(")", i);
        isArray = value.charAt(i + 7) === "[";
        nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
        s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
        prev = end + 1;
      }

      return s + value.substr(prev, value.length - prev);
    },
        mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
      var inRange = inMax - inMin,
          outRange = outMax - outMin;
      return _conditionalReturn(value, function (value) {
        return outMin + ((value - inMin) / inRange * outRange || 0);
      });
    },
        interpolate = function interpolate(start, end, progress, mutate) {
      var func = isNaN(start + end) ? 0 : function (p) {
        return (1 - p) * start + p * end;
      };

      if (!func) {
        var isString = _isString(start),
            master = {},
            p,
            i,
            interpolators,
            l,
            il;

        progress === true && (mutate = 1) && (progress = null);

        if (isString) {
          start = {
            p: start
          };
          end = {
            p: end
          };
        } else if (_isArray(start) && !_isArray(end)) {
          interpolators = [];
          l = start.length;
          il = l - 2;

          for (i = 1; i < l; i++) {
            interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
          }

          l--;

          func = function func(p) {
            p *= l;
            var i = Math.min(il, ~~p);
            return interpolators[i](p - i);
          };

          progress = end;
        } else if (!mutate) {
          start = _merge(_isArray(start) ? [] : {}, start);
        }

        if (!interpolators) {
          for (p in end) {
            _addPropTween.call(master, start, p, "get", end[p]);
          }

          func = function func(p) {
            return _renderPropTweens(p, master) || (isString ? start.p : start);
          };
        }
      }

      return _conditionalReturn(progress, func);
    },
        _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
      //used for nextLabel() and previousLabel()
      var labels = timeline.labels,
          min = _bigNum$1,
          p,
          distance,
          label;

      for (p in labels) {
        distance = labels[p] - fromTime;

        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
          label = p;
          min = distance;
        }
      }

      return label;
    },
        _callback = function _callback(animation, type, executeLazyFirst) {
      var v = animation.vars,
          callback = v[type],
          params,
          scope;

      if (!callback) {
        return;
      }

      params = v[type + "Params"];
      scope = v.callbackScope || animation;
      executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

      return params ? callback.apply(scope, params) : callback.call(scope);
    },
        _interrupt = function _interrupt(animation) {
      _removeFromParent(animation);

      animation.scrollTrigger && animation.scrollTrigger.kill(false);
      animation.progress() < 1 && _callback(animation, "onInterrupt");
      return animation;
    },
        _quickTween,
        _createPlugin = function _createPlugin(config) {
      config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

      var name = config.name,
          isFunc = _isFunction(config),
          Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
          //in case someone passes in an object that's not a plugin, like CustomEase
      instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
          statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };

      _wake();

      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }

        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


        _plugins[Plugin.prop = name] = Plugin;

        if (config.targetTest) {
          _harnessPlugins.push(Plugin);

          _reservedProps[name] = 1;
        }

        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
      }

      _addGlobal(name, Plugin);

      config.register && config.register(gsap, Plugin, PropTween);
    },

    /*
     * --------------------------------------------------------------------------------------
     * COLORS
     * --------------------------------------------------------------------------------------
     */
    _255 = 255,
        _colorLookup = {
      aqua: [0, _255, _255],
      lime: [0, _255, 0],
      silver: [192, 192, 192],
      black: [0, 0, 0],
      maroon: [128, 0, 0],
      teal: [0, 128, 128],
      blue: [0, 0, _255],
      navy: [0, 0, 128],
      white: [_255, _255, _255],
      olive: [128, 128, 0],
      yellow: [_255, _255, 0],
      orange: [_255, 165, 0],
      gray: [128, 128, 128],
      purple: [128, 0, 128],
      green: [0, 128, 0],
      red: [_255, 0, 0],
      pink: [_255, 192, 203],
      cyan: [0, _255, _255],
      transparent: [_255, _255, _255, 0]
    },
        // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
    // let ctx = _doc.createElement("canvas").getContext("2d");
    // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
    _hue = function _hue(h, m1, m2) {
      h += h < 0 ? 1 : h > 1 ? -1 : 0;
      return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
    },
        splitColor = function splitColor(v, toHSL, forceAlpha) {
      var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
          r,
          g,
          b,
          h,
          s,
          l,
          max,
          min,
          d,
          wasHSL;

      if (!a) {
        if (v.substr(-1) === ",") {
          //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
          v = v.substr(0, v.length - 1);
        }

        if (_colorLookup[v]) {
          a = _colorLookup[v];
        } else if (v.charAt(0) === "#") {
          if (v.length < 6) {
            //for shorthand like #9F0 or #9F0F (could have alpha)
            r = v.charAt(1);
            g = v.charAt(2);
            b = v.charAt(3);
            v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
          }

          if (v.length === 9) {
            // hex with alpha, like #fd5e53ff
            a = parseInt(v.substr(1, 6), 16);
            return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
          }

          v = parseInt(v.substr(1), 16);
          a = [v >> 16, v >> 8 & _255, v & _255];
        } else if (v.substr(0, 3) === "hsl") {
          a = wasHSL = v.match(_strictNumExp);

          if (!toHSL) {
            h = +a[0] % 360 / 360;
            s = +a[1] / 100;
            l = +a[2] / 100;
            g = l <= .5 ? l * (s + 1) : l + s - l * s;
            r = l * 2 - g;
            a.length > 3 && (a[3] *= 1); //cast as number

            a[0] = _hue(h + 1 / 3, r, g);
            a[1] = _hue(h, r, g);
            a[2] = _hue(h - 1 / 3, r, g);
          } else if (~v.indexOf("=")) {
            //if relative values are found, just return the raw strings with the relative prefixes in place.
            a = v.match(_numExp);
            forceAlpha && a.length < 4 && (a[3] = 1);
            return a;
          }
        } else {
          a = v.match(_strictNumExp) || _colorLookup.transparent;
        }

        a = a.map(Number);
      }

      if (toHSL && !wasHSL) {
        r = a[0] / _255;
        g = a[1] / _255;
        b = a[2] / _255;
        max = Math.max(r, g, b);
        min = Math.min(r, g, b);
        l = (max + min) / 2;

        if (max === min) {
          h = s = 0;
        } else {
          d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
          h *= 60;
        }

        a[0] = ~~(h + .5);
        a[1] = ~~(s * 100 + .5);
        a[2] = ~~(l * 100 + .5);
      }

      forceAlpha && a.length < 4 && (a[3] = 1);
      return a;
    },
        _colorOrderData = function _colorOrderData(v) {
      // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
      var values = [],
          c = [],
          i = -1;
      v.split(_colorExp).forEach(function (v) {
        var a = v.match(_numWithUnitExp) || [];
        values.push.apply(values, a);
        c.push(i += a.length + 1);
      });
      values.c = c;
      return values;
    },
        _formatColors = function _formatColors(s, toHSL, orderMatchData) {
      var result = "",
          colors = (s + result).match(_colorExp),
          type = toHSL ? "hsla(" : "rgba(",
          i = 0,
          c,
          shell,
          d,
          l;

      if (!colors) {
        return s;
      }

      colors = colors.map(function (color) {
        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
      });

      if (orderMatchData) {
        d = _colorOrderData(s);
        c = orderMatchData.c;

        if (c.join(result) !== d.c.join(result)) {
          shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
          l = shell.length - 1;

          for (; i < l; i++) {
            result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
          }
        }
      }

      if (!shell) {
        shell = s.split(_colorExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + colors[i];
        }
      }

      return result + shell[l];
    },
        _colorExp = function () {
      var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
          //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;

      for (p in _colorLookup) {
        s += "|" + p + "\\b";
      }

      return new RegExp(s + ")", "gi");
    }(),
        _hslExp = /hsl[a]?\(/,
        _colorStringFilter = function _colorStringFilter(a) {
      var combined = a.join(" "),
          toHSL;
      _colorExp.lastIndex = 0;

      if (_colorExp.test(combined)) {
        toHSL = _hslExp.test(combined);
        a[1] = _formatColors(a[1], toHSL);
        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

        return true;
      }
    },

    /*
     * --------------------------------------------------------------------------------------
     * TICKER
     * --------------------------------------------------------------------------------------
     */
    _tickerActive,
        _ticker = function () {
      var _getTime = Date.now,
          _lagThreshold = 500,
          _adjustedLag = 33,
          _startTime = _getTime(),
          _lastUpdate = _startTime,
          _gap = 1000 / 240,
          _nextTime = _gap,
          _listeners = [],
          _id,
          _req,
          _raf,
          _self,
          _delta,
          _i,
          _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
            manual = v === true,
            overlap,
            dispatch,
            time,
            frame;

        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;

        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }

        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };

      _self = {
        time: 0,
        frame: 0,
        tick: function tick() {
          _tick(true);
        },
        deltaRatio: function deltaRatio(fps) {
          return _delta / (1000 / (fps || 60));
        },
        wake: function wake() {
          if (_coreReady) {
            if (!_coreInitted && _windowExists$1()) {
              _win$1 = _coreInitted = window;
              _doc$1 = _win$1.document || {};
              _globals.gsap = gsap;
              (_win$1.gsapVersions || (_win$1.gsapVersions = [])).push(gsap.version);

              _install(_installScope || _win$1.GreenSockGlobals || !_win$1.gsap && _win$1 || {});

              _raf = _win$1.requestAnimationFrame;
            }

            _id && _self.sleep();

            _req = _raf || function (f) {
              return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
            };

            _tickerActive = 1;

            _tick(2);
          }
        },
        sleep: function sleep() {
          (_raf ? _win$1.cancelAnimationFrame : clearTimeout)(_id);
          _tickerActive = 0;
          _req = _emptyFunc;
        },
        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
          _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

          _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
        },
        fps: function fps(_fps) {
          _gap = 1000 / (_fps || 240);
          _nextTime = _self.time * 1000 + _gap;
        },
        add: function add(callback) {
          _listeners.indexOf(callback) < 0 && _listeners.push(callback);

          _wake();
        },
        remove: function remove(callback, i) {
          ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
        },
        _listeners: _listeners
      };
      return _self;
    }(),
        _wake = function _wake() {
      return !_tickerActive && _ticker.wake();
    },
        //also ensures the core classes are initialized.

    /*
    * -------------------------------------------------
    * EASING
    * -------------------------------------------------
    */
    _easeMap = {},
        _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
        _quotesExp = /["']/g,
        _parseObjectInString = function _parseObjectInString(value) {
      //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
      var obj = {},
          split = value.substr(1, value.length - 3).split(":"),
          key = split[0],
          i = 1,
          l = split.length,
          index,
          val,
          parsedVal;

      for (; i < l; i++) {
        val = split[i];
        index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
        parsedVal = val.substr(0, index);
        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
        key = val.substr(index + 1).trim();
      }

      return obj;
    },
        _valueInParentheses = function _valueInParentheses(value) {
      var open = value.indexOf("(") + 1,
          close = value.indexOf(")"),
          nested = value.indexOf("(", open);
      return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
    },
        _configEaseFromString = function _configEaseFromString(name) {
      //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
      var split = (name + "").split("("),
          ease = _easeMap[split[0]];
      return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
    },
        _invertEase = function _invertEase(ease) {
      return function (p) {
        return 1 - ease(1 - p);
      };
    },
        // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
    _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
      var child = timeline._first,
          ease;

      while (child) {
        if (child instanceof Timeline) {
          _propagateYoyoEase(child, isYoyo);
        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
          if (child.timeline) {
            _propagateYoyoEase(child.timeline, isYoyo);
          } else {
            ease = child._ease;
            child._ease = child._yEase;
            child._yEase = ease;
            child._yoyo = isYoyo;
          }
        }

        child = child._next;
      }
    },
        _parseEase = function _parseEase(ease, defaultEase) {
      return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
    },
        _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
      if (easeOut === void 0) {
        easeOut = function easeOut(p) {
          return 1 - easeIn(1 - p);
        };
      }

      if (easeInOut === void 0) {
        easeInOut = function easeInOut(p) {
          return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
        };
      }

      var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
          lowercaseName;

      _forEachName(names, function (name) {
        _easeMap[name] = _globals[name] = ease;
        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

        for (var p in ease) {
          _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
        }
      });

      return ease;
    },
        _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
      return function (p) {
        return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
      };
    },
        _configElastic = function _configElastic(type, amplitude, period) {
      var p1 = amplitude >= 1 ? amplitude : 1,
          //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
          p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
          easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
          ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);

      p2 = _2PI / p2; //precalculate to optimize

      ease.config = function (amplitude, period) {
        return _configElastic(type, amplitude, period);
      };

      return ease;
    },
        _configBack = function _configBack(type, overshoot) {
      if (overshoot === void 0) {
        overshoot = 1.70158;
      }

      var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
          ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);

      ease.config = function (overshoot) {
        return _configBack(type, overshoot);
      };

      return ease;
    }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
    // _weightedEase = ratio => {
    // 	let y = 0.5 + ratio / 2;
    // 	return p => (2 * (1 - p) * p * y + p * p);
    // },
    // a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
    // _weightedEaseStrong = ratio => {
    // 	ratio = .5 + ratio / 2;
    // 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
    // 		b = ratio - o,
    // 		c = ratio + o;
    // 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
    // };


    _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
      var power = i < 5 ? i + 1 : i;

      _insertEase(name + ",Power" + (power - 1), i ? function (p) {
        return Math.pow(p, power);
      } : function (p) {
        return p;
      }, function (p) {
        return 1 - Math.pow(1 - p, power);
      }, function (p) {
        return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
      });
    });

    _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

    _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

    (function (n, c) {
      var n1 = 1 / c,
          n2 = 2 * n1,
          n3 = 2.5 * n1,
          easeOut = function easeOut(p) {
        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
      };

      _insertEase("Bounce", function (p) {
        return 1 - easeOut(1 - p);
      }, easeOut);
    })(7.5625, 2.75);

    _insertEase("Expo", function (p) {
      return p ? Math.pow(2, 10 * (p - 1)) : 0;
    });

    _insertEase("Circ", function (p) {
      return -(_sqrt(1 - p * p) - 1);
    });

    _insertEase("Sine", function (p) {
      return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
    });

    _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

    _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
      config: function config(steps, immediateStart) {
        if (steps === void 0) {
          steps = 1;
        }

        var p1 = 1 / steps,
            p2 = steps + (immediateStart ? 0 : 1),
            p3 = immediateStart ? 1 : 0,
            max = 1 - _tinyNum;
        return function (p) {
          return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
        };
      }
    };
    _defaults.ease = _easeMap["quad.out"];

    _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
      return _callbackNames += name + "," + name + "Params,";
    });
    /*
     * --------------------------------------------------------------------------------------
     * CACHE
     * --------------------------------------------------------------------------------------
     */


    var GSCache = function GSCache(target, harness) {
      this.id = _gsID++;
      target._gsap = this;
      this.target = target;
      this.harness = harness;
      this.get = harness ? harness.get : _getProperty;
      this.set = harness ? harness.getSetter : _getSetter;
    };
    /*
     * --------------------------------------------------------------------------------------
     * ANIMATION
     * --------------------------------------------------------------------------------------
     */

    var Animation = /*#__PURE__*/function () {
      function Animation(vars) {
        this.vars = vars;
        this._delay = +vars.delay || 0;

        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
          // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
          this._rDelay = vars.repeatDelay || 0;
          this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
        }

        this._ts = 1;

        _setDuration(this, +vars.duration, 1, 1);

        this.data = vars.data;
        _tickerActive || _ticker.wake();
      }

      var _proto = Animation.prototype;

      _proto.delay = function delay(value) {
        if (value || value === 0) {
          this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
          this._delay = value;
          return this;
        }

        return this._delay;
      };

      _proto.duration = function duration(value) {
        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
      };

      _proto.totalDuration = function totalDuration(value) {
        if (!arguments.length) {
          return this._tDur;
        }

        this._dirty = 0;
        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
      };

      _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
        _wake();

        if (!arguments.length) {
          return this._tTime;
        }

        var parent = this._dp;

        if (parent && parent.smoothChildTiming && this._ts) {
          _alignPlayhead(this, _totalTime);

          !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
          //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

          while (parent && parent.parent) {
            if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
              parent.totalTime(parent._tTime, true);
            }

            parent = parent.parent;
          }

          if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
            //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
            _addToTimeline(this._dp, this, this._start - this._delay);
          }
        }

        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
          // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
          this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
          //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
          //   this._lock = 1;

          _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
          //}

        }

        return this;
      };

      _proto.time = function time(value, suppressEvents) {
        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
      };

      _proto.totalProgress = function totalProgress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
      };

      _proto.progress = function progress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
      };

      _proto.iteration = function iteration(value, suppressEvents) {
        var cycleDuration = this.duration() + this._rDelay;

        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
      } // potential future addition:
      // isPlayingBackwards() {
      // 	let animation = this,
      // 		orientation = 1; // 1 = forward, -1 = backward
      // 	while (animation) {
      // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
      // 		animation = animation.parent;
      // 	}
      // 	return orientation < 0;
      // }
      ;

      _proto.timeScale = function timeScale(value) {
        if (!arguments.length) {
          return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
        }

        if (this._rts === value) {
          return this;
        }

        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
        //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

        this._rts = +value || 0;
        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

        _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));

        _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.


        return this;
      };

      _proto.paused = function paused(value) {
        if (!arguments.length) {
          return this._ps;
        }

        if (this._ps !== value) {
          this._ps = value;

          if (value) {
            this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

            this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
          } else {
            _wake();

            this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

            this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
          }
        }

        return this;
      };

      _proto.startTime = function startTime(value) {
        if (arguments.length) {
          this._start = value;
          var parent = this.parent || this._dp;
          parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
          return this;
        }

        return this._start;
      };

      _proto.endTime = function endTime(includeRepeats) {
        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
      };

      _proto.rawTime = function rawTime(wrapRepeats) {
        var parent = this.parent || this._dp; // _dp = detached parent

        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
      };

      _proto.globalTime = function globalTime(rawTime) {
        var animation = this,
            time = arguments.length ? rawTime : animation.rawTime();

        while (animation) {
          time = animation._start + time / (animation._ts || 1);
          animation = animation._dp;
        }

        return time;
      };

      _proto.repeat = function repeat(value) {
        if (arguments.length) {
          this._repeat = value === Infinity ? -2 : value;
          return _onUpdateTotalDuration(this);
        }

        return this._repeat === -2 ? Infinity : this._repeat;
      };

      _proto.repeatDelay = function repeatDelay(value) {
        if (arguments.length) {
          var time = this._time;
          this._rDelay = value;

          _onUpdateTotalDuration(this);

          return time ? this.time(time) : this;
        }

        return this._rDelay;
      };

      _proto.yoyo = function yoyo(value) {
        if (arguments.length) {
          this._yoyo = value;
          return this;
        }

        return this._yoyo;
      };

      _proto.seek = function seek(position, suppressEvents) {
        return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
      };

      _proto.restart = function restart(includeDelay, suppressEvents) {
        return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
      };

      _proto.play = function play(from, suppressEvents) {
        from != null && this.seek(from, suppressEvents);
        return this.reversed(false).paused(false);
      };

      _proto.reverse = function reverse(from, suppressEvents) {
        from != null && this.seek(from || this.totalDuration(), suppressEvents);
        return this.reversed(true).paused(false);
      };

      _proto.pause = function pause(atTime, suppressEvents) {
        atTime != null && this.seek(atTime, suppressEvents);
        return this.paused(true);
      };

      _proto.resume = function resume() {
        return this.paused(false);
      };

      _proto.reversed = function reversed(value) {
        if (arguments.length) {
          !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

          return this;
        }

        return this._rts < 0;
      };

      _proto.invalidate = function invalidate() {
        this._initted = this._act = 0;
        this._zTime = -_tinyNum;
        return this;
      };

      _proto.isActive = function isActive() {
        var parent = this.parent || this._dp,
            start = this._start,
            rawTime;
        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
      };

      _proto.eventCallback = function eventCallback(type, callback, params) {
        var vars = this.vars;

        if (arguments.length > 1) {
          if (!callback) {
            delete vars[type];
          } else {
            vars[type] = callback;
            params && (vars[type + "Params"] = params);
            type === "onUpdate" && (this._onUpdate = callback);
          }

          return this;
        }

        return vars[type];
      };

      _proto.then = function then(onFulfilled) {
        var self = this;
        return new Promise(function (resolve) {
          var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
              _resolve = function _resolve() {
            var _then = self.then;
            self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

            _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
            resolve(f);
            self.then = _then;
          };

          if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
            _resolve();
          } else {
            self._prom = _resolve;
          }
        });
      };

      _proto.kill = function kill() {
        _interrupt(this);
      };

      return Animation;
    }();

    _setDefaults(Animation.prototype, {
      _time: 0,
      _start: 0,
      _end: 0,
      _tTime: 0,
      _tDur: 0,
      _dirty: 0,
      _repeat: 0,
      _yoyo: false,
      parent: null,
      _initted: false,
      _rDelay: 0,
      _ts: 1,
      _dp: 0,
      ratio: 0,
      _zTime: -_tinyNum,
      _prom: 0,
      _ps: false,
      _rts: 1
    });
    /*
     * -------------------------------------------------
     * TIMELINE
     * -------------------------------------------------
     */


    var Timeline = /*#__PURE__*/function (_Animation) {
      _inheritsLoose(Timeline, _Animation);

      function Timeline(vars, position) {
        var _this;

        if (vars === void 0) {
          vars = {};
        }

        _this = _Animation.call(this, vars) || this;
        _this.labels = {};
        _this.smoothChildTiming = !!vars.smoothChildTiming;
        _this.autoRemoveChildren = !!vars.autoRemoveChildren;
        _this._sort = _isNotFalse(vars.sortChildren);
        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
        vars.reversed && _this.reverse();
        vars.paused && _this.paused(true);
        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
        return _this;
      }

      var _proto2 = Timeline.prototype;

      _proto2.to = function to(targets, vars, position) {
        _createTweenType(0, arguments, this);

        return this;
      };

      _proto2.from = function from(targets, vars, position) {
        _createTweenType(1, arguments, this);

        return this;
      };

      _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
        _createTweenType(2, arguments, this);

        return this;
      };

      _proto2.set = function set(targets, vars, position) {
        vars.duration = 0;
        vars.parent = this;
        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
        vars.immediateRender = !!vars.immediateRender;
        new Tween(targets, vars, _parsePosition(this, position), 1);
        return this;
      };

      _proto2.call = function call(callback, params, position) {
        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
      } //ONLY for backward compatibility! Maybe delete?
      ;

      _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.duration = duration;
        vars.stagger = vars.stagger || stagger;
        vars.onComplete = onCompleteAll;
        vars.onCompleteParams = onCompleteAllParams;
        vars.parent = this;
        new Tween(targets, vars, _parsePosition(this, position));
        return this;
      };

      _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.runBackwards = 1;
        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
      };

      _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
        toVars.startAt = fromVars;
        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
      };

      _proto2.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time,
            tDur = this._dirty ? this.totalDuration() : this._tDur,
            dur = this._dur,
            tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
            // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
            time,
            child,
            next,
            iteration,
            cycleDuration,
            prevPaused,
            pauseTween,
            timeScale,
            prevStart,
            prevIteration,
            yoyo,
            isYoyo;
        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

        if (tTime !== this._tTime || force || crossingStart) {
          if (prevTime !== this._time && dur) {
            //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
            tTime += this._time - prevTime;
            totalTime += this._time - prevTime;
          }

          time = tTime;
          prevStart = this._start;
          timeScale = this._ts;
          prevPaused = !timeScale;

          if (crossingStart) {
            dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

            (totalTime || !suppressEvents) && (this._zTime = totalTime);
          }

          if (this._repeat) {
            //adjust the time for repeats and yoyos
            yoyo = this._yoyo;
            cycleDuration = dur + this._rDelay;

            if (this._repeat < -1 && totalTime < 0) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }

            time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

            if (tTime === tDur) {
              // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
              iteration = this._repeat;
              time = dur;
            } else {
              iteration = ~~(tTime / cycleDuration);

              if (iteration && iteration === tTime / cycleDuration) {
                time = dur;
                iteration--;
              }

              time > dur && (time = dur);
            }

            prevIteration = _animationCycle(this._tTime, cycleDuration);
            !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

            if (yoyo && iteration & 1) {
              time = dur - time;
              isYoyo = 1;
            }
            /*
            make sure children at the end/beginning of the timeline are rendered properly. If, for example,
            a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
            would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
            could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
            we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
            ensure that zero-duration tweens at the very beginning or end of the Timeline work.
            */


            if (iteration !== prevIteration && !this._lock) {
              var rewinding = yoyo && prevIteration & 1,
                  doesWrap = rewinding === (yoyo && iteration & 1);
              iteration < prevIteration && (rewinding = !rewinding);
              prevTime = rewinding ? 0 : dur;
              this._lock = 1;
              this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
              this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

              !suppressEvents && this.parent && _callback(this, "onRepeat");
              this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

              if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
                // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
                return this;
              }

              dur = this._dur; // in case the duration changed in the onRepeat

              tDur = this._tDur;

              if (doesWrap) {
                this._lock = 2;
                prevTime = rewinding ? dur : -0.0001;
                this.render(prevTime, true);
                this.vars.repeatRefresh && !isYoyo && this.invalidate();
              }

              this._lock = 0;

              if (!this._ts && !prevPaused) {
                return this;
              } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


              _propagateYoyoEase(this, isYoyo);
            }
          }

          if (this._hasPause && !this._forcing && this._lock < 2) {
            pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

            if (pauseTween) {
              tTime -= time - (time = pauseTween._start);
            }
          }

          this._tTime = tTime;
          this._time = time;
          this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

          if (!this._initted) {
            this._onUpdate = this.vars.onUpdate;
            this._initted = 1;
            this._zTime = totalTime;
            prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
          }

          if (!prevTime && time && !suppressEvents) {
            _callback(this, "onStart");

            if (this._tTime !== tTime) {
              // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
              return this;
            }
          }

          if (time >= prevTime && totalTime >= 0) {
            child = this._first;

            while (child) {
              next = child._next;

              if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                  return this.render(totalTime, suppressEvents, force);
                }

                child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

                if (time !== this._time || !this._ts && !prevPaused) {
                  //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                  pauseTween = 0;
                  next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

                  break;
                }
              }

              child = next;
            }
          } else {
            child = this._last;
            var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

            while (child) {
              next = child._prev;

              if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                  return this.render(totalTime, suppressEvents, force);
                }

                child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

                if (time !== this._time || !this._ts && !prevPaused) {
                  //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                  pauseTween = 0;
                  next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

                  break;
                }
              }

              child = next;
            }
          }

          if (pauseTween && !suppressEvents) {
            this.pause();
            pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

            if (this._ts) {
              //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
              this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

              _setEnd(this);

              return this.render(totalTime, suppressEvents, force);
            }
          }

          this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
          if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
            (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

            if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
              _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

              this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
            }
          }
        }

        return this;
      };

      _proto2.add = function add(child, position) {
        var _this2 = this;

        _isNumber(position) || (position = _parsePosition(this, position, child));

        if (!(child instanceof Animation)) {
          if (_isArray(child)) {
            child.forEach(function (obj) {
              return _this2.add(obj, position);
            });
            return this;
          }

          if (_isString(child)) {
            return this.addLabel(child, position);
          }

          if (_isFunction(child)) {
            child = Tween.delayedCall(0, child);
          } else {
            return this;
          }
        }

        return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
      };

      _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
        if (nested === void 0) {
          nested = true;
        }

        if (tweens === void 0) {
          tweens = true;
        }

        if (timelines === void 0) {
          timelines = true;
        }

        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = -_bigNum$1;
        }

        var a = [],
            child = this._first;

        while (child) {
          if (child._start >= ignoreBeforeTime) {
            if (child instanceof Tween) {
              tweens && a.push(child);
            } else {
              timelines && a.push(child);
              nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
            }
          }

          child = child._next;
        }

        return a;
      };

      _proto2.getById = function getById(id) {
        var animations = this.getChildren(1, 1, 1),
            i = animations.length;

        while (i--) {
          if (animations[i].vars.id === id) {
            return animations[i];
          }
        }
      };

      _proto2.remove = function remove(child) {
        if (_isString(child)) {
          return this.removeLabel(child);
        }

        if (_isFunction(child)) {
          return this.killTweensOf(child);
        }

        _removeLinkedListItem(this, child);

        if (child === this._recent) {
          this._recent = this._last;
        }

        return _uncache(this);
      };

      _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
        if (!arguments.length) {
          return this._tTime;
        }

        this._forcing = 1;

        if (!this._dp && this._ts) {
          //special case for the global timeline (or any other that has no parent or detached parent).
          this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
        }

        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

        this._forcing = 0;
        return this;
      };

      _proto2.addLabel = function addLabel(label, position) {
        this.labels[label] = _parsePosition(this, position);
        return this;
      };

      _proto2.removeLabel = function removeLabel(label) {
        delete this.labels[label];
        return this;
      };

      _proto2.addPause = function addPause(position, callback, params) {
        var t = Tween.delayedCall(0, callback || _emptyFunc, params);
        t.data = "isPause";
        this._hasPause = 1;
        return _addToTimeline(this, t, _parsePosition(this, position));
      };

      _proto2.removePause = function removePause(position) {
        var child = this._first;
        position = _parsePosition(this, position);

        while (child) {
          if (child._start === position && child.data === "isPause") {
            _removeFromParent(child);
          }

          child = child._next;
        }
      };

      _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        var tweens = this.getTweensOf(targets, onlyActive),
            i = tweens.length;

        while (i--) {
          _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
        }

        return this;
      };

      _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
        var a = [],
            parsedTargets = toArray(targets),
            child = this._first,
            isGlobalTime = _isNumber(onlyActive),
            // a number is interpreted as a global time. If the animation spans
        children;

        while (child) {
          if (child instanceof Tween) {
            if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
              // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
              a.push(child);
            }
          } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
            a.push.apply(a, children);
          }

          child = child._next;
        }

        return a;
      } // potential future feature - targets() on timelines
      // targets() {
      // 	let result = [];
      // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
      // 	return result.filter((v, i) => result.indexOf(v) === i);
      // }
      ;

      _proto2.tweenTo = function tweenTo(position, vars) {
        vars = vars || {};

        var tl = this,
            endTime = _parsePosition(tl, position),
            _vars = vars,
            startAt = _vars.startAt,
            _onStart = _vars.onStart,
            onStartParams = _vars.onStartParams,
            immediateRender = _vars.immediateRender,
            initted,
            tween = Tween.to(tl, _setDefaults({
          ease: vars.ease || "none",
          lazy: false,
          immediateRender: false,
          time: endTime,
          overwrite: "auto",
          duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
          onStart: function onStart() {
            tl.pause();

            if (!initted) {
              var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
              tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
              initted = 1;
            }

            _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
          }
        }, vars));

        return immediateRender ? tween.render(0) : tween;
      };

      _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
        return this.tweenTo(toPosition, _setDefaults({
          startAt: {
            time: _parsePosition(this, fromPosition)
          }
        }, vars));
      };

      _proto2.recent = function recent() {
        return this._recent;
      };

      _proto2.nextLabel = function nextLabel(afterTime) {
        if (afterTime === void 0) {
          afterTime = this._time;
        }

        return _getLabelInDirection(this, _parsePosition(this, afterTime));
      };

      _proto2.previousLabel = function previousLabel(beforeTime) {
        if (beforeTime === void 0) {
          beforeTime = this._time;
        }

        return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
      };

      _proto2.currentLabel = function currentLabel(value) {
        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
      };

      _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = 0;
        }

        var child = this._first,
            labels = this.labels,
            p;

        while (child) {
          if (child._start >= ignoreBeforeTime) {
            child._start += amount;
            child._end += amount;
          }

          child = child._next;
        }

        if (adjustLabels) {
          for (p in labels) {
            if (labels[p] >= ignoreBeforeTime) {
              labels[p] += amount;
            }
          }
        }

        return _uncache(this);
      };

      _proto2.invalidate = function invalidate() {
        var child = this._first;
        this._lock = 0;

        while (child) {
          child.invalidate();
          child = child._next;
        }

        return _Animation.prototype.invalidate.call(this);
      };

      _proto2.clear = function clear(includeLabels) {
        if (includeLabels === void 0) {
          includeLabels = true;
        }

        var child = this._first,
            next;

        while (child) {
          next = child._next;
          this.remove(child);
          child = next;
        }

        this._dp && (this._time = this._tTime = this._pTime = 0);
        includeLabels && (this.labels = {});
        return _uncache(this);
      };

      _proto2.totalDuration = function totalDuration(value) {
        var max = 0,
            self = this,
            child = self._last,
            prevStart = _bigNum$1,
            prev,
            start,
            parent;

        if (arguments.length) {
          return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
        }

        if (self._dirty) {
          parent = self.parent;

          while (child) {
            prev = child._prev; //record it here in case the tween changes position in the sequence...

            child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

            start = child._start;

            if (start > prevStart && self._sort && child._ts && !self._lock) {
              //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
              self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

              _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
            } else {
              prevStart = start;
            }

            if (start < 0 && child._ts) {
              //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
              max -= start;

              if (!parent && !self._dp || parent && parent.smoothChildTiming) {
                self._start += start / self._ts;
                self._time -= start;
                self._tTime -= start;
              }

              self.shiftChildren(-start, false, -1e999);
              prevStart = 0;
            }

            child._end > max && child._ts && (max = child._end);
            child = prev;
          }

          _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

          self._dirty = 0;
        }

        return self._tDur;
      };

      Timeline.updateRoot = function updateRoot(time) {
        if (_globalTimeline._ts) {
          _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

          _lastRenderedFrame = _ticker.frame;
        }

        if (_ticker.frame >= _nextGCFrame) {
          _nextGCFrame += _config.autoSleep || 120;
          var child = _globalTimeline._first;
          if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
            while (child && !child._ts) {
              child = child._next;
            }

            child || _ticker.sleep();
          }
        }
      };

      return Timeline;
    }(Animation);

    _setDefaults(Timeline.prototype, {
      _lock: 0,
      _hasPause: 0,
      _forcing: 0
    });

    var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
      //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
      var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
          index = 0,
          matchIndex = 0,
          result,
          startNums,
          color,
          endNum,
          chunk,
          startNum,
          hasRandom,
          a;
      pt.b = start;
      pt.e = end;
      start += ""; //ensure values are strings

      end += "";

      if (hasRandom = ~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (stringFilter) {
        a = [start, end];
        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

        start = a[0];
        end = a[1];
      }

      startNums = start.match(_complexStringNumExp) || [];

      while (result = _complexStringNumExp.exec(end)) {
        endNum = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(") {
          color = 1;
        }

        if (endNum !== startNums[matchIndex++]) {
          startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
            m: color && color < 4 ? Math.round : 0
          };
          index = _complexStringNumExp.lastIndex;
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

      pt.fp = funcParam;

      if (_relExp.test(end) || hasRandom) {
        pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
      }

      this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

      return pt;
    },
        _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
      _isFunction(end) && (end = end(index || 0, target, targets));
      var currentValue = target[prop],
          parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
          setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
          pt;

      if (_isString(end)) {
        if (~end.indexOf("random(")) {
          end = _replaceRandom(end);
        }

        if (end.charAt(1) === "=") {
          pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);

          if (pt || pt === 0) {
            // to avoid isNaN, like if someone passes in a value like "!= whatever"
            end = pt;
          }
        }
      }

      if (parsedStart !== end) {
        if (!isNaN(parsedStart * end) && end !== "") {
          // fun fact: any number multiplied by "" is evaluated as the number 0!
          pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
          funcParam && (pt.fp = funcParam);
          modifier && pt.modifier(modifier, this, target);
          return this._pt = pt;
        }

        !currentValue && !(prop in target) && _missingPlugin(prop, end);
        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
      }
    },
        //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
    _processVars = function _processVars(vars, index, target, targets, tween) {
      _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

      if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
        return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
      }

      var copy = {},
          p;

      for (p in vars) {
        copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
      }

      return copy;
    },
        _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
      var plugin, pt, ptLookup, i;

      if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

        if (tween !== _quickTween) {
          ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

          i = plugin._props.length;

          while (i--) {
            ptLookup[plugin._props[i]] = pt;
          }
        }
      }

      return plugin;
    },
        _overwritingTween,
        //store a reference temporarily so we can avoid overwriting itself.
    _initTween = function _initTween(tween, time) {
      var vars = tween.vars,
          ease = vars.ease,
          startAt = vars.startAt,
          immediateRender = vars.immediateRender,
          lazy = vars.lazy,
          onUpdate = vars.onUpdate,
          onUpdateParams = vars.onUpdateParams,
          callbackScope = vars.callbackScope,
          runBackwards = vars.runBackwards,
          yoyoEase = vars.yoyoEase,
          keyframes = vars.keyframes,
          autoRevert = vars.autoRevert,
          dur = tween._dur,
          prevStartAt = tween._startAt,
          targets = tween._targets,
          parent = tween.parent,
          fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
          autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
          tl = tween.timeline,
          cleanVars,
          i,
          p,
          pt,
          target,
          hasPriority,
          gsData,
          harness,
          plugin,
          ptLookup,
          index,
          harnessVars,
          overwritten;
      tl && (!keyframes || !ease) && (ease = "none");
      tween._ease = _parseEase(ease, _defaults.ease);
      tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

      if (yoyoEase && tween._yoyo && !tween._repeat) {
        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
        yoyoEase = tween._yEase;
        tween._yEase = tween._ease;
        tween._ease = yoyoEase;
      }

      tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

      if (!tl || keyframes && !vars.stagger) {
        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
        harness = targets[0] ? _getCache(targets[0]).harness : 0;
        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

        cleanVars = _copyExcluding(vars, _reservedProps);
        prevStartAt && _removeFromParent(prevStartAt.render(-1, true));

        if (startAt) {
          _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
            data: "isStart",
            overwrite: false,
            parent: parent,
            immediateRender: true,
            lazy: _isNotFalse(lazy),
            startAt: null,
            delay: 0,
            onUpdate: onUpdate,
            onUpdateParams: onUpdateParams,
            callbackScope: callbackScope,
            stagger: 0
          }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


          time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

          if (immediateRender) {
            time > 0 && !autoRevert && (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.

            if (dur && time <= 0) {
              time && (tween._zTime = time);
              return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
            } // if (time > 0) {
            // 	autoRevert || (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
            // } else if (dur && !(time < 0 && prevStartAt)) {
            // 	time && (tween._zTime = time);
            // 	return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
            // }

          } else if (autoRevert === false) {
            tween._startAt = 0;
          }
        } else if (runBackwards && dur) {
          //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
          if (prevStartAt) {
            !autoRevert && (tween._startAt = 0);
          } else {
            time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

            p = _setDefaults({
              overwrite: false,
              data: "isFromStart",
              //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
              lazy: immediateRender && _isNotFalse(lazy),
              immediateRender: immediateRender,
              //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
              stagger: 0,
              parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})

            }, cleanVars);
            harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

            _removeFromParent(tween._startAt = Tween.set(targets, p));

            time < 0 && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted from() tween.

            tween._zTime = time;

            if (!immediateRender) {
              _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded

            } else if (!time) {
              return;
            }
          }
        }

        tween._pt = 0;
        lazy = dur && _isNotFalse(lazy) || lazy && !dur;

        for (i = 0; i < targets.length; i++) {
          target = targets[i];
          gsData = target._gsap || _harness(targets)[i]._gsap;
          tween._ptLookup[i] = ptLookup = {};
          _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

          index = fullTargets === targets ? i : fullTargets.indexOf(target);

          if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
            tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

            plugin._props.forEach(function (name) {
              ptLookup[name] = pt;
            });

            plugin.priority && (hasPriority = 1);
          }

          if (!harness || harnessVars) {
            for (p in cleanVars) {
              if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
                plugin.priority && (hasPriority = 1);
              } else {
                ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
              }
            }
          }

          tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

          if (autoOverwrite && tween._pt) {
            _overwritingTween = tween;

            _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!


            overwritten = !tween.parent;
            _overwritingTween = 0;
          }

          tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
        }

        hasPriority && _sortPropTweensByPriority(tween);
        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
      }

      tween._onUpdate = onUpdate;
      tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

      keyframes && time <= 0 && tl.render(_bigNum$1, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
    },
        _addAliasesToVars = function _addAliasesToVars(targets, vars) {
      var harness = targets[0] ? _getCache(targets[0]).harness : 0,
          propertyAliases = harness && harness.aliases,
          copy,
          p,
          i,
          aliases;

      if (!propertyAliases) {
        return vars;
      }

      copy = _merge({}, vars);

      for (p in propertyAliases) {
        if (p in copy) {
          aliases = propertyAliases[p].split(",");
          i = aliases.length;

          while (i--) {
            copy[aliases[i]] = copy[p];
          }
        }
      }

      return copy;
    },
        // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
    _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
      var ease = obj.ease || easeEach || "power1.inOut",
          p,
          a;

      if (_isArray(obj)) {
        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

        obj.forEach(function (value, i) {
          return a.push({
            t: i / (obj.length - 1) * 100,
            v: value,
            e: ease
          });
        });
      } else {
        for (p in obj) {
          a = allProps[p] || (allProps[p] = []);
          p === "ease" || a.push({
            t: parseFloat(prop),
            v: obj[p],
            e: ease
          });
        }
      }
    },
        _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
      return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
    },
        _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
        _staggerPropsToSkip = {};

    _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
      return _staggerPropsToSkip[name] = 1;
    });
    /*
     * --------------------------------------------------------------------------------------
     * TWEEN
     * --------------------------------------------------------------------------------------
     */


    var Tween = /*#__PURE__*/function (_Animation2) {
      _inheritsLoose(Tween, _Animation2);

      function Tween(targets, vars, position, skipInherit) {
        var _this3;

        if (typeof vars === "number") {
          position.duration = vars;
          vars = position;
          position = null;
        }

        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
        var _this3$vars = _this3.vars,
            duration = _this3$vars.duration,
            delay = _this3$vars.delay,
            immediateRender = _this3$vars.immediateRender,
            stagger = _this3$vars.stagger,
            overwrite = _this3$vars.overwrite,
            keyframes = _this3$vars.keyframes,
            defaults = _this3$vars.defaults,
            scrollTrigger = _this3$vars.scrollTrigger,
            yoyoEase = _this3$vars.yoyoEase,
            parent = vars.parent || _globalTimeline,
            parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
            tl,
            i,
            copy,
            l,
            p,
            curTarget,
            staggerFunc,
            staggerVarsToMerge;
        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

        _this3._overwrite = overwrite;

        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          vars = _this3.vars;
          tl = _this3.timeline = new Timeline({
            data: "nested",
            defaults: defaults || {}
          });
          tl.kill();
          tl.parent = tl._dp = _assertThisInitialized(_this3);
          tl._start = 0;

          if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
            l = parsedTargets.length;
            staggerFunc = stagger && distribute(stagger);

            if (_isObject(stagger)) {
              //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
              for (p in stagger) {
                if (~_staggerTweenProps.indexOf(p)) {
                  staggerVarsToMerge || (staggerVarsToMerge = {});
                  staggerVarsToMerge[p] = stagger[p];
                }
              }
            }

            for (i = 0; i < l; i++) {
              copy = _copyExcluding(vars, _staggerPropsToSkip);
              copy.stagger = 0;
              yoyoEase && (copy.yoyoEase = yoyoEase);
              staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
              curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

              copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
              copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

              if (!stagger && l === 1 && copy.delay) {
                // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
                _this3._delay = delay = copy.delay;
                _this3._start += delay;
                copy.delay = 0;
              }

              tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
              tl._ease = _easeMap.none;
            }

            tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
          } else if (keyframes) {
            _inheritDefaults(_setDefaults(tl.vars.defaults, {
              ease: "none"
            }));

            tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
            var time = 0,
                a,
                kf,
                v;

            if (_isArray(keyframes)) {
              keyframes.forEach(function (frame) {
                return tl.to(parsedTargets, frame, ">");
              });
            } else {
              copy = {};

              for (p in keyframes) {
                p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
              }

              for (p in copy) {
                a = copy[p].sort(function (a, b) {
                  return a.t - b.t;
                });
                time = 0;

                for (i = 0; i < a.length; i++) {
                  kf = a[i];
                  v = {
                    ease: kf.e,
                    duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                  };
                  v[p] = kf.v;
                  tl.to(parsedTargets, v, time);
                  time += v.duration;
                }
              }

              tl.duration() < duration && tl.to({}, {
                duration: duration - tl.duration()
              }); // in case keyframes didn't go to 100%
            }
          }

          duration || _this3.duration(duration = tl.duration());
        } else {
          _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
        }

        if (overwrite === true && !_suppressOverwrites) {
          _overwritingTween = _assertThisInitialized(_this3);

          _globalTimeline.killTweensOf(parsedTargets);

          _overwritingTween = 0;
        }

        _addToTimeline(parent, _assertThisInitialized(_this3), position);

        vars.reversed && _this3.reverse();
        vars.paused && _this3.paused(true);

        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
          _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

          _this3.render(Math.max(0, -delay)); //in case delay is negative

        }

        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
        return _this3;
      }

      var _proto3 = Tween.prototype;

      _proto3.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time,
            tDur = this._tDur,
            dur = this._dur,
            tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
            time,
            pt,
            iteration,
            cycleDuration,
            prevIteration,
            isYoyo,
            ratio,
            timeline,
            yoyoEase;

        if (!dur) {
          _renderZeroDurationTween(this, totalTime, suppressEvents, force);
        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {
          //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
          time = tTime;
          timeline = this.timeline;

          if (this._repeat) {
            //adjust the time for repeats and yoyos
            cycleDuration = dur + this._rDelay;

            if (this._repeat < -1 && totalTime < 0) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }

            time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

            if (tTime === tDur) {
              // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
              iteration = this._repeat;
              time = dur;
            } else {
              iteration = ~~(tTime / cycleDuration);

              if (iteration && iteration === tTime / cycleDuration) {
                time = dur;
                iteration--;
              }

              time > dur && (time = dur);
            }

            isYoyo = this._yoyo && iteration & 1;

            if (isYoyo) {
              yoyoEase = this._yEase;
              time = dur - time;
            }

            prevIteration = _animationCycle(this._tTime, cycleDuration);

            if (time === prevTime && !force && this._initted) {
              //could be during the repeatDelay part. No need to render and fire callbacks.
              return this;
            }

            if (iteration !== prevIteration) {
              timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

              if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
                this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

                this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
              }
            }
          }

          if (!this._initted) {
            if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
              this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

              return this;
            }

            if (dur !== this._dur) {
              // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
              return this.render(totalTime, suppressEvents, force);
            }
          }

          this._tTime = tTime;
          this._time = time;

          if (!this._act && this._ts) {
            this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

            this._lazy = 0;
          }

          this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

          if (this._from) {
            this.ratio = ratio = 1 - ratio;
          }

          if (time && !prevTime && !suppressEvents) {
            _callback(this, "onStart");

            if (this._tTime !== tTime) {
              // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
              return this;
            }
          }

          pt = this._pt;

          while (pt) {
            pt.r(ratio, pt.d);
            pt = pt._next;
          }

          timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

          if (this._onUpdate && !suppressEvents) {
            totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

            _callback(this, "onUpdate");
          }

          this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

          if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
            totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
            (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

            if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
              // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
              _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

              this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
            }
          }
        }

        return this;
      };

      _proto3.targets = function targets() {
        return this._targets;
      };

      _proto3.invalidate = function invalidate() {
        this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;
        this._ptLookup = [];
        this.timeline && this.timeline.invalidate();
        return _Animation2.prototype.invalidate.call(this);
      };

      _proto3.kill = function kill(targets, vars) {
        if (vars === void 0) {
          vars = "all";
        }

        if (!targets && (!vars || vars === "all")) {
          this._lazy = this._pt = 0;
          return this.parent ? _interrupt(this) : this;
        }

        if (this.timeline) {
          var tDur = this.timeline.totalDuration();
          this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

          this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

          return this;
        }

        var parsedTargets = this._targets,
            killingTargets = targets ? toArray(targets) : parsedTargets,
            propTweenLookup = this._ptLookup,
            firstPT = this._pt,
            overwrittenProps,
            curLookup,
            curOverwriteProps,
            props,
            p,
            pt,
            i;

        if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
          vars === "all" && (this._pt = 0);
          return _interrupt(this);
        }

        overwrittenProps = this._op = this._op || [];

        if (vars !== "all") {
          //so people can pass in a comma-delimited list of property names
          if (_isString(vars)) {
            p = {};

            _forEachName(vars, function (name) {
              return p[name] = 1;
            });

            vars = p;
          }

          vars = _addAliasesToVars(parsedTargets, vars);
        }

        i = parsedTargets.length;

        while (i--) {
          if (~killingTargets.indexOf(parsedTargets[i])) {
            curLookup = propTweenLookup[i];

            if (vars === "all") {
              overwrittenProps[i] = vars;
              props = curLookup;
              curOverwriteProps = {};
            } else {
              curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
              props = vars;
            }

            for (p in props) {
              pt = curLookup && curLookup[p];

              if (pt) {
                if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                  _removeLinkedListItem(this, pt, "_pt");
                }

                delete curLookup[p];
              }

              if (curOverwriteProps !== "all") {
                curOverwriteProps[p] = 1;
              }
            }
          }
        }

        this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

        return this;
      };

      Tween.to = function to(targets, vars) {
        return new Tween(targets, vars, arguments[2]);
      };

      Tween.from = function from(targets, vars) {
        return _createTweenType(1, arguments);
      };

      Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
        return new Tween(callback, 0, {
          immediateRender: false,
          lazy: false,
          overwrite: false,
          delay: delay,
          onComplete: callback,
          onReverseComplete: callback,
          onCompleteParams: params,
          onReverseCompleteParams: params,
          callbackScope: scope
        });
      };

      Tween.fromTo = function fromTo(targets, fromVars, toVars) {
        return _createTweenType(2, arguments);
      };

      Tween.set = function set(targets, vars) {
        vars.duration = 0;
        vars.repeatDelay || (vars.repeat = 0);
        return new Tween(targets, vars);
      };

      Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        return _globalTimeline.killTweensOf(targets, props, onlyActive);
      };

      return Tween;
    }(Animation);

    _setDefaults(Tween.prototype, {
      _targets: [],
      _lazy: 0,
      _startAt: 0,
      _op: 0,
      _onInit: 0
    }); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
    // _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
    // 	Tween.prototype[name] = function() {
    // 		let tl = new Timeline();
    // 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
    // 	}
    // });
    //for backward compatibility. Leverage the timeline calls.


    _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
      Tween[name] = function () {
        var tl = new Timeline(),
            params = _slice.call(arguments, 0);

        params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
        return tl[name].apply(tl, params);
      };
    });
    /*
     * --------------------------------------------------------------------------------------
     * PROPTWEEN
     * --------------------------------------------------------------------------------------
     */


    var _setterPlain = function _setterPlain(target, property, value) {
      return target[property] = value;
    },
        _setterFunc = function _setterFunc(target, property, value) {
      return target[property](value);
    },
        _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
      return target[property](data.fp, value);
    },
        _setterAttribute = function _setterAttribute(target, property, value) {
      return target.setAttribute(property, value);
    },
        _getSetter = function _getSetter(target, property) {
      return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
    },
        _renderPlain = function _renderPlain(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
    },
        _renderBoolean = function _renderBoolean(ratio, data) {
      return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
    },
        _renderComplexString = function _renderComplexString(ratio, data) {
      var pt = data._pt,
          s = "";

      if (!ratio && data.b) {
        //b = beginning string
        s = data.b;
      } else if (ratio === 1 && data.e) {
        //e = ending string
        s = data.e;
      } else {
        while (pt) {
          s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

          pt = pt._next;
        }

        s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
      }

      data.set(data.t, data.p, s, data);
    },
        _renderPropTweens = function _renderPropTweens(ratio, data) {
      var pt = data._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    },
        _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
      var pt = this._pt,
          next;

      while (pt) {
        next = pt._next;
        pt.p === property && pt.modifier(modifier, tween, target);
        pt = next;
      }
    },
        _killPropTweensOf = function _killPropTweensOf(property) {
      var pt = this._pt,
          hasNonDependentRemaining,
          next;

      while (pt) {
        next = pt._next;

        if (pt.p === property && !pt.op || pt.op === property) {
          _removeLinkedListItem(this, pt, "_pt");
        } else if (!pt.dep) {
          hasNonDependentRemaining = 1;
        }

        pt = next;
      }

      return !hasNonDependentRemaining;
    },
        _setterWithModifier = function _setterWithModifier(target, property, value, data) {
      data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
    },
        _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
      var pt = parent._pt,
          next,
          pt2,
          first,
          last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

      while (pt) {
        next = pt._next;
        pt2 = first;

        while (pt2 && pt2.pr > pt.pr) {
          pt2 = pt2._next;
        }

        if (pt._prev = pt2 ? pt2._prev : last) {
          pt._prev._next = pt;
        } else {
          first = pt;
        }

        if (pt._next = pt2) {
          pt2._prev = pt;
        } else {
          last = pt;
        }

        pt = next;
      }

      parent._pt = first;
    }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


    var PropTween = /*#__PURE__*/function () {
      function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
        this.t = target;
        this.s = start;
        this.c = change;
        this.p = prop;
        this.r = renderer || _renderPlain;
        this.d = data || this;
        this.set = setter || _setterPlain;
        this.pr = priority || 0;
        this._next = next;

        if (next) {
          next._prev = this;
        }
      }

      var _proto4 = PropTween.prototype;

      _proto4.modifier = function modifier(func, tween, target) {
        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

        this.set = _setterWithModifier;
        this.m = func;
        this.mt = target; //modifier target

        this.tween = tween;
      };

      return PropTween;
    }(); //Initialization tasks

    _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
      return _reservedProps[name] = 1;
    });

    _globals.TweenMax = _globals.TweenLite = Tween;
    _globals.TimelineLite = _globals.TimelineMax = Timeline;
    _globalTimeline = new Timeline({
      sortChildren: false,
      defaults: _defaults,
      autoRemoveChildren: true,
      id: "root",
      smoothChildTiming: true
    });
    _config.stringFilter = _colorStringFilter;
    /*
     * --------------------------------------------------------------------------------------
     * GSAP
     * --------------------------------------------------------------------------------------
     */

    var _gsap = {
      registerPlugin: function registerPlugin() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        args.forEach(function (config) {
          return _createPlugin(config);
        });
      },
      timeline: function timeline(vars) {
        return new Timeline(vars);
      },
      getTweensOf: function getTweensOf(targets, onlyActive) {
        return _globalTimeline.getTweensOf(targets, onlyActive);
      },
      getProperty: function getProperty(target, property, unit, uncache) {
        _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

        var getter = _getCache(target || {}).get,
            format = unit ? _passThrough : _numericIfPossible;

        unit === "native" && (unit = "");
        return !target ? target : !property ? function (property, unit, uncache) {
          return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
        } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      },
      quickSetter: function quickSetter(target, property, unit) {
        target = toArray(target);

        if (target.length > 1) {
          var setters = target.map(function (t) {
            return gsap.quickSetter(t, property, unit);
          }),
              l = setters.length;
          return function (value) {
            var i = l;

            while (i--) {
              setters[i](value);
            }
          };
        }

        target = target[0] || {};

        var Plugin = _plugins[property],
            cache = _getCache(target),
            p = cache.harness && (cache.harness.aliases || {})[property] || property,
            // in case it's an alias, like "rotate" for "rotation".
        setter = Plugin ? function (value) {
          var p = new Plugin();
          _quickTween._pt = 0;
          p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
          p.render(1, p);
          _quickTween._pt && _renderPropTweens(1, _quickTween);
        } : cache.set(target, p);

        return Plugin ? setter : function (value) {
          return setter(target, p, unit ? value + unit : value, cache, 1);
        };
      },
      isTweening: function isTweening(targets) {
        return _globalTimeline.getTweensOf(targets, true).length > 0;
      },
      defaults: function defaults(value) {
        value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
        return _mergeDeep(_defaults, value || {});
      },
      config: function config(value) {
        return _mergeDeep(_config, value || {});
      },
      registerEffect: function registerEffect(_ref3) {
        var name = _ref3.name,
            effect = _ref3.effect,
            plugins = _ref3.plugins,
            defaults = _ref3.defaults,
            extendTimeline = _ref3.extendTimeline;
        (plugins || "").split(",").forEach(function (pluginName) {
          return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
        });

        _effects[name] = function (targets, vars, tl) {
          return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
        };

        if (extendTimeline) {
          Timeline.prototype[name] = function (targets, vars, position) {
            return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
          };
        }
      },
      registerEase: function registerEase(name, ease) {
        _easeMap[name] = _parseEase(ease);
      },
      parseEase: function parseEase(ease, defaultEase) {
        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
      },
      getById: function getById(id) {
        return _globalTimeline.getById(id);
      },
      exportRoot: function exportRoot(vars, includeDelayedCalls) {
        if (vars === void 0) {
          vars = {};
        }

        var tl = new Timeline(vars),
            child,
            next;
        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

        _globalTimeline.remove(tl);

        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

        tl._time = tl._tTime = _globalTimeline._time;
        child = _globalTimeline._first;

        while (child) {
          next = child._next;

          if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
            _addToTimeline(tl, child, child._start - child._delay);
          }

          child = next;
        }

        _addToTimeline(_globalTimeline, tl, 0);

        return tl;
      },
      utils: {
        wrap: wrap,
        wrapYoyo: wrapYoyo,
        distribute: distribute,
        random: random,
        snap: snap,
        normalize: normalize,
        getUnit: getUnit,
        clamp: clamp,
        splitColor: splitColor,
        toArray: toArray,
        selector: selector,
        mapRange: mapRange,
        pipe: pipe,
        unitize: unitize,
        interpolate: interpolate,
        shuffle: shuffle
      },
      install: _install,
      effects: _effects,
      ticker: _ticker,
      updateRoot: Timeline.updateRoot,
      plugins: _plugins,
      globalTimeline: _globalTimeline,
      core: {
        PropTween: PropTween,
        globals: _addGlobal,
        Tween: Tween,
        Timeline: Timeline,
        Animation: Animation,
        getCache: _getCache,
        _removeLinkedListItem: _removeLinkedListItem,
        suppressOverwrites: function suppressOverwrites(value) {
          return _suppressOverwrites = value;
        }
      }
    };

    _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
      return _gsap[name] = Tween[name];
    });

    _ticker.add(Timeline.updateRoot);

    _quickTween = _gsap.to({}, {
      duration: 0
    }); // ---- EXTRA PLUGINS --------------------------------------------------------

    var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
      var pt = plugin._pt;

      while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
        pt = pt._next;
      }

      return pt;
    },
        _addModifiers = function _addModifiers(tween, modifiers) {
      var targets = tween._targets,
          p,
          i,
          pt;

      for (p in modifiers) {
        i = targets.length;

        while (i--) {
          pt = tween._ptLookup[i][p];

          if (pt && (pt = pt.d)) {
            if (pt._pt) {
              // is a plugin
              pt = _getPluginPropTween(pt, p);
            }

            pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
          }
        }
      }
    },
        _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
      return {
        name: name,
        rawVars: 1,
        //don't pre-process function-based values or "random()" strings.
        init: function init(target, vars, tween) {
          tween._onInit = function (tween) {
            var temp, p;

            if (_isString(vars)) {
              temp = {};

              _forEachName(vars, function (name) {
                return temp[name] = 1;
              }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


              vars = temp;
            }

            if (modifier) {
              temp = {};

              for (p in vars) {
                temp[p] = modifier(vars[p]);
              }

              vars = temp;
            }

            _addModifiers(tween, vars);
          };
        }
      };
    }; //register core plugins


    var gsap = _gsap.registerPlugin({
      name: "attr",
      init: function init(target, vars, tween, index, targets) {
        var p, pt;

        for (p in vars) {
          pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
          pt && (pt.op = p);

          this._props.push(p);
        }
      }
    }, {
      name: "endArray",
      init: function init(target, value) {
        var i = value.length;

        while (i--) {
          this.add(target, i, target[i] || 0, value[i]);
        }
      }
    }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

    Tween.version = Timeline.version = gsap.version = "3.9.1";
    _coreReady = 1;
    _windowExists$1() && _wake();
    _easeMap.Power0;
        _easeMap.Power1;
        _easeMap.Power2;
        _easeMap.Power3;
        _easeMap.Power4;
        _easeMap.Linear;
        _easeMap.Quad;
        _easeMap.Cubic;
        _easeMap.Quart;
        _easeMap.Quint;
        _easeMap.Strong;
        _easeMap.Elastic;
        _easeMap.Back;
        _easeMap.SteppedEase;
        _easeMap.Bounce;
        _easeMap.Sine;
        _easeMap.Expo;
        _easeMap.Circ;

    /*!
     * CSSPlugin 3.9.1
     * https://greensock.com
     *
     * Copyright 2008-2021, GreenSock. All rights reserved.
     * Subject to the terms at https://greensock.com/standard-license or for
     * Club GreenSock members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */

    var _win,
        _doc,
        _docElement,
        _pluginInitted,
        _tempDiv,
        _recentSetterPlugin,
        _windowExists = function _windowExists() {
      return typeof window !== "undefined";
    },
        _transformProps = {},
        _RAD2DEG = 180 / Math.PI,
        _DEG2RAD = Math.PI / 180,
        _atan2 = Math.atan2,
        _bigNum = 1e8,
        _capsExp = /([A-Z])/g,
        _horizontalExp = /(?:left|right|width|margin|padding|x)/i,
        _complexExp = /[\s,\(]\S/,
        _propertyAliases = {
      autoAlpha: "opacity,visibility",
      scale: "scaleX,scaleY",
      alpha: "opacity"
    },
        _renderCSSProp = function _renderCSSProp(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
    },
        _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
      return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
    },
        _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
      return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
    },
        //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
    _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
      var value = data.s + data.c * ratio;
      data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
    },
        _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
      return data.set(data.t, data.p, ratio ? data.e : data.b, data);
    },
        _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
      return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
    },
        _setterCSSStyle = function _setterCSSStyle(target, property, value) {
      return target.style[property] = value;
    },
        _setterCSSProp = function _setterCSSProp(target, property, value) {
      return target.style.setProperty(property, value);
    },
        _setterTransform = function _setterTransform(target, property, value) {
      return target._gsap[property] = value;
    },
        _setterScale = function _setterScale(target, property, value) {
      return target._gsap.scaleX = target._gsap.scaleY = value;
    },
        _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
      var cache = target._gsap;
      cache.scaleX = cache.scaleY = value;
      cache.renderTransform(ratio, cache);
    },
        _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
      var cache = target._gsap;
      cache[property] = value;
      cache.renderTransform(ratio, cache);
    },
        _transformProp = "transform",
        _transformOriginProp = _transformProp + "Origin",
        _supports3D,
        _createElement = function _createElement(type, ns) {
      var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

      return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
    },
        _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
      var cs = getComputedStyle(target);
      return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
    },
        _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
        _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
      var e = element || _tempDiv,
          s = e.style,
          i = 5;

      if (property in s && !preferPrefix) {
        return property;
      }

      property = property.charAt(0).toUpperCase() + property.substr(1);

      while (i-- && !(_prefixes[i] + property in s)) {}

      return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
    },
        _initCore = function _initCore() {
      if (_windowExists() && window.document) {
        _win = window;
        _doc = _win.document;
        _docElement = _doc.documentElement;
        _tempDiv = _createElement("div") || {
          style: {}
        };
        _createElement("div");
        _transformProp = _checkPropPrefix(_transformProp);
        _transformOriginProp = _transformProp + "Origin";
        _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

        _supports3D = !!_checkPropPrefix("perspective");
        _pluginInitted = 1;
      }
    },
        _getBBoxHack = function _getBBoxHack(swapIfPossible) {
      //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
      var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
          oldParent = this.parentNode,
          oldSibling = this.nextSibling,
          oldCSS = this.style.cssText,
          bbox;

      _docElement.appendChild(svg);

      svg.appendChild(this);
      this.style.display = "block";

      if (swapIfPossible) {
        try {
          bbox = this.getBBox();
          this._gsapBBox = this.getBBox; //store the original

          this.getBBox = _getBBoxHack;
        } catch (e) {}
      } else if (this._gsapBBox) {
        bbox = this._gsapBBox();
      }

      if (oldParent) {
        if (oldSibling) {
          oldParent.insertBefore(this, oldSibling);
        } else {
          oldParent.appendChild(this);
        }
      }

      _docElement.removeChild(svg);

      this.style.cssText = oldCSS;
      return bbox;
    },
        _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
      var i = attributesArray.length;

      while (i--) {
        if (target.hasAttribute(attributesArray[i])) {
          return target.getAttribute(attributesArray[i]);
        }
      }
    },
        _getBBox = function _getBBox(target) {
      var bounds;

      try {
        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
      } catch (error) {
        bounds = _getBBoxHack.call(target, true);
      }

      bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

      return bounds && !bounds.width && !bounds.x && !bounds.y ? {
        x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
        y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
        width: 0,
        height: 0
      } : bounds;
    },
        _isSVG = function _isSVG(e) {
      return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
    },
        //reports if the element is an SVG on which getBBox() actually works
    _removeProperty = function _removeProperty(target, property) {
      if (property) {
        var style = target.style;

        if (property in _transformProps && property !== _transformOriginProp) {
          property = _transformProp;
        }

        if (style.removeProperty) {
          if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
            //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
            property = "-" + property;
          }

          style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
        } else {
          //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
          style.removeAttribute(property);
        }
      }
    },
        _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
      var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
      plugin._pt = pt;
      pt.b = beginning;
      pt.e = end;

      plugin._props.push(property);

      return pt;
    },
        _nonConvertibleUnits = {
      deg: 1,
      rad: 1,
      turn: 1
    },
        //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
    _convertToUnit = function _convertToUnit(target, property, value, unit) {
      var curValue = parseFloat(value) || 0,
          curUnit = (value + "").trim().substr((curValue + "").length) || "px",
          // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
          horizontal = _horizontalExp.test(property),
          isRootSVG = target.tagName.toLowerCase() === "svg",
          measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
          amount = 100,
          toPixels = unit === "px",
          toPercent = unit === "%",
          px,
          parent,
          cache,
          isSVG;

      if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
        return curValue;
      }

      curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
      isSVG = target.getCTM && _isSVG(target);

      if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
        px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
        return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
      }

      style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
      parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

      if (isSVG) {
        parent = (target.ownerSVGElement || {}).parentNode;
      }

      if (!parent || parent === _doc || !parent.appendChild) {
        parent = _doc.body;
      }

      cache = parent._gsap;

      if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {
        return _round(curValue / cache.width * amount);
      } else {
        (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
        parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

        parent.appendChild(_tempDiv);
        px = _tempDiv[measureProperty];
        parent.removeChild(_tempDiv);
        style.position = "absolute";

        if (horizontal && toPercent) {
          cache = _getCache(parent);
          cache.time = _ticker.time;
          cache.width = parent[measureProperty];
        }
      }

      return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
    },
        _get = function _get(target, property, unit, uncache) {
      var value;
      _pluginInitted || _initCore();

      if (property in _propertyAliases && property !== "transform") {
        property = _propertyAliases[property];

        if (~property.indexOf(",")) {
          property = property.split(",")[0];
        }
      }

      if (_transformProps[property] && property !== "transform") {
        value = _parseTransform(target, uncache);
        value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
      } else {
        value = target.style[property];

        if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
          value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
        }
      }

      return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
    },
        _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
      //note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
      if (!start || start === "none") {
        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
        var p = _checkPropPrefix(prop, target, 1),
            s = p && _getComputedProperty(target, p, 1);

        if (s && s !== start) {
          prop = p;
          start = s;
        } else if (prop === "borderColor") {
          start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
        }
      }

      var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
          index = 0,
          matchIndex = 0,
          a,
          result,
          startValues,
          startNum,
          color,
          startValue,
          endValue,
          endNum,
          chunk,
          endUnit,
          startUnit,
          relative,
          endValues;
      pt.b = start;
      pt.e = end;
      start += ""; //ensure values are strings

      end += "";

      if (end === "auto") {
        target.style[prop] = end;
        end = _getComputedProperty(target, prop) || end;
        target.style[prop] = start;
      }

      a = [start, end];

      _colorStringFilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


      start = a[0];
      end = a[1];
      startValues = start.match(_numWithUnitExp) || [];
      endValues = end.match(_numWithUnitExp) || [];

      if (endValues.length) {
        while (result = _numWithUnitExp.exec(end)) {
          endValue = result[0];
          chunk = end.substring(index, result.index);

          if (color) {
            color = (color + 1) % 5;
          } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
            color = 1;
          }

          if (endValue !== (startValue = startValues[matchIndex++] || "")) {
            startNum = parseFloat(startValue) || 0;
            startUnit = startValue.substr((startNum + "").length);
            relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

            if (relative) {
              endValue = endValue.substr(2);
            }

            endNum = parseFloat(endValue);
            endUnit = endValue.substr((endNum + "").length);
            index = _numWithUnitExp.lastIndex - endUnit.length;

            if (!endUnit) {
              //if something like "perspective:300" is passed in and we must add a unit to the end
              endUnit = endUnit || _config.units[prop] || startUnit;

              if (index === end.length) {
                end += endUnit;
                pt.e += endUnit;
              }
            }

            if (startUnit !== endUnit) {
              startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
            } //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


            pt._pt = {
              _next: pt._pt,
              p: chunk || matchIndex === 1 ? chunk : ",",
              //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
              s: startNum,
              c: relative ? relative * endNum : endNum - startNum,
              m: color && color < 4 || prop === "zIndex" ? Math.round : 0
            };
          }
        }

        pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
      } else {
        pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
      }

      _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

      this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

      return pt;
    },
        _keywordToPercent = {
      top: "0%",
      bottom: "100%",
      left: "0%",
      right: "100%",
      center: "50%"
    },
        _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
      var split = value.split(" "),
          x = split[0],
          y = split[1] || "50%";

      if (x === "top" || x === "bottom" || y === "left" || y === "right") {
        //the user provided them in the wrong order, so flip them
        value = x;
        x = y;
        y = value;
      }

      split[0] = _keywordToPercent[x] || x;
      split[1] = _keywordToPercent[y] || y;
      return split.join(" ");
    },
        _renderClearProps = function _renderClearProps(ratio, data) {
      if (data.tween && data.tween._time === data.tween._dur) {
        var target = data.t,
            style = target.style,
            props = data.u,
            cache = target._gsap,
            prop,
            clearTransforms,
            i;

        if (props === "all" || props === true) {
          style.cssText = "";
          clearTransforms = 1;
        } else {
          props = props.split(",");
          i = props.length;

          while (--i > -1) {
            prop = props[i];

            if (_transformProps[prop]) {
              clearTransforms = 1;
              prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
            }

            _removeProperty(target, prop);
          }
        }

        if (clearTransforms) {
          _removeProperty(target, _transformProp);

          if (cache) {
            cache.svg && target.removeAttribute("transform");

            _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


            cache.uncache = 1;
          }
        }
      }
    },
        // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
    _specialProps = {
      clearProps: function clearProps(plugin, target, property, endValue, tween) {
        if (tween.data !== "isFromStart") {
          var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
          pt.u = endValue;
          pt.pr = -10;
          pt.tween = tween;

          plugin._props.push(property);

          return 1;
        }
      }
      /* className feature (about 0.4kb gzipped).
      , className(plugin, target, property, endValue, tween) {
      	let _renderClassName = (ratio, data) => {
      			data.css.render(ratio, data.css);
      			if (!ratio || ratio === 1) {
      				let inline = data.rmv,
      					target = data.t,
      					p;
      				target.setAttribute("class", ratio ? data.e : data.b);
      				for (p in inline) {
      					_removeProperty(target, p);
      				}
      			}
      		},
      		_getAllStyles = (target) => {
      			let styles = {},
      				computed = getComputedStyle(target),
      				p;
      			for (p in computed) {
      				if (isNaN(p) && p !== "cssText" && p !== "length") {
      					styles[p] = computed[p];
      				}
      			}
      			_setDefaults(styles, _parseTransform(target, 1));
      			return styles;
      		},
      		startClassList = target.getAttribute("class"),
      		style = target.style,
      		cssText = style.cssText,
      		cache = target._gsap,
      		classPT = cache.classPT,
      		inlineToRemoveAtEnd = {},
      		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
      		changingVars = {},
      		startVars = _getAllStyles(target),
      		transformRelated = /(transform|perspective)/i,
      		endVars, p;
      	if (classPT) {
      		classPT.r(1, classPT.d);
      		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
      	}
      	target.setAttribute("class", data.e);
      	endVars = _getAllStyles(target, true);
      	target.setAttribute("class", startClassList);
      	for (p in endVars) {
      		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
      			changingVars[p] = endVars[p];
      			if (!style[p] && style[p] !== "0") {
      				inlineToRemoveAtEnd[p] = 1;
      			}
      		}
      	}
      	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
      	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
      		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
      	}
      	_parseTransform(target, true); //to clear the caching of transforms
      	data.css = new gsap.plugins.css();
      	data.css.init(target, changingVars, tween);
      	plugin._props.push(...data.css._props);
      	return 1;
      }
      */

    },

    /*
     * --------------------------------------------------------------------------------------
     * TRANSFORMS
     * --------------------------------------------------------------------------------------
     */
    _identity2DMatrix = [1, 0, 0, 1, 0, 0],
        _rotationalProperties = {},
        _isNullTransform = function _isNullTransform(value) {
      return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
    },
        _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
      var matrixString = _getComputedProperty(target, _transformProp);

      return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
    },
        _getMatrix = function _getMatrix(target, force2D) {
      var cache = target._gsap || _getCache(target),
          style = target.style,
          matrix = _getComputedTransformMatrixAsArray(target),
          parent,
          nextSibling,
          temp,
          addedToDOM;

      if (cache.svg && target.getAttribute("transform")) {
        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

        matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
        return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
      } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
        temp = style.display;
        style.display = "block";
        parent = target.parentNode;

        if (!parent || !target.offsetParent) {
          // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
          addedToDOM = 1; //flag

          nextSibling = target.nextSibling;

          _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

        }

        matrix = _getComputedTransformMatrixAsArray(target);
        temp ? style.display = temp : _removeProperty(target, "display");

        if (addedToDOM) {
          nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
        }
      }

      return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
    },
        _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
      var cache = target._gsap,
          matrix = matrixArray || _getMatrix(target, true),
          xOriginOld = cache.xOrigin || 0,
          yOriginOld = cache.yOrigin || 0,
          xOffsetOld = cache.xOffset || 0,
          yOffsetOld = cache.yOffset || 0,
          a = matrix[0],
          b = matrix[1],
          c = matrix[2],
          d = matrix[3],
          tx = matrix[4],
          ty = matrix[5],
          originSplit = origin.split(" "),
          xOrigin = parseFloat(originSplit[0]) || 0,
          yOrigin = parseFloat(originSplit[1]) || 0,
          bounds,
          determinant,
          x,
          y;

      if (!originIsAbsolute) {
        bounds = _getBBox(target);
        xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
      } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
        xOrigin = x;
        yOrigin = y;
      }

      if (smooth || smooth !== false && cache.smooth) {
        tx = xOrigin - xOriginOld;
        ty = yOrigin - yOriginOld;
        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
      } else {
        cache.xOffset = cache.yOffset = 0;
      }

      cache.xOrigin = xOrigin;
      cache.yOrigin = yOrigin;
      cache.smooth = !!smooth;
      cache.origin = origin;
      cache.originIsAbsolute = !!originIsAbsolute;
      target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

      if (pluginToAddPropTweensTo) {
        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
      }

      target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
    },
        _parseTransform = function _parseTransform(target, uncache) {
      var cache = target._gsap || new GSCache(target);

      if ("x" in cache && !uncache && !cache.uncache) {
        return cache;
      }

      var style = target.style,
          invertedScaleX = cache.scaleX < 0,
          px = "px",
          deg = "deg",
          origin = _getComputedProperty(target, _transformOriginProp) || "0",
          x,
          y,
          z,
          scaleX,
          scaleY,
          rotation,
          rotationX,
          rotationY,
          skewX,
          skewY,
          perspective,
          xOrigin,
          yOrigin,
          matrix,
          angle,
          cos,
          sin,
          a,
          b,
          c,
          d,
          a12,
          a22,
          t1,
          t2,
          t3,
          a13,
          a23,
          a33,
          a42,
          a43,
          a32;
      x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
      scaleX = scaleY = 1;
      cache.svg = !!(target.getCTM && _isSVG(target));
      matrix = _getMatrix(target, cache.svg);

      if (cache.svg) {
        t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin"); // if origin is 0,0 and cache.uncache is true, let the recorded data-svg-origin stay. Otherwise, whenever we set cache.uncache to true, we'd need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.

        _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
      }

      xOrigin = cache.xOrigin || 0;
      yOrigin = cache.yOrigin || 0;

      if (matrix !== _identity2DMatrix) {
        a = matrix[0]; //a11

        b = matrix[1]; //a21

        c = matrix[2]; //a31

        d = matrix[3]; //a41

        x = a12 = matrix[4];
        y = a22 = matrix[5]; //2D matrix

        if (matrix.length === 6) {
          scaleX = Math.sqrt(a * a + b * b);
          scaleY = Math.sqrt(d * d + c * c);
          rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

          skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
          skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

          if (cache.svg) {
            x -= xOrigin - (xOrigin * a + yOrigin * c);
            y -= yOrigin - (xOrigin * b + yOrigin * d);
          } //3D matrix

        } else {
          a32 = matrix[6];
          a42 = matrix[7];
          a13 = matrix[8];
          a23 = matrix[9];
          a33 = matrix[10];
          a43 = matrix[11];
          x = matrix[12];
          y = matrix[13];
          z = matrix[14];
          angle = _atan2(a32, a33);
          rotationX = angle * _RAD2DEG; //rotationX

          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a12 * cos + a13 * sin;
            t2 = a22 * cos + a23 * sin;
            t3 = a32 * cos + a33 * sin;
            a13 = a12 * -sin + a13 * cos;
            a23 = a22 * -sin + a23 * cos;
            a33 = a32 * -sin + a33 * cos;
            a43 = a42 * -sin + a43 * cos;
            a12 = t1;
            a22 = t2;
            a32 = t3;
          } //rotationY


          angle = _atan2(-c, a33);
          rotationY = angle * _RAD2DEG;

          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a * cos - a13 * sin;
            t2 = b * cos - a23 * sin;
            t3 = c * cos - a33 * sin;
            a43 = d * sin + a43 * cos;
            a = t1;
            b = t2;
            c = t3;
          } //rotationZ


          angle = _atan2(b, a);
          rotation = angle * _RAD2DEG;

          if (angle) {
            cos = Math.cos(angle);
            sin = Math.sin(angle);
            t1 = a * cos + b * sin;
            t2 = a12 * cos + a22 * sin;
            b = b * cos - a * sin;
            a22 = a22 * cos - a12 * sin;
            a = t1;
            a12 = t2;
          }

          if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
            //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
            rotationX = rotation = 0;
            rotationY = 180 - rotationY;
          }

          scaleX = _round(Math.sqrt(a * a + b * b + c * c));
          scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
          angle = _atan2(a12, a22);
          skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
          perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
        }

        if (cache.svg) {
          //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
          t1 = target.getAttribute("transform");
          cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
          t1 && target.setAttribute("transform", t1);
        }
      }

      if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
        if (invertedScaleX) {
          scaleX *= -1;
          skewX += rotation <= 0 ? 180 : -180;
          rotation += rotation <= 0 ? 180 : -180;
        } else {
          scaleY *= -1;
          skewX += skewX <= 0 ? 180 : -180;
        }
      }

      cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
      cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
      cache.z = z + px;
      cache.scaleX = _round(scaleX);
      cache.scaleY = _round(scaleY);
      cache.rotation = _round(rotation) + deg;
      cache.rotationX = _round(rotationX) + deg;
      cache.rotationY = _round(rotationY) + deg;
      cache.skewX = skewX + deg;
      cache.skewY = skewY + deg;
      cache.transformPerspective = perspective + px;

      if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
        style[_transformOriginProp] = _firstTwoOnly(origin);
      }

      cache.xOffset = cache.yOffset = 0;
      cache.force3D = _config.force3D;
      cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
      cache.uncache = 0;
      return cache;
    },
        _firstTwoOnly = function _firstTwoOnly(value) {
      return (value = value.split(" "))[0] + " " + value[1];
    },
        //for handling transformOrigin values, stripping out the 3rd dimension
    _addPxTranslate = function _addPxTranslate(target, start, value) {
      var unit = getUnit(start);
      return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
    },
        _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
      cache.z = "0px";
      cache.rotationY = cache.rotationX = "0deg";
      cache.force3D = 0;

      _renderCSSTransforms(ratio, cache);
    },
        _zeroDeg = "0deg",
        _zeroPx = "0px",
        _endParenthesis = ") ",
        _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
      var _ref = cache || this,
          xPercent = _ref.xPercent,
          yPercent = _ref.yPercent,
          x = _ref.x,
          y = _ref.y,
          z = _ref.z,
          rotation = _ref.rotation,
          rotationY = _ref.rotationY,
          rotationX = _ref.rotationX,
          skewX = _ref.skewX,
          skewY = _ref.skewY,
          scaleX = _ref.scaleX,
          scaleY = _ref.scaleY,
          transformPerspective = _ref.transformPerspective,
          force3D = _ref.force3D,
          target = _ref.target,
          zOrigin = _ref.zOrigin,
          transforms = "",
          use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


      if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
        var angle = parseFloat(rotationY) * _DEG2RAD,
            a13 = Math.sin(angle),
            a33 = Math.cos(angle),
            cos;

        angle = parseFloat(rotationX) * _DEG2RAD;
        cos = Math.cos(angle);
        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
      }

      if (transformPerspective !== _zeroPx) {
        transforms += "perspective(" + transformPerspective + _endParenthesis;
      }

      if (xPercent || yPercent) {
        transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
      }

      if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
        transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
      }

      if (rotation !== _zeroDeg) {
        transforms += "rotate(" + rotation + _endParenthesis;
      }

      if (rotationY !== _zeroDeg) {
        transforms += "rotateY(" + rotationY + _endParenthesis;
      }

      if (rotationX !== _zeroDeg) {
        transforms += "rotateX(" + rotationX + _endParenthesis;
      }

      if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
        transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
      }

      if (scaleX !== 1 || scaleY !== 1) {
        transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
      }

      target.style[_transformProp] = transforms || "translate(0, 0)";
    },
        _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
      var _ref2 = cache || this,
          xPercent = _ref2.xPercent,
          yPercent = _ref2.yPercent,
          x = _ref2.x,
          y = _ref2.y,
          rotation = _ref2.rotation,
          skewX = _ref2.skewX,
          skewY = _ref2.skewY,
          scaleX = _ref2.scaleX,
          scaleY = _ref2.scaleY,
          target = _ref2.target,
          xOrigin = _ref2.xOrigin,
          yOrigin = _ref2.yOrigin,
          xOffset = _ref2.xOffset,
          yOffset = _ref2.yOffset,
          forceCSS = _ref2.forceCSS,
          tx = parseFloat(x),
          ty = parseFloat(y),
          a11,
          a21,
          a12,
          a22,
          temp;

      rotation = parseFloat(rotation);
      skewX = parseFloat(skewX);
      skewY = parseFloat(skewY);

      if (skewY) {
        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
        skewY = parseFloat(skewY);
        skewX += skewY;
        rotation += skewY;
      }

      if (rotation || skewX) {
        rotation *= _DEG2RAD;
        skewX *= _DEG2RAD;
        a11 = Math.cos(rotation) * scaleX;
        a21 = Math.sin(rotation) * scaleX;
        a12 = Math.sin(rotation - skewX) * -scaleY;
        a22 = Math.cos(rotation - skewX) * scaleY;

        if (skewX) {
          skewY *= _DEG2RAD;
          temp = Math.tan(skewX - skewY);
          temp = Math.sqrt(1 + temp * temp);
          a12 *= temp;
          a22 *= temp;

          if (skewY) {
            temp = Math.tan(skewY);
            temp = Math.sqrt(1 + temp * temp);
            a11 *= temp;
            a21 *= temp;
          }
        }

        a11 = _round(a11);
        a21 = _round(a21);
        a12 = _round(a12);
        a22 = _round(a22);
      } else {
        a11 = scaleX;
        a22 = scaleY;
        a21 = a12 = 0;
      }

      if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
        tx = _convertToUnit(target, "x", x, "px");
        ty = _convertToUnit(target, "y", y, "px");
      }

      if (xOrigin || yOrigin || xOffset || yOffset) {
        tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
        ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
      }

      if (xPercent || yPercent) {
        //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
        temp = target.getBBox();
        tx = _round(tx + xPercent / 100 * temp.width);
        ty = _round(ty + yPercent / 100 * temp.height);
      }

      temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
      target.setAttribute("transform", temp);
      forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
    },
        _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
      var cap = 360,
          isString = _isString(endValue),
          endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
          change = relative ? endNum * relative : endNum - startNum,
          finalValue = startNum + change + "deg",
          direction,
          pt;

      if (isString) {
        direction = endValue.split("_")[1];

        if (direction === "short") {
          change %= cap;

          if (change !== change % (cap / 2)) {
            change += change < 0 ? cap : -cap;
          }
        }

        if (direction === "cw" && change < 0) {
          change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
        } else if (direction === "ccw" && change > 0) {
          change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
        }
      }

      plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
      pt.e = finalValue;
      pt.u = "deg";

      plugin._props.push(property);

      return pt;
    },
        _assign = function _assign(target, source) {
      // Internet Explorer doesn't have Object.assign(), so we recreate it here.
      for (var p in source) {
        target[p] = source[p];
      }

      return target;
    },
        _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
      //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
      var startCache = _assign({}, target._gsap),
          exclude = "perspective,force3D,transformOrigin,svgOrigin",
          style = target.style,
          endCache,
          p,
          startValue,
          endValue,
          startNum,
          endNum,
          startUnit,
          endUnit;

      if (startCache.svg) {
        startValue = target.getAttribute("transform");
        target.setAttribute("transform", "");
        style[_transformProp] = transforms;
        endCache = _parseTransform(target, 1);

        _removeProperty(target, _transformProp);

        target.setAttribute("transform", startValue);
      } else {
        startValue = getComputedStyle(target)[_transformProp];
        style[_transformProp] = transforms;
        endCache = _parseTransform(target, 1);
        style[_transformProp] = startValue;
      }

      for (p in _transformProps) {
        startValue = startCache[p];
        endValue = endCache[p];

        if (startValue !== endValue && exclude.indexOf(p) < 0) {
          //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
          startUnit = getUnit(startValue);
          endUnit = getUnit(endValue);
          startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
          endNum = parseFloat(endValue);
          plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
          plugin._pt.u = endUnit || 0;

          plugin._props.push(p);
        }
      }

      _assign(endCache, startCache);
    }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


    _forEachName("padding,margin,Width,Radius", function (name, index) {
      var t = "Top",
          r = "Right",
          b = "Bottom",
          l = "Left",
          props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
        return index < 2 ? name + side : "border" + side + name;
      });

      _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
        var a, vars;

        if (arguments.length < 4) {
          // getter, passed target, property, and unit (from _get())
          a = props.map(function (prop) {
            return _get(plugin, prop, property);
          });
          vars = a.join(" ");
          return vars.split(a[0]).length === 5 ? a[0] : vars;
        }

        a = (endValue + "").split(" ");
        vars = {};
        props.forEach(function (prop, i) {
          return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
        });
        plugin.init(target, vars, tween);
      };
    });

    var CSSPlugin = {
      name: "css",
      register: _initCore,
      targetTest: function targetTest(target) {
        return target.style && target.nodeType;
      },
      init: function init(target, vars, tween, index, targets) {
        var props = this._props,
            style = target.style,
            startAt = tween.vars.startAt,
            startValue,
            endValue,
            endNum,
            startNum,
            type,
            specialProp,
            p,
            startUnit,
            endUnit,
            relative,
            isTransformRelated,
            transformPropTween,
            cache,
            smooth,
            hasPriority;
        _pluginInitted || _initCore();

        for (p in vars) {
          if (p === "autoRound") {
            continue;
          }

          endValue = vars[p];

          if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
            // plugins
            continue;
          }

          type = typeof endValue;
          specialProp = _specialProps[p];

          if (type === "function") {
            endValue = endValue.call(tween, index, target, targets);
            type = typeof endValue;
          }

          if (type === "string" && ~endValue.indexOf("random(")) {
            endValue = _replaceRandom(endValue);
          }

          if (specialProp) {
            specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
          } else if (p.substr(0, 2) === "--") {
            //CSS variable
            startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
            endValue += "";
            _colorExp.lastIndex = 0;

            if (!_colorExp.test(startValue)) {
              // colors don't have units
              startUnit = getUnit(startValue);
              endUnit = getUnit(endValue);
            }

            endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
            this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
            props.push(p);
          } else if (type !== "undefined") {
            if (startAt && p in startAt) {
              // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
              startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
              _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
              getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

              (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
            } else {
              startValue = _get(target, p);
            }

            startNum = parseFloat(startValue);
            relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;
            relative && (endValue = endValue.substr(2));
            endNum = parseFloat(endValue);

            if (p in _propertyAliases) {
              if (p === "autoAlpha") {
                //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
                if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                  //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                  startNum = 0;
                }

                _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
              }

              if (p !== "scale" && p !== "transform") {
                p = _propertyAliases[p];
                ~p.indexOf(",") && (p = p.split(",")[0]);
              }
            }

            isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

            if (isTransformRelated) {
              if (!transformPropTween) {
                cache = target._gsap;
                cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

                smooth = vars.smoothOrigin !== false && cache.smooth;
                transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

                transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
              }

              if (p === "scale") {
                this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);
                props.push("scaleY", p);
                p += "X";
              } else if (p === "transformOrigin") {
                endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

                if (cache.svg) {
                  _applySVGOrigin(target, endValue, 0, smooth, 0, this);
                } else {
                  endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

                  endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

                  _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
                }

                continue;
              } else if (p === "svgOrigin") {
                _applySVGOrigin(target, endValue, 1, smooth, 0, this);

                continue;
              } else if (p in _rotationalProperties) {
                _addRotationalPropTween(this, cache, p, startNum, endValue, relative);

                continue;
              } else if (p === "smoothOrigin") {
                _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

                continue;
              } else if (p === "force3D") {
                cache[p] = endValue;
                continue;
              } else if (p === "transform") {
                _addRawTransformPTs(this, endValue, target);

                continue;
              }
            } else if (!(p in style)) {
              p = _checkPropPrefix(p) || p;
            }

            if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
              startUnit = (startValue + "").substr((startNum + "").length);
              endNum || (endNum = 0); // protect against NaN

              endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
              startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
              this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
              this._pt.u = endUnit || 0;

              if (startUnit !== endUnit && endUnit !== "%") {
                //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
                this._pt.b = startValue;
                this._pt.r = _renderCSSPropWithBeginning;
              }
            } else if (!(p in style)) {
              if (p in target) {
                //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
                this.add(target, p, startValue || target[p], endValue, index, targets);
              } else {
                _missingPlugin(p, endValue);

                continue;
              }
            } else {
              _tweenComplexCSSString.call(this, target, p, startValue, endValue);
            }

            props.push(p);
          }
        }

        hasPriority && _sortPropTweensByPriority(this);
      },
      get: _get,
      aliases: _propertyAliases,
      getSetter: function getSetter(target, property, plugin) {
        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
        var p = _propertyAliases[property];
        p && p.indexOf(",") < 0 && (property = p);
        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
      },
      core: {
        _removeProperty: _removeProperty,
        _getMatrix: _getMatrix
      }
    };
    gsap.utils.checkPrefix = _checkPropPrefix;

    (function (positionAndScale, rotation, others, aliases) {
      var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
        _transformProps[name] = 1;
      });

      _forEachName(rotation, function (name) {
        _config.units[name] = "deg";
        _rotationalProperties[name] = 1;
      });

      _propertyAliases[all[13]] = positionAndScale + "," + rotation;

      _forEachName(aliases, function (name) {
        var split = name.split(":");
        _propertyAliases[split[1]] = all[split[0]];
      });
    })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

    _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
      _config.units[name] = "px";
    });

    gsap.registerPlugin(CSSPlugin);

    var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap;
        // to protect from tree shaking
    gsapWithCSS.core.Tween;

    /* src/HelloCube.svelte generated by Svelte v3.46.4 */

    const { console: console_1 } = globals;

    // (71:1) <Scene {sti} let:scene id="scene1" props={{ background: 0xedf2f7 }}>
    function create_default_slot_1(ctx) {
    	let perspectivecamera;
    	let t0;
    	let directionallight;
    	let t1;
    	let ambientlight;
    	let t2;
    	let mesh;
    	let current;

    	perspectivecamera = new PerspectiveCamera_1({
    			props: {
    				scene: /*scene*/ ctx[7],
    				id: "cam1",
    				props: { position: [0, 0, 3], lookAt: [0, 0, 0] }
    			},
    			$$inline: true
    		});

    	directionallight = new DirectionalLight_1({
    			props: {
    				scene: /*scene*/ ctx[7],
    				props: { position: [3, 3, 3] }
    			},
    			$$inline: true
    		});

    	ambientlight = new AmbientLight_1({
    			props: {
    				scene: /*scene*/ ctx[7],
    				props: { color: 0xffffff, intensity: 1.25 }
    			},
    			$$inline: true
    		});

    	mesh = new Mesh_1({
    			props: {
    				scene: /*scene*/ ctx[7],
    				geometry: /*cubeGeometry*/ ctx[0],
    				material: /*cubeMaterial*/ ctx[1],
    				mat: {
    					roughness: 0.5,
    					metalness: 0.5,
    					color: 0xff3e00
    				},
    				pos: [0, 0, 0],
    				interact: true,
    				onClick: /*triggerOnClickAni*/ ctx[2],
    				onPointerOver: /*triggerOnOverAni*/ ctx[3],
    				onPointerLeave: /*triggerOnOutAni*/ ctx[4]
    			},
    			$$inline: true
    		});

    	mesh.$on("click", handleOnClick);
    	mesh.$on("pointermove", /*onPointerMove*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(perspectivecamera.$$.fragment);
    			t0 = space();
    			create_component(directionallight.$$.fragment);
    			t1 = space();
    			create_component(ambientlight.$$.fragment);
    			t2 = space();
    			create_component(mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(perspectivecamera, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(directionallight, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const perspectivecamera_changes = {};
    			if (dirty & /*scene*/ 128) perspectivecamera_changes.scene = /*scene*/ ctx[7];
    			perspectivecamera.$set(perspectivecamera_changes);
    			const directionallight_changes = {};
    			if (dirty & /*scene*/ 128) directionallight_changes.scene = /*scene*/ ctx[7];
    			directionallight.$set(directionallight_changes);
    			const ambientlight_changes = {};
    			if (dirty & /*scene*/ 128) ambientlight_changes.scene = /*scene*/ ctx[7];
    			ambientlight.$set(ambientlight_changes);
    			const mesh_changes = {};
    			if (dirty & /*scene*/ 128) mesh_changes.scene = /*scene*/ ctx[7];
    			mesh.$set(mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(perspectivecamera.$$.fragment, local);
    			transition_in(directionallight.$$.fragment, local);
    			transition_in(ambientlight.$$.fragment, local);
    			transition_in(mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(perspectivecamera.$$.fragment, local);
    			transition_out(directionallight.$$.fragment, local);
    			transition_out(ambientlight.$$.fragment, local);
    			transition_out(mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(perspectivecamera, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(directionallight, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(71:1) <Scene {sti} let:scene id=\\\"scene1\\\" props={{ background: 0xedf2f7 }}>",
    		ctx
    	});

    	return block;
    }

    // (69:2) <Canvas let:sti w={500} h={500} interactive>
    function create_default_slot(ctx) {
    	let scene;
    	let t;
    	let webglrenderer;
    	let current;

    	scene = new Scene_1({
    			props: {
    				sti: /*sti*/ ctx[6],
    				id: "scene1",
    				props: { background: 0xedf2f7 },
    				$$slots: {
    					default: [
    						create_default_slot_1,
    						({ scene }) => ({ 7: scene }),
    						({ scene }) => scene ? 128 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	webglrenderer = new WebGLRenderer_1({
    			props: {
    				sti: /*sti*/ ctx[6],
    				sceneId: "scene1",
    				camId: "cam1",
    				config: { antialias: true, alpha: false }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(scene.$$.fragment);
    			t = space();
    			create_component(webglrenderer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(scene, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(webglrenderer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const scene_changes = {};
    			if (dirty & /*sti*/ 64) scene_changes.sti = /*sti*/ ctx[6];

    			if (dirty & /*$$scope, scene*/ 384) {
    				scene_changes.$$scope = { dirty, ctx };
    			}

    			scene.$set(scene_changes);
    			const webglrenderer_changes = {};
    			if (dirty & /*sti*/ 64) webglrenderer_changes.sti = /*sti*/ ctx[6];
    			webglrenderer.$set(webglrenderer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(scene.$$.fragment, local);
    			transition_in(webglrenderer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(scene.$$.fragment, local);
    			transition_out(webglrenderer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(scene, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(webglrenderer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(69:2) <Canvas let:sti w={500} h={500} interactive>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let canvas;
    	let current;

    	canvas = new Canvas({
    			props: {
    				w: 500,
    				h: 500,
    				interactive: true,
    				$$slots: {
    					default: [
    						create_default_slot,
    						({ sti }) => ({ 6: sti }),
    						({ sti }) => sti ? 64 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(canvas.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(canvas, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const canvas_changes = {};

    			if (dirty & /*$$scope, sti*/ 320) {
    				canvas_changes.$$scope = { dirty, ctx };
    			}

    			canvas.$set(canvas_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(canvas.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(canvas.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(canvas, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function handleOnClick(e) {
    	console.log("Hi, I was triggered from app's scope!");
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HelloCube', slots, []);
    	let cubeGeometry = new BoxBufferGeometry(0.8, 0.8, 0.8);
    	cubeGeometry.translate(0, 0, 0);
    	cubeGeometry.rotateY(0, MathUtils.degToRad(180), 0);
    	let cubeMaterial = new MeshStandardMaterial();

    	const triggerOnClickAni = e => {
    		let obj = e.detail.target;

    		gsapWithCSS.to(obj.scale, {
    			duration: 1,
    			x: 1.5,
    			y: 1.5,
    			z: 1.5,
    			ease: "elastic.out"
    		});
    	};

    	const triggerOnOverAni = e => {
    		let obj = e.detail.target;

    		gsapWithCSS.to(obj.scale, {
    			duration: 1,
    			x: 0.8,
    			y: 1.25,
    			z: 0.8,
    			ease: "elastic.out"
    		});
    	};

    	const triggerOnOutAni = e => {
    		let obj = e.detail.target;

    		gsapWithCSS.to(obj.scale, {
    			duration: 1,
    			x: 1,
    			y: 1,
    			z: 1,
    			ease: "elastic.out"
    		});
    	};

    	function onPointerMove(e) {
    		let obj = e.detail.target;
    		let unpr = new Vector3().copy(e.detail.unprojected);
    		let unprwtl = obj.worldToLocal(unpr).add(new Vector3(0, 0, 1));
    		obj.lookAt(unprwtl);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<HelloCube> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Canvas,
    		Scene: Scene_1,
    		PerspectiveCamera: PerspectiveCamera_1,
    		Mesh: Mesh_1,
    		DirectionalLight: DirectionalLight_1,
    		MeshStandardMaterial,
    		BoxBufferGeometry,
    		WebGLRenderer: WebGLRenderer_1,
    		AmbientLight: AmbientLight_1,
    		Vector3,
    		MathUtils,
    		gsap: gsapWithCSS,
    		cubeGeometry,
    		cubeMaterial,
    		handleOnClick,
    		triggerOnClickAni,
    		triggerOnOverAni,
    		triggerOnOutAni,
    		onPointerMove
    	});

    	$$self.$inject_state = $$props => {
    		if ('cubeGeometry' in $$props) $$invalidate(0, cubeGeometry = $$props.cubeGeometry);
    		if ('cubeMaterial' in $$props) $$invalidate(1, cubeMaterial = $$props.cubeMaterial);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		cubeGeometry,
    		cubeMaterial,
    		triggerOnClickAni,
    		triggerOnOverAni,
    		triggerOnOutAni,
    		onPointerMove
    	];
    }

    class HelloCube extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HelloCube",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.46.4 */
    const file = "src/App.svelte";

    function create_fragment(ctx) {
    	let main;
    	let h1;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let p;
    	let t4;
    	let a;
    	let t6;
    	let t7;
    	let hellocube;
    	let current;
    	hellocube = new HelloCube({ $$inline: true });

    	const block = {
    		c: function create() {
    			main = element("main");
    			h1 = element("h1");
    			t0 = text("Hello ");
    			t1 = text(/*name*/ ctx[0]);
    			t2 = text("!");
    			t3 = space();
    			p = element("p");
    			t4 = text("Visit the ");
    			a = element("a");
    			a.textContent = "Svelte tutorial";
    			t6 = text(" to learn how to build Svelte apps.");
    			t7 = space();
    			create_component(hellocube.$$.fragment);
    			attr_dev(h1, "class", "svelte-1tky8bj");
    			add_location(h1, file, 5, 1, 98);
    			attr_dev(a, "href", "https://svelte.dev/tutorial");
    			add_location(a, file, 6, 14, 135);
    			add_location(p, file, 6, 1, 122);
    			attr_dev(main, "class", "svelte-1tky8bj");
    			add_location(main, file, 4, 0, 90);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, h1);
    			append_dev(h1, t0);
    			append_dev(h1, t1);
    			append_dev(h1, t2);
    			append_dev(main, t3);
    			append_dev(main, p);
    			append_dev(p, t4);
    			append_dev(p, a);
    			append_dev(p, t6);
    			insert_dev(target, t7, anchor);
    			mount_component(hellocube, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hellocube.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hellocube.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (detaching) detach_dev(t7);
    			destroy_component(hellocube, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let { name } = $$props;
    	const writable_props = ['name'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    	};

    	$$self.$capture_state = () => ({ HelloCube, name });

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<App> was created without expected prop 'name'");
    		}
    	}

    	get name() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
        target: document.body,
        props: {
            name: 'world'
        }
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
